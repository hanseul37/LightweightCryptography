
no_trivium.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003240  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08003434  08003434  00013434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800359c  0800359c  000200c8  2**0
                  CONTENTS
  4 .ARM          00000000  0800359c  0800359c  000200c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800359c  0800359c  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800359c  0800359c  0001359c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035a0  080035a0  000135a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  080035a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  200000c8  0800366c  000200c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  0800366c  00020238  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006a5c  00000000  00000000  00020141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001708  00000000  00000000  00026b9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000758  00000000  00000000  000282a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000055a  00000000  00000000  00028a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027efd  00000000  00000000  00028f5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007a49  00000000  00000000  00050e57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f89a2  00000000  00000000  000588a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002420  00000000  00000000  00151244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00153664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	f3af 8000 	nop.w
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	200000c8 	.word	0x200000c8
 8000210:	00000000 	.word	0x00000000
 8000214:	0800341c 	.word	0x0800341c

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	f3af 8000 	nop.w
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	200000cc 	.word	0x200000cc
 8000230:	0800341c 	.word	0x0800341c

08000234 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000234:	b480      	push	{r7}
 8000236:	b083      	sub	sp, #12
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800023c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000240:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000244:	f003 0301 	and.w	r3, r3, #1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d013      	beq.n	8000274 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800024c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000250:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000254:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000258:	2b00      	cmp	r3, #0
 800025a:	d00b      	beq.n	8000274 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800025c:	e000      	b.n	8000260 <ITM_SendChar+0x2c>
    {
      __NOP();
 800025e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000260:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	2b00      	cmp	r3, #0
 8000268:	d0f9      	beq.n	800025e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800026a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800026e:	687a      	ldr	r2, [r7, #4]
 8000270:	b2d2      	uxtb	r2, r2
 8000272:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000274:	687b      	ldr	r3, [r7, #4]
}
 8000276:	4618      	mov	r0, r3
 8000278:	370c      	adds	r7, #12
 800027a:	46bd      	mov	sp, r7
 800027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000280:	4770      	bx	lr
	...

08000284 <print_hex>:
#ifndef _UTIL_H
#define _UTIL_H

static void print_hex(const unsigned char* hex, int len)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b084      	sub	sp, #16
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
 800028c:	6039      	str	r1, [r7, #0]
	for (const unsigned char* p = hex; p - hex < len; p++)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	60fb      	str	r3, [r7, #12]
 8000292:	e008      	b.n	80002a6 <print_hex+0x22>
		printf("%02X ", *p);
 8000294:	68fb      	ldr	r3, [r7, #12]
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	4619      	mov	r1, r3
 800029a:	4809      	ldr	r0, [pc, #36]	; (80002c0 <print_hex+0x3c>)
 800029c:	f002 fa50 	bl	8002740 <iprintf>
	for (const unsigned char* p = hex; p - hex < len; p++)
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	3301      	adds	r3, #1
 80002a4:	60fb      	str	r3, [r7, #12]
 80002a6:	68fa      	ldr	r2, [r7, #12]
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	1ad3      	subs	r3, r2, r3
 80002ac:	683a      	ldr	r2, [r7, #0]
 80002ae:	429a      	cmp	r2, r3
 80002b0:	dcf0      	bgt.n	8000294 <print_hex+0x10>
	printf("\n");
 80002b2:	200a      	movs	r0, #10
 80002b4:	f002 fa56 	bl	8002764 <putchar>
}
 80002b8:	bf00      	nop
 80002ba:	3710      	adds	r7, #16
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}
 80002c0:	08003434 	.word	0x08003434

080002c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002c4:	b590      	push	{r4, r7, lr}
 80002c6:	b09b      	sub	sp, #108	; 0x6c
 80002c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80002ca:	4b6a      	ldr	r3, [pc, #424]	; (8000474 <main+0x1b0>)
 80002cc:	68db      	ldr	r3, [r3, #12]
 80002ce:	4a69      	ldr	r2, [pc, #420]	; (8000474 <main+0x1b0>)
 80002d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002d4:	60d3      	str	r3, [r2, #12]
	  DWT->CYCCNT = 0;
 80002d6:	4b68      	ldr	r3, [pc, #416]	; (8000478 <main+0x1b4>)
 80002d8:	2200      	movs	r2, #0
 80002da:	605a      	str	r2, [r3, #4]
	  DWT->CTRL  |= 1;
 80002dc:	4b66      	ldr	r3, [pc, #408]	; (8000478 <main+0x1b4>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4a65      	ldr	r2, [pc, #404]	; (8000478 <main+0x1b4>)
 80002e2:	f043 0301 	orr.w	r3, r3, #1
 80002e6:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e8:	f000 fd8b 	bl	8000e02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ec:	f000 f8e2 	bl	80004b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002f0:	f000 f926 	bl	8000540 <MX_GPIO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 80002f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002f8:	4860      	ldr	r0, [pc, #384]	; (800047c <main+0x1b8>)
 80002fa:	f001 f875 	bl	80013e8 <HAL_GPIO_TogglePin>

		print_hex(plain, STRING_LENGTH);
 80002fe:	2140      	movs	r1, #64	; 0x40
 8000300:	485f      	ldr	r0, [pc, #380]	; (8000480 <main+0x1bc>)
 8000302:	f7ff ffbf 	bl	8000284 <print_hex>

		uint32_t key_cycle_count = DWT->CYCCNT;
 8000306:	4b5c      	ldr	r3, [pc, #368]	; (8000478 <main+0x1b4>)
 8000308:	685b      	ldr	r3, [r3, #4]
 800030a:	663b      	str	r3, [r7, #96]	; 0x60

		uint8_t i;
		uint8_t keystream[STRING_LENGTH] = {0};
 800030c:	2300      	movs	r3, #0
 800030e:	603b      	str	r3, [r7, #0]
 8000310:	1d3b      	adds	r3, r7, #4
 8000312:	223c      	movs	r2, #60	; 0x3c
 8000314:	2100      	movs	r1, #0
 8000316:	4618      	mov	r0, r3
 8000318:	f002 fa88 	bl	800282c <memset>

		//// Initialization ////
		trivium_ctx* ctx = trivium_init(key, iv);
 800031c:	4959      	ldr	r1, [pc, #356]	; (8000484 <main+0x1c0>)
 800031e:	485a      	ldr	r0, [pc, #360]	; (8000488 <main+0x1c4>)
 8000320:	f000 fcc4 	bl	8000cac <trivium_init>
 8000324:	65f8      	str	r0, [r7, #92]	; 0x5c

		//// Stream generation ////
		for (i = 0; i < STRING_LENGTH; i++)
 8000326:	2300      	movs	r3, #0
 8000328:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800032c:	e010      	b.n	8000350 <main+0x8c>
			keystream[i] = trivium_gen_keystream(ctx);
 800032e:	f897 4067 	ldrb.w	r4, [r7, #103]	; 0x67
 8000332:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000334:	f000 fd16 	bl	8000d64 <trivium_gen_keystream>
 8000338:	4603      	mov	r3, r0
 800033a:	461a      	mov	r2, r3
 800033c:	f104 0368 	add.w	r3, r4, #104	; 0x68
 8000340:	443b      	add	r3, r7
 8000342:	f803 2c68 	strb.w	r2, [r3, #-104]
		for (i = 0; i < STRING_LENGTH; i++)
 8000346:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800034a:	3301      	adds	r3, #1
 800034c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000350:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000354:	2b3f      	cmp	r3, #63	; 0x3f
 8000356:	d9ea      	bls.n	800032e <main+0x6a>

		uint32_t enc_start_cycle_count = DWT->CYCCNT;
 8000358:	4b47      	ldr	r3, [pc, #284]	; (8000478 <main+0x1b4>)
 800035a:	685b      	ldr	r3, [r3, #4]
 800035c:	65bb      	str	r3, [r7, #88]	; 0x58
		// encryption
		for (i = 0; i < STRING_LENGTH; i++)
 800035e:	2300      	movs	r3, #0
 8000360:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000364:	e014      	b.n	8000390 <main+0xcc>
			plain[i] ^= keystream[i];
 8000366:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800036a:	4a45      	ldr	r2, [pc, #276]	; (8000480 <main+0x1bc>)
 800036c:	5cd1      	ldrb	r1, [r2, r3]
 800036e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000372:	3368      	adds	r3, #104	; 0x68
 8000374:	443b      	add	r3, r7
 8000376:	f813 2c68 	ldrb.w	r2, [r3, #-104]
 800037a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800037e:	404a      	eors	r2, r1
 8000380:	b2d1      	uxtb	r1, r2
 8000382:	4a3f      	ldr	r2, [pc, #252]	; (8000480 <main+0x1bc>)
 8000384:	54d1      	strb	r1, [r2, r3]
		for (i = 0; i < STRING_LENGTH; i++)
 8000386:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800038a:	3301      	adds	r3, #1
 800038c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000390:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000394:	2b3f      	cmp	r3, #63	; 0x3f
 8000396:	d9e6      	bls.n	8000366 <main+0xa2>
		uint32_t enc_end_cycle_count = DWT->CYCCNT;
 8000398:	4b37      	ldr	r3, [pc, #220]	; (8000478 <main+0x1b4>)
 800039a:	685b      	ldr	r3, [r3, #4]
 800039c:	657b      	str	r3, [r7, #84]	; 0x54

		print_hex(plain, STRING_LENGTH);
 800039e:	2140      	movs	r1, #64	; 0x40
 80003a0:	4837      	ldr	r0, [pc, #220]	; (8000480 <main+0x1bc>)
 80003a2:	f7ff ff6f 	bl	8000284 <print_hex>

		uint32_t dec_start_cycle_count = DWT->CYCCNT;
 80003a6:	4b34      	ldr	r3, [pc, #208]	; (8000478 <main+0x1b4>)
 80003a8:	685b      	ldr	r3, [r3, #4]
 80003aa:	653b      	str	r3, [r7, #80]	; 0x50
		// decryption
		for (i = 0; i < STRING_LENGTH; i++)
 80003ac:	2300      	movs	r3, #0
 80003ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80003b2:	e014      	b.n	80003de <main+0x11a>
			plain[i] ^= keystream[i];
 80003b4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80003b8:	4a31      	ldr	r2, [pc, #196]	; (8000480 <main+0x1bc>)
 80003ba:	5cd1      	ldrb	r1, [r2, r3]
 80003bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80003c0:	3368      	adds	r3, #104	; 0x68
 80003c2:	443b      	add	r3, r7
 80003c4:	f813 2c68 	ldrb.w	r2, [r3, #-104]
 80003c8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80003cc:	404a      	eors	r2, r1
 80003ce:	b2d1      	uxtb	r1, r2
 80003d0:	4a2b      	ldr	r2, [pc, #172]	; (8000480 <main+0x1bc>)
 80003d2:	54d1      	strb	r1, [r2, r3]
		for (i = 0; i < STRING_LENGTH; i++)
 80003d4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80003d8:	3301      	adds	r3, #1
 80003da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80003de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80003e2:	2b3f      	cmp	r3, #63	; 0x3f
 80003e4:	d9e6      	bls.n	80003b4 <main+0xf0>
		uint32_t dec_end_cycle_count = DWT->CYCCNT;
 80003e6:	4b24      	ldr	r3, [pc, #144]	; (8000478 <main+0x1b4>)
 80003e8:	685b      	ldr	r3, [r3, #4]
 80003ea:	64fb      	str	r3, [r7, #76]	; 0x4c

		print_hex(plain, STRING_LENGTH);
 80003ec:	2140      	movs	r1, #64	; 0x40
 80003ee:	4824      	ldr	r0, [pc, #144]	; (8000480 <main+0x1bc>)
 80003f0:	f7ff ff48 	bl	8000284 <print_hex>

		uint32_t key_cycles = enc_start_cycle_count - key_cycle_count;
 80003f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80003f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80003f8:	1ad3      	subs	r3, r2, r3
 80003fa:	64bb      	str	r3, [r7, #72]	; 0x48
	    uint32_t enc_total_cycles = enc_end_cycle_count - enc_start_cycle_count;
 80003fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80003fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000400:	1ad3      	subs	r3, r2, r3
 8000402:	647b      	str	r3, [r7, #68]	; 0x44
	    uint32_t dec_total_cycles = dec_end_cycle_count - dec_start_cycle_count;
 8000404:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000406:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000408:	1ad3      	subs	r3, r2, r3
 800040a:	643b      	str	r3, [r7, #64]	; 0x40

	    printf("Key cycles: %u\n", key_cycles);
 800040c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800040e:	481f      	ldr	r0, [pc, #124]	; (800048c <main+0x1c8>)
 8000410:	f002 f996 	bl	8002740 <iprintf>
	    printf("\nEnc start cycles: %u\n", enc_start_cycle_count);
 8000414:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000416:	481e      	ldr	r0, [pc, #120]	; (8000490 <main+0x1cc>)
 8000418:	f002 f992 	bl	8002740 <iprintf>
	    printf("Enc end cycles: %u\n", enc_end_cycle_count);
 800041c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800041e:	481d      	ldr	r0, [pc, #116]	; (8000494 <main+0x1d0>)
 8000420:	f002 f98e 	bl	8002740 <iprintf>
	    printf("Enc total cycles: %u\n", enc_total_cycles);
 8000424:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000426:	481c      	ldr	r0, [pc, #112]	; (8000498 <main+0x1d4>)
 8000428:	f002 f98a 	bl	8002740 <iprintf>
	    printf("\nDec start cycles: %u\n", dec_start_cycle_count);
 800042c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800042e:	481b      	ldr	r0, [pc, #108]	; (800049c <main+0x1d8>)
 8000430:	f002 f986 	bl	8002740 <iprintf>
	    printf("Dec end cycles: %u\n", dec_end_cycle_count);
 8000434:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000436:	481a      	ldr	r0, [pc, #104]	; (80004a0 <main+0x1dc>)
 8000438:	f002 f982 	bl	8002740 <iprintf>
	    printf("Dec total cycles: %u\n", dec_total_cycles);
 800043c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800043e:	4819      	ldr	r0, [pc, #100]	; (80004a4 <main+0x1e0>)
 8000440:	f002 f97e 	bl	8002740 <iprintf>
	    printf("\nKey + Enc: %u\n", key_cycles + enc_total_cycles);
 8000444:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000446:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000448:	4413      	add	r3, r2
 800044a:	4619      	mov	r1, r3
 800044c:	4816      	ldr	r0, [pc, #88]	; (80004a8 <main+0x1e4>)
 800044e:	f002 f977 	bl	8002740 <iprintf>
	    printf("Key + Dec: %u\n", key_cycles + dec_total_cycles);
 8000452:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000454:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000456:	4413      	add	r3, r2
 8000458:	4619      	mov	r1, r3
 800045a:	4814      	ldr	r0, [pc, #80]	; (80004ac <main+0x1e8>)
 800045c:	f002 f970 	bl	8002740 <iprintf>

	    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000460:	2180      	movs	r1, #128	; 0x80
 8000462:	4813      	ldr	r0, [pc, #76]	; (80004b0 <main+0x1ec>)
 8000464:	f000 ffc0 	bl	80013e8 <HAL_GPIO_TogglePin>

	    break;
 8000468:	bf00      	nop
 800046a:	2300      	movs	r3, #0
  }
  /* USER CODE END 3 */
}
 800046c:	4618      	mov	r0, r3
 800046e:	376c      	adds	r7, #108	; 0x6c
 8000470:	46bd      	mov	sp, r7
 8000472:	bd90      	pop	{r4, r7, pc}
 8000474:	e000edf0 	.word	0xe000edf0
 8000478:	e0001000 	.word	0xe0001000
 800047c:	42020000 	.word	0x42020000
 8000480:	20000000 	.word	0x20000000
 8000484:	20000050 	.word	0x20000050
 8000488:	20000040 	.word	0x20000040
 800048c:	0800343c 	.word	0x0800343c
 8000490:	0800344c 	.word	0x0800344c
 8000494:	08003464 	.word	0x08003464
 8000498:	08003478 	.word	0x08003478
 800049c:	08003490 	.word	0x08003490
 80004a0:	080034a8 	.word	0x080034a8
 80004a4:	080034bc 	.word	0x080034bc
 80004a8:	080034d4 	.word	0x080034d4
 80004ac:	080034e4 	.word	0x080034e4
 80004b0:	42020400 	.word	0x42020400

080004b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b098      	sub	sp, #96	; 0x60
 80004b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ba:	f107 0318 	add.w	r3, r7, #24
 80004be:	2248      	movs	r2, #72	; 0x48
 80004c0:	2100      	movs	r1, #0
 80004c2:	4618      	mov	r0, r3
 80004c4:	f002 f9b2 	bl	800282c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004c8:	1d3b      	adds	r3, r7, #4
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	605a      	str	r2, [r3, #4]
 80004d0:	609a      	str	r2, [r3, #8]
 80004d2:	60da      	str	r2, [r3, #12]
 80004d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 80004d6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80004da:	f000 ffad 	bl	8001438 <HAL_PWREx_ControlVoltageScaling>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d001      	beq.n	80004e8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80004e4:	f000 f8af 	bl	8000646 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80004e8:	2310      	movs	r3, #16
 80004ea:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80004ec:	2301      	movs	r3, #1
 80004ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80004f0:	2300      	movs	r3, #0
 80004f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80004f4:	2360      	movs	r3, #96	; 0x60
 80004f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004f8:	2300      	movs	r3, #0
 80004fa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004fc:	f107 0318 	add.w	r3, r7, #24
 8000500:	4618      	mov	r0, r3
 8000502:	f001 f819 	bl	8001538 <HAL_RCC_OscConfig>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d001      	beq.n	8000510 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800050c:	f000 f89b 	bl	8000646 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000510:	230f      	movs	r3, #15
 8000512:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000514:	2300      	movs	r3, #0
 8000516:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000518:	2300      	movs	r3, #0
 800051a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800051c:	2300      	movs	r3, #0
 800051e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000520:	2300      	movs	r3, #0
 8000522:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000524:	1d3b      	adds	r3, r7, #4
 8000526:	2100      	movs	r1, #0
 8000528:	4618      	mov	r0, r3
 800052a:	f001 fcdb 	bl	8001ee4 <HAL_RCC_ClockConfig>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000534:	f000 f887 	bl	8000646 <Error_Handler>
  }
}
 8000538:	bf00      	nop
 800053a:	3760      	adds	r7, #96	; 0x60
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}

08000540 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b088      	sub	sp, #32
 8000544:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000546:	f107 030c 	add.w	r3, r7, #12
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]
 800054e:	605a      	str	r2, [r3, #4]
 8000550:	609a      	str	r2, [r3, #8]
 8000552:	60da      	str	r2, [r3, #12]
 8000554:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000556:	4b31      	ldr	r3, [pc, #196]	; (800061c <MX_GPIO_Init+0xdc>)
 8000558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055a:	4a30      	ldr	r2, [pc, #192]	; (800061c <MX_GPIO_Init+0xdc>)
 800055c:	f043 0304 	orr.w	r3, r3, #4
 8000560:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000562:	4b2e      	ldr	r3, [pc, #184]	; (800061c <MX_GPIO_Init+0xdc>)
 8000564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000566:	f003 0304 	and.w	r3, r3, #4
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800056e:	4b2b      	ldr	r3, [pc, #172]	; (800061c <MX_GPIO_Init+0xdc>)
 8000570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000572:	4a2a      	ldr	r2, [pc, #168]	; (800061c <MX_GPIO_Init+0xdc>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	64d3      	str	r3, [r2, #76]	; 0x4c
 800057a:	4b28      	ldr	r3, [pc, #160]	; (800061c <MX_GPIO_Init+0xdc>)
 800057c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057e:	f003 0301 	and.w	r3, r3, #1
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000586:	4b25      	ldr	r3, [pc, #148]	; (800061c <MX_GPIO_Init+0xdc>)
 8000588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058a:	4a24      	ldr	r2, [pc, #144]	; (800061c <MX_GPIO_Init+0xdc>)
 800058c:	f043 0302 	orr.w	r3, r3, #2
 8000590:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000592:	4b22      	ldr	r3, [pc, #136]	; (800061c <MX_GPIO_Init+0xdc>)
 8000594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000596:	f003 0302 	and.w	r3, r3, #2
 800059a:	603b      	str	r3, [r7, #0]
 800059c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800059e:	2200      	movs	r2, #0
 80005a0:	2180      	movs	r1, #128	; 0x80
 80005a2:	481f      	ldr	r0, [pc, #124]	; (8000620 <MX_GPIO_Init+0xe0>)
 80005a4:	f000 ff08 	bl	80013b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80005a8:	2200      	movs	r2, #0
 80005aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ae:	481d      	ldr	r0, [pc, #116]	; (8000624 <MX_GPIO_Init+0xe4>)
 80005b0:	f000 ff02 	bl	80013b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80005b4:	2200      	movs	r2, #0
 80005b6:	2180      	movs	r1, #128	; 0x80
 80005b8:	481b      	ldr	r0, [pc, #108]	; (8000628 <MX_GPIO_Init+0xe8>)
 80005ba:	f000 fefd 	bl	80013b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80005be:	2380      	movs	r3, #128	; 0x80
 80005c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c2:	2301      	movs	r3, #1
 80005c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c6:	2300      	movs	r3, #0
 80005c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ca:	2300      	movs	r3, #0
 80005cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005ce:	f107 030c 	add.w	r3, r7, #12
 80005d2:	4619      	mov	r1, r3
 80005d4:	4812      	ldr	r0, [pc, #72]	; (8000620 <MX_GPIO_Init+0xe0>)
 80005d6:	f000 fd6f 	bl	80010b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e0:	2301      	movs	r3, #1
 80005e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e4:	2300      	movs	r3, #0
 80005e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e8:	2300      	movs	r3, #0
 80005ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ec:	f107 030c 	add.w	r3, r7, #12
 80005f0:	4619      	mov	r1, r3
 80005f2:	480c      	ldr	r0, [pc, #48]	; (8000624 <MX_GPIO_Init+0xe4>)
 80005f4:	f000 fd60 	bl	80010b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80005f8:	2380      	movs	r3, #128	; 0x80
 80005fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fc:	2301      	movs	r3, #1
 80005fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000600:	2300      	movs	r3, #0
 8000602:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000604:	2300      	movs	r3, #0
 8000606:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	4619      	mov	r1, r3
 800060e:	4806      	ldr	r0, [pc, #24]	; (8000628 <MX_GPIO_Init+0xe8>)
 8000610:	f000 fd52 	bl	80010b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000614:	bf00      	nop
 8000616:	3720      	adds	r7, #32
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40021000 	.word	0x40021000
 8000620:	42020800 	.word	0x42020800
 8000624:	42020000 	.word	0x42020000
 8000628:	42020400 	.word	0x42020400

0800062c <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
	return ITM_SendChar(ch);
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4618      	mov	r0, r3
 8000638:	f7ff fdfc 	bl	8000234 <ITM_SendChar>
 800063c:	4603      	mov	r3, r0
}
 800063e:	4618      	mov	r0, r3
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}

08000646 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000646:	b480      	push	{r7}
 8000648:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800064a:	b672      	cpsid	i
}
 800064c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800064e:	e7fe      	b.n	800064e <Error_Handler+0x8>

08000650 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000656:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <HAL_MspInit+0x44>)
 8000658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800065a:	4a0e      	ldr	r2, [pc, #56]	; (8000694 <HAL_MspInit+0x44>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	6613      	str	r3, [r2, #96]	; 0x60
 8000662:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <HAL_MspInit+0x44>)
 8000664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <HAL_MspInit+0x44>)
 8000670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000672:	4a08      	ldr	r2, [pc, #32]	; (8000694 <HAL_MspInit+0x44>)
 8000674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000678:	6593      	str	r3, [r2, #88]	; 0x58
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <HAL_MspInit+0x44>)
 800067c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800067e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000682:	603b      	str	r3, [r7, #0]
 8000684:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000686:	bf00      	nop
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	40021000 	.word	0x40021000

08000698 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800069c:	e7fe      	b.n	800069c <NMI_Handler+0x4>

0800069e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800069e:	b480      	push	{r7}
 80006a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006a2:	e7fe      	b.n	80006a2 <HardFault_Handler+0x4>

080006a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006a8:	e7fe      	b.n	80006a8 <MemManage_Handler+0x4>

080006aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006aa:	b480      	push	{r7}
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ae:	e7fe      	b.n	80006ae <BusFault_Handler+0x4>

080006b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006b4:	e7fe      	b.n	80006b4 <UsageFault_Handler+0x4>

080006b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006b6:	b480      	push	{r7}
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr

080006c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr

080006d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006d2:	b480      	push	{r7}
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006d6:	bf00      	nop
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr

080006e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006e4:	f000 fbe4 	bl	8000eb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}

080006ec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
 80006fc:	e00a      	b.n	8000714 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80006fe:	f3af 8000 	nop.w
 8000702:	4601      	mov	r1, r0
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	1c5a      	adds	r2, r3, #1
 8000708:	60ba      	str	r2, [r7, #8]
 800070a:	b2ca      	uxtb	r2, r1
 800070c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800070e:	697b      	ldr	r3, [r7, #20]
 8000710:	3301      	adds	r3, #1
 8000712:	617b      	str	r3, [r7, #20]
 8000714:	697a      	ldr	r2, [r7, #20]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	429a      	cmp	r2, r3
 800071a:	dbf0      	blt.n	80006fe <_read+0x12>
  }

  return len;
 800071c:	687b      	ldr	r3, [r7, #4]
}
 800071e:	4618      	mov	r0, r3
 8000720:	3718      	adds	r7, #24
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}

08000726 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000726:	b580      	push	{r7, lr}
 8000728:	b086      	sub	sp, #24
 800072a:	af00      	add	r7, sp, #0
 800072c:	60f8      	str	r0, [r7, #12]
 800072e:	60b9      	str	r1, [r7, #8]
 8000730:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000732:	2300      	movs	r3, #0
 8000734:	617b      	str	r3, [r7, #20]
 8000736:	e009      	b.n	800074c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	1c5a      	adds	r2, r3, #1
 800073c:	60ba      	str	r2, [r7, #8]
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff ff73 	bl	800062c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000746:	697b      	ldr	r3, [r7, #20]
 8000748:	3301      	adds	r3, #1
 800074a:	617b      	str	r3, [r7, #20]
 800074c:	697a      	ldr	r2, [r7, #20]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	429a      	cmp	r2, r3
 8000752:	dbf1      	blt.n	8000738 <_write+0x12>
  }
  return len;
 8000754:	687b      	ldr	r3, [r7, #4]
}
 8000756:	4618      	mov	r0, r3
 8000758:	3718      	adds	r7, #24
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}

0800075e <_close>:

int _close(int file)
{
 800075e:	b480      	push	{r7}
 8000760:	b083      	sub	sp, #12
 8000762:	af00      	add	r7, sp, #0
 8000764:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000766:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800076a:	4618      	mov	r0, r3
 800076c:	370c      	adds	r7, #12
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr

08000776 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000776:	b480      	push	{r7}
 8000778:	b083      	sub	sp, #12
 800077a:	af00      	add	r7, sp, #0
 800077c:	6078      	str	r0, [r7, #4]
 800077e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000786:	605a      	str	r2, [r3, #4]
  return 0;
 8000788:	2300      	movs	r3, #0
}
 800078a:	4618      	mov	r0, r3
 800078c:	370c      	adds	r7, #12
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr

08000796 <_isatty>:

int _isatty(int file)
{
 8000796:	b480      	push	{r7}
 8000798:	b083      	sub	sp, #12
 800079a:	af00      	add	r7, sp, #0
 800079c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800079e:	2301      	movs	r3, #1
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr

080007ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b085      	sub	sp, #20
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	60f8      	str	r0, [r7, #12]
 80007b4:	60b9      	str	r1, [r7, #8]
 80007b6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80007b8:	2300      	movs	r3, #0
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3714      	adds	r7, #20
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
	...

080007c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b086      	sub	sp, #24
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007d0:	4a14      	ldr	r2, [pc, #80]	; (8000824 <_sbrk+0x5c>)
 80007d2:	4b15      	ldr	r3, [pc, #84]	; (8000828 <_sbrk+0x60>)
 80007d4:	1ad3      	subs	r3, r2, r3
 80007d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007dc:	4b13      	ldr	r3, [pc, #76]	; (800082c <_sbrk+0x64>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d102      	bne.n	80007ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007e4:	4b11      	ldr	r3, [pc, #68]	; (800082c <_sbrk+0x64>)
 80007e6:	4a12      	ldr	r2, [pc, #72]	; (8000830 <_sbrk+0x68>)
 80007e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007ea:	4b10      	ldr	r3, [pc, #64]	; (800082c <_sbrk+0x64>)
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4413      	add	r3, r2
 80007f2:	693a      	ldr	r2, [r7, #16]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	d207      	bcs.n	8000808 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007f8:	f002 f830 	bl	800285c <__errno>
 80007fc:	4603      	mov	r3, r0
 80007fe:	220c      	movs	r2, #12
 8000800:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000802:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000806:	e009      	b.n	800081c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000808:	4b08      	ldr	r3, [pc, #32]	; (800082c <_sbrk+0x64>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800080e:	4b07      	ldr	r3, [pc, #28]	; (800082c <_sbrk+0x64>)
 8000810:	681a      	ldr	r2, [r3, #0]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4413      	add	r3, r2
 8000816:	4a05      	ldr	r2, [pc, #20]	; (800082c <_sbrk+0x64>)
 8000818:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800081a:	68fb      	ldr	r3, [r7, #12]
}
 800081c:	4618      	mov	r0, r3
 800081e:	3718      	adds	r7, #24
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20030000 	.word	0x20030000
 8000828:	00000400 	.word	0x00000400
 800082c:	200000e4 	.word	0x200000e4
 8000830:	20000238 	.word	0x20000238

08000834 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <SystemInit+0x20>)
 800083a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800083e:	4a05      	ldr	r2, [pc, #20]	; (8000854 <SystemInit+0x20>)
 8000840:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000844:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	e000ed00 	.word	0xe000ed00

08000858 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000858:	b480      	push	{r7}
 800085a:	b087      	sub	sp, #28
 800085c:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 800085e:	4b4f      	ldr	r3, [pc, #316]	; (800099c <SystemCoreClockUpdate+0x144>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	f003 0308 	and.w	r3, r3, #8
 8000866:	2b00      	cmp	r3, #0
 8000868:	d107      	bne.n	800087a <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 800086a:	4b4c      	ldr	r3, [pc, #304]	; (800099c <SystemCoreClockUpdate+0x144>)
 800086c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000870:	0a1b      	lsrs	r3, r3, #8
 8000872:	f003 030f 	and.w	r3, r3, #15
 8000876:	617b      	str	r3, [r7, #20]
 8000878:	e005      	b.n	8000886 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 800087a:	4b48      	ldr	r3, [pc, #288]	; (800099c <SystemCoreClockUpdate+0x144>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	091b      	lsrs	r3, r3, #4
 8000880:	f003 030f 	and.w	r3, r3, #15
 8000884:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8000886:	4a46      	ldr	r2, [pc, #280]	; (80009a0 <SystemCoreClockUpdate+0x148>)
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800088e:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000890:	4b42      	ldr	r3, [pc, #264]	; (800099c <SystemCoreClockUpdate+0x144>)
 8000892:	689b      	ldr	r3, [r3, #8]
 8000894:	f003 030c 	and.w	r3, r3, #12
 8000898:	2b0c      	cmp	r3, #12
 800089a:	d866      	bhi.n	800096a <SystemCoreClockUpdate+0x112>
 800089c:	a201      	add	r2, pc, #4	; (adr r2, 80008a4 <SystemCoreClockUpdate+0x4c>)
 800089e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008a2:	bf00      	nop
 80008a4:	080008d9 	.word	0x080008d9
 80008a8:	0800096b 	.word	0x0800096b
 80008ac:	0800096b 	.word	0x0800096b
 80008b0:	0800096b 	.word	0x0800096b
 80008b4:	080008e1 	.word	0x080008e1
 80008b8:	0800096b 	.word	0x0800096b
 80008bc:	0800096b 	.word	0x0800096b
 80008c0:	0800096b 	.word	0x0800096b
 80008c4:	080008e9 	.word	0x080008e9
 80008c8:	0800096b 	.word	0x0800096b
 80008cc:	0800096b 	.word	0x0800096b
 80008d0:	0800096b 	.word	0x0800096b
 80008d4:	080008f1 	.word	0x080008f1
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80008d8:	4a32      	ldr	r2, [pc, #200]	; (80009a4 <SystemCoreClockUpdate+0x14c>)
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	6013      	str	r3, [r2, #0]
      break;
 80008de:	e048      	b.n	8000972 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80008e0:	4b30      	ldr	r3, [pc, #192]	; (80009a4 <SystemCoreClockUpdate+0x14c>)
 80008e2:	4a31      	ldr	r2, [pc, #196]	; (80009a8 <SystemCoreClockUpdate+0x150>)
 80008e4:	601a      	str	r2, [r3, #0]
      break;
 80008e6:	e044      	b.n	8000972 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80008e8:	4b2e      	ldr	r3, [pc, #184]	; (80009a4 <SystemCoreClockUpdate+0x14c>)
 80008ea:	4a2f      	ldr	r2, [pc, #188]	; (80009a8 <SystemCoreClockUpdate+0x150>)
 80008ec:	601a      	str	r2, [r3, #0]
      break;
 80008ee:	e040      	b.n	8000972 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80008f0:	4b2a      	ldr	r3, [pc, #168]	; (800099c <SystemCoreClockUpdate+0x144>)
 80008f2:	68db      	ldr	r3, [r3, #12]
 80008f4:	f003 0303 	and.w	r3, r3, #3
 80008f8:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 80008fa:	4b28      	ldr	r3, [pc, #160]	; (800099c <SystemCoreClockUpdate+0x144>)
 80008fc:	68db      	ldr	r3, [r3, #12]
 80008fe:	091b      	lsrs	r3, r3, #4
 8000900:	f003 030f 	and.w	r3, r3, #15
 8000904:	3301      	adds	r3, #1
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	2b02      	cmp	r3, #2
 800090c:	d003      	beq.n	8000916 <SystemCoreClockUpdate+0xbe>
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	2b03      	cmp	r3, #3
 8000912:	d006      	beq.n	8000922 <SystemCoreClockUpdate+0xca>
 8000914:	e00b      	b.n	800092e <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8000916:	4a24      	ldr	r2, [pc, #144]	; (80009a8 <SystemCoreClockUpdate+0x150>)
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	fbb2 f3f3 	udiv	r3, r2, r3
 800091e:	613b      	str	r3, [r7, #16]
          break;
 8000920:	e00b      	b.n	800093a <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8000922:	4a21      	ldr	r2, [pc, #132]	; (80009a8 <SystemCoreClockUpdate+0x150>)
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	fbb2 f3f3 	udiv	r3, r2, r3
 800092a:	613b      	str	r3, [r7, #16]
          break;
 800092c:	e005      	b.n	800093a <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 800092e:	697a      	ldr	r2, [r7, #20]
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	fbb2 f3f3 	udiv	r3, r2, r3
 8000936:	613b      	str	r3, [r7, #16]
          break;
 8000938:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 800093a:	4b18      	ldr	r3, [pc, #96]	; (800099c <SystemCoreClockUpdate+0x144>)
 800093c:	68db      	ldr	r3, [r3, #12]
 800093e:	0a1b      	lsrs	r3, r3, #8
 8000940:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000944:	693b      	ldr	r3, [r7, #16]
 8000946:	fb02 f303 	mul.w	r3, r2, r3
 800094a:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 800094c:	4b13      	ldr	r3, [pc, #76]	; (800099c <SystemCoreClockUpdate+0x144>)
 800094e:	68db      	ldr	r3, [r3, #12]
 8000950:	0e5b      	lsrs	r3, r3, #25
 8000952:	f003 0303 	and.w	r3, r3, #3
 8000956:	3301      	adds	r3, #1
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 800095c:	693a      	ldr	r2, [r7, #16]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	fbb2 f3f3 	udiv	r3, r2, r3
 8000964:	4a0f      	ldr	r2, [pc, #60]	; (80009a4 <SystemCoreClockUpdate+0x14c>)
 8000966:	6013      	str	r3, [r2, #0]
      break;
 8000968:	e003      	b.n	8000972 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 800096a:	4a0e      	ldr	r2, [pc, #56]	; (80009a4 <SystemCoreClockUpdate+0x14c>)
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	6013      	str	r3, [r2, #0]
      break;
 8000970:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8000972:	4b0a      	ldr	r3, [pc, #40]	; (800099c <SystemCoreClockUpdate+0x144>)
 8000974:	689b      	ldr	r3, [r3, #8]
 8000976:	091b      	lsrs	r3, r3, #4
 8000978:	f003 030f 	and.w	r3, r3, #15
 800097c:	4a0b      	ldr	r2, [pc, #44]	; (80009ac <SystemCoreClockUpdate+0x154>)
 800097e:	5cd3      	ldrb	r3, [r2, r3]
 8000980:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000982:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <SystemCoreClockUpdate+0x14c>)
 8000984:	681a      	ldr	r2, [r3, #0]
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	fa22 f303 	lsr.w	r3, r2, r3
 800098c:	4a05      	ldr	r2, [pc, #20]	; (80009a4 <SystemCoreClockUpdate+0x14c>)
 800098e:	6013      	str	r3, [r2, #0]
}
 8000990:	bf00      	nop
 8000992:	371c      	adds	r7, #28
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr
 800099c:	40021000 	.word	0x40021000
 80009a0:	08003528 	.word	0x08003528
 80009a4:	20000060 	.word	0x20000060
 80009a8:	00f42400 	.word	0x00f42400
 80009ac:	08003518 	.word	0x08003518

080009b0 <trivium_nbit>:
#include "trivium.h"

static uint8_t trivium_nbit(uint8_t *arr, uint16_t n)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	460b      	mov	r3, r1
 80009ba:	807b      	strh	r3, [r7, #2]
    uint8_t nbyte = (n - 1) / 8;
 80009bc:	887b      	ldrh	r3, [r7, #2]
 80009be:	3b01      	subs	r3, #1
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	da00      	bge.n	80009c6 <trivium_nbit+0x16>
 80009c4:	3307      	adds	r3, #7
 80009c6:	10db      	asrs	r3, r3, #3
 80009c8:	73fb      	strb	r3, [r7, #15]
    uint8_t trivium_nbit = ((n - 1) % 8) + 1;
 80009ca:	887b      	ldrh	r3, [r7, #2]
 80009cc:	3b01      	subs	r3, #1
 80009ce:	425a      	negs	r2, r3
 80009d0:	f003 0307 	and.w	r3, r3, #7
 80009d4:	f002 0207 	and.w	r2, r2, #7
 80009d8:	bf58      	it	pl
 80009da:	4253      	negpl	r3, r2
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	3301      	adds	r3, #1
 80009e0:	73bb      	strb	r3, [r7, #14]
    return (arr[nbyte] & (1 << (8 - trivium_nbit))) >> (8 - trivium_nbit);
 80009e2:	7bfb      	ldrb	r3, [r7, #15]
 80009e4:	687a      	ldr	r2, [r7, #4]
 80009e6:	4413      	add	r3, r2
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	4619      	mov	r1, r3
 80009ec:	7bbb      	ldrb	r3, [r7, #14]
 80009ee:	f1c3 0308 	rsb	r3, r3, #8
 80009f2:	2201      	movs	r2, #1
 80009f4:	fa02 f303 	lsl.w	r3, r2, r3
 80009f8:	ea01 0203 	and.w	r2, r1, r3
 80009fc:	7bbb      	ldrb	r3, [r7, #14]
 80009fe:	f1c3 0308 	rsb	r3, r3, #8
 8000a02:	fa42 f303 	asr.w	r3, r2, r3
 8000a06:	b2db      	uxtb	r3, r3
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3714      	adds	r7, #20
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <trivium_change_bit>:

static void trivium_change_bit(uint8_t *arr, uint16_t n, uint8_t value)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b085      	sub	sp, #20
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	460b      	mov	r3, r1
 8000a1e:	807b      	strh	r3, [r7, #2]
 8000a20:	4613      	mov	r3, r2
 8000a22:	707b      	strb	r3, [r7, #1]
    uint8_t nbyte = (n - 1) / 8;
 8000a24:	887b      	ldrh	r3, [r7, #2]
 8000a26:	3b01      	subs	r3, #1
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	da00      	bge.n	8000a2e <trivium_change_bit+0x1a>
 8000a2c:	3307      	adds	r3, #7
 8000a2e:	10db      	asrs	r3, r3, #3
 8000a30:	73fb      	strb	r3, [r7, #15]
    uint8_t trivium_nbit = ((n - 1) % 8) + 1;
 8000a32:	887b      	ldrh	r3, [r7, #2]
 8000a34:	3b01      	subs	r3, #1
 8000a36:	425a      	negs	r2, r3
 8000a38:	f003 0307 	and.w	r3, r3, #7
 8000a3c:	f002 0207 	and.w	r2, r2, #7
 8000a40:	bf58      	it	pl
 8000a42:	4253      	negpl	r3, r2
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	3301      	adds	r3, #1
 8000a48:	73bb      	strb	r3, [r7, #14]

    arr[nbyte] = ((255 << (9 - trivium_nbit)) & arr[nbyte]) |
 8000a4a:	7bbb      	ldrb	r3, [r7, #14]
 8000a4c:	f1c3 0309 	rsb	r3, r3, #9
 8000a50:	22ff      	movs	r2, #255	; 0xff
 8000a52:	fa02 f303 	lsl.w	r3, r2, r3
 8000a56:	b25a      	sxtb	r2, r3
 8000a58:	7bfb      	ldrb	r3, [r7, #15]
 8000a5a:	6879      	ldr	r1, [r7, #4]
 8000a5c:	440b      	add	r3, r1
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	b25b      	sxtb	r3, r3
 8000a62:	4013      	ands	r3, r2
 8000a64:	b25a      	sxtb	r2, r3
                (value << (8 - trivium_nbit)) |
 8000a66:	7879      	ldrb	r1, [r7, #1]
 8000a68:	7bbb      	ldrb	r3, [r7, #14]
 8000a6a:	f1c3 0308 	rsb	r3, r3, #8
 8000a6e:	fa01 f303 	lsl.w	r3, r1, r3
    arr[nbyte] = ((255 << (9 - trivium_nbit)) & arr[nbyte]) |
 8000a72:	b25b      	sxtb	r3, r3
 8000a74:	4313      	orrs	r3, r2
 8000a76:	b25a      	sxtb	r2, r3
                ((255 >> trivium_nbit) & arr[nbyte]);
 8000a78:	7bbb      	ldrb	r3, [r7, #14]
 8000a7a:	21ff      	movs	r1, #255	; 0xff
 8000a7c:	fa41 f303 	asr.w	r3, r1, r3
 8000a80:	b259      	sxtb	r1, r3
 8000a82:	7bfb      	ldrb	r3, [r7, #15]
 8000a84:	6878      	ldr	r0, [r7, #4]
 8000a86:	4403      	add	r3, r0
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	b25b      	sxtb	r3, r3
 8000a8c:	400b      	ands	r3, r1
 8000a8e:	b25b      	sxtb	r3, r3
                (value << (8 - trivium_nbit)) |
 8000a90:	4313      	orrs	r3, r2
 8000a92:	b259      	sxtb	r1, r3
    arr[nbyte] = ((255 << (9 - trivium_nbit)) & arr[nbyte]) |
 8000a94:	7bfb      	ldrb	r3, [r7, #15]
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	4413      	add	r3, r2
                (value << (8 - trivium_nbit)) |
 8000a9a:	b2ca      	uxtb	r2, r1
    arr[nbyte] = ((255 << (9 - trivium_nbit)) & arr[nbyte]) |
 8000a9c:	701a      	strb	r2, [r3, #0]
}
 8000a9e:	bf00      	nop
 8000aa0:	3714      	adds	r7, #20
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr

08000aaa <trivium_insert_bits>:

static void trivium_insert_bits(uint8_t *arr, uint16_t n, uint8_t *source, uint16_t ssize)
{
 8000aaa:	b590      	push	{r4, r7, lr}
 8000aac:	b087      	sub	sp, #28
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	60f8      	str	r0, [r7, #12]
 8000ab2:	607a      	str	r2, [r7, #4]
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	460b      	mov	r3, r1
 8000ab8:	817b      	strh	r3, [r7, #10]
 8000aba:	4613      	mov	r3, r2
 8000abc:	813b      	strh	r3, [r7, #8]
    uint16_t i;
    for(i = 0; i < ssize; i++)
 8000abe:	2300      	movs	r3, #0
 8000ac0:	82fb      	strh	r3, [r7, #22]
 8000ac2:	e013      	b.n	8000aec <trivium_insert_bits+0x42>
    {
        trivium_change_bit(arr, n + i, trivium_nbit(source, i + 1));
 8000ac4:	897a      	ldrh	r2, [r7, #10]
 8000ac6:	8afb      	ldrh	r3, [r7, #22]
 8000ac8:	4413      	add	r3, r2
 8000aca:	b29c      	uxth	r4, r3
 8000acc:	8afb      	ldrh	r3, [r7, #22]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	f7ff ff6b 	bl	80009b0 <trivium_nbit>
 8000ada:	4603      	mov	r3, r0
 8000adc:	461a      	mov	r2, r3
 8000ade:	4621      	mov	r1, r4
 8000ae0:	68f8      	ldr	r0, [r7, #12]
 8000ae2:	f7ff ff97 	bl	8000a14 <trivium_change_bit>
    for(i = 0; i < ssize; i++)
 8000ae6:	8afb      	ldrh	r3, [r7, #22]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	82fb      	strh	r3, [r7, #22]
 8000aec:	8afa      	ldrh	r2, [r7, #22]
 8000aee:	893b      	ldrh	r3, [r7, #8]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d3e7      	bcc.n	8000ac4 <trivium_insert_bits+0x1a>
    }
}
 8000af4:	bf00      	nop
 8000af6:	bf00      	nop
 8000af8:	371c      	adds	r7, #28
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd90      	pop	{r4, r7, pc}

08000afe <trivium_rotate>:

static uint8_t trivium_rotate(uint8_t *arr, uint8_t arr_size)
{
 8000afe:	b590      	push	{r4, r7, lr}
 8000b00:	b087      	sub	sp, #28
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	6078      	str	r0, [r7, #4]
 8000b06:	460b      	mov	r3, r1
 8000b08:	70fb      	strb	r3, [r7, #3]
    uint8_t i;

    uint8_t t1 = trivium_nbit(arr, 66) ^ trivium_nbit(arr, 93);
 8000b0a:	2142      	movs	r1, #66	; 0x42
 8000b0c:	6878      	ldr	r0, [r7, #4]
 8000b0e:	f7ff ff4f 	bl	80009b0 <trivium_nbit>
 8000b12:	4603      	mov	r3, r0
 8000b14:	461c      	mov	r4, r3
 8000b16:	215d      	movs	r1, #93	; 0x5d
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f7ff ff49 	bl	80009b0 <trivium_nbit>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	4063      	eors	r3, r4
 8000b22:	75bb      	strb	r3, [r7, #22]
    uint8_t t2 = trivium_nbit(arr, 162) ^ trivium_nbit(arr, 177);
 8000b24:	21a2      	movs	r1, #162	; 0xa2
 8000b26:	6878      	ldr	r0, [r7, #4]
 8000b28:	f7ff ff42 	bl	80009b0 <trivium_nbit>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	461c      	mov	r4, r3
 8000b30:	21b1      	movs	r1, #177	; 0xb1
 8000b32:	6878      	ldr	r0, [r7, #4]
 8000b34:	f7ff ff3c 	bl	80009b0 <trivium_nbit>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	4063      	eors	r3, r4
 8000b3c:	757b      	strb	r3, [r7, #21]
    uint8_t t3 = trivium_nbit(arr, 243) ^ trivium_nbit(arr, 288);
 8000b3e:	21f3      	movs	r1, #243	; 0xf3
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f7ff ff35 	bl	80009b0 <trivium_nbit>
 8000b46:	4603      	mov	r3, r0
 8000b48:	461c      	mov	r4, r3
 8000b4a:	f44f 7190 	mov.w	r1, #288	; 0x120
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f7ff ff2e 	bl	80009b0 <trivium_nbit>
 8000b54:	4603      	mov	r3, r0
 8000b56:	4063      	eors	r3, r4
 8000b58:	753b      	strb	r3, [r7, #20]

    uint8_t out = t1 ^ t2 ^ t3;
 8000b5a:	7dba      	ldrb	r2, [r7, #22]
 8000b5c:	7d7b      	ldrb	r3, [r7, #21]
 8000b5e:	4053      	eors	r3, r2
 8000b60:	b2da      	uxtb	r2, r3
 8000b62:	7d3b      	ldrb	r3, [r7, #20]
 8000b64:	4053      	eors	r3, r2
 8000b66:	74fb      	strb	r3, [r7, #19]

    uint8_t a1 = trivium_nbit(arr, 91) & trivium_nbit(arr, 92);
 8000b68:	215b      	movs	r1, #91	; 0x5b
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f7ff ff20 	bl	80009b0 <trivium_nbit>
 8000b70:	4603      	mov	r3, r0
 8000b72:	461c      	mov	r4, r3
 8000b74:	215c      	movs	r1, #92	; 0x5c
 8000b76:	6878      	ldr	r0, [r7, #4]
 8000b78:	f7ff ff1a 	bl	80009b0 <trivium_nbit>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	4023      	ands	r3, r4
 8000b80:	74bb      	strb	r3, [r7, #18]
    uint8_t a2 = trivium_nbit(arr, 175) & trivium_nbit(arr, 176);
 8000b82:	21af      	movs	r1, #175	; 0xaf
 8000b84:	6878      	ldr	r0, [r7, #4]
 8000b86:	f7ff ff13 	bl	80009b0 <trivium_nbit>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	461c      	mov	r4, r3
 8000b8e:	21b0      	movs	r1, #176	; 0xb0
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f7ff ff0d 	bl	80009b0 <trivium_nbit>
 8000b96:	4603      	mov	r3, r0
 8000b98:	4023      	ands	r3, r4
 8000b9a:	747b      	strb	r3, [r7, #17]
    uint8_t a3 = trivium_nbit(arr, 286) & trivium_nbit(arr, 287);
 8000b9c:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	f7ff ff05 	bl	80009b0 <trivium_nbit>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	461c      	mov	r4, r3
 8000baa:	f240 111f 	movw	r1, #287	; 0x11f
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f7ff fefe 	bl	80009b0 <trivium_nbit>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	4023      	ands	r3, r4
 8000bb8:	743b      	strb	r3, [r7, #16]

    uint8_t s1 = a1 ^ trivium_nbit(arr, 171) ^ t1;
 8000bba:	21ab      	movs	r1, #171	; 0xab
 8000bbc:	6878      	ldr	r0, [r7, #4]
 8000bbe:	f7ff fef7 	bl	80009b0 <trivium_nbit>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	7cbb      	ldrb	r3, [r7, #18]
 8000bc8:	4053      	eors	r3, r2
 8000bca:	b2da      	uxtb	r2, r3
 8000bcc:	7dbb      	ldrb	r3, [r7, #22]
 8000bce:	4053      	eors	r3, r2
 8000bd0:	73fb      	strb	r3, [r7, #15]
    uint8_t s2 = a2 ^ trivium_nbit(arr, 264) ^ t2;
 8000bd2:	f44f 7184 	mov.w	r1, #264	; 0x108
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f7ff feea 	bl	80009b0 <trivium_nbit>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	461a      	mov	r2, r3
 8000be0:	7c7b      	ldrb	r3, [r7, #17]
 8000be2:	4053      	eors	r3, r2
 8000be4:	b2da      	uxtb	r2, r3
 8000be6:	7d7b      	ldrb	r3, [r7, #21]
 8000be8:	4053      	eors	r3, r2
 8000bea:	73bb      	strb	r3, [r7, #14]
    uint8_t s3 = a3 ^ trivium_nbit(arr, 69) ^ t3;
 8000bec:	2145      	movs	r1, #69	; 0x45
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f7ff fede 	bl	80009b0 <trivium_nbit>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	7c3b      	ldrb	r3, [r7, #16]
 8000bfa:	4053      	eors	r3, r2
 8000bfc:	b2da      	uxtb	r2, r3
 8000bfe:	7d3b      	ldrb	r3, [r7, #20]
 8000c00:	4053      	eors	r3, r2
 8000c02:	737b      	strb	r3, [r7, #13]

    /* Begin trivium_rotate */

    for(i = arr_size - 1; i > 0; i--)
 8000c04:	78fb      	ldrb	r3, [r7, #3]
 8000c06:	3b01      	subs	r3, #1
 8000c08:	75fb      	strb	r3, [r7, #23]
 8000c0a:	e017      	b.n	8000c3c <trivium_rotate+0x13e>
    {
        arr[i] = (arr[i - 1] << 7) | (arr[i] >> 1);
 8000c0c:	7dfb      	ldrb	r3, [r7, #23]
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	687a      	ldr	r2, [r7, #4]
 8000c12:	4413      	add	r3, r2
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	01db      	lsls	r3, r3, #7
 8000c18:	b25a      	sxtb	r2, r3
 8000c1a:	7dfb      	ldrb	r3, [r7, #23]
 8000c1c:	6879      	ldr	r1, [r7, #4]
 8000c1e:	440b      	add	r3, r1
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	085b      	lsrs	r3, r3, #1
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	b25b      	sxtb	r3, r3
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	b259      	sxtb	r1, r3
 8000c2c:	7dfb      	ldrb	r3, [r7, #23]
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	4413      	add	r3, r2
 8000c32:	b2ca      	uxtb	r2, r1
 8000c34:	701a      	strb	r2, [r3, #0]
    for(i = arr_size - 1; i > 0; i--)
 8000c36:	7dfb      	ldrb	r3, [r7, #23]
 8000c38:	3b01      	subs	r3, #1
 8000c3a:	75fb      	strb	r3, [r7, #23]
 8000c3c:	7dfb      	ldrb	r3, [r7, #23]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d1e4      	bne.n	8000c0c <trivium_rotate+0x10e>
    }
    arr[0] = arr[0] >> 1;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	085b      	lsrs	r3, r3, #1
 8000c48:	b2da      	uxtb	r2, r3
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	701a      	strb	r2, [r3, #0]

    /* End trivium_rotate */

    trivium_change_bit(arr, 1, s3);
 8000c4e:	7b7b      	ldrb	r3, [r7, #13]
 8000c50:	461a      	mov	r2, r3
 8000c52:	2101      	movs	r1, #1
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f7ff fedd 	bl	8000a14 <trivium_change_bit>
    trivium_change_bit(arr, 94, s1);
 8000c5a:	7bfb      	ldrb	r3, [r7, #15]
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	215e      	movs	r1, #94	; 0x5e
 8000c60:	6878      	ldr	r0, [r7, #4]
 8000c62:	f7ff fed7 	bl	8000a14 <trivium_change_bit>
    trivium_change_bit(arr, 178, s2);
 8000c66:	7bbb      	ldrb	r3, [r7, #14]
 8000c68:	461a      	mov	r2, r3
 8000c6a:	21b2      	movs	r1, #178	; 0xb2
 8000c6c:	6878      	ldr	r0, [r7, #4]
 8000c6e:	f7ff fed1 	bl	8000a14 <trivium_change_bit>

    return out;
 8000c72:	7cfb      	ldrb	r3, [r7, #19]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	371c      	adds	r7, #28
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd90      	pop	{r4, r7, pc}

08000c7c <trivium_init_state>:

static void trivium_init_state(uint8_t *arr)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
    uint16_t i;
    for(i = 0; i < 4*288; i++)
 8000c84:	2300      	movs	r3, #0
 8000c86:	81fb      	strh	r3, [r7, #14]
 8000c88:	e006      	b.n	8000c98 <trivium_init_state+0x1c>
    {
        trivium_rotate(arr, TRIVIUM_STATE_SIZE);
 8000c8a:	2124      	movs	r1, #36	; 0x24
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	f7ff ff36 	bl	8000afe <trivium_rotate>
    for(i = 0; i < 4*288; i++)
 8000c92:	89fb      	ldrh	r3, [r7, #14]
 8000c94:	3301      	adds	r3, #1
 8000c96:	81fb      	strh	r3, [r7, #14]
 8000c98:	89fb      	ldrh	r3, [r7, #14]
 8000c9a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8000c9e:	d3f4      	bcc.n	8000c8a <trivium_init_state+0xe>
    }
}
 8000ca0:	bf00      	nop
 8000ca2:	bf00      	nop
 8000ca4:	3710      	adds	r7, #16
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
	...

08000cac <trivium_init>:

trivium_ctx* trivium_init(uint8_t *key, uint8_t *iv)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
    trivium_ctx *ctx = malloc(sizeof(struct _trivium_ctx));
 8000cb6:	202c      	movs	r0, #44	; 0x2c
 8000cb8:	f001 fbcc 	bl	8002454 <malloc>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	60bb      	str	r3, [r7, #8]

    if (ctx == NULL)
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d104      	bne.n	8000cd0 <trivium_init+0x24>
    {
        printf("Error: malloc trivium_ctx failed.\n");
 8000cc6:	4826      	ldr	r0, [pc, #152]	; (8000d60 <trivium_init+0xb4>)
 8000cc8:	f001 fda8 	bl	800281c <puts>
        return NULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	e042      	b.n	8000d56 <trivium_init+0xaa>
    }

    for(int i = 0; i < TRIVIUM_STATE_SIZE; i++) ctx->b[i] = 0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	e008      	b.n	8000ce8 <trivium_init+0x3c>
 8000cd6:	68ba      	ldr	r2, [r7, #8]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	4413      	add	r3, r2
 8000cdc:	3308      	adds	r3, #8
 8000cde:	2200      	movs	r2, #0
 8000ce0:	701a      	strb	r2, [r3, #0]
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	2b23      	cmp	r3, #35	; 0x23
 8000cec:	ddf3      	ble.n	8000cd6 <trivium_init+0x2a>

    ctx->key = key;
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	687a      	ldr	r2, [r7, #4]
 8000cf2:	601a      	str	r2, [r3, #0]
    ctx->iv = iv;
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	683a      	ldr	r2, [r7, #0]
 8000cf8:	605a      	str	r2, [r3, #4]

    trivium_insert_bits(ctx->b, 1, key, 80);
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	f103 0008 	add.w	r0, r3, #8
 8000d00:	2350      	movs	r3, #80	; 0x50
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	2101      	movs	r1, #1
 8000d06:	f7ff fed0 	bl	8000aaa <trivium_insert_bits>
    trivium_insert_bits(ctx->b, 94, iv, 80);
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	f103 0008 	add.w	r0, r3, #8
 8000d10:	2350      	movs	r3, #80	; 0x50
 8000d12:	683a      	ldr	r2, [r7, #0]
 8000d14:	215e      	movs	r1, #94	; 0x5e
 8000d16:	f7ff fec8 	bl	8000aaa <trivium_insert_bits>
    trivium_change_bit(ctx->b, 286, 1);
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	3308      	adds	r3, #8
 8000d1e:	2201      	movs	r2, #1
 8000d20:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff fe75 	bl	8000a14 <trivium_change_bit>
    trivium_change_bit(ctx->b, 287, 1);
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	3308      	adds	r3, #8
 8000d2e:	2201      	movs	r2, #1
 8000d30:	f240 111f 	movw	r1, #287	; 0x11f
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff fe6d 	bl	8000a14 <trivium_change_bit>
    trivium_change_bit(ctx->b, 288, 1);
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	3308      	adds	r3, #8
 8000d3e:	2201      	movs	r2, #1
 8000d40:	f44f 7190 	mov.w	r1, #288	; 0x120
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff fe65 	bl	8000a14 <trivium_change_bit>

    trivium_init_state(ctx->b);
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	3308      	adds	r3, #8
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff ff94 	bl	8000c7c <trivium_init_state>

    return ctx;
 8000d54:	68bb      	ldr	r3, [r7, #8]
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	080034f4 	.word	0x080034f4

08000d64 <trivium_gen_keystream>:

uint8_t trivium_gen_keystream(trivium_ctx* ctx)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
    uint8_t buf = 0;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	73fb      	strb	r3, [r7, #15]
    uint8_t i = 0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	73bb      	strb	r3, [r7, #14]
    while(i != 8)
 8000d74:	e014      	b.n	8000da0 <trivium_gen_keystream+0x3c>
    {
        uint8_t z = trivium_rotate(ctx->b, TRIVIUM_STATE_SIZE);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	3308      	adds	r3, #8
 8000d7a:	2124      	movs	r1, #36	; 0x24
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff febe 	bl	8000afe <trivium_rotate>
 8000d82:	4603      	mov	r3, r0
 8000d84:	737b      	strb	r3, [r7, #13]
        buf = buf | (z << i);
 8000d86:	7b7a      	ldrb	r2, [r7, #13]
 8000d88:	7bbb      	ldrb	r3, [r7, #14]
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	b25a      	sxtb	r2, r3
 8000d90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	b25b      	sxtb	r3, r3
 8000d98:	73fb      	strb	r3, [r7, #15]
        i += 1;
 8000d9a:	7bbb      	ldrb	r3, [r7, #14]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	73bb      	strb	r3, [r7, #14]
    while(i != 8)
 8000da0:	7bbb      	ldrb	r3, [r7, #14]
 8000da2:	2b08      	cmp	r3, #8
 8000da4:	d1e7      	bne.n	8000d76 <trivium_gen_keystream+0x12>
    }
    return buf;
 8000da6:	7bfb      	ldrb	r3, [r7, #15]
 8000da8:	4618      	mov	r0, r3
 8000daa:	3710      	adds	r7, #16
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000db0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000de8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000db4:	f7ff fd3e 	bl	8000834 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000db8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000dba:	e003      	b.n	8000dc4 <LoopCopyDataInit>

08000dbc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000dbe:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000dc0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000dc2:	3104      	adds	r1, #4

08000dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000dc4:	480a      	ldr	r0, [pc, #40]	; (8000df0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000dc8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000dca:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000dcc:	d3f6      	bcc.n	8000dbc <CopyDataInit>
	ldr	r2, =_sbss
 8000dce:	4a0a      	ldr	r2, [pc, #40]	; (8000df8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000dd0:	e002      	b.n	8000dd8 <LoopFillZerobss>

08000dd2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000dd2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000dd4:	f842 3b04 	str.w	r3, [r2], #4

08000dd8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000dd8:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <LoopForever+0x16>)
	cmp	r2, r3
 8000dda:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ddc:	d3f9      	bcc.n	8000dd2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000dde:	f001 fd43 	bl	8002868 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000de2:	f7ff fa6f 	bl	80002c4 <main>

08000de6 <LoopForever>:

LoopForever:
    b LoopForever
 8000de6:	e7fe      	b.n	8000de6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000de8:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8000dec:	080035a4 	.word	0x080035a4
	ldr	r0, =_sdata
 8000df0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000df4:	200000c8 	.word	0x200000c8
	ldr	r2, =_sbss
 8000df8:	200000c8 	.word	0x200000c8
	ldr	r3, = _ebss
 8000dfc:	20000238 	.word	0x20000238

08000e00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e00:	e7fe      	b.n	8000e00 <ADC1_2_IRQHandler>

08000e02 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b082      	sub	sp, #8
 8000e06:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8000e0c:	2004      	movs	r0, #4
 8000e0e:	f000 f921 	bl	8001054 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8000e12:	f7ff fd21 	bl	8000858 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e16:	2007      	movs	r0, #7
 8000e18:	f000 f80e 	bl	8000e38 <HAL_InitTick>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d002      	beq.n	8000e28 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	71fb      	strb	r3, [r7, #7]
 8000e26:	e001      	b.n	8000e2c <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e28:	f7ff fc12 	bl	8000650 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
	...

08000e38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e40:	2300      	movs	r3, #0
 8000e42:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e44:	4b17      	ldr	r3, [pc, #92]	; (8000ea4 <HAL_InitTick+0x6c>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d023      	beq.n	8000e94 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e4c:	4b16      	ldr	r3, [pc, #88]	; (8000ea8 <HAL_InitTick+0x70>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	4b14      	ldr	r3, [pc, #80]	; (8000ea4 <HAL_InitTick+0x6c>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	4619      	mov	r1, r3
 8000e56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 f91b 	bl	800109e <HAL_SYSTICK_Config>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d10f      	bne.n	8000e8e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2b07      	cmp	r3, #7
 8000e72:	d809      	bhi.n	8000e88 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e74:	2200      	movs	r2, #0
 8000e76:	6879      	ldr	r1, [r7, #4]
 8000e78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e7c:	f000 f8f5 	bl	800106a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e80:	4a0a      	ldr	r2, [pc, #40]	; (8000eac <HAL_InitTick+0x74>)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6013      	str	r3, [r2, #0]
 8000e86:	e007      	b.n	8000e98 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	73fb      	strb	r3, [r7, #15]
 8000e8c:	e004      	b.n	8000e98 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	73fb      	strb	r3, [r7, #15]
 8000e92:	e001      	b.n	8000e98 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e94:	2301      	movs	r3, #1
 8000e96:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000068 	.word	0x20000068
 8000ea8:	20000060 	.word	0x20000060
 8000eac:	20000064 	.word	0x20000064

08000eb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_IncTick+0x20>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <HAL_IncTick+0x24>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	4a04      	ldr	r2, [pc, #16]	; (8000ed4 <HAL_IncTick+0x24>)
 8000ec2:	6013      	str	r3, [r2, #0]
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	20000068 	.word	0x20000068
 8000ed4:	200000e8 	.word	0x200000e8

08000ed8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  return uwTick;
 8000edc:	4b03      	ldr	r3, [pc, #12]	; (8000eec <HAL_GetTick+0x14>)
 8000ede:	681b      	ldr	r3, [r3, #0]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	200000e8 	.word	0x200000e8

08000ef0 <__NVIC_SetPriorityGrouping>:
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f003 0307 	and.w	r3, r3, #7
 8000efe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f00:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <__NVIC_SetPriorityGrouping+0x44>)
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f06:	68ba      	ldr	r2, [r7, #8]
 8000f08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f22:	4a04      	ldr	r2, [pc, #16]	; (8000f34 <__NVIC_SetPriorityGrouping+0x44>)
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	60d3      	str	r3, [r2, #12]
}
 8000f28:	bf00      	nop
 8000f2a:	3714      	adds	r7, #20
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <__NVIC_GetPriorityGrouping>:
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f3c:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <__NVIC_GetPriorityGrouping+0x18>)
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	0a1b      	lsrs	r3, r3, #8
 8000f42:	f003 0307 	and.w	r3, r3, #7
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <__NVIC_SetPriority>:
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	6039      	str	r1, [r7, #0]
 8000f5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	db0a      	blt.n	8000f7e <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	490c      	ldr	r1, [pc, #48]	; (8000fa0 <__NVIC_SetPriority+0x4c>)
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	0152      	lsls	r2, r2, #5
 8000f74:	b2d2      	uxtb	r2, r2
 8000f76:	440b      	add	r3, r1
 8000f78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000f7c:	e00a      	b.n	8000f94 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	4908      	ldr	r1, [pc, #32]	; (8000fa4 <__NVIC_SetPriority+0x50>)
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	f003 030f 	and.w	r3, r3, #15
 8000f8a:	3b04      	subs	r3, #4
 8000f8c:	0152      	lsls	r2, r2, #5
 8000f8e:	b2d2      	uxtb	r2, r2
 8000f90:	440b      	add	r3, r1
 8000f92:	761a      	strb	r2, [r3, #24]
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000e100 	.word	0xe000e100
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <NVIC_EncodePriority>:
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b089      	sub	sp, #36	; 0x24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	f1c3 0307 	rsb	r3, r3, #7
 8000fc2:	2b03      	cmp	r3, #3
 8000fc4:	bf28      	it	cs
 8000fc6:	2303      	movcs	r3, #3
 8000fc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	3303      	adds	r3, #3
 8000fce:	2b06      	cmp	r3, #6
 8000fd0:	d902      	bls.n	8000fd8 <NVIC_EncodePriority+0x30>
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	3b04      	subs	r3, #4
 8000fd6:	e000      	b.n	8000fda <NVIC_EncodePriority+0x32>
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43da      	mvns	r2, r3
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	401a      	ands	r2, r3
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffa:	43d9      	mvns	r1, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001000:	4313      	orrs	r3, r2
}
 8001002:	4618      	mov	r0, r3
 8001004:	3724      	adds	r7, #36	; 0x24
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
	...

08001010 <SysTick_Config>:
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3b01      	subs	r3, #1
 800101c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001020:	d301      	bcc.n	8001026 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001022:	2301      	movs	r3, #1
 8001024:	e00f      	b.n	8001046 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001026:	4a0a      	ldr	r2, [pc, #40]	; (8001050 <SysTick_Config+0x40>)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3b01      	subs	r3, #1
 800102c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800102e:	2107      	movs	r1, #7
 8001030:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001034:	f7ff ff8e 	bl	8000f54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001038:	4b05      	ldr	r3, [pc, #20]	; (8001050 <SysTick_Config+0x40>)
 800103a:	2200      	movs	r2, #0
 800103c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800103e:	4b04      	ldr	r3, [pc, #16]	; (8001050 <SysTick_Config+0x40>)
 8001040:	2207      	movs	r2, #7
 8001042:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	e000e010 	.word	0xe000e010

08001054 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f7ff ff47 	bl	8000ef0 <__NVIC_SetPriorityGrouping>
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b086      	sub	sp, #24
 800106e:	af00      	add	r7, sp, #0
 8001070:	4603      	mov	r3, r0
 8001072:	60b9      	str	r1, [r7, #8]
 8001074:	607a      	str	r2, [r7, #4]
 8001076:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001078:	f7ff ff5e 	bl	8000f38 <__NVIC_GetPriorityGrouping>
 800107c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	68b9      	ldr	r1, [r7, #8]
 8001082:	6978      	ldr	r0, [r7, #20]
 8001084:	f7ff ff90 	bl	8000fa8 <NVIC_EncodePriority>
 8001088:	4602      	mov	r2, r0
 800108a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800108e:	4611      	mov	r1, r2
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff ff5f 	bl	8000f54 <__NVIC_SetPriority>
}
 8001096:	bf00      	nop
 8001098:	3718      	adds	r7, #24
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b082      	sub	sp, #8
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f7ff ffb2 	bl	8001010 <SysTick_Config>
 80010ac:	4603      	mov	r3, r0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
	...

080010b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b087      	sub	sp, #28
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 80010c2:	2300      	movs	r3, #0
 80010c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80010c6:	e158      	b.n	800137a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	2101      	movs	r1, #1
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	fa01 f303 	lsl.w	r3, r1, r3
 80010d4:	4013      	ands	r3, r2
 80010d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	f000 814a 	beq.w	8001374 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f003 0303 	and.w	r3, r3, #3
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d005      	beq.n	80010f8 <HAL_GPIO_Init+0x40>
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f003 0303 	and.w	r3, r3, #3
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d130      	bne.n	800115a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	2203      	movs	r2, #3
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	43db      	mvns	r3, r3
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	4013      	ands	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	68da      	ldr	r2, [r3, #12]
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	4313      	orrs	r3, r2
 8001120:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800112e:	2201      	movs	r2, #1
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	43db      	mvns	r3, r3
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	4013      	ands	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	091b      	lsrs	r3, r3, #4
 8001144:	f003 0201 	and.w	r2, r3, #1
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	4313      	orrs	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f003 0303 	and.w	r3, r3, #3
 8001162:	2b03      	cmp	r3, #3
 8001164:	d017      	beq.n	8001196 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	68db      	ldr	r3, [r3, #12]
 800116a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	2203      	movs	r2, #3
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	43db      	mvns	r3, r3
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	4013      	ands	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	689a      	ldr	r2, [r3, #8]
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	4313      	orrs	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f003 0303 	and.w	r3, r3, #3
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d123      	bne.n	80011ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	08da      	lsrs	r2, r3, #3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	3208      	adds	r2, #8
 80011aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	220f      	movs	r2, #15
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	43db      	mvns	r3, r3
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	4013      	ands	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	691a      	ldr	r2, [r3, #16]
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	f003 0307 	and.w	r3, r3, #7
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	4313      	orrs	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	08da      	lsrs	r2, r3, #3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3208      	adds	r2, #8
 80011e4:	6939      	ldr	r1, [r7, #16]
 80011e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	2203      	movs	r2, #3
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43db      	mvns	r3, r3
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	4013      	ands	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f003 0203 	and.w	r2, r3, #3
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	4313      	orrs	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001226:	2b00      	cmp	r3, #0
 8001228:	f000 80a4 	beq.w	8001374 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 800122c:	4a5a      	ldr	r2, [pc, #360]	; (8001398 <HAL_GPIO_Init+0x2e0>)
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	089b      	lsrs	r3, r3, #2
 8001232:	3318      	adds	r3, #24
 8001234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001238:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	f003 0303 	and.w	r3, r3, #3
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	220f      	movs	r2, #15
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	43db      	mvns	r3, r3
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	4013      	ands	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4a52      	ldr	r2, [pc, #328]	; (800139c <HAL_GPIO_Init+0x2e4>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d025      	beq.n	80012a4 <HAL_GPIO_Init+0x1ec>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4a51      	ldr	r2, [pc, #324]	; (80013a0 <HAL_GPIO_Init+0x2e8>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d01f      	beq.n	80012a0 <HAL_GPIO_Init+0x1e8>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a50      	ldr	r2, [pc, #320]	; (80013a4 <HAL_GPIO_Init+0x2ec>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d019      	beq.n	800129c <HAL_GPIO_Init+0x1e4>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4a4f      	ldr	r2, [pc, #316]	; (80013a8 <HAL_GPIO_Init+0x2f0>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d013      	beq.n	8001298 <HAL_GPIO_Init+0x1e0>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	4a4e      	ldr	r2, [pc, #312]	; (80013ac <HAL_GPIO_Init+0x2f4>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d00d      	beq.n	8001294 <HAL_GPIO_Init+0x1dc>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4a4d      	ldr	r2, [pc, #308]	; (80013b0 <HAL_GPIO_Init+0x2f8>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d007      	beq.n	8001290 <HAL_GPIO_Init+0x1d8>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4a4c      	ldr	r2, [pc, #304]	; (80013b4 <HAL_GPIO_Init+0x2fc>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d101      	bne.n	800128c <HAL_GPIO_Init+0x1d4>
 8001288:	2306      	movs	r3, #6
 800128a:	e00c      	b.n	80012a6 <HAL_GPIO_Init+0x1ee>
 800128c:	2307      	movs	r3, #7
 800128e:	e00a      	b.n	80012a6 <HAL_GPIO_Init+0x1ee>
 8001290:	2305      	movs	r3, #5
 8001292:	e008      	b.n	80012a6 <HAL_GPIO_Init+0x1ee>
 8001294:	2304      	movs	r3, #4
 8001296:	e006      	b.n	80012a6 <HAL_GPIO_Init+0x1ee>
 8001298:	2303      	movs	r3, #3
 800129a:	e004      	b.n	80012a6 <HAL_GPIO_Init+0x1ee>
 800129c:	2302      	movs	r3, #2
 800129e:	e002      	b.n	80012a6 <HAL_GPIO_Init+0x1ee>
 80012a0:	2301      	movs	r3, #1
 80012a2:	e000      	b.n	80012a6 <HAL_GPIO_Init+0x1ee>
 80012a4:	2300      	movs	r3, #0
 80012a6:	697a      	ldr	r2, [r7, #20]
 80012a8:	f002 0203 	and.w	r2, r2, #3
 80012ac:	00d2      	lsls	r2, r2, #3
 80012ae:	4093      	lsls	r3, r2
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 80012b6:	4938      	ldr	r1, [pc, #224]	; (8001398 <HAL_GPIO_Init+0x2e0>)
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	089b      	lsrs	r3, r3, #2
 80012bc:	3318      	adds	r3, #24
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012c4:	4b34      	ldr	r3, [pc, #208]	; (8001398 <HAL_GPIO_Init+0x2e0>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	43db      	mvns	r3, r3
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	4013      	ands	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d003      	beq.n	80012e8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012e8:	4a2b      	ldr	r2, [pc, #172]	; (8001398 <HAL_GPIO_Init+0x2e0>)
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80012ee:	4b2a      	ldr	r3, [pc, #168]	; (8001398 <HAL_GPIO_Init+0x2e0>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	43db      	mvns	r3, r3
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	4013      	ands	r3, r2
 80012fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d003      	beq.n	8001312 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	4313      	orrs	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001312:	4a21      	ldr	r2, [pc, #132]	; (8001398 <HAL_GPIO_Init+0x2e0>)
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001318:	4b1f      	ldr	r3, [pc, #124]	; (8001398 <HAL_GPIO_Init+0x2e0>)
 800131a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800131e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	43db      	mvns	r3, r3
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	4013      	ands	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	4313      	orrs	r3, r2
 800133c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800133e:	4a16      	ldr	r2, [pc, #88]	; (8001398 <HAL_GPIO_Init+0x2e0>)
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 8001346:	4b14      	ldr	r3, [pc, #80]	; (8001398 <HAL_GPIO_Init+0x2e0>)
 8001348:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800134c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	43db      	mvns	r3, r3
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	4013      	ands	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d003      	beq.n	800136c <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	4313      	orrs	r3, r2
 800136a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800136c:	4a0a      	ldr	r2, [pc, #40]	; (8001398 <HAL_GPIO_Init+0x2e0>)
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	3301      	adds	r3, #1
 8001378:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	fa22 f303 	lsr.w	r3, r2, r3
 8001384:	2b00      	cmp	r3, #0
 8001386:	f47f ae9f 	bne.w	80010c8 <HAL_GPIO_Init+0x10>
  }
}
 800138a:	bf00      	nop
 800138c:	bf00      	nop
 800138e:	371c      	adds	r7, #28
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	4002f400 	.word	0x4002f400
 800139c:	42020000 	.word	0x42020000
 80013a0:	42020400 	.word	0x42020400
 80013a4:	42020800 	.word	0x42020800
 80013a8:	42020c00 	.word	0x42020c00
 80013ac:	42021000 	.word	0x42021000
 80013b0:	42021400 	.word	0x42021400
 80013b4:	42021800 	.word	0x42021800

080013b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	460b      	mov	r3, r1
 80013c2:	807b      	strh	r3, [r7, #2]
 80013c4:	4613      	mov	r3, r2
 80013c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013c8:	787b      	ldrb	r3, [r7, #1]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013ce:	887a      	ldrh	r2, [r7, #2]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013d4:	e002      	b.n	80013dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013d6:	887a      	ldrh	r2, [r7, #2]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	460b      	mov	r3, r1
 80013f2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	695b      	ldr	r3, [r3, #20]
 80013f8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013fa:	887a      	ldrh	r2, [r7, #2]
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	4013      	ands	r3, r2
 8001400:	041a      	lsls	r2, r3, #16
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	43d9      	mvns	r1, r3
 8001406:	887b      	ldrh	r3, [r7, #2]
 8001408:	400b      	ands	r3, r1
 800140a:	431a      	orrs	r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	619a      	str	r2, [r3, #24]
}
 8001410:	bf00      	nop
 8001412:	3714      	adds	r7, #20
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001420:	4b04      	ldr	r3, [pc, #16]	; (8001434 <HAL_PWREx_GetVoltageRange+0x18>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001428:	4618      	mov	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	40007000 	.word	0x40007000

08001438 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8001440:	4b27      	ldr	r3, [pc, #156]	; (80014e0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001448:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 800144a:	f000 f851 	bl	80014f0 <HAL_PWREx_SMPS_GetEffectiveMode>
 800144e:	4603      	mov	r3, r0
 8001450:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001454:	d101      	bne.n	800145a <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e03e      	b.n	80014d8 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 800145a:	4b21      	ldr	r3, [pc, #132]	; (80014e0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800145c:	68db      	ldr	r3, [r3, #12]
 800145e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001462:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001466:	d101      	bne.n	800146c <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	e035      	b.n	80014d8 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800146c:	68ba      	ldr	r2, [r7, #8]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	429a      	cmp	r2, r3
 8001472:	d101      	bne.n	8001478 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8001474:	2300      	movs	r3, #0
 8001476:	e02f      	b.n	80014d8 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001478:	4b19      	ldr	r3, [pc, #100]	; (80014e0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8001480:	4917      	ldr	r1, [pc, #92]	; (80014e0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4313      	orrs	r3, r2
 8001486:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8001488:	4b16      	ldr	r3, [pc, #88]	; (80014e4 <HAL_PWREx_ControlVoltageScaling+0xac>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	095b      	lsrs	r3, r3, #5
 800148e:	4a16      	ldr	r2, [pc, #88]	; (80014e8 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001490:	fba2 2303 	umull	r2, r3, r2, r3
 8001494:	09db      	lsrs	r3, r3, #7
 8001496:	2232      	movs	r2, #50	; 0x32
 8001498:	fb02 f303 	mul.w	r3, r2, r3
 800149c:	4a13      	ldr	r2, [pc, #76]	; (80014ec <HAL_PWREx_ControlVoltageScaling+0xb4>)
 800149e:	fba2 2303 	umull	r2, r3, r2, r3
 80014a2:	08db      	lsrs	r3, r3, #3
 80014a4:	3301      	adds	r3, #1
 80014a6:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014a8:	e002      	b.n	80014b0 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	3b01      	subs	r3, #1
 80014ae:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014b0:	4b0b      	ldr	r3, [pc, #44]	; (80014e0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80014b2:	695b      	ldr	r3, [r3, #20]
 80014b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014bc:	d102      	bne.n	80014c4 <HAL_PWREx_ControlVoltageScaling+0x8c>
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d1f2      	bne.n	80014aa <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014c4:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80014c6:	695b      	ldr	r3, [r3, #20]
 80014c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014d0:	d101      	bne.n	80014d6 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e000      	b.n	80014d8 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 80014d6:	2300      	movs	r3, #0
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3710      	adds	r7, #16
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40007000 	.word	0x40007000
 80014e4:	20000060 	.word	0x20000060
 80014e8:	0a7c5ac5 	.word	0x0a7c5ac5
 80014ec:	cccccccd 	.word	0xcccccccd

080014f0 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 80014f6:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 80014f8:	691b      	ldr	r3, [r3, #16]
 80014fa:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d003      	beq.n	800150e <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8001506:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800150a:	607b      	str	r3, [r7, #4]
 800150c:	e00a      	b.n	8001524 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d103      	bne.n	8001520 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8001518:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800151c:	607b      	str	r3, [r7, #4]
 800151e:	e001      	b.n	8001524 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8001520:	2300      	movs	r3, #0
 8001522:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8001524:	687b      	ldr	r3, [r7, #4]
}
 8001526:	4618      	mov	r0, r3
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	40007000 	.word	0x40007000

08001538 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b088      	sub	sp, #32
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d102      	bne.n	800154c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	f000 bcc2 	b.w	8001ed0 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800154c:	4b99      	ldr	r3, [pc, #612]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f003 030c 	and.w	r3, r3, #12
 8001554:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001556:	4b97      	ldr	r3, [pc, #604]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 8001558:	68db      	ldr	r3, [r3, #12]
 800155a:	f003 0303 	and.w	r3, r3, #3
 800155e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0310 	and.w	r3, r3, #16
 8001568:	2b00      	cmp	r3, #0
 800156a:	f000 80e9 	beq.w	8001740 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d006      	beq.n	8001582 <HAL_RCC_OscConfig+0x4a>
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	2b0c      	cmp	r3, #12
 8001578:	f040 8083 	bne.w	8001682 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d17f      	bne.n	8001682 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001582:	4b8c      	ldr	r3, [pc, #560]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	2b00      	cmp	r3, #0
 800158c:	d006      	beq.n	800159c <HAL_RCC_OscConfig+0x64>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	69db      	ldr	r3, [r3, #28]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d102      	bne.n	800159c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	f000 bc9a 	b.w	8001ed0 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015a0:	4b84      	ldr	r3, [pc, #528]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0308 	and.w	r3, r3, #8
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d004      	beq.n	80015b6 <HAL_RCC_OscConfig+0x7e>
 80015ac:	4b81      	ldr	r3, [pc, #516]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015b4:	e005      	b.n	80015c2 <HAL_RCC_OscConfig+0x8a>
 80015b6:	4b7f      	ldr	r3, [pc, #508]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 80015b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015bc:	091b      	lsrs	r3, r3, #4
 80015be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d224      	bcs.n	8001610 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ca:	4618      	mov	r0, r3
 80015cc:	f000 fe72 	bl	80022b4 <RCC_SetFlashLatencyFromMSIRange>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d002      	beq.n	80015dc <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	f000 bc7a 	b.w	8001ed0 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015dc:	4b75      	ldr	r3, [pc, #468]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a74      	ldr	r2, [pc, #464]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 80015e2:	f043 0308 	orr.w	r3, r3, #8
 80015e6:	6013      	str	r3, [r2, #0]
 80015e8:	4b72      	ldr	r3, [pc, #456]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f4:	496f      	ldr	r1, [pc, #444]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 80015f6:	4313      	orrs	r3, r2
 80015f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015fa:	4b6e      	ldr	r3, [pc, #440]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a1b      	ldr	r3, [r3, #32]
 8001606:	021b      	lsls	r3, r3, #8
 8001608:	496a      	ldr	r1, [pc, #424]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 800160a:	4313      	orrs	r3, r2
 800160c:	604b      	str	r3, [r1, #4]
 800160e:	e026      	b.n	800165e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001610:	4b68      	ldr	r3, [pc, #416]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a67      	ldr	r2, [pc, #412]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 8001616:	f043 0308 	orr.w	r3, r3, #8
 800161a:	6013      	str	r3, [r2, #0]
 800161c:	4b65      	ldr	r3, [pc, #404]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001628:	4962      	ldr	r1, [pc, #392]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 800162a:	4313      	orrs	r3, r2
 800162c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800162e:	4b61      	ldr	r3, [pc, #388]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6a1b      	ldr	r3, [r3, #32]
 800163a:	021b      	lsls	r3, r3, #8
 800163c:	495d      	ldr	r1, [pc, #372]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 800163e:	4313      	orrs	r3, r2
 8001640:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d10a      	bne.n	800165e <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164c:	4618      	mov	r0, r3
 800164e:	f000 fe31 	bl	80022b4 <RCC_SetFlashLatencyFromMSIRange>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d002      	beq.n	800165e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	f000 bc39 	b.w	8001ed0 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800165e:	f000 fe15 	bl	800228c <HAL_RCC_GetHCLKFreq>
 8001662:	4603      	mov	r3, r0
 8001664:	4a54      	ldr	r2, [pc, #336]	; (80017b8 <HAL_RCC_OscConfig+0x280>)
 8001666:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001668:	4b54      	ldr	r3, [pc, #336]	; (80017bc <HAL_RCC_OscConfig+0x284>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fbe3 	bl	8000e38 <HAL_InitTick>
 8001672:	4603      	mov	r3, r0
 8001674:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8001676:	7bfb      	ldrb	r3, [r7, #15]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d060      	beq.n	800173e <HAL_RCC_OscConfig+0x206>
        {
          return status;
 800167c:	7bfb      	ldrb	r3, [r7, #15]
 800167e:	f000 bc27 	b.w	8001ed0 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	69db      	ldr	r3, [r3, #28]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d039      	beq.n	80016fe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800168a:	4b4a      	ldr	r3, [pc, #296]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a49      	ldr	r2, [pc, #292]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001696:	f7ff fc1f 	bl	8000ed8 <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800169c:	e00f      	b.n	80016be <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800169e:	f7ff fc1b 	bl	8000ed8 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d908      	bls.n	80016be <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016ac:	4b41      	ldr	r3, [pc, #260]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d102      	bne.n	80016be <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	f000 bc09 	b.w	8001ed0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016be:	4b3d      	ldr	r3, [pc, #244]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d0e9      	beq.n	800169e <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016ca:	4b3a      	ldr	r3, [pc, #232]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a39      	ldr	r2, [pc, #228]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 80016d0:	f043 0308 	orr.w	r3, r3, #8
 80016d4:	6013      	str	r3, [r2, #0]
 80016d6:	4b37      	ldr	r3, [pc, #220]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e2:	4934      	ldr	r1, [pc, #208]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 80016e4:	4313      	orrs	r3, r2
 80016e6:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016e8:	4b32      	ldr	r3, [pc, #200]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a1b      	ldr	r3, [r3, #32]
 80016f4:	021b      	lsls	r3, r3, #8
 80016f6:	492f      	ldr	r1, [pc, #188]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 80016f8:	4313      	orrs	r3, r2
 80016fa:	604b      	str	r3, [r1, #4]
 80016fc:	e020      	b.n	8001740 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80016fe:	4b2d      	ldr	r3, [pc, #180]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a2c      	ldr	r2, [pc, #176]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 8001704:	f023 0301 	bic.w	r3, r3, #1
 8001708:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800170a:	f7ff fbe5 	bl	8000ed8 <HAL_GetTick>
 800170e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001710:	e00e      	b.n	8001730 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001712:	f7ff fbe1 	bl	8000ed8 <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d907      	bls.n	8001730 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001720:	4b24      	ldr	r3, [pc, #144]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e3cf      	b.n	8001ed0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001730:	4b20      	ldr	r3, [pc, #128]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d1ea      	bne.n	8001712 <HAL_RCC_OscConfig+0x1da>
 800173c:	e000      	b.n	8001740 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800173e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0301 	and.w	r3, r3, #1
 8001748:	2b00      	cmp	r3, #0
 800174a:	d07e      	beq.n	800184a <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	2b08      	cmp	r3, #8
 8001750:	d005      	beq.n	800175e <HAL_RCC_OscConfig+0x226>
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	2b0c      	cmp	r3, #12
 8001756:	d10e      	bne.n	8001776 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	2b03      	cmp	r3, #3
 800175c:	d10b      	bne.n	8001776 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800175e:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d06e      	beq.n	8001848 <HAL_RCC_OscConfig+0x310>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d16a      	bne.n	8001848 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e3ac      	b.n	8001ed0 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800177e:	d106      	bne.n	800178e <HAL_RCC_OscConfig+0x256>
 8001780:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a0b      	ldr	r2, [pc, #44]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 8001786:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800178a:	6013      	str	r3, [r2, #0]
 800178c:	e024      	b.n	80017d8 <HAL_RCC_OscConfig+0x2a0>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001796:	d113      	bne.n	80017c0 <HAL_RCC_OscConfig+0x288>
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a05      	ldr	r2, [pc, #20]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 800179e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017a2:	6013      	str	r3, [r2, #0]
 80017a4:	4b03      	ldr	r3, [pc, #12]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a02      	ldr	r2, [pc, #8]	; (80017b4 <HAL_RCC_OscConfig+0x27c>)
 80017aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ae:	6013      	str	r3, [r2, #0]
 80017b0:	e012      	b.n	80017d8 <HAL_RCC_OscConfig+0x2a0>
 80017b2:	bf00      	nop
 80017b4:	40021000 	.word	0x40021000
 80017b8:	20000060 	.word	0x20000060
 80017bc:	20000064 	.word	0x20000064
 80017c0:	4b8b      	ldr	r3, [pc, #556]	; (80019f0 <HAL_RCC_OscConfig+0x4b8>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a8a      	ldr	r2, [pc, #552]	; (80019f0 <HAL_RCC_OscConfig+0x4b8>)
 80017c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ca:	6013      	str	r3, [r2, #0]
 80017cc:	4b88      	ldr	r3, [pc, #544]	; (80019f0 <HAL_RCC_OscConfig+0x4b8>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a87      	ldr	r2, [pc, #540]	; (80019f0 <HAL_RCC_OscConfig+0x4b8>)
 80017d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d019      	beq.n	8001814 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e0:	f7ff fb7a 	bl	8000ed8 <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017e6:	e00e      	b.n	8001806 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017e8:	f7ff fb76 	bl	8000ed8 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b64      	cmp	r3, #100	; 0x64
 80017f4:	d907      	bls.n	8001806 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017f6:	4b7e      	ldr	r3, [pc, #504]	; (80019f0 <HAL_RCC_OscConfig+0x4b8>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d101      	bne.n	8001806 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e364      	b.n	8001ed0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001806:	4b7a      	ldr	r3, [pc, #488]	; (80019f0 <HAL_RCC_OscConfig+0x4b8>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d0ea      	beq.n	80017e8 <HAL_RCC_OscConfig+0x2b0>
 8001812:	e01a      	b.n	800184a <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001814:	f7ff fb60 	bl	8000ed8 <HAL_GetTick>
 8001818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800181a:	e00e      	b.n	800183a <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800181c:	f7ff fb5c 	bl	8000ed8 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b64      	cmp	r3, #100	; 0x64
 8001828:	d907      	bls.n	800183a <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800182a:	4b71      	ldr	r3, [pc, #452]	; (80019f0 <HAL_RCC_OscConfig+0x4b8>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e34a      	b.n	8001ed0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800183a:	4b6d      	ldr	r3, [pc, #436]	; (80019f0 <HAL_RCC_OscConfig+0x4b8>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1ea      	bne.n	800181c <HAL_RCC_OscConfig+0x2e4>
 8001846:	e000      	b.n	800184a <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001848:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d06c      	beq.n	8001930 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	2b04      	cmp	r3, #4
 800185a:	d005      	beq.n	8001868 <HAL_RCC_OscConfig+0x330>
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	2b0c      	cmp	r3, #12
 8001860:	d119      	bne.n	8001896 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	2b02      	cmp	r3, #2
 8001866:	d116      	bne.n	8001896 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001868:	4b61      	ldr	r3, [pc, #388]	; (80019f0 <HAL_RCC_OscConfig+0x4b8>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001870:	2b00      	cmp	r3, #0
 8001872:	d005      	beq.n	8001880 <HAL_RCC_OscConfig+0x348>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d101      	bne.n	8001880 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e327      	b.n	8001ed0 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001880:	4b5b      	ldr	r3, [pc, #364]	; (80019f0 <HAL_RCC_OscConfig+0x4b8>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	691b      	ldr	r3, [r3, #16]
 800188c:	061b      	lsls	r3, r3, #24
 800188e:	4958      	ldr	r1, [pc, #352]	; (80019f0 <HAL_RCC_OscConfig+0x4b8>)
 8001890:	4313      	orrs	r3, r2
 8001892:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001894:	e04c      	b.n	8001930 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d029      	beq.n	80018f2 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800189e:	4b54      	ldr	r3, [pc, #336]	; (80019f0 <HAL_RCC_OscConfig+0x4b8>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a53      	ldr	r2, [pc, #332]	; (80019f0 <HAL_RCC_OscConfig+0x4b8>)
 80018a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018aa:	f7ff fb15 	bl	8000ed8 <HAL_GetTick>
 80018ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018b0:	e00e      	b.n	80018d0 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018b2:	f7ff fb11 	bl	8000ed8 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d907      	bls.n	80018d0 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018c0:	4b4b      	ldr	r3, [pc, #300]	; (80019f0 <HAL_RCC_OscConfig+0x4b8>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d101      	bne.n	80018d0 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e2ff      	b.n	8001ed0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018d0:	4b47      	ldr	r3, [pc, #284]	; (80019f0 <HAL_RCC_OscConfig+0x4b8>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d0ea      	beq.n	80018b2 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018dc:	4b44      	ldr	r3, [pc, #272]	; (80019f0 <HAL_RCC_OscConfig+0x4b8>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	691b      	ldr	r3, [r3, #16]
 80018e8:	061b      	lsls	r3, r3, #24
 80018ea:	4941      	ldr	r1, [pc, #260]	; (80019f0 <HAL_RCC_OscConfig+0x4b8>)
 80018ec:	4313      	orrs	r3, r2
 80018ee:	604b      	str	r3, [r1, #4]
 80018f0:	e01e      	b.n	8001930 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018f2:	4b3f      	ldr	r3, [pc, #252]	; (80019f0 <HAL_RCC_OscConfig+0x4b8>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a3e      	ldr	r2, [pc, #248]	; (80019f0 <HAL_RCC_OscConfig+0x4b8>)
 80018f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fe:	f7ff faeb 	bl	8000ed8 <HAL_GetTick>
 8001902:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001904:	e00e      	b.n	8001924 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001906:	f7ff fae7 	bl	8000ed8 <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b02      	cmp	r3, #2
 8001912:	d907      	bls.n	8001924 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001914:	4b36      	ldr	r3, [pc, #216]	; (80019f0 <HAL_RCC_OscConfig+0x4b8>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e2d5      	b.n	8001ed0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001924:	4b32      	ldr	r3, [pc, #200]	; (80019f0 <HAL_RCC_OscConfig+0x4b8>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800192c:	2b00      	cmp	r3, #0
 800192e:	d1ea      	bne.n	8001906 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0308 	and.w	r3, r3, #8
 8001938:	2b00      	cmp	r3, #0
 800193a:	d062      	beq.n	8001a02 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	695b      	ldr	r3, [r3, #20]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d038      	beq.n	80019b6 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d108      	bne.n	800195e <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 800194c:	4b28      	ldr	r3, [pc, #160]	; (80019f0 <HAL_RCC_OscConfig+0x4b8>)
 800194e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001952:	4a27      	ldr	r2, [pc, #156]	; (80019f0 <HAL_RCC_OscConfig+0x4b8>)
 8001954:	f023 0310 	bic.w	r3, r3, #16
 8001958:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800195c:	e007      	b.n	800196e <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 800195e:	4b24      	ldr	r3, [pc, #144]	; (80019f0 <HAL_RCC_OscConfig+0x4b8>)
 8001960:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001964:	4a22      	ldr	r2, [pc, #136]	; (80019f0 <HAL_RCC_OscConfig+0x4b8>)
 8001966:	f043 0310 	orr.w	r3, r3, #16
 800196a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800196e:	4b20      	ldr	r3, [pc, #128]	; (80019f0 <HAL_RCC_OscConfig+0x4b8>)
 8001970:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001974:	4a1e      	ldr	r2, [pc, #120]	; (80019f0 <HAL_RCC_OscConfig+0x4b8>)
 8001976:	f043 0301 	orr.w	r3, r3, #1
 800197a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800197e:	f7ff faab 	bl	8000ed8 <HAL_GetTick>
 8001982:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001984:	e00f      	b.n	80019a6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001986:	f7ff faa7 	bl	8000ed8 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b07      	cmp	r3, #7
 8001992:	d908      	bls.n	80019a6 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001994:	4b16      	ldr	r3, [pc, #88]	; (80019f0 <HAL_RCC_OscConfig+0x4b8>)
 8001996:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e294      	b.n	8001ed0 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019a6:	4b12      	ldr	r3, [pc, #72]	; (80019f0 <HAL_RCC_OscConfig+0x4b8>)
 80019a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d0e8      	beq.n	8001986 <HAL_RCC_OscConfig+0x44e>
 80019b4:	e025      	b.n	8001a02 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019b6:	4b0e      	ldr	r3, [pc, #56]	; (80019f0 <HAL_RCC_OscConfig+0x4b8>)
 80019b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019bc:	4a0c      	ldr	r2, [pc, #48]	; (80019f0 <HAL_RCC_OscConfig+0x4b8>)
 80019be:	f023 0301 	bic.w	r3, r3, #1
 80019c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c6:	f7ff fa87 	bl	8000ed8 <HAL_GetTick>
 80019ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019cc:	e012      	b.n	80019f4 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019ce:	f7ff fa83 	bl	8000ed8 <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b07      	cmp	r3, #7
 80019da:	d90b      	bls.n	80019f4 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019dc:	4b04      	ldr	r3, [pc, #16]	; (80019f0 <HAL_RCC_OscConfig+0x4b8>)
 80019de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d004      	beq.n	80019f4 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e270      	b.n	8001ed0 <HAL_RCC_OscConfig+0x998>
 80019ee:	bf00      	nop
 80019f0:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019f4:	4ba8      	ldr	r3, [pc, #672]	; (8001c98 <HAL_RCC_OscConfig+0x760>)
 80019f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1e5      	bne.n	80019ce <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0304 	and.w	r3, r3, #4
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f000 812d 	beq.w	8001c6a <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a10:	2300      	movs	r3, #0
 8001a12:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a14:	4ba0      	ldr	r3, [pc, #640]	; (8001c98 <HAL_RCC_OscConfig+0x760>)
 8001a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d10d      	bne.n	8001a3c <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a20:	4b9d      	ldr	r3, [pc, #628]	; (8001c98 <HAL_RCC_OscConfig+0x760>)
 8001a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a24:	4a9c      	ldr	r2, [pc, #624]	; (8001c98 <HAL_RCC_OscConfig+0x760>)
 8001a26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a2a:	6593      	str	r3, [r2, #88]	; 0x58
 8001a2c:	4b9a      	ldr	r3, [pc, #616]	; (8001c98 <HAL_RCC_OscConfig+0x760>)
 8001a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a34:	60bb      	str	r3, [r7, #8]
 8001a36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a3c:	4b97      	ldr	r3, [pc, #604]	; (8001c9c <HAL_RCC_OscConfig+0x764>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d11e      	bne.n	8001a86 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a48:	4b94      	ldr	r3, [pc, #592]	; (8001c9c <HAL_RCC_OscConfig+0x764>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a93      	ldr	r2, [pc, #588]	; (8001c9c <HAL_RCC_OscConfig+0x764>)
 8001a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a52:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a54:	f7ff fa40 	bl	8000ed8 <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a5a:	e00e      	b.n	8001a7a <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a5c:	f7ff fa3c 	bl	8000ed8 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d907      	bls.n	8001a7a <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a6a:	4b8c      	ldr	r3, [pc, #560]	; (8001c9c <HAL_RCC_OscConfig+0x764>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e22a      	b.n	8001ed0 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a7a:	4b88      	ldr	r3, [pc, #544]	; (8001c9c <HAL_RCC_OscConfig+0x764>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d0ea      	beq.n	8001a5c <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d01f      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f003 0304 	and.w	r3, r3, #4
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d010      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001a9e:	4b7e      	ldr	r3, [pc, #504]	; (8001c98 <HAL_RCC_OscConfig+0x760>)
 8001aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aa4:	4a7c      	ldr	r2, [pc, #496]	; (8001c98 <HAL_RCC_OscConfig+0x760>)
 8001aa6:	f043 0304 	orr.w	r3, r3, #4
 8001aaa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001aae:	4b7a      	ldr	r3, [pc, #488]	; (8001c98 <HAL_RCC_OscConfig+0x760>)
 8001ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ab4:	4a78      	ldr	r2, [pc, #480]	; (8001c98 <HAL_RCC_OscConfig+0x760>)
 8001ab6:	f043 0301 	orr.w	r3, r3, #1
 8001aba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001abe:	e018      	b.n	8001af2 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001ac0:	4b75      	ldr	r3, [pc, #468]	; (8001c98 <HAL_RCC_OscConfig+0x760>)
 8001ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ac6:	4a74      	ldr	r2, [pc, #464]	; (8001c98 <HAL_RCC_OscConfig+0x760>)
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ad0:	e00f      	b.n	8001af2 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001ad2:	4b71      	ldr	r3, [pc, #452]	; (8001c98 <HAL_RCC_OscConfig+0x760>)
 8001ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ad8:	4a6f      	ldr	r2, [pc, #444]	; (8001c98 <HAL_RCC_OscConfig+0x760>)
 8001ada:	f023 0301 	bic.w	r3, r3, #1
 8001ade:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001ae2:	4b6d      	ldr	r3, [pc, #436]	; (8001c98 <HAL_RCC_OscConfig+0x760>)
 8001ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ae8:	4a6b      	ldr	r2, [pc, #428]	; (8001c98 <HAL_RCC_OscConfig+0x760>)
 8001aea:	f023 0304 	bic.w	r3, r3, #4
 8001aee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d068      	beq.n	8001bcc <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001afa:	f7ff f9ed 	bl	8000ed8 <HAL_GetTick>
 8001afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b00:	e011      	b.n	8001b26 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b02:	f7ff f9e9 	bl	8000ed8 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d908      	bls.n	8001b26 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b14:	4b60      	ldr	r3, [pc, #384]	; (8001c98 <HAL_RCC_OscConfig+0x760>)
 8001b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e1d4      	b.n	8001ed0 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b26:	4b5c      	ldr	r3, [pc, #368]	; (8001c98 <HAL_RCC_OscConfig+0x760>)
 8001b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b2c:	f003 0302 	and.w	r3, r3, #2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d0e6      	beq.n	8001b02 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d022      	beq.n	8001b86 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001b40:	4b55      	ldr	r3, [pc, #340]	; (8001c98 <HAL_RCC_OscConfig+0x760>)
 8001b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b46:	4a54      	ldr	r2, [pc, #336]	; (8001c98 <HAL_RCC_OscConfig+0x760>)
 8001b48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001b50:	e011      	b.n	8001b76 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b52:	f7ff f9c1 	bl	8000ed8 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d908      	bls.n	8001b76 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001b64:	4b4c      	ldr	r3, [pc, #304]	; (8001c98 <HAL_RCC_OscConfig+0x760>)
 8001b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d101      	bne.n	8001b76 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e1ac      	b.n	8001ed0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001b76:	4b48      	ldr	r3, [pc, #288]	; (8001c98 <HAL_RCC_OscConfig+0x760>)
 8001b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d0e6      	beq.n	8001b52 <HAL_RCC_OscConfig+0x61a>
 8001b84:	e068      	b.n	8001c58 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001b86:	4b44      	ldr	r3, [pc, #272]	; (8001c98 <HAL_RCC_OscConfig+0x760>)
 8001b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b8c:	4a42      	ldr	r2, [pc, #264]	; (8001c98 <HAL_RCC_OscConfig+0x760>)
 8001b8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001b96:	e011      	b.n	8001bbc <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b98:	f7ff f99e 	bl	8000ed8 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d908      	bls.n	8001bbc <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001baa:	4b3b      	ldr	r3, [pc, #236]	; (8001c98 <HAL_RCC_OscConfig+0x760>)
 8001bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e189      	b.n	8001ed0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001bbc:	4b36      	ldr	r3, [pc, #216]	; (8001c98 <HAL_RCC_OscConfig+0x760>)
 8001bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1e6      	bne.n	8001b98 <HAL_RCC_OscConfig+0x660>
 8001bca:	e045      	b.n	8001c58 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bcc:	f7ff f984 	bl	8000ed8 <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bd2:	e011      	b.n	8001bf8 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bd4:	f7ff f980 	bl	8000ed8 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d908      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001be6:	4b2c      	ldr	r3, [pc, #176]	; (8001c98 <HAL_RCC_OscConfig+0x760>)
 8001be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e16b      	b.n	8001ed0 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bf8:	4b27      	ldr	r3, [pc, #156]	; (8001c98 <HAL_RCC_OscConfig+0x760>)
 8001bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1e6      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8001c06:	4b24      	ldr	r3, [pc, #144]	; (8001c98 <HAL_RCC_OscConfig+0x760>)
 8001c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d021      	beq.n	8001c58 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001c14:	4b20      	ldr	r3, [pc, #128]	; (8001c98 <HAL_RCC_OscConfig+0x760>)
 8001c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c1a:	4a1f      	ldr	r2, [pc, #124]	; (8001c98 <HAL_RCC_OscConfig+0x760>)
 8001c1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001c24:	e011      	b.n	8001c4a <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c26:	f7ff f957 	bl	8000ed8 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d908      	bls.n	8001c4a <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001c38:	4b17      	ldr	r3, [pc, #92]	; (8001c98 <HAL_RCC_OscConfig+0x760>)
 8001c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e142      	b.n	8001ed0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001c4a:	4b13      	ldr	r3, [pc, #76]	; (8001c98 <HAL_RCC_OscConfig+0x760>)
 8001c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d1e6      	bne.n	8001c26 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c58:	7ffb      	ldrb	r3, [r7, #31]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d105      	bne.n	8001c6a <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c5e:	4b0e      	ldr	r3, [pc, #56]	; (8001c98 <HAL_RCC_OscConfig+0x760>)
 8001c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c62:	4a0d      	ldr	r2, [pc, #52]	; (8001c98 <HAL_RCC_OscConfig+0x760>)
 8001c64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c68:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0320 	and.w	r3, r3, #32
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d04f      	beq.n	8001d16 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d028      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c7e:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <HAL_RCC_OscConfig+0x760>)
 8001c80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c84:	4a04      	ldr	r2, [pc, #16]	; (8001c98 <HAL_RCC_OscConfig+0x760>)
 8001c86:	f043 0301 	orr.w	r3, r3, #1
 8001c8a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c8e:	f7ff f923 	bl	8000ed8 <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c94:	e014      	b.n	8001cc0 <HAL_RCC_OscConfig+0x788>
 8001c96:	bf00      	nop
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ca0:	f7ff f91a 	bl	8000ed8 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d908      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001cae:	4b8a      	ldr	r3, [pc, #552]	; (8001ed8 <HAL_RCC_OscConfig+0x9a0>)
 8001cb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cb4:	f003 0302 	and.w	r3, r3, #2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d101      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e107      	b.n	8001ed0 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001cc0:	4b85      	ldr	r3, [pc, #532]	; (8001ed8 <HAL_RCC_OscConfig+0x9a0>)
 8001cc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d0e8      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x768>
 8001cce:	e022      	b.n	8001d16 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001cd0:	4b81      	ldr	r3, [pc, #516]	; (8001ed8 <HAL_RCC_OscConfig+0x9a0>)
 8001cd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cd6:	4a80      	ldr	r2, [pc, #512]	; (8001ed8 <HAL_RCC_OscConfig+0x9a0>)
 8001cd8:	f023 0301 	bic.w	r3, r3, #1
 8001cdc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce0:	f7ff f8fa 	bl	8000ed8 <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ce6:	e00f      	b.n	8001d08 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ce8:	f7ff f8f6 	bl	8000ed8 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d908      	bls.n	8001d08 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001cf6:	4b78      	ldr	r3, [pc, #480]	; (8001ed8 <HAL_RCC_OscConfig+0x9a0>)
 8001cf8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e0e3      	b.n	8001ed0 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d08:	4b73      	ldr	r3, [pc, #460]	; (8001ed8 <HAL_RCC_OscConfig+0x9a0>)
 8001d0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d1e8      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	f000 80d7 	beq.w	8001ece <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d20:	4b6d      	ldr	r3, [pc, #436]	; (8001ed8 <HAL_RCC_OscConfig+0x9a0>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f003 030c 	and.w	r3, r3, #12
 8001d28:	2b0c      	cmp	r3, #12
 8001d2a:	f000 8091 	beq.w	8001e50 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d166      	bne.n	8001e04 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d36:	4b68      	ldr	r3, [pc, #416]	; (8001ed8 <HAL_RCC_OscConfig+0x9a0>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a67      	ldr	r2, [pc, #412]	; (8001ed8 <HAL_RCC_OscConfig+0x9a0>)
 8001d3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d42:	f7ff f8c9 	bl	8000ed8 <HAL_GetTick>
 8001d46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d48:	e00e      	b.n	8001d68 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d4a:	f7ff f8c5 	bl	8000ed8 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d907      	bls.n	8001d68 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d58:	4b5f      	ldr	r3, [pc, #380]	; (8001ed8 <HAL_RCC_OscConfig+0x9a0>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e0b3      	b.n	8001ed0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d68:	4b5b      	ldr	r3, [pc, #364]	; (8001ed8 <HAL_RCC_OscConfig+0x9a0>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1ea      	bne.n	8001d4a <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d74:	4b58      	ldr	r3, [pc, #352]	; (8001ed8 <HAL_RCC_OscConfig+0x9a0>)
 8001d76:	68da      	ldr	r2, [r3, #12]
 8001d78:	4b58      	ldr	r3, [pc, #352]	; (8001edc <HAL_RCC_OscConfig+0x9a4>)
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d84:	3a01      	subs	r2, #1
 8001d86:	0112      	lsls	r2, r2, #4
 8001d88:	4311      	orrs	r1, r2
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d8e:	0212      	lsls	r2, r2, #8
 8001d90:	4311      	orrs	r1, r2
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d96:	0852      	lsrs	r2, r2, #1
 8001d98:	3a01      	subs	r2, #1
 8001d9a:	0552      	lsls	r2, r2, #21
 8001d9c:	4311      	orrs	r1, r2
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001da2:	0852      	lsrs	r2, r2, #1
 8001da4:	3a01      	subs	r2, #1
 8001da6:	0652      	lsls	r2, r2, #25
 8001da8:	4311      	orrs	r1, r2
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001dae:	06d2      	lsls	r2, r2, #27
 8001db0:	430a      	orrs	r2, r1
 8001db2:	4949      	ldr	r1, [pc, #292]	; (8001ed8 <HAL_RCC_OscConfig+0x9a0>)
 8001db4:	4313      	orrs	r3, r2
 8001db6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001db8:	4b47      	ldr	r3, [pc, #284]	; (8001ed8 <HAL_RCC_OscConfig+0x9a0>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a46      	ldr	r2, [pc, #280]	; (8001ed8 <HAL_RCC_OscConfig+0x9a0>)
 8001dbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dc2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001dc4:	4b44      	ldr	r3, [pc, #272]	; (8001ed8 <HAL_RCC_OscConfig+0x9a0>)
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	4a43      	ldr	r2, [pc, #268]	; (8001ed8 <HAL_RCC_OscConfig+0x9a0>)
 8001dca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dce:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd0:	f7ff f882 	bl	8000ed8 <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dd6:	e00e      	b.n	8001df6 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dd8:	f7ff f87e 	bl	8000ed8 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d907      	bls.n	8001df6 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001de6:	4b3c      	ldr	r3, [pc, #240]	; (8001ed8 <HAL_RCC_OscConfig+0x9a0>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e06c      	b.n	8001ed0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001df6:	4b38      	ldr	r3, [pc, #224]	; (8001ed8 <HAL_RCC_OscConfig+0x9a0>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d0ea      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x8a0>
 8001e02:	e064      	b.n	8001ece <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e04:	4b34      	ldr	r3, [pc, #208]	; (8001ed8 <HAL_RCC_OscConfig+0x9a0>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a33      	ldr	r2, [pc, #204]	; (8001ed8 <HAL_RCC_OscConfig+0x9a0>)
 8001e0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e10:	f7ff f862 	bl	8000ed8 <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e16:	e00e      	b.n	8001e36 <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e18:	f7ff f85e 	bl	8000ed8 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d907      	bls.n	8001e36 <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e26:	4b2c      	ldr	r3, [pc, #176]	; (8001ed8 <HAL_RCC_OscConfig+0x9a0>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e04c      	b.n	8001ed0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e36:	4b28      	ldr	r3, [pc, #160]	; (8001ed8 <HAL_RCC_OscConfig+0x9a0>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1ea      	bne.n	8001e18 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001e42:	4b25      	ldr	r3, [pc, #148]	; (8001ed8 <HAL_RCC_OscConfig+0x9a0>)
 8001e44:	68da      	ldr	r2, [r3, #12]
 8001e46:	4924      	ldr	r1, [pc, #144]	; (8001ed8 <HAL_RCC_OscConfig+0x9a0>)
 8001e48:	4b25      	ldr	r3, [pc, #148]	; (8001ee0 <HAL_RCC_OscConfig+0x9a8>)
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	60cb      	str	r3, [r1, #12]
 8001e4e:	e03e      	b.n	8001ece <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d101      	bne.n	8001e5c <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e039      	b.n	8001ed0 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8001e5c:	4b1e      	ldr	r3, [pc, #120]	; (8001ed8 <HAL_RCC_OscConfig+0x9a0>)
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	f003 0203 	and.w	r2, r3, #3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d12c      	bne.n	8001eca <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d123      	bne.n	8001eca <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e8c:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d11b      	bne.n	8001eca <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e9c:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d113      	bne.n	8001eca <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eac:	085b      	lsrs	r3, r3, #1
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d109      	bne.n	8001eca <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec0:	085b      	lsrs	r3, r3, #1
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d001      	beq.n	8001ece <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e000      	b.n	8001ed0 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3720      	adds	r7, #32
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	019f800c 	.word	0x019f800c
 8001ee0:	feeefffc 	.word	0xfeeefffc

08001ee4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d101      	bne.n	8001efc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e11c      	b.n	8002136 <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001efc:	4b90      	ldr	r3, [pc, #576]	; (8002140 <HAL_RCC_ClockConfig+0x25c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 030f 	and.w	r3, r3, #15
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d910      	bls.n	8001f2c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f0a:	4b8d      	ldr	r3, [pc, #564]	; (8002140 <HAL_RCC_ClockConfig+0x25c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f023 020f 	bic.w	r2, r3, #15
 8001f12:	498b      	ldr	r1, [pc, #556]	; (8002140 <HAL_RCC_ClockConfig+0x25c>)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f1a:	4b89      	ldr	r3, [pc, #548]	; (8002140 <HAL_RCC_ClockConfig+0x25c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 030f 	and.w	r3, r3, #15
 8001f22:	683a      	ldr	r2, [r7, #0]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d001      	beq.n	8001f2c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e104      	b.n	8002136 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d010      	beq.n	8001f5a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	4b81      	ldr	r3, [pc, #516]	; (8002144 <HAL_RCC_ClockConfig+0x260>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d908      	bls.n	8001f5a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f48:	4b7e      	ldr	r3, [pc, #504]	; (8002144 <HAL_RCC_ClockConfig+0x260>)
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	497b      	ldr	r1, [pc, #492]	; (8002144 <HAL_RCC_ClockConfig+0x260>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f000 8085 	beq.w	8002072 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	2b03      	cmp	r3, #3
 8001f6e:	d11f      	bne.n	8001fb0 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f70:	4b74      	ldr	r3, [pc, #464]	; (8002144 <HAL_RCC_ClockConfig+0x260>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d101      	bne.n	8001f80 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e0da      	b.n	8002136 <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001f80:	f000 f9fc 	bl	800237c <RCC_GetSysClockFreqFromPLLSource>
 8001f84:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	4a6f      	ldr	r2, [pc, #444]	; (8002148 <HAL_RCC_ClockConfig+0x264>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d947      	bls.n	800201e <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001f8e:	4b6d      	ldr	r3, [pc, #436]	; (8002144 <HAL_RCC_ClockConfig+0x260>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d141      	bne.n	800201e <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f9a:	4b6a      	ldr	r3, [pc, #424]	; (8002144 <HAL_RCC_ClockConfig+0x260>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fa2:	4a68      	ldr	r2, [pc, #416]	; (8002144 <HAL_RCC_ClockConfig+0x260>)
 8001fa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fa8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001faa:	2380      	movs	r3, #128	; 0x80
 8001fac:	617b      	str	r3, [r7, #20]
 8001fae:	e036      	b.n	800201e <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d107      	bne.n	8001fc8 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fb8:	4b62      	ldr	r3, [pc, #392]	; (8002144 <HAL_RCC_ClockConfig+0x260>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d115      	bne.n	8001ff0 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e0b6      	b.n	8002136 <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d107      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fd0:	4b5c      	ldr	r3, [pc, #368]	; (8002144 <HAL_RCC_ClockConfig+0x260>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d109      	bne.n	8001ff0 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e0aa      	b.n	8002136 <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fe0:	4b58      	ldr	r3, [pc, #352]	; (8002144 <HAL_RCC_ClockConfig+0x260>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d101      	bne.n	8001ff0 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e0a2      	b.n	8002136 <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001ff0:	f000 f8b0 	bl	8002154 <HAL_RCC_GetSysClockFreq>
 8001ff4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	4a53      	ldr	r2, [pc, #332]	; (8002148 <HAL_RCC_ClockConfig+0x264>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d90f      	bls.n	800201e <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001ffe:	4b51      	ldr	r3, [pc, #324]	; (8002144 <HAL_RCC_ClockConfig+0x260>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d109      	bne.n	800201e <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800200a:	4b4e      	ldr	r3, [pc, #312]	; (8002144 <HAL_RCC_ClockConfig+0x260>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002012:	4a4c      	ldr	r2, [pc, #304]	; (8002144 <HAL_RCC_ClockConfig+0x260>)
 8002014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002018:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800201a:	2380      	movs	r3, #128	; 0x80
 800201c:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800201e:	4b49      	ldr	r3, [pc, #292]	; (8002144 <HAL_RCC_ClockConfig+0x260>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f023 0203 	bic.w	r2, r3, #3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	4946      	ldr	r1, [pc, #280]	; (8002144 <HAL_RCC_ClockConfig+0x260>)
 800202c:	4313      	orrs	r3, r2
 800202e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002030:	f7fe ff52 	bl	8000ed8 <HAL_GetTick>
 8002034:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002036:	e013      	b.n	8002060 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002038:	f7fe ff4e 	bl	8000ed8 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	f241 3288 	movw	r2, #5000	; 0x1388
 8002046:	4293      	cmp	r3, r2
 8002048:	d90a      	bls.n	8002060 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800204a:	4b3e      	ldr	r3, [pc, #248]	; (8002144 <HAL_RCC_ClockConfig+0x260>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f003 020c 	and.w	r2, r3, #12
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	429a      	cmp	r2, r3
 800205a:	d001      	beq.n	8002060 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e06a      	b.n	8002136 <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002060:	4b38      	ldr	r3, [pc, #224]	; (8002144 <HAL_RCC_ClockConfig+0x260>)
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f003 020c 	and.w	r2, r3, #12
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	429a      	cmp	r2, r3
 8002070:	d1e2      	bne.n	8002038 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	2b80      	cmp	r3, #128	; 0x80
 8002076:	d105      	bne.n	8002084 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002078:	4b32      	ldr	r3, [pc, #200]	; (8002144 <HAL_RCC_ClockConfig+0x260>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	4a31      	ldr	r2, [pc, #196]	; (8002144 <HAL_RCC_ClockConfig+0x260>)
 800207e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002082:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d010      	beq.n	80020b2 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	4b2b      	ldr	r3, [pc, #172]	; (8002144 <HAL_RCC_ClockConfig+0x260>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800209c:	429a      	cmp	r2, r3
 800209e:	d208      	bcs.n	80020b2 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020a0:	4b28      	ldr	r3, [pc, #160]	; (8002144 <HAL_RCC_ClockConfig+0x260>)
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	4925      	ldr	r1, [pc, #148]	; (8002144 <HAL_RCC_ClockConfig+0x260>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020b2:	4b23      	ldr	r3, [pc, #140]	; (8002140 <HAL_RCC_ClockConfig+0x25c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d210      	bcs.n	80020e2 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020c0:	4b1f      	ldr	r3, [pc, #124]	; (8002140 <HAL_RCC_ClockConfig+0x25c>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f023 020f 	bic.w	r2, r3, #15
 80020c8:	491d      	ldr	r1, [pc, #116]	; (8002140 <HAL_RCC_ClockConfig+0x25c>)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020d0:	4b1b      	ldr	r3, [pc, #108]	; (8002140 <HAL_RCC_ClockConfig+0x25c>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 030f 	and.w	r3, r3, #15
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d001      	beq.n	80020e2 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e029      	b.n	8002136 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0304 	and.w	r3, r3, #4
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d008      	beq.n	8002100 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020ee:	4b15      	ldr	r3, [pc, #84]	; (8002144 <HAL_RCC_ClockConfig+0x260>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	4912      	ldr	r1, [pc, #72]	; (8002144 <HAL_RCC_ClockConfig+0x260>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0308 	and.w	r3, r3, #8
 8002108:	2b00      	cmp	r3, #0
 800210a:	d009      	beq.n	8002120 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800210c:	4b0d      	ldr	r3, [pc, #52]	; (8002144 <HAL_RCC_ClockConfig+0x260>)
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	691b      	ldr	r3, [r3, #16]
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	490a      	ldr	r1, [pc, #40]	; (8002144 <HAL_RCC_ClockConfig+0x260>)
 800211c:	4313      	orrs	r3, r2
 800211e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002120:	f000 f8b4 	bl	800228c <HAL_RCC_GetHCLKFreq>
 8002124:	4603      	mov	r3, r0
 8002126:	4a09      	ldr	r2, [pc, #36]	; (800214c <HAL_RCC_ClockConfig+0x268>)
 8002128:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800212a:	4b09      	ldr	r3, [pc, #36]	; (8002150 <HAL_RCC_ClockConfig+0x26c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4618      	mov	r0, r3
 8002130:	f7fe fe82 	bl	8000e38 <HAL_InitTick>
 8002134:	4603      	mov	r3, r0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3718      	adds	r7, #24
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40022000 	.word	0x40022000
 8002144:	40021000 	.word	0x40021000
 8002148:	04c4b400 	.word	0x04c4b400
 800214c:	20000060 	.word	0x20000060
 8002150:	20000064 	.word	0x20000064

08002154 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002154:	b480      	push	{r7}
 8002156:	b089      	sub	sp, #36	; 0x24
 8002158:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800215a:	2300      	movs	r3, #0
 800215c:	61fb      	str	r3, [r7, #28]
 800215e:	2300      	movs	r3, #0
 8002160:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002162:	4b47      	ldr	r3, [pc, #284]	; (8002280 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f003 030c 	and.w	r3, r3, #12
 800216a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800216c:	4b44      	ldr	r3, [pc, #272]	; (8002280 <HAL_RCC_GetSysClockFreq+0x12c>)
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	f003 0303 	and.w	r3, r3, #3
 8002174:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d005      	beq.n	8002188 <HAL_RCC_GetSysClockFreq+0x34>
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	2b0c      	cmp	r3, #12
 8002180:	d121      	bne.n	80021c6 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d11e      	bne.n	80021c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002188:	4b3d      	ldr	r3, [pc, #244]	; (8002280 <HAL_RCC_GetSysClockFreq+0x12c>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0308 	and.w	r3, r3, #8
 8002190:	2b00      	cmp	r3, #0
 8002192:	d107      	bne.n	80021a4 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002194:	4b3a      	ldr	r3, [pc, #232]	; (8002280 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002196:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800219a:	0a1b      	lsrs	r3, r3, #8
 800219c:	f003 030f 	and.w	r3, r3, #15
 80021a0:	61fb      	str	r3, [r7, #28]
 80021a2:	e005      	b.n	80021b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80021a4:	4b36      	ldr	r3, [pc, #216]	; (8002280 <HAL_RCC_GetSysClockFreq+0x12c>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	091b      	lsrs	r3, r3, #4
 80021aa:	f003 030f 	and.w	r3, r3, #15
 80021ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 80021b0:	4a34      	ldr	r2, [pc, #208]	; (8002284 <HAL_RCC_GetSysClockFreq+0x130>)
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021b8:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d10d      	bne.n	80021dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80021c4:	e00a      	b.n	80021dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	2b04      	cmp	r3, #4
 80021ca:	d102      	bne.n	80021d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80021cc:	4b2e      	ldr	r3, [pc, #184]	; (8002288 <HAL_RCC_GetSysClockFreq+0x134>)
 80021ce:	61bb      	str	r3, [r7, #24]
 80021d0:	e004      	b.n	80021dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	2b08      	cmp	r3, #8
 80021d6:	d101      	bne.n	80021dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021d8:	4b2b      	ldr	r3, [pc, #172]	; (8002288 <HAL_RCC_GetSysClockFreq+0x134>)
 80021da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	2b0c      	cmp	r3, #12
 80021e0:	d146      	bne.n	8002270 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80021e2:	4b27      	ldr	r3, [pc, #156]	; (8002280 <HAL_RCC_GetSysClockFreq+0x12c>)
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	f003 0303 	and.w	r3, r3, #3
 80021ea:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021ec:	4b24      	ldr	r3, [pc, #144]	; (8002280 <HAL_RCC_GetSysClockFreq+0x12c>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	091b      	lsrs	r3, r3, #4
 80021f2:	f003 030f 	and.w	r3, r3, #15
 80021f6:	3301      	adds	r3, #1
 80021f8:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d003      	beq.n	8002208 <HAL_RCC_GetSysClockFreq+0xb4>
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	2b03      	cmp	r3, #3
 8002204:	d00d      	beq.n	8002222 <HAL_RCC_GetSysClockFreq+0xce>
 8002206:	e019      	b.n	800223c <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002208:	4a1f      	ldr	r2, [pc, #124]	; (8002288 <HAL_RCC_GetSysClockFreq+0x134>)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002210:	4a1b      	ldr	r2, [pc, #108]	; (8002280 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002212:	68d2      	ldr	r2, [r2, #12]
 8002214:	0a12      	lsrs	r2, r2, #8
 8002216:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800221a:	fb02 f303 	mul.w	r3, r2, r3
 800221e:	617b      	str	r3, [r7, #20]
        break;
 8002220:	e019      	b.n	8002256 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002222:	4a19      	ldr	r2, [pc, #100]	; (8002288 <HAL_RCC_GetSysClockFreq+0x134>)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	fbb2 f3f3 	udiv	r3, r2, r3
 800222a:	4a15      	ldr	r2, [pc, #84]	; (8002280 <HAL_RCC_GetSysClockFreq+0x12c>)
 800222c:	68d2      	ldr	r2, [r2, #12]
 800222e:	0a12      	lsrs	r2, r2, #8
 8002230:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002234:	fb02 f303 	mul.w	r3, r2, r3
 8002238:	617b      	str	r3, [r7, #20]
        break;
 800223a:	e00c      	b.n	8002256 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800223c:	69fa      	ldr	r2, [r7, #28]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	fbb2 f3f3 	udiv	r3, r2, r3
 8002244:	4a0e      	ldr	r2, [pc, #56]	; (8002280 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002246:	68d2      	ldr	r2, [r2, #12]
 8002248:	0a12      	lsrs	r2, r2, #8
 800224a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800224e:	fb02 f303 	mul.w	r3, r2, r3
 8002252:	617b      	str	r3, [r7, #20]
        break;
 8002254:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8002256:	4b0a      	ldr	r3, [pc, #40]	; (8002280 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	0e5b      	lsrs	r3, r3, #25
 800225c:	f003 0303 	and.w	r3, r3, #3
 8002260:	3301      	adds	r3, #1
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002266:	697a      	ldr	r2, [r7, #20]
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	fbb2 f3f3 	udiv	r3, r2, r3
 800226e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002270:	69bb      	ldr	r3, [r7, #24]
}
 8002272:	4618      	mov	r0, r3
 8002274:	3724      	adds	r7, #36	; 0x24
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	40021000 	.word	0x40021000
 8002284:	08003528 	.word	0x08003528
 8002288:	00f42400 	.word	0x00f42400

0800228c <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8002290:	f7ff ff60 	bl	8002154 <HAL_RCC_GetSysClockFreq>
 8002294:	4602      	mov	r2, r0
 8002296:	4b05      	ldr	r3, [pc, #20]	; (80022ac <HAL_RCC_GetHCLKFreq+0x20>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	091b      	lsrs	r3, r3, #4
 800229c:	f003 030f 	and.w	r3, r3, #15
 80022a0:	4903      	ldr	r1, [pc, #12]	; (80022b0 <HAL_RCC_GetHCLKFreq+0x24>)
 80022a2:	5ccb      	ldrb	r3, [r1, r3]
 80022a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40021000 	.word	0x40021000
 80022b0:	08003518 	.word	0x08003518

080022b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80022bc:	2300      	movs	r3, #0
 80022be:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80022c0:	4b2c      	ldr	r3, [pc, #176]	; (8002374 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80022c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d003      	beq.n	80022d4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80022cc:	f7ff f8a6 	bl	800141c <HAL_PWREx_GetVoltageRange>
 80022d0:	6138      	str	r0, [r7, #16]
 80022d2:	e014      	b.n	80022fe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80022d4:	4b27      	ldr	r3, [pc, #156]	; (8002374 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80022d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d8:	4a26      	ldr	r2, [pc, #152]	; (8002374 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80022da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022de:	6593      	str	r3, [r2, #88]	; 0x58
 80022e0:	4b24      	ldr	r3, [pc, #144]	; (8002374 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80022e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e8:	60fb      	str	r3, [r7, #12]
 80022ea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80022ec:	f7ff f896 	bl	800141c <HAL_PWREx_GetVoltageRange>
 80022f0:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 80022f2:	4b20      	ldr	r3, [pc, #128]	; (8002374 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80022f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f6:	4a1f      	ldr	r2, [pc, #124]	; (8002374 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80022f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022fc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d003      	beq.n	800230c <RCC_SetFlashLatencyFromMSIRange+0x58>
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800230a:	d10b      	bne.n	8002324 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b80      	cmp	r3, #128	; 0x80
 8002310:	d919      	bls.n	8002346 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2ba0      	cmp	r3, #160	; 0xa0
 8002316:	d902      	bls.n	800231e <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002318:	2302      	movs	r3, #2
 800231a:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 800231c:	e013      	b.n	8002346 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800231e:	2301      	movs	r3, #1
 8002320:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8002322:	e010      	b.n	8002346 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b80      	cmp	r3, #128	; 0x80
 8002328:	d902      	bls.n	8002330 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800232a:	2303      	movs	r3, #3
 800232c:	617b      	str	r3, [r7, #20]
 800232e:	e00a      	b.n	8002346 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2b80      	cmp	r3, #128	; 0x80
 8002334:	d102      	bne.n	800233c <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002336:	2302      	movs	r3, #2
 8002338:	617b      	str	r3, [r7, #20]
 800233a:	e004      	b.n	8002346 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2b70      	cmp	r3, #112	; 0x70
 8002340:	d101      	bne.n	8002346 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002342:	2301      	movs	r3, #1
 8002344:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002346:	4b0c      	ldr	r3, [pc, #48]	; (8002378 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f023 020f 	bic.w	r2, r3, #15
 800234e:	490a      	ldr	r1, [pc, #40]	; (8002378 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	4313      	orrs	r3, r2
 8002354:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002356:	4b08      	ldr	r3, [pc, #32]	; (8002378 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 030f 	and.w	r3, r3, #15
 800235e:	697a      	ldr	r2, [r7, #20]
 8002360:	429a      	cmp	r2, r3
 8002362:	d001      	beq.n	8002368 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e000      	b.n	800236a <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3718      	adds	r7, #24
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	40021000 	.word	0x40021000
 8002378:	40022000 	.word	0x40022000

0800237c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800237c:	b480      	push	{r7}
 800237e:	b087      	sub	sp, #28
 8002380:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002382:	4b31      	ldr	r3, [pc, #196]	; (8002448 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800238c:	4b2e      	ldr	r3, [pc, #184]	; (8002448 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	091b      	lsrs	r3, r3, #4
 8002392:	f003 030f 	and.w	r3, r3, #15
 8002396:	3301      	adds	r3, #1
 8002398:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2b03      	cmp	r3, #3
 800239e:	d015      	beq.n	80023cc <RCC_GetSysClockFreqFromPLLSource+0x50>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2b03      	cmp	r3, #3
 80023a4:	d839      	bhi.n	800241a <RCC_GetSysClockFreqFromPLLSource+0x9e>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d01c      	beq.n	80023e6 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d133      	bne.n	800241a <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80023b2:	4a26      	ldr	r2, [pc, #152]	; (800244c <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ba:	4a23      	ldr	r2, [pc, #140]	; (8002448 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80023bc:	68d2      	ldr	r2, [r2, #12]
 80023be:	0a12      	lsrs	r2, r2, #8
 80023c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80023c4:	fb02 f303 	mul.w	r3, r2, r3
 80023c8:	613b      	str	r3, [r7, #16]
      break;
 80023ca:	e029      	b.n	8002420 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80023cc:	4a1f      	ldr	r2, [pc, #124]	; (800244c <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d4:	4a1c      	ldr	r2, [pc, #112]	; (8002448 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80023d6:	68d2      	ldr	r2, [r2, #12]
 80023d8:	0a12      	lsrs	r2, r2, #8
 80023da:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80023de:	fb02 f303 	mul.w	r3, r2, r3
 80023e2:	613b      	str	r3, [r7, #16]
      break;
 80023e4:	e01c      	b.n	8002420 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80023e6:	4b18      	ldr	r3, [pc, #96]	; (8002448 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0308 	and.w	r3, r3, #8
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d107      	bne.n	8002402 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80023f2:	4b15      	ldr	r3, [pc, #84]	; (8002448 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80023f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023f8:	0a1b      	lsrs	r3, r3, #8
 80023fa:	f003 030f 	and.w	r3, r3, #15
 80023fe:	617b      	str	r3, [r7, #20]
 8002400:	e005      	b.n	800240e <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002402:	4b11      	ldr	r3, [pc, #68]	; (8002448 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	091b      	lsrs	r3, r3, #4
 8002408:	f003 030f 	and.w	r3, r3, #15
 800240c:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 800240e:	4a10      	ldr	r2, [pc, #64]	; (8002450 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002416:	613b      	str	r3, [r7, #16]
        break;
 8002418:	e002      	b.n	8002420 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 800241a:	2300      	movs	r3, #0
 800241c:	613b      	str	r3, [r7, #16]
      break;
 800241e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8002420:	4b09      	ldr	r3, [pc, #36]	; (8002448 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	0e5b      	lsrs	r3, r3, #25
 8002426:	f003 0303 	and.w	r3, r3, #3
 800242a:	3301      	adds	r3, #1
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002430:	693a      	ldr	r2, [r7, #16]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	fbb2 f3f3 	udiv	r3, r2, r3
 8002438:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800243a:	683b      	ldr	r3, [r7, #0]
}
 800243c:	4618      	mov	r0, r3
 800243e:	371c      	adds	r7, #28
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr
 8002448:	40021000 	.word	0x40021000
 800244c:	00f42400 	.word	0x00f42400
 8002450:	08003528 	.word	0x08003528

08002454 <malloc>:
 8002454:	4b02      	ldr	r3, [pc, #8]	; (8002460 <malloc+0xc>)
 8002456:	4601      	mov	r1, r0
 8002458:	6818      	ldr	r0, [r3, #0]
 800245a:	f000 b823 	b.w	80024a4 <_malloc_r>
 800245e:	bf00      	nop
 8002460:	200000c4 	.word	0x200000c4

08002464 <sbrk_aligned>:
 8002464:	b570      	push	{r4, r5, r6, lr}
 8002466:	4e0e      	ldr	r6, [pc, #56]	; (80024a0 <sbrk_aligned+0x3c>)
 8002468:	460c      	mov	r4, r1
 800246a:	4605      	mov	r5, r0
 800246c:	6831      	ldr	r1, [r6, #0]
 800246e:	b911      	cbnz	r1, 8002476 <sbrk_aligned+0x12>
 8002470:	f000 f9e4 	bl	800283c <_sbrk_r>
 8002474:	6030      	str	r0, [r6, #0]
 8002476:	4621      	mov	r1, r4
 8002478:	4628      	mov	r0, r5
 800247a:	f000 f9df 	bl	800283c <_sbrk_r>
 800247e:	1c43      	adds	r3, r0, #1
 8002480:	d00a      	beq.n	8002498 <sbrk_aligned+0x34>
 8002482:	1cc4      	adds	r4, r0, #3
 8002484:	f024 0403 	bic.w	r4, r4, #3
 8002488:	42a0      	cmp	r0, r4
 800248a:	d007      	beq.n	800249c <sbrk_aligned+0x38>
 800248c:	1a21      	subs	r1, r4, r0
 800248e:	4628      	mov	r0, r5
 8002490:	f000 f9d4 	bl	800283c <_sbrk_r>
 8002494:	3001      	adds	r0, #1
 8002496:	d101      	bne.n	800249c <sbrk_aligned+0x38>
 8002498:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800249c:	4620      	mov	r0, r4
 800249e:	bd70      	pop	{r4, r5, r6, pc}
 80024a0:	200000f0 	.word	0x200000f0

080024a4 <_malloc_r>:
 80024a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80024a8:	1ccd      	adds	r5, r1, #3
 80024aa:	4607      	mov	r7, r0
 80024ac:	f025 0503 	bic.w	r5, r5, #3
 80024b0:	3508      	adds	r5, #8
 80024b2:	2d0c      	cmp	r5, #12
 80024b4:	bf38      	it	cc
 80024b6:	250c      	movcc	r5, #12
 80024b8:	2d00      	cmp	r5, #0
 80024ba:	db01      	blt.n	80024c0 <_malloc_r+0x1c>
 80024bc:	42a9      	cmp	r1, r5
 80024be:	d905      	bls.n	80024cc <_malloc_r+0x28>
 80024c0:	230c      	movs	r3, #12
 80024c2:	2600      	movs	r6, #0
 80024c4:	603b      	str	r3, [r7, #0]
 80024c6:	4630      	mov	r0, r6
 80024c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80024cc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80025a0 <_malloc_r+0xfc>
 80024d0:	f000 f868 	bl	80025a4 <__malloc_lock>
 80024d4:	f8d8 3000 	ldr.w	r3, [r8]
 80024d8:	461c      	mov	r4, r3
 80024da:	bb5c      	cbnz	r4, 8002534 <_malloc_r+0x90>
 80024dc:	4629      	mov	r1, r5
 80024de:	4638      	mov	r0, r7
 80024e0:	f7ff ffc0 	bl	8002464 <sbrk_aligned>
 80024e4:	1c43      	adds	r3, r0, #1
 80024e6:	4604      	mov	r4, r0
 80024e8:	d155      	bne.n	8002596 <_malloc_r+0xf2>
 80024ea:	f8d8 4000 	ldr.w	r4, [r8]
 80024ee:	4626      	mov	r6, r4
 80024f0:	2e00      	cmp	r6, #0
 80024f2:	d145      	bne.n	8002580 <_malloc_r+0xdc>
 80024f4:	2c00      	cmp	r4, #0
 80024f6:	d048      	beq.n	800258a <_malloc_r+0xe6>
 80024f8:	6823      	ldr	r3, [r4, #0]
 80024fa:	4631      	mov	r1, r6
 80024fc:	4638      	mov	r0, r7
 80024fe:	eb04 0903 	add.w	r9, r4, r3
 8002502:	f000 f99b 	bl	800283c <_sbrk_r>
 8002506:	4581      	cmp	r9, r0
 8002508:	d13f      	bne.n	800258a <_malloc_r+0xe6>
 800250a:	6821      	ldr	r1, [r4, #0]
 800250c:	4638      	mov	r0, r7
 800250e:	1a6d      	subs	r5, r5, r1
 8002510:	4629      	mov	r1, r5
 8002512:	f7ff ffa7 	bl	8002464 <sbrk_aligned>
 8002516:	3001      	adds	r0, #1
 8002518:	d037      	beq.n	800258a <_malloc_r+0xe6>
 800251a:	6823      	ldr	r3, [r4, #0]
 800251c:	442b      	add	r3, r5
 800251e:	6023      	str	r3, [r4, #0]
 8002520:	f8d8 3000 	ldr.w	r3, [r8]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d038      	beq.n	800259a <_malloc_r+0xf6>
 8002528:	685a      	ldr	r2, [r3, #4]
 800252a:	42a2      	cmp	r2, r4
 800252c:	d12b      	bne.n	8002586 <_malloc_r+0xe2>
 800252e:	2200      	movs	r2, #0
 8002530:	605a      	str	r2, [r3, #4]
 8002532:	e00f      	b.n	8002554 <_malloc_r+0xb0>
 8002534:	6822      	ldr	r2, [r4, #0]
 8002536:	1b52      	subs	r2, r2, r5
 8002538:	d41f      	bmi.n	800257a <_malloc_r+0xd6>
 800253a:	2a0b      	cmp	r2, #11
 800253c:	d917      	bls.n	800256e <_malloc_r+0xca>
 800253e:	1961      	adds	r1, r4, r5
 8002540:	42a3      	cmp	r3, r4
 8002542:	6025      	str	r5, [r4, #0]
 8002544:	bf18      	it	ne
 8002546:	6059      	strne	r1, [r3, #4]
 8002548:	6863      	ldr	r3, [r4, #4]
 800254a:	bf08      	it	eq
 800254c:	f8c8 1000 	streq.w	r1, [r8]
 8002550:	5162      	str	r2, [r4, r5]
 8002552:	604b      	str	r3, [r1, #4]
 8002554:	f104 060b 	add.w	r6, r4, #11
 8002558:	4638      	mov	r0, r7
 800255a:	f000 f829 	bl	80025b0 <__malloc_unlock>
 800255e:	1d23      	adds	r3, r4, #4
 8002560:	f026 0607 	bic.w	r6, r6, #7
 8002564:	1af2      	subs	r2, r6, r3
 8002566:	d0ae      	beq.n	80024c6 <_malloc_r+0x22>
 8002568:	1b9b      	subs	r3, r3, r6
 800256a:	50a3      	str	r3, [r4, r2]
 800256c:	e7ab      	b.n	80024c6 <_malloc_r+0x22>
 800256e:	42a3      	cmp	r3, r4
 8002570:	6862      	ldr	r2, [r4, #4]
 8002572:	d1dd      	bne.n	8002530 <_malloc_r+0x8c>
 8002574:	f8c8 2000 	str.w	r2, [r8]
 8002578:	e7ec      	b.n	8002554 <_malloc_r+0xb0>
 800257a:	4623      	mov	r3, r4
 800257c:	6864      	ldr	r4, [r4, #4]
 800257e:	e7ac      	b.n	80024da <_malloc_r+0x36>
 8002580:	4634      	mov	r4, r6
 8002582:	6876      	ldr	r6, [r6, #4]
 8002584:	e7b4      	b.n	80024f0 <_malloc_r+0x4c>
 8002586:	4613      	mov	r3, r2
 8002588:	e7cc      	b.n	8002524 <_malloc_r+0x80>
 800258a:	230c      	movs	r3, #12
 800258c:	4638      	mov	r0, r7
 800258e:	603b      	str	r3, [r7, #0]
 8002590:	f000 f80e 	bl	80025b0 <__malloc_unlock>
 8002594:	e797      	b.n	80024c6 <_malloc_r+0x22>
 8002596:	6025      	str	r5, [r4, #0]
 8002598:	e7dc      	b.n	8002554 <_malloc_r+0xb0>
 800259a:	605b      	str	r3, [r3, #4]
 800259c:	deff      	udf	#255	; 0xff
 800259e:	bf00      	nop
 80025a0:	200000ec 	.word	0x200000ec

080025a4 <__malloc_lock>:
 80025a4:	4801      	ldr	r0, [pc, #4]	; (80025ac <__malloc_lock+0x8>)
 80025a6:	f000 b984 	b.w	80028b2 <__retarget_lock_acquire_recursive>
 80025aa:	bf00      	nop
 80025ac:	20000230 	.word	0x20000230

080025b0 <__malloc_unlock>:
 80025b0:	4801      	ldr	r0, [pc, #4]	; (80025b8 <__malloc_unlock+0x8>)
 80025b2:	f000 b97f 	b.w	80028b4 <__retarget_lock_release_recursive>
 80025b6:	bf00      	nop
 80025b8:	20000230 	.word	0x20000230

080025bc <std>:
 80025bc:	2300      	movs	r3, #0
 80025be:	b510      	push	{r4, lr}
 80025c0:	4604      	mov	r4, r0
 80025c2:	6083      	str	r3, [r0, #8]
 80025c4:	8181      	strh	r1, [r0, #12]
 80025c6:	4619      	mov	r1, r3
 80025c8:	6643      	str	r3, [r0, #100]	; 0x64
 80025ca:	81c2      	strh	r2, [r0, #14]
 80025cc:	2208      	movs	r2, #8
 80025ce:	6183      	str	r3, [r0, #24]
 80025d0:	e9c0 3300 	strd	r3, r3, [r0]
 80025d4:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80025d8:	305c      	adds	r0, #92	; 0x5c
 80025da:	f000 f927 	bl	800282c <memset>
 80025de:	4b0d      	ldr	r3, [pc, #52]	; (8002614 <std+0x58>)
 80025e0:	6224      	str	r4, [r4, #32]
 80025e2:	6263      	str	r3, [r4, #36]	; 0x24
 80025e4:	4b0c      	ldr	r3, [pc, #48]	; (8002618 <std+0x5c>)
 80025e6:	62a3      	str	r3, [r4, #40]	; 0x28
 80025e8:	4b0c      	ldr	r3, [pc, #48]	; (800261c <std+0x60>)
 80025ea:	62e3      	str	r3, [r4, #44]	; 0x2c
 80025ec:	4b0c      	ldr	r3, [pc, #48]	; (8002620 <std+0x64>)
 80025ee:	6323      	str	r3, [r4, #48]	; 0x30
 80025f0:	4b0c      	ldr	r3, [pc, #48]	; (8002624 <std+0x68>)
 80025f2:	429c      	cmp	r4, r3
 80025f4:	d006      	beq.n	8002604 <std+0x48>
 80025f6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80025fa:	4294      	cmp	r4, r2
 80025fc:	d002      	beq.n	8002604 <std+0x48>
 80025fe:	33d0      	adds	r3, #208	; 0xd0
 8002600:	429c      	cmp	r4, r3
 8002602:	d105      	bne.n	8002610 <std+0x54>
 8002604:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800260c:	f000 b950 	b.w	80028b0 <__retarget_lock_init_recursive>
 8002610:	bd10      	pop	{r4, pc}
 8002612:	bf00      	nop
 8002614:	08003055 	.word	0x08003055
 8002618:	08003077 	.word	0x08003077
 800261c:	080030af 	.word	0x080030af
 8002620:	080030d3 	.word	0x080030d3
 8002624:	200000f4 	.word	0x200000f4

08002628 <stdio_exit_handler>:
 8002628:	4a02      	ldr	r2, [pc, #8]	; (8002634 <stdio_exit_handler+0xc>)
 800262a:	4903      	ldr	r1, [pc, #12]	; (8002638 <stdio_exit_handler+0x10>)
 800262c:	4803      	ldr	r0, [pc, #12]	; (800263c <stdio_exit_handler+0x14>)
 800262e:	f000 b869 	b.w	8002704 <_fwalk_sglue>
 8002632:	bf00      	nop
 8002634:	2000006c 	.word	0x2000006c
 8002638:	08003005 	.word	0x08003005
 800263c:	20000078 	.word	0x20000078

08002640 <cleanup_stdio>:
 8002640:	6841      	ldr	r1, [r0, #4]
 8002642:	4b0c      	ldr	r3, [pc, #48]	; (8002674 <cleanup_stdio+0x34>)
 8002644:	4299      	cmp	r1, r3
 8002646:	b510      	push	{r4, lr}
 8002648:	4604      	mov	r4, r0
 800264a:	d001      	beq.n	8002650 <cleanup_stdio+0x10>
 800264c:	f000 fcda 	bl	8003004 <_fflush_r>
 8002650:	68a1      	ldr	r1, [r4, #8]
 8002652:	4b09      	ldr	r3, [pc, #36]	; (8002678 <cleanup_stdio+0x38>)
 8002654:	4299      	cmp	r1, r3
 8002656:	d002      	beq.n	800265e <cleanup_stdio+0x1e>
 8002658:	4620      	mov	r0, r4
 800265a:	f000 fcd3 	bl	8003004 <_fflush_r>
 800265e:	68e1      	ldr	r1, [r4, #12]
 8002660:	4b06      	ldr	r3, [pc, #24]	; (800267c <cleanup_stdio+0x3c>)
 8002662:	4299      	cmp	r1, r3
 8002664:	d004      	beq.n	8002670 <cleanup_stdio+0x30>
 8002666:	4620      	mov	r0, r4
 8002668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800266c:	f000 bcca 	b.w	8003004 <_fflush_r>
 8002670:	bd10      	pop	{r4, pc}
 8002672:	bf00      	nop
 8002674:	200000f4 	.word	0x200000f4
 8002678:	2000015c 	.word	0x2000015c
 800267c:	200001c4 	.word	0x200001c4

08002680 <global_stdio_init.part.0>:
 8002680:	b510      	push	{r4, lr}
 8002682:	4b0b      	ldr	r3, [pc, #44]	; (80026b0 <global_stdio_init.part.0+0x30>)
 8002684:	2104      	movs	r1, #4
 8002686:	4c0b      	ldr	r4, [pc, #44]	; (80026b4 <global_stdio_init.part.0+0x34>)
 8002688:	4a0b      	ldr	r2, [pc, #44]	; (80026b8 <global_stdio_init.part.0+0x38>)
 800268a:	4620      	mov	r0, r4
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	2200      	movs	r2, #0
 8002690:	f7ff ff94 	bl	80025bc <std>
 8002694:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002698:	2201      	movs	r2, #1
 800269a:	2109      	movs	r1, #9
 800269c:	f7ff ff8e 	bl	80025bc <std>
 80026a0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80026a4:	2202      	movs	r2, #2
 80026a6:	2112      	movs	r1, #18
 80026a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026ac:	f7ff bf86 	b.w	80025bc <std>
 80026b0:	2000022c 	.word	0x2000022c
 80026b4:	200000f4 	.word	0x200000f4
 80026b8:	08002629 	.word	0x08002629

080026bc <__sfp_lock_acquire>:
 80026bc:	4801      	ldr	r0, [pc, #4]	; (80026c4 <__sfp_lock_acquire+0x8>)
 80026be:	f000 b8f8 	b.w	80028b2 <__retarget_lock_acquire_recursive>
 80026c2:	bf00      	nop
 80026c4:	20000231 	.word	0x20000231

080026c8 <__sfp_lock_release>:
 80026c8:	4801      	ldr	r0, [pc, #4]	; (80026d0 <__sfp_lock_release+0x8>)
 80026ca:	f000 b8f3 	b.w	80028b4 <__retarget_lock_release_recursive>
 80026ce:	bf00      	nop
 80026d0:	20000231 	.word	0x20000231

080026d4 <__sinit>:
 80026d4:	b510      	push	{r4, lr}
 80026d6:	4604      	mov	r4, r0
 80026d8:	f7ff fff0 	bl	80026bc <__sfp_lock_acquire>
 80026dc:	6a23      	ldr	r3, [r4, #32]
 80026de:	b11b      	cbz	r3, 80026e8 <__sinit+0x14>
 80026e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026e4:	f7ff bff0 	b.w	80026c8 <__sfp_lock_release>
 80026e8:	4b04      	ldr	r3, [pc, #16]	; (80026fc <__sinit+0x28>)
 80026ea:	6223      	str	r3, [r4, #32]
 80026ec:	4b04      	ldr	r3, [pc, #16]	; (8002700 <__sinit+0x2c>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1f5      	bne.n	80026e0 <__sinit+0xc>
 80026f4:	f7ff ffc4 	bl	8002680 <global_stdio_init.part.0>
 80026f8:	e7f2      	b.n	80026e0 <__sinit+0xc>
 80026fa:	bf00      	nop
 80026fc:	08002641 	.word	0x08002641
 8002700:	2000022c 	.word	0x2000022c

08002704 <_fwalk_sglue>:
 8002704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002708:	4607      	mov	r7, r0
 800270a:	4688      	mov	r8, r1
 800270c:	4614      	mov	r4, r2
 800270e:	2600      	movs	r6, #0
 8002710:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002714:	f1b9 0901 	subs.w	r9, r9, #1
 8002718:	d505      	bpl.n	8002726 <_fwalk_sglue+0x22>
 800271a:	6824      	ldr	r4, [r4, #0]
 800271c:	2c00      	cmp	r4, #0
 800271e:	d1f7      	bne.n	8002710 <_fwalk_sglue+0xc>
 8002720:	4630      	mov	r0, r6
 8002722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002726:	89ab      	ldrh	r3, [r5, #12]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d907      	bls.n	800273c <_fwalk_sglue+0x38>
 800272c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002730:	3301      	adds	r3, #1
 8002732:	d003      	beq.n	800273c <_fwalk_sglue+0x38>
 8002734:	4629      	mov	r1, r5
 8002736:	4638      	mov	r0, r7
 8002738:	47c0      	blx	r8
 800273a:	4306      	orrs	r6, r0
 800273c:	3568      	adds	r5, #104	; 0x68
 800273e:	e7e9      	b.n	8002714 <_fwalk_sglue+0x10>

08002740 <iprintf>:
 8002740:	b40f      	push	{r0, r1, r2, r3}
 8002742:	b507      	push	{r0, r1, r2, lr}
 8002744:	4906      	ldr	r1, [pc, #24]	; (8002760 <iprintf+0x20>)
 8002746:	ab04      	add	r3, sp, #16
 8002748:	6808      	ldr	r0, [r1, #0]
 800274a:	f853 2b04 	ldr.w	r2, [r3], #4
 800274e:	6881      	ldr	r1, [r0, #8]
 8002750:	9301      	str	r3, [sp, #4]
 8002752:	f000 f927 	bl	80029a4 <_vfiprintf_r>
 8002756:	b003      	add	sp, #12
 8002758:	f85d eb04 	ldr.w	lr, [sp], #4
 800275c:	b004      	add	sp, #16
 800275e:	4770      	bx	lr
 8002760:	200000c4 	.word	0x200000c4

08002764 <putchar>:
 8002764:	4b02      	ldr	r3, [pc, #8]	; (8002770 <putchar+0xc>)
 8002766:	4601      	mov	r1, r0
 8002768:	6818      	ldr	r0, [r3, #0]
 800276a:	6882      	ldr	r2, [r0, #8]
 800276c:	f000 bdab 	b.w	80032c6 <_putc_r>
 8002770:	200000c4 	.word	0x200000c4

08002774 <_puts_r>:
 8002774:	6a03      	ldr	r3, [r0, #32]
 8002776:	b570      	push	{r4, r5, r6, lr}
 8002778:	4605      	mov	r5, r0
 800277a:	460e      	mov	r6, r1
 800277c:	6884      	ldr	r4, [r0, #8]
 800277e:	b90b      	cbnz	r3, 8002784 <_puts_r+0x10>
 8002780:	f7ff ffa8 	bl	80026d4 <__sinit>
 8002784:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002786:	07db      	lsls	r3, r3, #31
 8002788:	d405      	bmi.n	8002796 <_puts_r+0x22>
 800278a:	89a3      	ldrh	r3, [r4, #12]
 800278c:	0598      	lsls	r0, r3, #22
 800278e:	d402      	bmi.n	8002796 <_puts_r+0x22>
 8002790:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002792:	f000 f88e 	bl	80028b2 <__retarget_lock_acquire_recursive>
 8002796:	89a3      	ldrh	r3, [r4, #12]
 8002798:	0719      	lsls	r1, r3, #28
 800279a:	d513      	bpl.n	80027c4 <_puts_r+0x50>
 800279c:	6923      	ldr	r3, [r4, #16]
 800279e:	b18b      	cbz	r3, 80027c4 <_puts_r+0x50>
 80027a0:	3e01      	subs	r6, #1
 80027a2:	68a3      	ldr	r3, [r4, #8]
 80027a4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80027a8:	3b01      	subs	r3, #1
 80027aa:	60a3      	str	r3, [r4, #8]
 80027ac:	b9e9      	cbnz	r1, 80027ea <_puts_r+0x76>
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	da2e      	bge.n	8002810 <_puts_r+0x9c>
 80027b2:	4622      	mov	r2, r4
 80027b4:	210a      	movs	r1, #10
 80027b6:	4628      	mov	r0, r5
 80027b8:	f000 fc8f 	bl	80030da <__swbuf_r>
 80027bc:	3001      	adds	r0, #1
 80027be:	d007      	beq.n	80027d0 <_puts_r+0x5c>
 80027c0:	250a      	movs	r5, #10
 80027c2:	e007      	b.n	80027d4 <_puts_r+0x60>
 80027c4:	4621      	mov	r1, r4
 80027c6:	4628      	mov	r0, r5
 80027c8:	f000 fcc4 	bl	8003154 <__swsetup_r>
 80027cc:	2800      	cmp	r0, #0
 80027ce:	d0e7      	beq.n	80027a0 <_puts_r+0x2c>
 80027d0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80027d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80027d6:	07da      	lsls	r2, r3, #31
 80027d8:	d405      	bmi.n	80027e6 <_puts_r+0x72>
 80027da:	89a3      	ldrh	r3, [r4, #12]
 80027dc:	059b      	lsls	r3, r3, #22
 80027de:	d402      	bmi.n	80027e6 <_puts_r+0x72>
 80027e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80027e2:	f000 f867 	bl	80028b4 <__retarget_lock_release_recursive>
 80027e6:	4628      	mov	r0, r5
 80027e8:	bd70      	pop	{r4, r5, r6, pc}
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	da04      	bge.n	80027f8 <_puts_r+0x84>
 80027ee:	69a2      	ldr	r2, [r4, #24]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	dc06      	bgt.n	8002802 <_puts_r+0x8e>
 80027f4:	290a      	cmp	r1, #10
 80027f6:	d004      	beq.n	8002802 <_puts_r+0x8e>
 80027f8:	6823      	ldr	r3, [r4, #0]
 80027fa:	1c5a      	adds	r2, r3, #1
 80027fc:	6022      	str	r2, [r4, #0]
 80027fe:	7019      	strb	r1, [r3, #0]
 8002800:	e7cf      	b.n	80027a2 <_puts_r+0x2e>
 8002802:	4622      	mov	r2, r4
 8002804:	4628      	mov	r0, r5
 8002806:	f000 fc68 	bl	80030da <__swbuf_r>
 800280a:	3001      	adds	r0, #1
 800280c:	d1c9      	bne.n	80027a2 <_puts_r+0x2e>
 800280e:	e7df      	b.n	80027d0 <_puts_r+0x5c>
 8002810:	6823      	ldr	r3, [r4, #0]
 8002812:	250a      	movs	r5, #10
 8002814:	1c5a      	adds	r2, r3, #1
 8002816:	6022      	str	r2, [r4, #0]
 8002818:	701d      	strb	r5, [r3, #0]
 800281a:	e7db      	b.n	80027d4 <_puts_r+0x60>

0800281c <puts>:
 800281c:	4b02      	ldr	r3, [pc, #8]	; (8002828 <puts+0xc>)
 800281e:	4601      	mov	r1, r0
 8002820:	6818      	ldr	r0, [r3, #0]
 8002822:	f7ff bfa7 	b.w	8002774 <_puts_r>
 8002826:	bf00      	nop
 8002828:	200000c4 	.word	0x200000c4

0800282c <memset>:
 800282c:	4402      	add	r2, r0
 800282e:	4603      	mov	r3, r0
 8002830:	4293      	cmp	r3, r2
 8002832:	d100      	bne.n	8002836 <memset+0xa>
 8002834:	4770      	bx	lr
 8002836:	f803 1b01 	strb.w	r1, [r3], #1
 800283a:	e7f9      	b.n	8002830 <memset+0x4>

0800283c <_sbrk_r>:
 800283c:	b538      	push	{r3, r4, r5, lr}
 800283e:	2300      	movs	r3, #0
 8002840:	4d05      	ldr	r5, [pc, #20]	; (8002858 <_sbrk_r+0x1c>)
 8002842:	4604      	mov	r4, r0
 8002844:	4608      	mov	r0, r1
 8002846:	602b      	str	r3, [r5, #0]
 8002848:	f7fd ffbe 	bl	80007c8 <_sbrk>
 800284c:	1c43      	adds	r3, r0, #1
 800284e:	d102      	bne.n	8002856 <_sbrk_r+0x1a>
 8002850:	682b      	ldr	r3, [r5, #0]
 8002852:	b103      	cbz	r3, 8002856 <_sbrk_r+0x1a>
 8002854:	6023      	str	r3, [r4, #0]
 8002856:	bd38      	pop	{r3, r4, r5, pc}
 8002858:	20000234 	.word	0x20000234

0800285c <__errno>:
 800285c:	4b01      	ldr	r3, [pc, #4]	; (8002864 <__errno+0x8>)
 800285e:	6818      	ldr	r0, [r3, #0]
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	200000c4 	.word	0x200000c4

08002868 <__libc_init_array>:
 8002868:	b570      	push	{r4, r5, r6, lr}
 800286a:	4d0d      	ldr	r5, [pc, #52]	; (80028a0 <__libc_init_array+0x38>)
 800286c:	2600      	movs	r6, #0
 800286e:	4c0d      	ldr	r4, [pc, #52]	; (80028a4 <__libc_init_array+0x3c>)
 8002870:	1b64      	subs	r4, r4, r5
 8002872:	10a4      	asrs	r4, r4, #2
 8002874:	42a6      	cmp	r6, r4
 8002876:	d109      	bne.n	800288c <__libc_init_array+0x24>
 8002878:	4d0b      	ldr	r5, [pc, #44]	; (80028a8 <__libc_init_array+0x40>)
 800287a:	2600      	movs	r6, #0
 800287c:	4c0b      	ldr	r4, [pc, #44]	; (80028ac <__libc_init_array+0x44>)
 800287e:	f000 fdcd 	bl	800341c <_init>
 8002882:	1b64      	subs	r4, r4, r5
 8002884:	10a4      	asrs	r4, r4, #2
 8002886:	42a6      	cmp	r6, r4
 8002888:	d105      	bne.n	8002896 <__libc_init_array+0x2e>
 800288a:	bd70      	pop	{r4, r5, r6, pc}
 800288c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002890:	3601      	adds	r6, #1
 8002892:	4798      	blx	r3
 8002894:	e7ee      	b.n	8002874 <__libc_init_array+0xc>
 8002896:	f855 3b04 	ldr.w	r3, [r5], #4
 800289a:	3601      	adds	r6, #1
 800289c:	4798      	blx	r3
 800289e:	e7f2      	b.n	8002886 <__libc_init_array+0x1e>
 80028a0:	0800359c 	.word	0x0800359c
 80028a4:	0800359c 	.word	0x0800359c
 80028a8:	0800359c 	.word	0x0800359c
 80028ac:	080035a0 	.word	0x080035a0

080028b0 <__retarget_lock_init_recursive>:
 80028b0:	4770      	bx	lr

080028b2 <__retarget_lock_acquire_recursive>:
 80028b2:	4770      	bx	lr

080028b4 <__retarget_lock_release_recursive>:
 80028b4:	4770      	bx	lr
	...

080028b8 <_free_r>:
 80028b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80028ba:	2900      	cmp	r1, #0
 80028bc:	d043      	beq.n	8002946 <_free_r+0x8e>
 80028be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80028c2:	1f0c      	subs	r4, r1, #4
 80028c4:	9001      	str	r0, [sp, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	bfb8      	it	lt
 80028ca:	18e4      	addlt	r4, r4, r3
 80028cc:	f7ff fe6a 	bl	80025a4 <__malloc_lock>
 80028d0:	4a1e      	ldr	r2, [pc, #120]	; (800294c <_free_r+0x94>)
 80028d2:	9801      	ldr	r0, [sp, #4]
 80028d4:	6813      	ldr	r3, [r2, #0]
 80028d6:	b933      	cbnz	r3, 80028e6 <_free_r+0x2e>
 80028d8:	6063      	str	r3, [r4, #4]
 80028da:	6014      	str	r4, [r2, #0]
 80028dc:	b003      	add	sp, #12
 80028de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80028e2:	f7ff be65 	b.w	80025b0 <__malloc_unlock>
 80028e6:	42a3      	cmp	r3, r4
 80028e8:	d908      	bls.n	80028fc <_free_r+0x44>
 80028ea:	6825      	ldr	r5, [r4, #0]
 80028ec:	1961      	adds	r1, r4, r5
 80028ee:	428b      	cmp	r3, r1
 80028f0:	bf01      	itttt	eq
 80028f2:	6819      	ldreq	r1, [r3, #0]
 80028f4:	685b      	ldreq	r3, [r3, #4]
 80028f6:	1949      	addeq	r1, r1, r5
 80028f8:	6021      	streq	r1, [r4, #0]
 80028fa:	e7ed      	b.n	80028d8 <_free_r+0x20>
 80028fc:	461a      	mov	r2, r3
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	b10b      	cbz	r3, 8002906 <_free_r+0x4e>
 8002902:	42a3      	cmp	r3, r4
 8002904:	d9fa      	bls.n	80028fc <_free_r+0x44>
 8002906:	6811      	ldr	r1, [r2, #0]
 8002908:	1855      	adds	r5, r2, r1
 800290a:	42a5      	cmp	r5, r4
 800290c:	d10b      	bne.n	8002926 <_free_r+0x6e>
 800290e:	6824      	ldr	r4, [r4, #0]
 8002910:	4421      	add	r1, r4
 8002912:	1854      	adds	r4, r2, r1
 8002914:	6011      	str	r1, [r2, #0]
 8002916:	42a3      	cmp	r3, r4
 8002918:	d1e0      	bne.n	80028dc <_free_r+0x24>
 800291a:	681c      	ldr	r4, [r3, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	440c      	add	r4, r1
 8002920:	6053      	str	r3, [r2, #4]
 8002922:	6014      	str	r4, [r2, #0]
 8002924:	e7da      	b.n	80028dc <_free_r+0x24>
 8002926:	d902      	bls.n	800292e <_free_r+0x76>
 8002928:	230c      	movs	r3, #12
 800292a:	6003      	str	r3, [r0, #0]
 800292c:	e7d6      	b.n	80028dc <_free_r+0x24>
 800292e:	6825      	ldr	r5, [r4, #0]
 8002930:	1961      	adds	r1, r4, r5
 8002932:	428b      	cmp	r3, r1
 8002934:	bf02      	ittt	eq
 8002936:	6819      	ldreq	r1, [r3, #0]
 8002938:	685b      	ldreq	r3, [r3, #4]
 800293a:	1949      	addeq	r1, r1, r5
 800293c:	6063      	str	r3, [r4, #4]
 800293e:	bf08      	it	eq
 8002940:	6021      	streq	r1, [r4, #0]
 8002942:	6054      	str	r4, [r2, #4]
 8002944:	e7ca      	b.n	80028dc <_free_r+0x24>
 8002946:	b003      	add	sp, #12
 8002948:	bd30      	pop	{r4, r5, pc}
 800294a:	bf00      	nop
 800294c:	200000ec 	.word	0x200000ec

08002950 <__sfputc_r>:
 8002950:	6893      	ldr	r3, [r2, #8]
 8002952:	3b01      	subs	r3, #1
 8002954:	2b00      	cmp	r3, #0
 8002956:	6093      	str	r3, [r2, #8]
 8002958:	b410      	push	{r4}
 800295a:	da08      	bge.n	800296e <__sfputc_r+0x1e>
 800295c:	6994      	ldr	r4, [r2, #24]
 800295e:	42a3      	cmp	r3, r4
 8002960:	db01      	blt.n	8002966 <__sfputc_r+0x16>
 8002962:	290a      	cmp	r1, #10
 8002964:	d103      	bne.n	800296e <__sfputc_r+0x1e>
 8002966:	f85d 4b04 	ldr.w	r4, [sp], #4
 800296a:	f000 bbb6 	b.w	80030da <__swbuf_r>
 800296e:	6813      	ldr	r3, [r2, #0]
 8002970:	1c58      	adds	r0, r3, #1
 8002972:	6010      	str	r0, [r2, #0]
 8002974:	4608      	mov	r0, r1
 8002976:	7019      	strb	r1, [r3, #0]
 8002978:	f85d 4b04 	ldr.w	r4, [sp], #4
 800297c:	4770      	bx	lr

0800297e <__sfputs_r>:
 800297e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002980:	4606      	mov	r6, r0
 8002982:	460f      	mov	r7, r1
 8002984:	4614      	mov	r4, r2
 8002986:	18d5      	adds	r5, r2, r3
 8002988:	42ac      	cmp	r4, r5
 800298a:	d101      	bne.n	8002990 <__sfputs_r+0x12>
 800298c:	2000      	movs	r0, #0
 800298e:	e007      	b.n	80029a0 <__sfputs_r+0x22>
 8002990:	463a      	mov	r2, r7
 8002992:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002996:	4630      	mov	r0, r6
 8002998:	f7ff ffda 	bl	8002950 <__sfputc_r>
 800299c:	1c43      	adds	r3, r0, #1
 800299e:	d1f3      	bne.n	8002988 <__sfputs_r+0xa>
 80029a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080029a4 <_vfiprintf_r>:
 80029a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029a8:	460d      	mov	r5, r1
 80029aa:	b09d      	sub	sp, #116	; 0x74
 80029ac:	4614      	mov	r4, r2
 80029ae:	4698      	mov	r8, r3
 80029b0:	4606      	mov	r6, r0
 80029b2:	b118      	cbz	r0, 80029bc <_vfiprintf_r+0x18>
 80029b4:	6a03      	ldr	r3, [r0, #32]
 80029b6:	b90b      	cbnz	r3, 80029bc <_vfiprintf_r+0x18>
 80029b8:	f7ff fe8c 	bl	80026d4 <__sinit>
 80029bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80029be:	07d9      	lsls	r1, r3, #31
 80029c0:	d405      	bmi.n	80029ce <_vfiprintf_r+0x2a>
 80029c2:	89ab      	ldrh	r3, [r5, #12]
 80029c4:	059a      	lsls	r2, r3, #22
 80029c6:	d402      	bmi.n	80029ce <_vfiprintf_r+0x2a>
 80029c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80029ca:	f7ff ff72 	bl	80028b2 <__retarget_lock_acquire_recursive>
 80029ce:	89ab      	ldrh	r3, [r5, #12]
 80029d0:	071b      	lsls	r3, r3, #28
 80029d2:	d501      	bpl.n	80029d8 <_vfiprintf_r+0x34>
 80029d4:	692b      	ldr	r3, [r5, #16]
 80029d6:	b99b      	cbnz	r3, 8002a00 <_vfiprintf_r+0x5c>
 80029d8:	4629      	mov	r1, r5
 80029da:	4630      	mov	r0, r6
 80029dc:	f000 fbba 	bl	8003154 <__swsetup_r>
 80029e0:	b170      	cbz	r0, 8002a00 <_vfiprintf_r+0x5c>
 80029e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80029e4:	07dc      	lsls	r4, r3, #31
 80029e6:	d504      	bpl.n	80029f2 <_vfiprintf_r+0x4e>
 80029e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029ec:	b01d      	add	sp, #116	; 0x74
 80029ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029f2:	89ab      	ldrh	r3, [r5, #12]
 80029f4:	0598      	lsls	r0, r3, #22
 80029f6:	d4f7      	bmi.n	80029e8 <_vfiprintf_r+0x44>
 80029f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80029fa:	f7ff ff5b 	bl	80028b4 <__retarget_lock_release_recursive>
 80029fe:	e7f3      	b.n	80029e8 <_vfiprintf_r+0x44>
 8002a00:	2300      	movs	r3, #0
 8002a02:	f8cd 800c 	str.w	r8, [sp, #12]
 8002a06:	f04f 0901 	mov.w	r9, #1
 8002a0a:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 8002bc4 <_vfiprintf_r+0x220>
 8002a0e:	9309      	str	r3, [sp, #36]	; 0x24
 8002a10:	2320      	movs	r3, #32
 8002a12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002a16:	2330      	movs	r3, #48	; 0x30
 8002a18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002a1c:	4623      	mov	r3, r4
 8002a1e:	469a      	mov	sl, r3
 8002a20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002a24:	b10a      	cbz	r2, 8002a2a <_vfiprintf_r+0x86>
 8002a26:	2a25      	cmp	r2, #37	; 0x25
 8002a28:	d1f9      	bne.n	8002a1e <_vfiprintf_r+0x7a>
 8002a2a:	ebba 0b04 	subs.w	fp, sl, r4
 8002a2e:	d00b      	beq.n	8002a48 <_vfiprintf_r+0xa4>
 8002a30:	465b      	mov	r3, fp
 8002a32:	4622      	mov	r2, r4
 8002a34:	4629      	mov	r1, r5
 8002a36:	4630      	mov	r0, r6
 8002a38:	f7ff ffa1 	bl	800297e <__sfputs_r>
 8002a3c:	3001      	adds	r0, #1
 8002a3e:	f000 80a9 	beq.w	8002b94 <_vfiprintf_r+0x1f0>
 8002a42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002a44:	445a      	add	r2, fp
 8002a46:	9209      	str	r2, [sp, #36]	; 0x24
 8002a48:	f89a 3000 	ldrb.w	r3, [sl]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 80a1 	beq.w	8002b94 <_vfiprintf_r+0x1f0>
 8002a52:	2300      	movs	r3, #0
 8002a54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a58:	f10a 0a01 	add.w	sl, sl, #1
 8002a5c:	9304      	str	r3, [sp, #16]
 8002a5e:	9307      	str	r3, [sp, #28]
 8002a60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002a64:	931a      	str	r3, [sp, #104]	; 0x68
 8002a66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002a6a:	4654      	mov	r4, sl
 8002a6c:	2205      	movs	r2, #5
 8002a6e:	4855      	ldr	r0, [pc, #340]	; (8002bc4 <_vfiprintf_r+0x220>)
 8002a70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a74:	f000 fcc4 	bl	8003400 <memchr>
 8002a78:	9a04      	ldr	r2, [sp, #16]
 8002a7a:	b9d8      	cbnz	r0, 8002ab4 <_vfiprintf_r+0x110>
 8002a7c:	06d1      	lsls	r1, r2, #27
 8002a7e:	bf44      	itt	mi
 8002a80:	2320      	movmi	r3, #32
 8002a82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002a86:	0713      	lsls	r3, r2, #28
 8002a88:	bf44      	itt	mi
 8002a8a:	232b      	movmi	r3, #43	; 0x2b
 8002a8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002a90:	f89a 3000 	ldrb.w	r3, [sl]
 8002a94:	2b2a      	cmp	r3, #42	; 0x2a
 8002a96:	d015      	beq.n	8002ac4 <_vfiprintf_r+0x120>
 8002a98:	9a07      	ldr	r2, [sp, #28]
 8002a9a:	4654      	mov	r4, sl
 8002a9c:	2000      	movs	r0, #0
 8002a9e:	f04f 0c0a 	mov.w	ip, #10
 8002aa2:	4621      	mov	r1, r4
 8002aa4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002aa8:	3b30      	subs	r3, #48	; 0x30
 8002aaa:	2b09      	cmp	r3, #9
 8002aac:	d94d      	bls.n	8002b4a <_vfiprintf_r+0x1a6>
 8002aae:	b1b0      	cbz	r0, 8002ade <_vfiprintf_r+0x13a>
 8002ab0:	9207      	str	r2, [sp, #28]
 8002ab2:	e014      	b.n	8002ade <_vfiprintf_r+0x13a>
 8002ab4:	eba0 0308 	sub.w	r3, r0, r8
 8002ab8:	46a2      	mov	sl, r4
 8002aba:	fa09 f303 	lsl.w	r3, r9, r3
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	9304      	str	r3, [sp, #16]
 8002ac2:	e7d2      	b.n	8002a6a <_vfiprintf_r+0xc6>
 8002ac4:	9b03      	ldr	r3, [sp, #12]
 8002ac6:	1d19      	adds	r1, r3, #4
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	9103      	str	r1, [sp, #12]
 8002ace:	bfbb      	ittet	lt
 8002ad0:	425b      	neglt	r3, r3
 8002ad2:	f042 0202 	orrlt.w	r2, r2, #2
 8002ad6:	9307      	strge	r3, [sp, #28]
 8002ad8:	9307      	strlt	r3, [sp, #28]
 8002ada:	bfb8      	it	lt
 8002adc:	9204      	strlt	r2, [sp, #16]
 8002ade:	7823      	ldrb	r3, [r4, #0]
 8002ae0:	2b2e      	cmp	r3, #46	; 0x2e
 8002ae2:	d10c      	bne.n	8002afe <_vfiprintf_r+0x15a>
 8002ae4:	7863      	ldrb	r3, [r4, #1]
 8002ae6:	2b2a      	cmp	r3, #42	; 0x2a
 8002ae8:	d134      	bne.n	8002b54 <_vfiprintf_r+0x1b0>
 8002aea:	9b03      	ldr	r3, [sp, #12]
 8002aec:	3402      	adds	r4, #2
 8002aee:	1d1a      	adds	r2, r3, #4
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	9203      	str	r2, [sp, #12]
 8002af6:	bfb8      	it	lt
 8002af8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002afc:	9305      	str	r3, [sp, #20]
 8002afe:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8002bd4 <_vfiprintf_r+0x230>
 8002b02:	2203      	movs	r2, #3
 8002b04:	7821      	ldrb	r1, [r4, #0]
 8002b06:	4650      	mov	r0, sl
 8002b08:	f000 fc7a 	bl	8003400 <memchr>
 8002b0c:	b138      	cbz	r0, 8002b1e <_vfiprintf_r+0x17a>
 8002b0e:	eba0 000a 	sub.w	r0, r0, sl
 8002b12:	2240      	movs	r2, #64	; 0x40
 8002b14:	9b04      	ldr	r3, [sp, #16]
 8002b16:	3401      	adds	r4, #1
 8002b18:	4082      	lsls	r2, r0
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	9304      	str	r3, [sp, #16]
 8002b1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b22:	2206      	movs	r2, #6
 8002b24:	4828      	ldr	r0, [pc, #160]	; (8002bc8 <_vfiprintf_r+0x224>)
 8002b26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002b2a:	f000 fc69 	bl	8003400 <memchr>
 8002b2e:	2800      	cmp	r0, #0
 8002b30:	d03f      	beq.n	8002bb2 <_vfiprintf_r+0x20e>
 8002b32:	4b26      	ldr	r3, [pc, #152]	; (8002bcc <_vfiprintf_r+0x228>)
 8002b34:	bb1b      	cbnz	r3, 8002b7e <_vfiprintf_r+0x1da>
 8002b36:	9b03      	ldr	r3, [sp, #12]
 8002b38:	3307      	adds	r3, #7
 8002b3a:	f023 0307 	bic.w	r3, r3, #7
 8002b3e:	3308      	adds	r3, #8
 8002b40:	9303      	str	r3, [sp, #12]
 8002b42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b44:	443b      	add	r3, r7
 8002b46:	9309      	str	r3, [sp, #36]	; 0x24
 8002b48:	e768      	b.n	8002a1c <_vfiprintf_r+0x78>
 8002b4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8002b4e:	460c      	mov	r4, r1
 8002b50:	2001      	movs	r0, #1
 8002b52:	e7a6      	b.n	8002aa2 <_vfiprintf_r+0xfe>
 8002b54:	2300      	movs	r3, #0
 8002b56:	3401      	adds	r4, #1
 8002b58:	f04f 0c0a 	mov.w	ip, #10
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	9305      	str	r3, [sp, #20]
 8002b60:	4620      	mov	r0, r4
 8002b62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002b66:	3a30      	subs	r2, #48	; 0x30
 8002b68:	2a09      	cmp	r2, #9
 8002b6a:	d903      	bls.n	8002b74 <_vfiprintf_r+0x1d0>
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d0c6      	beq.n	8002afe <_vfiprintf_r+0x15a>
 8002b70:	9105      	str	r1, [sp, #20]
 8002b72:	e7c4      	b.n	8002afe <_vfiprintf_r+0x15a>
 8002b74:	fb0c 2101 	mla	r1, ip, r1, r2
 8002b78:	4604      	mov	r4, r0
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e7f0      	b.n	8002b60 <_vfiprintf_r+0x1bc>
 8002b7e:	ab03      	add	r3, sp, #12
 8002b80:	462a      	mov	r2, r5
 8002b82:	a904      	add	r1, sp, #16
 8002b84:	4630      	mov	r0, r6
 8002b86:	9300      	str	r3, [sp, #0]
 8002b88:	4b11      	ldr	r3, [pc, #68]	; (8002bd0 <_vfiprintf_r+0x22c>)
 8002b8a:	f3af 8000 	nop.w
 8002b8e:	4607      	mov	r7, r0
 8002b90:	1c78      	adds	r0, r7, #1
 8002b92:	d1d6      	bne.n	8002b42 <_vfiprintf_r+0x19e>
 8002b94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002b96:	07d9      	lsls	r1, r3, #31
 8002b98:	d405      	bmi.n	8002ba6 <_vfiprintf_r+0x202>
 8002b9a:	89ab      	ldrh	r3, [r5, #12]
 8002b9c:	059a      	lsls	r2, r3, #22
 8002b9e:	d402      	bmi.n	8002ba6 <_vfiprintf_r+0x202>
 8002ba0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002ba2:	f7ff fe87 	bl	80028b4 <__retarget_lock_release_recursive>
 8002ba6:	89ab      	ldrh	r3, [r5, #12]
 8002ba8:	065b      	lsls	r3, r3, #25
 8002baa:	f53f af1d 	bmi.w	80029e8 <_vfiprintf_r+0x44>
 8002bae:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002bb0:	e71c      	b.n	80029ec <_vfiprintf_r+0x48>
 8002bb2:	ab03      	add	r3, sp, #12
 8002bb4:	462a      	mov	r2, r5
 8002bb6:	a904      	add	r1, sp, #16
 8002bb8:	4630      	mov	r0, r6
 8002bba:	9300      	str	r3, [sp, #0]
 8002bbc:	4b04      	ldr	r3, [pc, #16]	; (8002bd0 <_vfiprintf_r+0x22c>)
 8002bbe:	f000 f87d 	bl	8002cbc <_printf_i>
 8002bc2:	e7e4      	b.n	8002b8e <_vfiprintf_r+0x1ea>
 8002bc4:	08003568 	.word	0x08003568
 8002bc8:	08003572 	.word	0x08003572
 8002bcc:	00000000 	.word	0x00000000
 8002bd0:	0800297f 	.word	0x0800297f
 8002bd4:	0800356e 	.word	0x0800356e

08002bd8 <_printf_common>:
 8002bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002bdc:	4616      	mov	r6, r2
 8002bde:	4699      	mov	r9, r3
 8002be0:	688a      	ldr	r2, [r1, #8]
 8002be2:	4607      	mov	r7, r0
 8002be4:	690b      	ldr	r3, [r1, #16]
 8002be6:	460c      	mov	r4, r1
 8002be8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002bec:	4293      	cmp	r3, r2
 8002bee:	bfb8      	it	lt
 8002bf0:	4613      	movlt	r3, r2
 8002bf2:	6033      	str	r3, [r6, #0]
 8002bf4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002bf8:	b10a      	cbz	r2, 8002bfe <_printf_common+0x26>
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	6033      	str	r3, [r6, #0]
 8002bfe:	6823      	ldr	r3, [r4, #0]
 8002c00:	0699      	lsls	r1, r3, #26
 8002c02:	bf42      	ittt	mi
 8002c04:	6833      	ldrmi	r3, [r6, #0]
 8002c06:	3302      	addmi	r3, #2
 8002c08:	6033      	strmi	r3, [r6, #0]
 8002c0a:	6825      	ldr	r5, [r4, #0]
 8002c0c:	f015 0506 	ands.w	r5, r5, #6
 8002c10:	d106      	bne.n	8002c20 <_printf_common+0x48>
 8002c12:	f104 0a19 	add.w	sl, r4, #25
 8002c16:	68e3      	ldr	r3, [r4, #12]
 8002c18:	6832      	ldr	r2, [r6, #0]
 8002c1a:	1a9b      	subs	r3, r3, r2
 8002c1c:	42ab      	cmp	r3, r5
 8002c1e:	dc2b      	bgt.n	8002c78 <_printf_common+0xa0>
 8002c20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002c24:	1e13      	subs	r3, r2, #0
 8002c26:	6822      	ldr	r2, [r4, #0]
 8002c28:	bf18      	it	ne
 8002c2a:	2301      	movne	r3, #1
 8002c2c:	0692      	lsls	r2, r2, #26
 8002c2e:	d430      	bmi.n	8002c92 <_printf_common+0xba>
 8002c30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002c34:	4649      	mov	r1, r9
 8002c36:	4638      	mov	r0, r7
 8002c38:	47c0      	blx	r8
 8002c3a:	3001      	adds	r0, #1
 8002c3c:	d023      	beq.n	8002c86 <_printf_common+0xae>
 8002c3e:	6823      	ldr	r3, [r4, #0]
 8002c40:	341a      	adds	r4, #26
 8002c42:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8002c46:	f003 0306 	and.w	r3, r3, #6
 8002c4a:	2b04      	cmp	r3, #4
 8002c4c:	bf0a      	itet	eq
 8002c4e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8002c52:	2500      	movne	r5, #0
 8002c54:	6833      	ldreq	r3, [r6, #0]
 8002c56:	f04f 0600 	mov.w	r6, #0
 8002c5a:	bf08      	it	eq
 8002c5c:	1aed      	subeq	r5, r5, r3
 8002c5e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002c62:	bf08      	it	eq
 8002c64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	bfc4      	itt	gt
 8002c6c:	1a9b      	subgt	r3, r3, r2
 8002c6e:	18ed      	addgt	r5, r5, r3
 8002c70:	42b5      	cmp	r5, r6
 8002c72:	d11a      	bne.n	8002caa <_printf_common+0xd2>
 8002c74:	2000      	movs	r0, #0
 8002c76:	e008      	b.n	8002c8a <_printf_common+0xb2>
 8002c78:	2301      	movs	r3, #1
 8002c7a:	4652      	mov	r2, sl
 8002c7c:	4649      	mov	r1, r9
 8002c7e:	4638      	mov	r0, r7
 8002c80:	47c0      	blx	r8
 8002c82:	3001      	adds	r0, #1
 8002c84:	d103      	bne.n	8002c8e <_printf_common+0xb6>
 8002c86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c8e:	3501      	adds	r5, #1
 8002c90:	e7c1      	b.n	8002c16 <_printf_common+0x3e>
 8002c92:	18e1      	adds	r1, r4, r3
 8002c94:	1c5a      	adds	r2, r3, #1
 8002c96:	2030      	movs	r0, #48	; 0x30
 8002c98:	3302      	adds	r3, #2
 8002c9a:	4422      	add	r2, r4
 8002c9c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002ca0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002ca4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002ca8:	e7c2      	b.n	8002c30 <_printf_common+0x58>
 8002caa:	2301      	movs	r3, #1
 8002cac:	4622      	mov	r2, r4
 8002cae:	4649      	mov	r1, r9
 8002cb0:	4638      	mov	r0, r7
 8002cb2:	47c0      	blx	r8
 8002cb4:	3001      	adds	r0, #1
 8002cb6:	d0e6      	beq.n	8002c86 <_printf_common+0xae>
 8002cb8:	3601      	adds	r6, #1
 8002cba:	e7d9      	b.n	8002c70 <_printf_common+0x98>

08002cbc <_printf_i>:
 8002cbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002cc0:	7e0f      	ldrb	r7, [r1, #24]
 8002cc2:	4691      	mov	r9, r2
 8002cc4:	4680      	mov	r8, r0
 8002cc6:	460c      	mov	r4, r1
 8002cc8:	2f78      	cmp	r7, #120	; 0x78
 8002cca:	469a      	mov	sl, r3
 8002ccc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002cce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002cd2:	d807      	bhi.n	8002ce4 <_printf_i+0x28>
 8002cd4:	2f62      	cmp	r7, #98	; 0x62
 8002cd6:	d80a      	bhi.n	8002cee <_printf_i+0x32>
 8002cd8:	2f00      	cmp	r7, #0
 8002cda:	f000 80d3 	beq.w	8002e84 <_printf_i+0x1c8>
 8002cde:	2f58      	cmp	r7, #88	; 0x58
 8002ce0:	f000 80bf 	beq.w	8002e62 <_printf_i+0x1a6>
 8002ce4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ce8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002cec:	e03a      	b.n	8002d64 <_printf_i+0xa8>
 8002cee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002cf2:	2b15      	cmp	r3, #21
 8002cf4:	d8f6      	bhi.n	8002ce4 <_printf_i+0x28>
 8002cf6:	a101      	add	r1, pc, #4	; (adr r1, 8002cfc <_printf_i+0x40>)
 8002cf8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002cfc:	08002d55 	.word	0x08002d55
 8002d00:	08002d69 	.word	0x08002d69
 8002d04:	08002ce5 	.word	0x08002ce5
 8002d08:	08002ce5 	.word	0x08002ce5
 8002d0c:	08002ce5 	.word	0x08002ce5
 8002d10:	08002ce5 	.word	0x08002ce5
 8002d14:	08002d69 	.word	0x08002d69
 8002d18:	08002ce5 	.word	0x08002ce5
 8002d1c:	08002ce5 	.word	0x08002ce5
 8002d20:	08002ce5 	.word	0x08002ce5
 8002d24:	08002ce5 	.word	0x08002ce5
 8002d28:	08002e6b 	.word	0x08002e6b
 8002d2c:	08002d95 	.word	0x08002d95
 8002d30:	08002e27 	.word	0x08002e27
 8002d34:	08002ce5 	.word	0x08002ce5
 8002d38:	08002ce5 	.word	0x08002ce5
 8002d3c:	08002e8d 	.word	0x08002e8d
 8002d40:	08002ce5 	.word	0x08002ce5
 8002d44:	08002d95 	.word	0x08002d95
 8002d48:	08002ce5 	.word	0x08002ce5
 8002d4c:	08002ce5 	.word	0x08002ce5
 8002d50:	08002e2f 	.word	0x08002e2f
 8002d54:	682b      	ldr	r3, [r5, #0]
 8002d56:	1d1a      	adds	r2, r3, #4
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	602a      	str	r2, [r5, #0]
 8002d5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d64:	2301      	movs	r3, #1
 8002d66:	e09e      	b.n	8002ea6 <_printf_i+0x1ea>
 8002d68:	6820      	ldr	r0, [r4, #0]
 8002d6a:	682b      	ldr	r3, [r5, #0]
 8002d6c:	0607      	lsls	r7, r0, #24
 8002d6e:	f103 0104 	add.w	r1, r3, #4
 8002d72:	6029      	str	r1, [r5, #0]
 8002d74:	d501      	bpl.n	8002d7a <_printf_i+0xbe>
 8002d76:	681e      	ldr	r6, [r3, #0]
 8002d78:	e003      	b.n	8002d82 <_printf_i+0xc6>
 8002d7a:	0646      	lsls	r6, r0, #25
 8002d7c:	d5fb      	bpl.n	8002d76 <_printf_i+0xba>
 8002d7e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002d82:	2e00      	cmp	r6, #0
 8002d84:	da03      	bge.n	8002d8e <_printf_i+0xd2>
 8002d86:	232d      	movs	r3, #45	; 0x2d
 8002d88:	4276      	negs	r6, r6
 8002d8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d8e:	4859      	ldr	r0, [pc, #356]	; (8002ef4 <_printf_i+0x238>)
 8002d90:	230a      	movs	r3, #10
 8002d92:	e012      	b.n	8002dba <_printf_i+0xfe>
 8002d94:	682b      	ldr	r3, [r5, #0]
 8002d96:	6820      	ldr	r0, [r4, #0]
 8002d98:	1d19      	adds	r1, r3, #4
 8002d9a:	6029      	str	r1, [r5, #0]
 8002d9c:	0605      	lsls	r5, r0, #24
 8002d9e:	d501      	bpl.n	8002da4 <_printf_i+0xe8>
 8002da0:	681e      	ldr	r6, [r3, #0]
 8002da2:	e002      	b.n	8002daa <_printf_i+0xee>
 8002da4:	0641      	lsls	r1, r0, #25
 8002da6:	d5fb      	bpl.n	8002da0 <_printf_i+0xe4>
 8002da8:	881e      	ldrh	r6, [r3, #0]
 8002daa:	2f6f      	cmp	r7, #111	; 0x6f
 8002dac:	4851      	ldr	r0, [pc, #324]	; (8002ef4 <_printf_i+0x238>)
 8002dae:	bf0c      	ite	eq
 8002db0:	2308      	moveq	r3, #8
 8002db2:	230a      	movne	r3, #10
 8002db4:	2100      	movs	r1, #0
 8002db6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002dba:	6865      	ldr	r5, [r4, #4]
 8002dbc:	2d00      	cmp	r5, #0
 8002dbe:	60a5      	str	r5, [r4, #8]
 8002dc0:	bfa2      	ittt	ge
 8002dc2:	6821      	ldrge	r1, [r4, #0]
 8002dc4:	f021 0104 	bicge.w	r1, r1, #4
 8002dc8:	6021      	strge	r1, [r4, #0]
 8002dca:	b90e      	cbnz	r6, 8002dd0 <_printf_i+0x114>
 8002dcc:	2d00      	cmp	r5, #0
 8002dce:	d04a      	beq.n	8002e66 <_printf_i+0x1aa>
 8002dd0:	4615      	mov	r5, r2
 8002dd2:	fbb6 f1f3 	udiv	r1, r6, r3
 8002dd6:	fb03 6711 	mls	r7, r3, r1, r6
 8002dda:	5dc7      	ldrb	r7, [r0, r7]
 8002ddc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002de0:	4637      	mov	r7, r6
 8002de2:	460e      	mov	r6, r1
 8002de4:	42bb      	cmp	r3, r7
 8002de6:	d9f4      	bls.n	8002dd2 <_printf_i+0x116>
 8002de8:	2b08      	cmp	r3, #8
 8002dea:	d10b      	bne.n	8002e04 <_printf_i+0x148>
 8002dec:	6823      	ldr	r3, [r4, #0]
 8002dee:	07de      	lsls	r6, r3, #31
 8002df0:	d508      	bpl.n	8002e04 <_printf_i+0x148>
 8002df2:	6923      	ldr	r3, [r4, #16]
 8002df4:	6861      	ldr	r1, [r4, #4]
 8002df6:	4299      	cmp	r1, r3
 8002df8:	bfde      	ittt	le
 8002dfa:	2330      	movle	r3, #48	; 0x30
 8002dfc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002e00:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002e04:	1b52      	subs	r2, r2, r5
 8002e06:	6122      	str	r2, [r4, #16]
 8002e08:	464b      	mov	r3, r9
 8002e0a:	aa03      	add	r2, sp, #12
 8002e0c:	4621      	mov	r1, r4
 8002e0e:	4640      	mov	r0, r8
 8002e10:	f8cd a000 	str.w	sl, [sp]
 8002e14:	f7ff fee0 	bl	8002bd8 <_printf_common>
 8002e18:	3001      	adds	r0, #1
 8002e1a:	d149      	bne.n	8002eb0 <_printf_i+0x1f4>
 8002e1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e20:	b004      	add	sp, #16
 8002e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e26:	6823      	ldr	r3, [r4, #0]
 8002e28:	f043 0320 	orr.w	r3, r3, #32
 8002e2c:	6023      	str	r3, [r4, #0]
 8002e2e:	2778      	movs	r7, #120	; 0x78
 8002e30:	4831      	ldr	r0, [pc, #196]	; (8002ef8 <_printf_i+0x23c>)
 8002e32:	6823      	ldr	r3, [r4, #0]
 8002e34:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002e38:	061f      	lsls	r7, r3, #24
 8002e3a:	6829      	ldr	r1, [r5, #0]
 8002e3c:	f851 6b04 	ldr.w	r6, [r1], #4
 8002e40:	d402      	bmi.n	8002e48 <_printf_i+0x18c>
 8002e42:	065f      	lsls	r7, r3, #25
 8002e44:	bf48      	it	mi
 8002e46:	b2b6      	uxthmi	r6, r6
 8002e48:	07df      	lsls	r7, r3, #31
 8002e4a:	6029      	str	r1, [r5, #0]
 8002e4c:	bf44      	itt	mi
 8002e4e:	f043 0320 	orrmi.w	r3, r3, #32
 8002e52:	6023      	strmi	r3, [r4, #0]
 8002e54:	b91e      	cbnz	r6, 8002e5e <_printf_i+0x1a2>
 8002e56:	6823      	ldr	r3, [r4, #0]
 8002e58:	f023 0320 	bic.w	r3, r3, #32
 8002e5c:	6023      	str	r3, [r4, #0]
 8002e5e:	2310      	movs	r3, #16
 8002e60:	e7a8      	b.n	8002db4 <_printf_i+0xf8>
 8002e62:	4824      	ldr	r0, [pc, #144]	; (8002ef4 <_printf_i+0x238>)
 8002e64:	e7e5      	b.n	8002e32 <_printf_i+0x176>
 8002e66:	4615      	mov	r5, r2
 8002e68:	e7be      	b.n	8002de8 <_printf_i+0x12c>
 8002e6a:	682b      	ldr	r3, [r5, #0]
 8002e6c:	6826      	ldr	r6, [r4, #0]
 8002e6e:	1d18      	adds	r0, r3, #4
 8002e70:	6961      	ldr	r1, [r4, #20]
 8002e72:	6028      	str	r0, [r5, #0]
 8002e74:	0635      	lsls	r5, r6, #24
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	d501      	bpl.n	8002e7e <_printf_i+0x1c2>
 8002e7a:	6019      	str	r1, [r3, #0]
 8002e7c:	e002      	b.n	8002e84 <_printf_i+0x1c8>
 8002e7e:	0670      	lsls	r0, r6, #25
 8002e80:	d5fb      	bpl.n	8002e7a <_printf_i+0x1be>
 8002e82:	8019      	strh	r1, [r3, #0]
 8002e84:	2300      	movs	r3, #0
 8002e86:	4615      	mov	r5, r2
 8002e88:	6123      	str	r3, [r4, #16]
 8002e8a:	e7bd      	b.n	8002e08 <_printf_i+0x14c>
 8002e8c:	682b      	ldr	r3, [r5, #0]
 8002e8e:	2100      	movs	r1, #0
 8002e90:	1d1a      	adds	r2, r3, #4
 8002e92:	602a      	str	r2, [r5, #0]
 8002e94:	681d      	ldr	r5, [r3, #0]
 8002e96:	6862      	ldr	r2, [r4, #4]
 8002e98:	4628      	mov	r0, r5
 8002e9a:	f000 fab1 	bl	8003400 <memchr>
 8002e9e:	b108      	cbz	r0, 8002ea4 <_printf_i+0x1e8>
 8002ea0:	1b40      	subs	r0, r0, r5
 8002ea2:	6060      	str	r0, [r4, #4]
 8002ea4:	6863      	ldr	r3, [r4, #4]
 8002ea6:	6123      	str	r3, [r4, #16]
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002eae:	e7ab      	b.n	8002e08 <_printf_i+0x14c>
 8002eb0:	6923      	ldr	r3, [r4, #16]
 8002eb2:	462a      	mov	r2, r5
 8002eb4:	4649      	mov	r1, r9
 8002eb6:	4640      	mov	r0, r8
 8002eb8:	47d0      	blx	sl
 8002eba:	3001      	adds	r0, #1
 8002ebc:	d0ae      	beq.n	8002e1c <_printf_i+0x160>
 8002ebe:	6823      	ldr	r3, [r4, #0]
 8002ec0:	079b      	lsls	r3, r3, #30
 8002ec2:	d413      	bmi.n	8002eec <_printf_i+0x230>
 8002ec4:	68e0      	ldr	r0, [r4, #12]
 8002ec6:	9b03      	ldr	r3, [sp, #12]
 8002ec8:	4298      	cmp	r0, r3
 8002eca:	bfb8      	it	lt
 8002ecc:	4618      	movlt	r0, r3
 8002ece:	e7a7      	b.n	8002e20 <_printf_i+0x164>
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	4632      	mov	r2, r6
 8002ed4:	4649      	mov	r1, r9
 8002ed6:	4640      	mov	r0, r8
 8002ed8:	47d0      	blx	sl
 8002eda:	3001      	adds	r0, #1
 8002edc:	d09e      	beq.n	8002e1c <_printf_i+0x160>
 8002ede:	3501      	adds	r5, #1
 8002ee0:	68e3      	ldr	r3, [r4, #12]
 8002ee2:	9903      	ldr	r1, [sp, #12]
 8002ee4:	1a5b      	subs	r3, r3, r1
 8002ee6:	42ab      	cmp	r3, r5
 8002ee8:	dcf2      	bgt.n	8002ed0 <_printf_i+0x214>
 8002eea:	e7eb      	b.n	8002ec4 <_printf_i+0x208>
 8002eec:	2500      	movs	r5, #0
 8002eee:	f104 0619 	add.w	r6, r4, #25
 8002ef2:	e7f5      	b.n	8002ee0 <_printf_i+0x224>
 8002ef4:	08003579 	.word	0x08003579
 8002ef8:	0800358a 	.word	0x0800358a

08002efc <__sflush_r>:
 8002efc:	898a      	ldrh	r2, [r1, #12]
 8002efe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f02:	4605      	mov	r5, r0
 8002f04:	0710      	lsls	r0, r2, #28
 8002f06:	460c      	mov	r4, r1
 8002f08:	d458      	bmi.n	8002fbc <__sflush_r+0xc0>
 8002f0a:	684b      	ldr	r3, [r1, #4]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	dc05      	bgt.n	8002f1c <__sflush_r+0x20>
 8002f10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	dc02      	bgt.n	8002f1c <__sflush_r+0x20>
 8002f16:	2000      	movs	r0, #0
 8002f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002f1e:	2e00      	cmp	r6, #0
 8002f20:	d0f9      	beq.n	8002f16 <__sflush_r+0x1a>
 8002f22:	2300      	movs	r3, #0
 8002f24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002f28:	682f      	ldr	r7, [r5, #0]
 8002f2a:	6a21      	ldr	r1, [r4, #32]
 8002f2c:	602b      	str	r3, [r5, #0]
 8002f2e:	d032      	beq.n	8002f96 <__sflush_r+0x9a>
 8002f30:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002f32:	89a3      	ldrh	r3, [r4, #12]
 8002f34:	075a      	lsls	r2, r3, #29
 8002f36:	d505      	bpl.n	8002f44 <__sflush_r+0x48>
 8002f38:	6863      	ldr	r3, [r4, #4]
 8002f3a:	1ac0      	subs	r0, r0, r3
 8002f3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002f3e:	b10b      	cbz	r3, 8002f44 <__sflush_r+0x48>
 8002f40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f42:	1ac0      	subs	r0, r0, r3
 8002f44:	2300      	movs	r3, #0
 8002f46:	4602      	mov	r2, r0
 8002f48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002f4a:	4628      	mov	r0, r5
 8002f4c:	6a21      	ldr	r1, [r4, #32]
 8002f4e:	47b0      	blx	r6
 8002f50:	1c43      	adds	r3, r0, #1
 8002f52:	89a3      	ldrh	r3, [r4, #12]
 8002f54:	d106      	bne.n	8002f64 <__sflush_r+0x68>
 8002f56:	6829      	ldr	r1, [r5, #0]
 8002f58:	291d      	cmp	r1, #29
 8002f5a:	d82b      	bhi.n	8002fb4 <__sflush_r+0xb8>
 8002f5c:	4a28      	ldr	r2, [pc, #160]	; (8003000 <__sflush_r+0x104>)
 8002f5e:	410a      	asrs	r2, r1
 8002f60:	07d6      	lsls	r6, r2, #31
 8002f62:	d427      	bmi.n	8002fb4 <__sflush_r+0xb8>
 8002f64:	2200      	movs	r2, #0
 8002f66:	04d9      	lsls	r1, r3, #19
 8002f68:	6062      	str	r2, [r4, #4]
 8002f6a:	6922      	ldr	r2, [r4, #16]
 8002f6c:	6022      	str	r2, [r4, #0]
 8002f6e:	d504      	bpl.n	8002f7a <__sflush_r+0x7e>
 8002f70:	1c42      	adds	r2, r0, #1
 8002f72:	d101      	bne.n	8002f78 <__sflush_r+0x7c>
 8002f74:	682b      	ldr	r3, [r5, #0]
 8002f76:	b903      	cbnz	r3, 8002f7a <__sflush_r+0x7e>
 8002f78:	6560      	str	r0, [r4, #84]	; 0x54
 8002f7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f7c:	602f      	str	r7, [r5, #0]
 8002f7e:	2900      	cmp	r1, #0
 8002f80:	d0c9      	beq.n	8002f16 <__sflush_r+0x1a>
 8002f82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f86:	4299      	cmp	r1, r3
 8002f88:	d002      	beq.n	8002f90 <__sflush_r+0x94>
 8002f8a:	4628      	mov	r0, r5
 8002f8c:	f7ff fc94 	bl	80028b8 <_free_r>
 8002f90:	2000      	movs	r0, #0
 8002f92:	6360      	str	r0, [r4, #52]	; 0x34
 8002f94:	e7c0      	b.n	8002f18 <__sflush_r+0x1c>
 8002f96:	2301      	movs	r3, #1
 8002f98:	4628      	mov	r0, r5
 8002f9a:	47b0      	blx	r6
 8002f9c:	1c41      	adds	r1, r0, #1
 8002f9e:	d1c8      	bne.n	8002f32 <__sflush_r+0x36>
 8002fa0:	682b      	ldr	r3, [r5, #0]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d0c5      	beq.n	8002f32 <__sflush_r+0x36>
 8002fa6:	2b1d      	cmp	r3, #29
 8002fa8:	d001      	beq.n	8002fae <__sflush_r+0xb2>
 8002faa:	2b16      	cmp	r3, #22
 8002fac:	d101      	bne.n	8002fb2 <__sflush_r+0xb6>
 8002fae:	602f      	str	r7, [r5, #0]
 8002fb0:	e7b1      	b.n	8002f16 <__sflush_r+0x1a>
 8002fb2:	89a3      	ldrh	r3, [r4, #12]
 8002fb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fb8:	81a3      	strh	r3, [r4, #12]
 8002fba:	e7ad      	b.n	8002f18 <__sflush_r+0x1c>
 8002fbc:	690f      	ldr	r7, [r1, #16]
 8002fbe:	2f00      	cmp	r7, #0
 8002fc0:	d0a9      	beq.n	8002f16 <__sflush_r+0x1a>
 8002fc2:	0793      	lsls	r3, r2, #30
 8002fc4:	680e      	ldr	r6, [r1, #0]
 8002fc6:	600f      	str	r7, [r1, #0]
 8002fc8:	bf0c      	ite	eq
 8002fca:	694b      	ldreq	r3, [r1, #20]
 8002fcc:	2300      	movne	r3, #0
 8002fce:	eba6 0807 	sub.w	r8, r6, r7
 8002fd2:	608b      	str	r3, [r1, #8]
 8002fd4:	f1b8 0f00 	cmp.w	r8, #0
 8002fd8:	dd9d      	ble.n	8002f16 <__sflush_r+0x1a>
 8002fda:	4643      	mov	r3, r8
 8002fdc:	463a      	mov	r2, r7
 8002fde:	6a21      	ldr	r1, [r4, #32]
 8002fe0:	4628      	mov	r0, r5
 8002fe2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002fe4:	47b0      	blx	r6
 8002fe6:	2800      	cmp	r0, #0
 8002fe8:	dc06      	bgt.n	8002ff8 <__sflush_r+0xfc>
 8002fea:	89a3      	ldrh	r3, [r4, #12]
 8002fec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ff0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ff4:	81a3      	strh	r3, [r4, #12]
 8002ff6:	e78f      	b.n	8002f18 <__sflush_r+0x1c>
 8002ff8:	4407      	add	r7, r0
 8002ffa:	eba8 0800 	sub.w	r8, r8, r0
 8002ffe:	e7e9      	b.n	8002fd4 <__sflush_r+0xd8>
 8003000:	dfbffffe 	.word	0xdfbffffe

08003004 <_fflush_r>:
 8003004:	b538      	push	{r3, r4, r5, lr}
 8003006:	690b      	ldr	r3, [r1, #16]
 8003008:	4605      	mov	r5, r0
 800300a:	460c      	mov	r4, r1
 800300c:	b913      	cbnz	r3, 8003014 <_fflush_r+0x10>
 800300e:	2500      	movs	r5, #0
 8003010:	4628      	mov	r0, r5
 8003012:	bd38      	pop	{r3, r4, r5, pc}
 8003014:	b118      	cbz	r0, 800301e <_fflush_r+0x1a>
 8003016:	6a03      	ldr	r3, [r0, #32]
 8003018:	b90b      	cbnz	r3, 800301e <_fflush_r+0x1a>
 800301a:	f7ff fb5b 	bl	80026d4 <__sinit>
 800301e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d0f3      	beq.n	800300e <_fflush_r+0xa>
 8003026:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003028:	07d0      	lsls	r0, r2, #31
 800302a:	d404      	bmi.n	8003036 <_fflush_r+0x32>
 800302c:	0599      	lsls	r1, r3, #22
 800302e:	d402      	bmi.n	8003036 <_fflush_r+0x32>
 8003030:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003032:	f7ff fc3e 	bl	80028b2 <__retarget_lock_acquire_recursive>
 8003036:	4628      	mov	r0, r5
 8003038:	4621      	mov	r1, r4
 800303a:	f7ff ff5f 	bl	8002efc <__sflush_r>
 800303e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003040:	4605      	mov	r5, r0
 8003042:	07da      	lsls	r2, r3, #31
 8003044:	d4e4      	bmi.n	8003010 <_fflush_r+0xc>
 8003046:	89a3      	ldrh	r3, [r4, #12]
 8003048:	059b      	lsls	r3, r3, #22
 800304a:	d4e1      	bmi.n	8003010 <_fflush_r+0xc>
 800304c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800304e:	f7ff fc31 	bl	80028b4 <__retarget_lock_release_recursive>
 8003052:	e7dd      	b.n	8003010 <_fflush_r+0xc>

08003054 <__sread>:
 8003054:	b510      	push	{r4, lr}
 8003056:	460c      	mov	r4, r1
 8003058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800305c:	f000 f9ac 	bl	80033b8 <_read_r>
 8003060:	2800      	cmp	r0, #0
 8003062:	bfab      	itete	ge
 8003064:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003066:	89a3      	ldrhlt	r3, [r4, #12]
 8003068:	181b      	addge	r3, r3, r0
 800306a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800306e:	bfac      	ite	ge
 8003070:	6563      	strge	r3, [r4, #84]	; 0x54
 8003072:	81a3      	strhlt	r3, [r4, #12]
 8003074:	bd10      	pop	{r4, pc}

08003076 <__swrite>:
 8003076:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800307a:	461f      	mov	r7, r3
 800307c:	898b      	ldrh	r3, [r1, #12]
 800307e:	4605      	mov	r5, r0
 8003080:	460c      	mov	r4, r1
 8003082:	05db      	lsls	r3, r3, #23
 8003084:	4616      	mov	r6, r2
 8003086:	d505      	bpl.n	8003094 <__swrite+0x1e>
 8003088:	2302      	movs	r3, #2
 800308a:	2200      	movs	r2, #0
 800308c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003090:	f000 f980 	bl	8003394 <_lseek_r>
 8003094:	89a3      	ldrh	r3, [r4, #12]
 8003096:	4632      	mov	r2, r6
 8003098:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800309c:	4628      	mov	r0, r5
 800309e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80030a2:	81a3      	strh	r3, [r4, #12]
 80030a4:	463b      	mov	r3, r7
 80030a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80030aa:	f000 b997 	b.w	80033dc <_write_r>

080030ae <__sseek>:
 80030ae:	b510      	push	{r4, lr}
 80030b0:	460c      	mov	r4, r1
 80030b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030b6:	f000 f96d 	bl	8003394 <_lseek_r>
 80030ba:	1c43      	adds	r3, r0, #1
 80030bc:	89a3      	ldrh	r3, [r4, #12]
 80030be:	bf15      	itete	ne
 80030c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80030c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80030c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80030ca:	81a3      	strheq	r3, [r4, #12]
 80030cc:	bf18      	it	ne
 80030ce:	81a3      	strhne	r3, [r4, #12]
 80030d0:	bd10      	pop	{r4, pc}

080030d2 <__sclose>:
 80030d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030d6:	f000 b92b 	b.w	8003330 <_close_r>

080030da <__swbuf_r>:
 80030da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030dc:	460e      	mov	r6, r1
 80030de:	4614      	mov	r4, r2
 80030e0:	4605      	mov	r5, r0
 80030e2:	b118      	cbz	r0, 80030ec <__swbuf_r+0x12>
 80030e4:	6a03      	ldr	r3, [r0, #32]
 80030e6:	b90b      	cbnz	r3, 80030ec <__swbuf_r+0x12>
 80030e8:	f7ff faf4 	bl	80026d4 <__sinit>
 80030ec:	69a3      	ldr	r3, [r4, #24]
 80030ee:	60a3      	str	r3, [r4, #8]
 80030f0:	89a3      	ldrh	r3, [r4, #12]
 80030f2:	071a      	lsls	r2, r3, #28
 80030f4:	d525      	bpl.n	8003142 <__swbuf_r+0x68>
 80030f6:	6923      	ldr	r3, [r4, #16]
 80030f8:	b31b      	cbz	r3, 8003142 <__swbuf_r+0x68>
 80030fa:	6823      	ldr	r3, [r4, #0]
 80030fc:	b2f6      	uxtb	r6, r6
 80030fe:	6922      	ldr	r2, [r4, #16]
 8003100:	4637      	mov	r7, r6
 8003102:	1a98      	subs	r0, r3, r2
 8003104:	6963      	ldr	r3, [r4, #20]
 8003106:	4283      	cmp	r3, r0
 8003108:	dc04      	bgt.n	8003114 <__swbuf_r+0x3a>
 800310a:	4621      	mov	r1, r4
 800310c:	4628      	mov	r0, r5
 800310e:	f7ff ff79 	bl	8003004 <_fflush_r>
 8003112:	b9e0      	cbnz	r0, 800314e <__swbuf_r+0x74>
 8003114:	68a3      	ldr	r3, [r4, #8]
 8003116:	3b01      	subs	r3, #1
 8003118:	60a3      	str	r3, [r4, #8]
 800311a:	6823      	ldr	r3, [r4, #0]
 800311c:	1c5a      	adds	r2, r3, #1
 800311e:	6022      	str	r2, [r4, #0]
 8003120:	701e      	strb	r6, [r3, #0]
 8003122:	1c43      	adds	r3, r0, #1
 8003124:	6962      	ldr	r2, [r4, #20]
 8003126:	429a      	cmp	r2, r3
 8003128:	d004      	beq.n	8003134 <__swbuf_r+0x5a>
 800312a:	89a3      	ldrh	r3, [r4, #12]
 800312c:	07db      	lsls	r3, r3, #31
 800312e:	d506      	bpl.n	800313e <__swbuf_r+0x64>
 8003130:	2e0a      	cmp	r6, #10
 8003132:	d104      	bne.n	800313e <__swbuf_r+0x64>
 8003134:	4621      	mov	r1, r4
 8003136:	4628      	mov	r0, r5
 8003138:	f7ff ff64 	bl	8003004 <_fflush_r>
 800313c:	b938      	cbnz	r0, 800314e <__swbuf_r+0x74>
 800313e:	4638      	mov	r0, r7
 8003140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003142:	4621      	mov	r1, r4
 8003144:	4628      	mov	r0, r5
 8003146:	f000 f805 	bl	8003154 <__swsetup_r>
 800314a:	2800      	cmp	r0, #0
 800314c:	d0d5      	beq.n	80030fa <__swbuf_r+0x20>
 800314e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003152:	e7f4      	b.n	800313e <__swbuf_r+0x64>

08003154 <__swsetup_r>:
 8003154:	b538      	push	{r3, r4, r5, lr}
 8003156:	4b2a      	ldr	r3, [pc, #168]	; (8003200 <__swsetup_r+0xac>)
 8003158:	4605      	mov	r5, r0
 800315a:	460c      	mov	r4, r1
 800315c:	6818      	ldr	r0, [r3, #0]
 800315e:	b118      	cbz	r0, 8003168 <__swsetup_r+0x14>
 8003160:	6a03      	ldr	r3, [r0, #32]
 8003162:	b90b      	cbnz	r3, 8003168 <__swsetup_r+0x14>
 8003164:	f7ff fab6 	bl	80026d4 <__sinit>
 8003168:	89a3      	ldrh	r3, [r4, #12]
 800316a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800316e:	0718      	lsls	r0, r3, #28
 8003170:	d422      	bmi.n	80031b8 <__swsetup_r+0x64>
 8003172:	06d9      	lsls	r1, r3, #27
 8003174:	d407      	bmi.n	8003186 <__swsetup_r+0x32>
 8003176:	2309      	movs	r3, #9
 8003178:	602b      	str	r3, [r5, #0]
 800317a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800317e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003182:	81a3      	strh	r3, [r4, #12]
 8003184:	e034      	b.n	80031f0 <__swsetup_r+0x9c>
 8003186:	0758      	lsls	r0, r3, #29
 8003188:	d512      	bpl.n	80031b0 <__swsetup_r+0x5c>
 800318a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800318c:	b141      	cbz	r1, 80031a0 <__swsetup_r+0x4c>
 800318e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003192:	4299      	cmp	r1, r3
 8003194:	d002      	beq.n	800319c <__swsetup_r+0x48>
 8003196:	4628      	mov	r0, r5
 8003198:	f7ff fb8e 	bl	80028b8 <_free_r>
 800319c:	2300      	movs	r3, #0
 800319e:	6363      	str	r3, [r4, #52]	; 0x34
 80031a0:	89a3      	ldrh	r3, [r4, #12]
 80031a2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80031a6:	81a3      	strh	r3, [r4, #12]
 80031a8:	2300      	movs	r3, #0
 80031aa:	6063      	str	r3, [r4, #4]
 80031ac:	6923      	ldr	r3, [r4, #16]
 80031ae:	6023      	str	r3, [r4, #0]
 80031b0:	89a3      	ldrh	r3, [r4, #12]
 80031b2:	f043 0308 	orr.w	r3, r3, #8
 80031b6:	81a3      	strh	r3, [r4, #12]
 80031b8:	6923      	ldr	r3, [r4, #16]
 80031ba:	b94b      	cbnz	r3, 80031d0 <__swsetup_r+0x7c>
 80031bc:	89a3      	ldrh	r3, [r4, #12]
 80031be:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80031c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031c6:	d003      	beq.n	80031d0 <__swsetup_r+0x7c>
 80031c8:	4621      	mov	r1, r4
 80031ca:	4628      	mov	r0, r5
 80031cc:	f000 f83f 	bl	800324e <__smakebuf_r>
 80031d0:	89a0      	ldrh	r0, [r4, #12]
 80031d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80031d6:	f010 0301 	ands.w	r3, r0, #1
 80031da:	d00a      	beq.n	80031f2 <__swsetup_r+0x9e>
 80031dc:	2300      	movs	r3, #0
 80031de:	60a3      	str	r3, [r4, #8]
 80031e0:	6963      	ldr	r3, [r4, #20]
 80031e2:	425b      	negs	r3, r3
 80031e4:	61a3      	str	r3, [r4, #24]
 80031e6:	6923      	ldr	r3, [r4, #16]
 80031e8:	b943      	cbnz	r3, 80031fc <__swsetup_r+0xa8>
 80031ea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80031ee:	d1c4      	bne.n	800317a <__swsetup_r+0x26>
 80031f0:	bd38      	pop	{r3, r4, r5, pc}
 80031f2:	0781      	lsls	r1, r0, #30
 80031f4:	bf58      	it	pl
 80031f6:	6963      	ldrpl	r3, [r4, #20]
 80031f8:	60a3      	str	r3, [r4, #8]
 80031fa:	e7f4      	b.n	80031e6 <__swsetup_r+0x92>
 80031fc:	2000      	movs	r0, #0
 80031fe:	e7f7      	b.n	80031f0 <__swsetup_r+0x9c>
 8003200:	200000c4 	.word	0x200000c4

08003204 <__swhatbuf_r>:
 8003204:	b570      	push	{r4, r5, r6, lr}
 8003206:	460c      	mov	r4, r1
 8003208:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800320c:	b096      	sub	sp, #88	; 0x58
 800320e:	4615      	mov	r5, r2
 8003210:	2900      	cmp	r1, #0
 8003212:	461e      	mov	r6, r3
 8003214:	da0c      	bge.n	8003230 <__swhatbuf_r+0x2c>
 8003216:	89a3      	ldrh	r3, [r4, #12]
 8003218:	2100      	movs	r1, #0
 800321a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800321e:	bf0c      	ite	eq
 8003220:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003224:	2340      	movne	r3, #64	; 0x40
 8003226:	2000      	movs	r0, #0
 8003228:	6031      	str	r1, [r6, #0]
 800322a:	602b      	str	r3, [r5, #0]
 800322c:	b016      	add	sp, #88	; 0x58
 800322e:	bd70      	pop	{r4, r5, r6, pc}
 8003230:	466a      	mov	r2, sp
 8003232:	f000 f88d 	bl	8003350 <_fstat_r>
 8003236:	2800      	cmp	r0, #0
 8003238:	dbed      	blt.n	8003216 <__swhatbuf_r+0x12>
 800323a:	9901      	ldr	r1, [sp, #4]
 800323c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003240:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003244:	4259      	negs	r1, r3
 8003246:	4159      	adcs	r1, r3
 8003248:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800324c:	e7eb      	b.n	8003226 <__swhatbuf_r+0x22>

0800324e <__smakebuf_r>:
 800324e:	898b      	ldrh	r3, [r1, #12]
 8003250:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003252:	079d      	lsls	r5, r3, #30
 8003254:	4606      	mov	r6, r0
 8003256:	460c      	mov	r4, r1
 8003258:	d507      	bpl.n	800326a <__smakebuf_r+0x1c>
 800325a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800325e:	6023      	str	r3, [r4, #0]
 8003260:	6123      	str	r3, [r4, #16]
 8003262:	2301      	movs	r3, #1
 8003264:	6163      	str	r3, [r4, #20]
 8003266:	b002      	add	sp, #8
 8003268:	bd70      	pop	{r4, r5, r6, pc}
 800326a:	ab01      	add	r3, sp, #4
 800326c:	466a      	mov	r2, sp
 800326e:	f7ff ffc9 	bl	8003204 <__swhatbuf_r>
 8003272:	9900      	ldr	r1, [sp, #0]
 8003274:	4605      	mov	r5, r0
 8003276:	4630      	mov	r0, r6
 8003278:	f7ff f914 	bl	80024a4 <_malloc_r>
 800327c:	b948      	cbnz	r0, 8003292 <__smakebuf_r+0x44>
 800327e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003282:	059a      	lsls	r2, r3, #22
 8003284:	d4ef      	bmi.n	8003266 <__smakebuf_r+0x18>
 8003286:	f023 0303 	bic.w	r3, r3, #3
 800328a:	f043 0302 	orr.w	r3, r3, #2
 800328e:	81a3      	strh	r3, [r4, #12]
 8003290:	e7e3      	b.n	800325a <__smakebuf_r+0xc>
 8003292:	89a3      	ldrh	r3, [r4, #12]
 8003294:	6020      	str	r0, [r4, #0]
 8003296:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800329a:	6120      	str	r0, [r4, #16]
 800329c:	81a3      	strh	r3, [r4, #12]
 800329e:	9b00      	ldr	r3, [sp, #0]
 80032a0:	6163      	str	r3, [r4, #20]
 80032a2:	9b01      	ldr	r3, [sp, #4]
 80032a4:	b15b      	cbz	r3, 80032be <__smakebuf_r+0x70>
 80032a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80032aa:	4630      	mov	r0, r6
 80032ac:	f000 f862 	bl	8003374 <_isatty_r>
 80032b0:	b128      	cbz	r0, 80032be <__smakebuf_r+0x70>
 80032b2:	89a3      	ldrh	r3, [r4, #12]
 80032b4:	f023 0303 	bic.w	r3, r3, #3
 80032b8:	f043 0301 	orr.w	r3, r3, #1
 80032bc:	81a3      	strh	r3, [r4, #12]
 80032be:	89a3      	ldrh	r3, [r4, #12]
 80032c0:	431d      	orrs	r5, r3
 80032c2:	81a5      	strh	r5, [r4, #12]
 80032c4:	e7cf      	b.n	8003266 <__smakebuf_r+0x18>

080032c6 <_putc_r>:
 80032c6:	b570      	push	{r4, r5, r6, lr}
 80032c8:	460d      	mov	r5, r1
 80032ca:	4614      	mov	r4, r2
 80032cc:	4606      	mov	r6, r0
 80032ce:	b118      	cbz	r0, 80032d8 <_putc_r+0x12>
 80032d0:	6a03      	ldr	r3, [r0, #32]
 80032d2:	b90b      	cbnz	r3, 80032d8 <_putc_r+0x12>
 80032d4:	f7ff f9fe 	bl	80026d4 <__sinit>
 80032d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80032da:	07d8      	lsls	r0, r3, #31
 80032dc:	d405      	bmi.n	80032ea <_putc_r+0x24>
 80032de:	89a3      	ldrh	r3, [r4, #12]
 80032e0:	0599      	lsls	r1, r3, #22
 80032e2:	d402      	bmi.n	80032ea <_putc_r+0x24>
 80032e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80032e6:	f7ff fae4 	bl	80028b2 <__retarget_lock_acquire_recursive>
 80032ea:	68a3      	ldr	r3, [r4, #8]
 80032ec:	3b01      	subs	r3, #1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	60a3      	str	r3, [r4, #8]
 80032f2:	da05      	bge.n	8003300 <_putc_r+0x3a>
 80032f4:	69a2      	ldr	r2, [r4, #24]
 80032f6:	4293      	cmp	r3, r2
 80032f8:	db12      	blt.n	8003320 <_putc_r+0x5a>
 80032fa:	b2eb      	uxtb	r3, r5
 80032fc:	2b0a      	cmp	r3, #10
 80032fe:	d00f      	beq.n	8003320 <_putc_r+0x5a>
 8003300:	6823      	ldr	r3, [r4, #0]
 8003302:	1c5a      	adds	r2, r3, #1
 8003304:	6022      	str	r2, [r4, #0]
 8003306:	701d      	strb	r5, [r3, #0]
 8003308:	b2ed      	uxtb	r5, r5
 800330a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800330c:	07da      	lsls	r2, r3, #31
 800330e:	d405      	bmi.n	800331c <_putc_r+0x56>
 8003310:	89a3      	ldrh	r3, [r4, #12]
 8003312:	059b      	lsls	r3, r3, #22
 8003314:	d402      	bmi.n	800331c <_putc_r+0x56>
 8003316:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003318:	f7ff facc 	bl	80028b4 <__retarget_lock_release_recursive>
 800331c:	4628      	mov	r0, r5
 800331e:	bd70      	pop	{r4, r5, r6, pc}
 8003320:	4629      	mov	r1, r5
 8003322:	4622      	mov	r2, r4
 8003324:	4630      	mov	r0, r6
 8003326:	f7ff fed8 	bl	80030da <__swbuf_r>
 800332a:	4605      	mov	r5, r0
 800332c:	e7ed      	b.n	800330a <_putc_r+0x44>
	...

08003330 <_close_r>:
 8003330:	b538      	push	{r3, r4, r5, lr}
 8003332:	2300      	movs	r3, #0
 8003334:	4d05      	ldr	r5, [pc, #20]	; (800334c <_close_r+0x1c>)
 8003336:	4604      	mov	r4, r0
 8003338:	4608      	mov	r0, r1
 800333a:	602b      	str	r3, [r5, #0]
 800333c:	f7fd fa0f 	bl	800075e <_close>
 8003340:	1c43      	adds	r3, r0, #1
 8003342:	d102      	bne.n	800334a <_close_r+0x1a>
 8003344:	682b      	ldr	r3, [r5, #0]
 8003346:	b103      	cbz	r3, 800334a <_close_r+0x1a>
 8003348:	6023      	str	r3, [r4, #0]
 800334a:	bd38      	pop	{r3, r4, r5, pc}
 800334c:	20000234 	.word	0x20000234

08003350 <_fstat_r>:
 8003350:	b538      	push	{r3, r4, r5, lr}
 8003352:	2300      	movs	r3, #0
 8003354:	4d06      	ldr	r5, [pc, #24]	; (8003370 <_fstat_r+0x20>)
 8003356:	4604      	mov	r4, r0
 8003358:	4608      	mov	r0, r1
 800335a:	4611      	mov	r1, r2
 800335c:	602b      	str	r3, [r5, #0]
 800335e:	f7fd fa0a 	bl	8000776 <_fstat>
 8003362:	1c43      	adds	r3, r0, #1
 8003364:	d102      	bne.n	800336c <_fstat_r+0x1c>
 8003366:	682b      	ldr	r3, [r5, #0]
 8003368:	b103      	cbz	r3, 800336c <_fstat_r+0x1c>
 800336a:	6023      	str	r3, [r4, #0]
 800336c:	bd38      	pop	{r3, r4, r5, pc}
 800336e:	bf00      	nop
 8003370:	20000234 	.word	0x20000234

08003374 <_isatty_r>:
 8003374:	b538      	push	{r3, r4, r5, lr}
 8003376:	2300      	movs	r3, #0
 8003378:	4d05      	ldr	r5, [pc, #20]	; (8003390 <_isatty_r+0x1c>)
 800337a:	4604      	mov	r4, r0
 800337c:	4608      	mov	r0, r1
 800337e:	602b      	str	r3, [r5, #0]
 8003380:	f7fd fa09 	bl	8000796 <_isatty>
 8003384:	1c43      	adds	r3, r0, #1
 8003386:	d102      	bne.n	800338e <_isatty_r+0x1a>
 8003388:	682b      	ldr	r3, [r5, #0]
 800338a:	b103      	cbz	r3, 800338e <_isatty_r+0x1a>
 800338c:	6023      	str	r3, [r4, #0]
 800338e:	bd38      	pop	{r3, r4, r5, pc}
 8003390:	20000234 	.word	0x20000234

08003394 <_lseek_r>:
 8003394:	b538      	push	{r3, r4, r5, lr}
 8003396:	4604      	mov	r4, r0
 8003398:	4d06      	ldr	r5, [pc, #24]	; (80033b4 <_lseek_r+0x20>)
 800339a:	4608      	mov	r0, r1
 800339c:	4611      	mov	r1, r2
 800339e:	2200      	movs	r2, #0
 80033a0:	602a      	str	r2, [r5, #0]
 80033a2:	461a      	mov	r2, r3
 80033a4:	f7fd fa02 	bl	80007ac <_lseek>
 80033a8:	1c43      	adds	r3, r0, #1
 80033aa:	d102      	bne.n	80033b2 <_lseek_r+0x1e>
 80033ac:	682b      	ldr	r3, [r5, #0]
 80033ae:	b103      	cbz	r3, 80033b2 <_lseek_r+0x1e>
 80033b0:	6023      	str	r3, [r4, #0]
 80033b2:	bd38      	pop	{r3, r4, r5, pc}
 80033b4:	20000234 	.word	0x20000234

080033b8 <_read_r>:
 80033b8:	b538      	push	{r3, r4, r5, lr}
 80033ba:	4604      	mov	r4, r0
 80033bc:	4d06      	ldr	r5, [pc, #24]	; (80033d8 <_read_r+0x20>)
 80033be:	4608      	mov	r0, r1
 80033c0:	4611      	mov	r1, r2
 80033c2:	2200      	movs	r2, #0
 80033c4:	602a      	str	r2, [r5, #0]
 80033c6:	461a      	mov	r2, r3
 80033c8:	f7fd f990 	bl	80006ec <_read>
 80033cc:	1c43      	adds	r3, r0, #1
 80033ce:	d102      	bne.n	80033d6 <_read_r+0x1e>
 80033d0:	682b      	ldr	r3, [r5, #0]
 80033d2:	b103      	cbz	r3, 80033d6 <_read_r+0x1e>
 80033d4:	6023      	str	r3, [r4, #0]
 80033d6:	bd38      	pop	{r3, r4, r5, pc}
 80033d8:	20000234 	.word	0x20000234

080033dc <_write_r>:
 80033dc:	b538      	push	{r3, r4, r5, lr}
 80033de:	4604      	mov	r4, r0
 80033e0:	4d06      	ldr	r5, [pc, #24]	; (80033fc <_write_r+0x20>)
 80033e2:	4608      	mov	r0, r1
 80033e4:	4611      	mov	r1, r2
 80033e6:	2200      	movs	r2, #0
 80033e8:	602a      	str	r2, [r5, #0]
 80033ea:	461a      	mov	r2, r3
 80033ec:	f7fd f99b 	bl	8000726 <_write>
 80033f0:	1c43      	adds	r3, r0, #1
 80033f2:	d102      	bne.n	80033fa <_write_r+0x1e>
 80033f4:	682b      	ldr	r3, [r5, #0]
 80033f6:	b103      	cbz	r3, 80033fa <_write_r+0x1e>
 80033f8:	6023      	str	r3, [r4, #0]
 80033fa:	bd38      	pop	{r3, r4, r5, pc}
 80033fc:	20000234 	.word	0x20000234

08003400 <memchr>:
 8003400:	b2c9      	uxtb	r1, r1
 8003402:	4402      	add	r2, r0
 8003404:	b510      	push	{r4, lr}
 8003406:	4290      	cmp	r0, r2
 8003408:	4603      	mov	r3, r0
 800340a:	d101      	bne.n	8003410 <memchr+0x10>
 800340c:	2300      	movs	r3, #0
 800340e:	e003      	b.n	8003418 <memchr+0x18>
 8003410:	781c      	ldrb	r4, [r3, #0]
 8003412:	3001      	adds	r0, #1
 8003414:	428c      	cmp	r4, r1
 8003416:	d1f6      	bne.n	8003406 <memchr+0x6>
 8003418:	4618      	mov	r0, r3
 800341a:	bd10      	pop	{r4, pc}

0800341c <_init>:
 800341c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800341e:	bf00      	nop
 8003420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003422:	bc08      	pop	{r3}
 8003424:	469e      	mov	lr, r3
 8003426:	4770      	bx	lr

08003428 <_fini>:
 8003428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800342a:	bf00      	nop
 800342c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800342e:	bc08      	pop	{r3}
 8003430:	469e      	mov	lr, r3
 8003432:	4770      	bx	lr
