
no_lea.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007424  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08007618  08007618  00017618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800775c  0800775c  000200c8  2**0
                  CONTENTS
  4 .ARM          00000000  0800775c  0800775c  000200c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800775c  0800775c  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800775c  0800775c  0001775c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007760  08007760  00017760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  08007764  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  200000c8  0800782c  000200c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  0800782c  00020238  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006a6e  00000000  00000000  00020141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016fa  00000000  00000000  00026baf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000748  00000000  00000000  000282b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000550  00000000  00000000  000289f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028130  00000000  00000000  00028f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008e58  00000000  00000000  00051078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fa1f1  00000000  00000000  00059ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000236c  00000000  00000000  001540c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00156430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	f3af 8000 	nop.w
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	200000c8 	.word	0x200000c8
 8000210:	00000000 	.word	0x00000000
 8000214:	08007600 	.word	0x08007600

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	f3af 8000 	nop.w
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	200000cc 	.word	0x200000cc
 8000230:	08007600 	.word	0x08007600

08000234 <lea_set_key>:
	0x57e5c409, 0xafcb8812, 0x5f971025, 0xbf2e204a, 0x7e5c4095, 0xfcb8812a, 0xf9710255, 0xf2e204ab,
	0xe5c40957,	0xcb8812af, 0x9710255f, 0x2e204abf}
};

void lea_set_key_generic(LEA_KEY *key, const unsigned char *mk, unsigned int mk_len)
{
 8000234:	b480      	push	{r7}
 8000236:	b087      	sub	sp, #28
 8000238:	af00      	add	r7, sp, #0
 800023a:	60f8      	str	r0, [r7, #12]
 800023c:	60b9      	str	r1, [r7, #8]
 800023e:	607a      	str	r2, [r7, #4]
	if(!key)
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	2b00      	cmp	r3, #0
 8000244:	f002 85ae 	beq.w	8002da4 <lea_set_key+0x2b70>
		return;
	else if(!mk)
 8000248:	68bb      	ldr	r3, [r7, #8]
 800024a:	2b00      	cmp	r3, #0
 800024c:	f002 85ac 	beq.w	8002da8 <lea_set_key+0x2b74>
		return;

	const unsigned int* _mk = (const unsigned int*)mk;
 8000250:	68bb      	ldr	r3, [r7, #8]
 8000252:	617b      	str	r3, [r7, #20]
	switch(mk_len)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	2b20      	cmp	r3, #32
 8000258:	f001 851c 	beq.w	8001c94 <lea_set_key+0x1a60>
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	2b20      	cmp	r3, #32
 8000260:	f202 85a4 	bhi.w	8002dac <lea_set_key+0x2b78>
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	2b10      	cmp	r3, #16
 8000268:	d005      	beq.n	8000276 <lea_set_key+0x42>
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	2b18      	cmp	r3, #24
 800026e:	f000 8569 	beq.w	8000d44 <lea_set_key+0xb10>
		key->rk[191] = ROL(key->rk[183] + delta[7][ 4], 17);

		break;

	default:
			return;
 8000272:	f002 bd9b 	b.w	8002dac <lea_set_key+0x2b78>
		key->rk[  0] = ROL(loadU32(_mk[0]) + delta[0][ 0], 1);
 8000276:	697b      	ldr	r3, [r7, #20]
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	4aac      	ldr	r2, [pc, #688]	; (800052c <lea_set_key+0x2f8>)
 800027c:	4413      	add	r3, r2
 800027e:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	601a      	str	r2, [r3, #0]
		key->rk[  6] = ROL(key->rk[  0] + delta[1][ 1], 1);
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	4aa9      	ldr	r2, [pc, #676]	; (8000530 <lea_set_key+0x2fc>)
 800028c:	4413      	add	r3, r2
 800028e:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	619a      	str	r2, [r3, #24]
		key->rk[ 12] = ROL(key->rk[  6] + delta[2][ 2], 1);
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	699b      	ldr	r3, [r3, #24]
 800029a:	4aa6      	ldr	r2, [pc, #664]	; (8000534 <lea_set_key+0x300>)
 800029c:	4413      	add	r3, r2
 800029e:	ea4f 72f3 	mov.w	r2, r3, ror #31
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	631a      	str	r2, [r3, #48]	; 0x30
		key->rk[ 18] = ROL(key->rk[ 12] + delta[3][ 3], 1);
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002aa:	4aa3      	ldr	r2, [pc, #652]	; (8000538 <lea_set_key+0x304>)
 80002ac:	4413      	add	r3, r2
 80002ae:	ea4f 72f3 	mov.w	r2, r3, ror #31
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	649a      	str	r2, [r3, #72]	; 0x48
		key->rk[ 24] = ROL(key->rk[ 18] + delta[0][ 4], 1);
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80002ba:	4aa0      	ldr	r2, [pc, #640]	; (800053c <lea_set_key+0x308>)
 80002bc:	4413      	add	r3, r2
 80002be:	ea4f 72f3 	mov.w	r2, r3, ror #31
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	661a      	str	r2, [r3, #96]	; 0x60
		key->rk[ 30] = ROL(key->rk[ 24] + delta[1][ 5], 1);
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80002ca:	4a9d      	ldr	r2, [pc, #628]	; (8000540 <lea_set_key+0x30c>)
 80002cc:	4413      	add	r3, r2
 80002ce:	ea4f 72f3 	mov.w	r2, r3, ror #31
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	679a      	str	r2, [r3, #120]	; 0x78
		key->rk[ 36] = ROL(key->rk[ 30] + delta[2][ 6], 1);
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80002da:	4a9a      	ldr	r2, [pc, #616]	; (8000544 <lea_set_key+0x310>)
 80002dc:	4413      	add	r3, r2
 80002de:	ea4f 72f3 	mov.w	r2, r3, ror #31
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		key->rk[ 42] = ROL(key->rk[ 36] + delta[3][ 7], 1);
 80002e8:	68fb      	ldr	r3, [r7, #12]
 80002ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80002ee:	4a96      	ldr	r2, [pc, #600]	; (8000548 <lea_set_key+0x314>)
 80002f0:	4413      	add	r3, r2
 80002f2:	ea4f 72f3 	mov.w	r2, r3, ror #31
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		key->rk[ 48] = ROL(key->rk[ 42] + delta[0][ 8], 1);
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000302:	4a92      	ldr	r2, [pc, #584]	; (800054c <lea_set_key+0x318>)
 8000304:	4413      	add	r3, r2
 8000306:	ea4f 72f3 	mov.w	r2, r3, ror #31
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		key->rk[ 54] = ROL(key->rk[ 48] + delta[1][ 9], 1);
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000316:	4a8e      	ldr	r2, [pc, #568]	; (8000550 <lea_set_key+0x31c>)
 8000318:	4413      	add	r3, r2
 800031a:	ea4f 72f3 	mov.w	r2, r3, ror #31
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		key->rk[ 60] = ROL(key->rk[ 54] + delta[2][10], 1);
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800032a:	4a8a      	ldr	r2, [pc, #552]	; (8000554 <lea_set_key+0x320>)
 800032c:	4413      	add	r3, r2
 800032e:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8000332:	68fb      	ldr	r3, [r7, #12]
 8000334:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
		key->rk[ 66] = ROL(key->rk[ 60] + delta[3][11], 1);
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800033e:	4a86      	ldr	r2, [pc, #536]	; (8000558 <lea_set_key+0x324>)
 8000340:	4413      	add	r3, r2
 8000342:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
		key->rk[ 72] = ROL(key->rk[ 66] + delta[0][12], 1);
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000352:	4a82      	ldr	r2, [pc, #520]	; (800055c <lea_set_key+0x328>)
 8000354:	4413      	add	r3, r2
 8000356:	ea4f 72f3 	mov.w	r2, r3, ror #31
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
		key->rk[ 78] = ROL(key->rk[ 72] + delta[1][13], 1);
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8000366:	4a7e      	ldr	r2, [pc, #504]	; (8000560 <lea_set_key+0x32c>)
 8000368:	4413      	add	r3, r2
 800036a:	ea4f 72f3 	mov.w	r2, r3, ror #31
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
		key->rk[ 84] = ROL(key->rk[ 78] + delta[2][14], 1);
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800037a:	4a7a      	ldr	r2, [pc, #488]	; (8000564 <lea_set_key+0x330>)
 800037c:	4413      	add	r3, r2
 800037e:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
		key->rk[ 90] = ROL(key->rk[ 84] + delta[3][15], 1);
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800038e:	4a76      	ldr	r2, [pc, #472]	; (8000568 <lea_set_key+0x334>)
 8000390:	4413      	add	r3, r2
 8000392:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
		key->rk[ 96] = ROL(key->rk[ 90] + delta[0][16], 1);
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 80003a2:	4a72      	ldr	r2, [pc, #456]	; (800056c <lea_set_key+0x338>)
 80003a4:	4413      	add	r3, r2
 80003a6:	ea4f 72f3 	mov.w	r2, r3, ror #31
 80003aa:	68fb      	ldr	r3, [r7, #12]
 80003ac:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		key->rk[102] = ROL(key->rk[ 96] + delta[1][17], 1);
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 80003b6:	4a6e      	ldr	r2, [pc, #440]	; (8000570 <lea_set_key+0x33c>)
 80003b8:	4413      	add	r3, r2
 80003ba:	ea4f 72f3 	mov.w	r2, r3, ror #31
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
		key->rk[108] = ROL(key->rk[102] + delta[2][18], 1);
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 80003ca:	4a6a      	ldr	r2, [pc, #424]	; (8000574 <lea_set_key+0x340>)
 80003cc:	4413      	add	r3, r2
 80003ce:	ea4f 72f3 	mov.w	r2, r3, ror #31
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
		key->rk[114] = ROL(key->rk[108] + delta[3][19], 1);
 80003d8:	68fb      	ldr	r3, [r7, #12]
 80003da:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 80003de:	4a66      	ldr	r2, [pc, #408]	; (8000578 <lea_set_key+0x344>)
 80003e0:	4413      	add	r3, r2
 80003e2:	ea4f 72f3 	mov.w	r2, r3, ror #31
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
		key->rk[120] = ROL(key->rk[114] + delta[0][20], 1);
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80003f2:	4a62      	ldr	r2, [pc, #392]	; (800057c <lea_set_key+0x348>)
 80003f4:	4413      	add	r3, r2
 80003f6:	ea4f 72f3 	mov.w	r2, r3, ror #31
 80003fa:	68fb      	ldr	r3, [r7, #12]
 80003fc:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
		key->rk[126] = ROL(key->rk[120] + delta[1][21], 1);
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8000406:	4a5e      	ldr	r2, [pc, #376]	; (8000580 <lea_set_key+0x34c>)
 8000408:	4413      	add	r3, r2
 800040a:	ea4f 72f3 	mov.w	r2, r3, ror #31
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
		key->rk[132] = ROL(key->rk[126] + delta[2][22], 1);
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 800041a:	4a5a      	ldr	r2, [pc, #360]	; (8000584 <lea_set_key+0x350>)
 800041c:	4413      	add	r3, r2
 800041e:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
		key->rk[138] = ROL(key->rk[132] + delta[3][23], 1);
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800042e:	4a56      	ldr	r2, [pc, #344]	; (8000588 <lea_set_key+0x354>)
 8000430:	4413      	add	r3, r2
 8000432:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		key->rk[  1] = key->rk[  3] = key->rk[  5] = ROL(loadU32(_mk[1]) + delta[0][ 1], 3);
 800043c:	697b      	ldr	r3, [r7, #20]
 800043e:	3304      	adds	r3, #4
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	4a52      	ldr	r2, [pc, #328]	; (800058c <lea_set_key+0x358>)
 8000444:	4413      	add	r3, r2
 8000446:	ea4f 7273 	mov.w	r2, r3, ror #29
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	615a      	str	r2, [r3, #20]
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	695a      	ldr	r2, [r3, #20]
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	60da      	str	r2, [r3, #12]
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	68da      	ldr	r2, [r3, #12]
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	605a      	str	r2, [r3, #4]
		key->rk[  7] = key->rk[  9] = key->rk[ 11] = ROL(key->rk[  1] + delta[1][ 2], 3);
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	685b      	ldr	r3, [r3, #4]
 8000462:	4a4b      	ldr	r2, [pc, #300]	; (8000590 <lea_set_key+0x35c>)
 8000464:	4413      	add	r3, r2
 8000466:	ea4f 7273 	mov.w	r2, r3, ror #29
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	62da      	str	r2, [r3, #44]	; 0x2c
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	625a      	str	r2, [r3, #36]	; 0x24
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	61da      	str	r2, [r3, #28]
		key->rk[ 13] = key->rk[ 15] = key->rk[ 17] = ROL(key->rk[  7] + delta[2][ 3], 3);
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	69db      	ldr	r3, [r3, #28]
 8000482:	4a44      	ldr	r2, [pc, #272]	; (8000594 <lea_set_key+0x360>)
 8000484:	4413      	add	r3, r2
 8000486:	ea4f 7273 	mov.w	r2, r3, ror #29
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	645a      	str	r2, [r3, #68]	; 0x44
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	63da      	str	r2, [r3, #60]	; 0x3c
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	635a      	str	r2, [r3, #52]	; 0x34
		key->rk[ 19] = key->rk[ 21] = key->rk[ 23] = ROL(key->rk[ 13] + delta[3][ 4], 3);
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004a2:	4a3d      	ldr	r2, [pc, #244]	; (8000598 <lea_set_key+0x364>)
 80004a4:	4413      	add	r3, r2
 80004a6:	ea4f 7273 	mov.w	r2, r3, ror #29
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	65da      	str	r2, [r3, #92]	; 0x5c
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80004b2:	68fb      	ldr	r3, [r7, #12]
 80004b4:	655a      	str	r2, [r3, #84]	; 0x54
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	64da      	str	r2, [r3, #76]	; 0x4c
		key->rk[ 25] = key->rk[ 27] = key->rk[ 29] = ROL(key->rk[ 19] + delta[0][ 5], 3);
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004c2:	4a36      	ldr	r2, [pc, #216]	; (800059c <lea_set_key+0x368>)
 80004c4:	4413      	add	r3, r2
 80004c6:	ea4f 7273 	mov.w	r2, r3, ror #29
 80004ca:	68fb      	ldr	r3, [r7, #12]
 80004cc:	675a      	str	r2, [r3, #116]	; 0x74
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	66da      	str	r2, [r3, #108]	; 0x6c
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	665a      	str	r2, [r3, #100]	; 0x64
		key->rk[ 31] = key->rk[ 33] = key->rk[ 35] = ROL(key->rk[ 25] + delta[1][ 6], 3);
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80004e2:	4a2f      	ldr	r2, [pc, #188]	; (80005a0 <lea_set_key+0x36c>)
 80004e4:	4413      	add	r3, r2
 80004e6:	ea4f 7273 	mov.w	r2, r3, ror #29
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	67da      	str	r2, [r3, #124]	; 0x7c
		key->rk[ 37] = key->rk[ 39] = key->rk[ 41] = ROL(key->rk[ 31] + delta[2][ 7], 3);
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800050a:	4a26      	ldr	r2, [pc, #152]	; (80005a4 <lea_set_key+0x370>)
 800050c:	4413      	add	r3, r2
 800050e:	ea4f 7273 	mov.w	r2, r3, ror #29
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800052a:	e03d      	b.n	80005a8 <lea_set_key+0x374>
 800052c:	c3efe9db 	.word	0xc3efe9db
 8000530:	88c4d604 	.word	0x88c4d604
 8000534:	e789f229 	.word	0xe789f229
 8000538:	c6f98763 	.word	0xc6f98763
 800053c:	3efe9dbc 	.word	0x3efe9dbc
 8000540:	8c4d6048 	.word	0x8c4d6048
 8000544:	789f229e 	.word	0x789f229e
 8000548:	6f98763c 	.word	0x6f98763c
 800054c:	efe9dbc3 	.word	0xefe9dbc3
 8000550:	c4d60488 	.word	0xc4d60488
 8000554:	89f229e7 	.word	0x89f229e7
 8000558:	f98763c6 	.word	0xf98763c6
 800055c:	fe9dbc3e 	.word	0xfe9dbc3e
 8000560:	4d60488c 	.word	0x4d60488c
 8000564:	9f229e78 	.word	0x9f229e78
 8000568:	98763c6f 	.word	0x98763c6f
 800056c:	e9dbc3ef 	.word	0xe9dbc3ef
 8000570:	d60488c4 	.word	0xd60488c4
 8000574:	f229e789 	.word	0xf229e789
 8000578:	8763c6f9 	.word	0x8763c6f9
 800057c:	9dbc3efe 	.word	0x9dbc3efe
 8000580:	60488c4d 	.word	0x60488c4d
 8000584:	229e789f 	.word	0x229e789f
 8000588:	763c6f98 	.word	0x763c6f98
 800058c:	87dfd3b7 	.word	0x87dfd3b7
 8000590:	1189ac09 	.word	0x1189ac09
 8000594:	cf13e453 	.word	0xcf13e453
 8000598:	8df30ec7 	.word	0x8df30ec7
 800059c:	7dfd3b78 	.word	0x7dfd3b78
 80005a0:	189ac091 	.word	0x189ac091
 80005a4:	f13e453c 	.word	0xf13e453c
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		key->rk[ 43] = key->rk[ 45] = key->rk[ 47] = ROL(key->rk[ 37] + delta[3][ 8], 3);
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80005b4:	4abf      	ldr	r2, [pc, #764]	; (80008b4 <lea_set_key+0x680>)
 80005b6:	4413      	add	r3, r2
 80005b8:	ea4f 7273 	mov.w	r2, r3, ror #29
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		key->rk[ 49] = key->rk[ 51] = key->rk[ 53] = ROL(key->rk[ 43] + delta[0][ 9], 3);
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80005e0:	4ab5      	ldr	r2, [pc, #724]	; (80008b8 <lea_set_key+0x684>)
 80005e2:	4413      	add	r3, r2
 80005e4:	ea4f 7273 	mov.w	r2, r3, ror #29
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		key->rk[ 55] = key->rk[ 57] = key->rk[ 59] = ROL(key->rk[ 49] + delta[1][10], 3);
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800060c:	4aab      	ldr	r2, [pc, #684]	; (80008bc <lea_set_key+0x688>)
 800060e:	4413      	add	r3, r2
 8000610:	ea4f 7273 	mov.w	r2, r3, ror #29
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		key->rk[ 61] = key->rk[ 63] = key->rk[ 65] = ROL(key->rk[ 55] + delta[2][11], 3);
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000638:	4aa1      	ldr	r2, [pc, #644]	; (80008c0 <lea_set_key+0x68c>)
 800063a:	4413      	add	r3, r2
 800063c:	ea4f 7273 	mov.w	r2, r3, ror #29
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
		key->rk[ 67] = key->rk[ 69] = key->rk[ 71] = ROL(key->rk[ 61] + delta[3][12], 3);
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000664:	4a97      	ldr	r2, [pc, #604]	; (80008c4 <lea_set_key+0x690>)
 8000666:	4413      	add	r3, r2
 8000668:	ea4f 7273 	mov.w	r2, r3, ror #29
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		key->rk[ 73] = key->rk[ 75] = key->rk[ 77] = ROL(key->rk[ 67] + delta[0][13], 3);
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8000690:	4a8d      	ldr	r2, [pc, #564]	; (80008c8 <lea_set_key+0x694>)
 8000692:	4413      	add	r3, r2
 8000694:	ea4f 7273 	mov.w	r2, r3, ror #29
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
		key->rk[ 79] = key->rk[ 81] = key->rk[ 83] = ROL(key->rk[ 73] + delta[1][14], 3);
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80006bc:	4a83      	ldr	r2, [pc, #524]	; (80008cc <lea_set_key+0x698>)
 80006be:	4413      	add	r3, r2
 80006c0:	ea4f 7273 	mov.w	r2, r3, ror #29
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
		key->rk[ 85] = key->rk[ 87] = key->rk[ 89] = ROL(key->rk[ 79] + delta[2][15], 3);
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80006e8:	4a79      	ldr	r2, [pc, #484]	; (80008d0 <lea_set_key+0x69c>)
 80006ea:	4413      	add	r3, r2
 80006ec:	ea4f 7273 	mov.w	r2, r3, ror #29
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
		key->rk[ 91] = key->rk[ 93] = key->rk[ 95] = ROL(key->rk[ 85] + delta[3][16], 3);
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000714:	4a6f      	ldr	r2, [pc, #444]	; (80008d4 <lea_set_key+0x6a0>)
 8000716:	4413      	add	r3, r2
 8000718:	ea4f 7273 	mov.w	r2, r3, ror #29
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	f8d3 2174 	ldr.w	r2, [r3, #372]	; 0x174
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
		key->rk[ 97] = key->rk[ 99] = key->rk[101] = ROL(key->rk[ 91] + delta[0][17], 3);
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8000740:	4a65      	ldr	r2, [pc, #404]	; (80008d8 <lea_set_key+0x6a4>)
 8000742:	4413      	add	r3, r2
 8000744:	ea4f 7273 	mov.w	r2, r3, ror #29
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	f8d3 2194 	ldr.w	r2, [r3, #404]	; 0x194
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
		key->rk[103] = key->rk[105] = key->rk[107] = ROL(key->rk[ 97] + delta[1][18], 3);
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 800076c:	4a5b      	ldr	r2, [pc, #364]	; (80008dc <lea_set_key+0x6a8>)
 800076e:	4413      	add	r3, r2
 8000770:	ea4f 7273 	mov.w	r2, r3, ror #29
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
		key->rk[109] = key->rk[111] = key->rk[113] = ROL(key->rk[103] + delta[2][19], 3);
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000798:	4a51      	ldr	r2, [pc, #324]	; (80008e0 <lea_set_key+0x6ac>)
 800079a:	4413      	add	r3, r2
 800079c:	ea4f 7273 	mov.w	r2, r3, ror #29
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		key->rk[115] = key->rk[117] = key->rk[119] = ROL(key->rk[109] + delta[3][20], 3);
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 80007c4:	4a47      	ldr	r2, [pc, #284]	; (80008e4 <lea_set_key+0x6b0>)
 80007c6:	4413      	add	r3, r2
 80007c8:	ea4f 7273 	mov.w	r2, r3, ror #29
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	f8d3 21dc 	ldr.w	r2, [r3, #476]	; 0x1dc
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	f8d3 21d4 	ldr.w	r2, [r3, #468]	; 0x1d4
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
		key->rk[121] = key->rk[123] = key->rk[125] = ROL(key->rk[115] + delta[0][21], 3);
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 80007f0:	4a3d      	ldr	r2, [pc, #244]	; (80008e8 <lea_set_key+0x6b4>)
 80007f2:	4413      	add	r3, r2
 80007f4:	ea4f 7273 	mov.w	r2, r3, ror #29
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	f8d3 21f4 	ldr.w	r2, [r3, #500]	; 0x1f4
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	f8d3 21ec 	ldr.w	r2, [r3, #492]	; 0x1ec
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
		key->rk[127] = key->rk[129] = key->rk[131] = ROL(key->rk[121] + delta[1][22], 3);
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 800081c:	4a33      	ldr	r2, [pc, #204]	; (80008ec <lea_set_key+0x6b8>)
 800081e:	4413      	add	r3, r2
 8000820:	ea4f 7273 	mov.w	r2, r3, ror #29
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
		key->rk[133] = key->rk[135] = key->rk[137] = ROL(key->rk[127] + delta[2][23], 3);
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 8000848:	4a29      	ldr	r2, [pc, #164]	; (80008f0 <lea_set_key+0x6bc>)
 800084a:	4413      	add	r3, r2
 800084c:	ea4f 7273 	mov.w	r2, r3, ror #29
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	f8d3 2224 	ldr.w	r2, [r3, #548]	; 0x224
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
		key->rk[139] = key->rk[141] = key->rk[143] = ROL(key->rk[133] + delta[3][24], 3);
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000874:	4a1f      	ldr	r2, [pc, #124]	; (80008f4 <lea_set_key+0x6c0>)
 8000876:	4413      	add	r3, r2
 8000878:	ea4f 7273 	mov.w	r2, r3, ror #29
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	f8d3 223c 	ldr.w	r2, [r3, #572]	; 0x23c
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		key->rk[  2] = ROL(loadU32(_mk[2]) + delta[0][ 2], 6);
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	3308      	adds	r3, #8
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a15      	ldr	r2, [pc, #84]	; (80008f8 <lea_set_key+0x6c4>)
 80008a2:	4413      	add	r3, r2
 80008a4:	ea4f 62b3 	mov.w	r2, r3, ror #26
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	609a      	str	r2, [r3, #8]
		key->rk[  8] = ROL(key->rk[  2] + delta[1][ 3], 6);
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	689b      	ldr	r3, [r3, #8]
 80008b0:	e024      	b.n	80008fc <lea_set_key+0x6c8>
 80008b2:	bf00      	nop
 80008b4:	df30ec78 	.word	0xdf30ec78
 80008b8:	dfd3b787 	.word	0xdfd3b787
 80008bc:	89ac0911 	.word	0x89ac0911
 80008c0:	13e453cf 	.word	0x13e453cf
 80008c4:	f30ec78d 	.word	0xf30ec78d
 80008c8:	fd3b787d 	.word	0xfd3b787d
 80008cc:	9ac09118 	.word	0x9ac09118
 80008d0:	3e453cf1 	.word	0x3e453cf1
 80008d4:	30ec78df 	.word	0x30ec78df
 80008d8:	d3b787df 	.word	0xd3b787df
 80008dc:	ac091189 	.word	0xac091189
 80008e0:	e453cf13 	.word	0xe453cf13
 80008e4:	0ec78df3 	.word	0x0ec78df3
 80008e8:	3b787dfd 	.word	0x3b787dfd
 80008ec:	c091189a 	.word	0xc091189a
 80008f0:	453cf13e 	.word	0x453cf13e
 80008f4:	ec78df30 	.word	0xec78df30
 80008f8:	0fbfa76f 	.word	0x0fbfa76f
 80008fc:	4aba      	ldr	r2, [pc, #744]	; (8000be8 <lea_set_key+0x9b4>)
 80008fe:	4413      	add	r3, r2
 8000900:	ea4f 62b3 	mov.w	r2, r3, ror #26
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	621a      	str	r2, [r3, #32]
		key->rk[ 14] = ROL(key->rk[  8] + delta[2][ 4], 6);
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	6a1b      	ldr	r3, [r3, #32]
 800090c:	4ab7      	ldr	r2, [pc, #732]	; (8000bec <lea_set_key+0x9b8>)
 800090e:	4413      	add	r3, r2
 8000910:	ea4f 62b3 	mov.w	r2, r3, ror #26
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	639a      	str	r2, [r3, #56]	; 0x38
		key->rk[ 20] = ROL(key->rk[ 14] + delta[3][ 5], 6);
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800091c:	4ab4      	ldr	r2, [pc, #720]	; (8000bf0 <lea_set_key+0x9bc>)
 800091e:	4413      	add	r3, r2
 8000920:	ea4f 62b3 	mov.w	r2, r3, ror #26
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	651a      	str	r2, [r3, #80]	; 0x50
		key->rk[ 26] = ROL(key->rk[ 20] + delta[0][ 6], 6);
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800092c:	4ab1      	ldr	r2, [pc, #708]	; (8000bf4 <lea_set_key+0x9c0>)
 800092e:	4413      	add	r3, r2
 8000930:	ea4f 62b3 	mov.w	r2, r3, ror #26
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	669a      	str	r2, [r3, #104]	; 0x68
		key->rk[ 32] = ROL(key->rk[ 26] + delta[1][ 7], 6);
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800093c:	4aae      	ldr	r2, [pc, #696]	; (8000bf8 <lea_set_key+0x9c4>)
 800093e:	4413      	add	r3, r2
 8000940:	ea4f 62b3 	mov.w	r2, r3, ror #26
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		key->rk[ 38] = ROL(key->rk[ 32] + delta[2][ 8], 6);
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000950:	4aaa      	ldr	r2, [pc, #680]	; (8000bfc <lea_set_key+0x9c8>)
 8000952:	4413      	add	r3, r2
 8000954:	ea4f 62b3 	mov.w	r2, r3, ror #26
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		key->rk[ 44] = ROL(key->rk[ 38] + delta[3][ 9], 6);
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000964:	4aa6      	ldr	r2, [pc, #664]	; (8000c00 <lea_set_key+0x9cc>)
 8000966:	4413      	add	r3, r2
 8000968:	ea4f 62b3 	mov.w	r2, r3, ror #26
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		key->rk[ 50] = ROL(key->rk[ 44] + delta[0][10], 6);
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8000978:	4aa2      	ldr	r2, [pc, #648]	; (8000c04 <lea_set_key+0x9d0>)
 800097a:	4413      	add	r3, r2
 800097c:	ea4f 62b3 	mov.w	r2, r3, ror #26
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		key->rk[ 56] = ROL(key->rk[ 50] + delta[1][11], 6);
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800098c:	4a9e      	ldr	r2, [pc, #632]	; (8000c08 <lea_set_key+0x9d4>)
 800098e:	4413      	add	r3, r2
 8000990:	ea4f 62b3 	mov.w	r2, r3, ror #26
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
		key->rk[ 62] = ROL(key->rk[ 56] + delta[2][12], 6);
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a0:	4a9a      	ldr	r2, [pc, #616]	; (8000c0c <lea_set_key+0x9d8>)
 80009a2:	4413      	add	r3, r2
 80009a4:	ea4f 62b3 	mov.w	r2, r3, ror #26
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
		key->rk[ 68] = ROL(key->rk[ 62] + delta[3][13], 6);
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80009b4:	4a96      	ldr	r2, [pc, #600]	; (8000c10 <lea_set_key+0x9dc>)
 80009b6:	4413      	add	r3, r2
 80009b8:	ea4f 62b3 	mov.w	r2, r3, ror #26
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		key->rk[ 74] = ROL(key->rk[ 68] + delta[0][14], 6);
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80009c8:	4a92      	ldr	r2, [pc, #584]	; (8000c14 <lea_set_key+0x9e0>)
 80009ca:	4413      	add	r3, r2
 80009cc:	ea4f 62b3 	mov.w	r2, r3, ror #26
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
		key->rk[ 80] = ROL(key->rk[ 74] + delta[1][15], 6);
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 80009dc:	4a8e      	ldr	r2, [pc, #568]	; (8000c18 <lea_set_key+0x9e4>)
 80009de:	4413      	add	r3, r2
 80009e0:	ea4f 62b3 	mov.w	r2, r3, ror #26
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		key->rk[ 86] = ROL(key->rk[ 80] + delta[2][16], 6);
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009f0:	4a8a      	ldr	r2, [pc, #552]	; (8000c1c <lea_set_key+0x9e8>)
 80009f2:	4413      	add	r3, r2
 80009f4:	ea4f 62b3 	mov.w	r2, r3, ror #26
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		key->rk[ 92] = ROL(key->rk[ 86] + delta[3][17], 6);
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8000a04:	4a86      	ldr	r2, [pc, #536]	; (8000c20 <lea_set_key+0x9ec>)
 8000a06:	4413      	add	r3, r2
 8000a08:	ea4f 62b3 	mov.w	r2, r3, ror #26
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
		key->rk[ 98] = ROL(key->rk[ 92] + delta[0][18], 6);
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8000a18:	4a82      	ldr	r2, [pc, #520]	; (8000c24 <lea_set_key+0x9f0>)
 8000a1a:	4413      	add	r3, r2
 8000a1c:	ea4f 62b3 	mov.w	r2, r3, ror #26
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
		key->rk[104] = ROL(key->rk[ 98] + delta[1][19], 6);
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8000a2c:	4a7e      	ldr	r2, [pc, #504]	; (8000c28 <lea_set_key+0x9f4>)
 8000a2e:	4413      	add	r3, r2
 8000a30:	ea4f 62b3 	mov.w	r2, r3, ror #26
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
		key->rk[110] = ROL(key->rk[104] + delta[2][20], 6);
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a40:	4a7a      	ldr	r2, [pc, #488]	; (8000c2c <lea_set_key+0x9f8>)
 8000a42:	4413      	add	r3, r2
 8000a44:	ea4f 62b3 	mov.w	r2, r3, ror #26
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
		key->rk[116] = ROL(key->rk[110] + delta[3][21], 6);
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8000a54:	4a76      	ldr	r2, [pc, #472]	; (8000c30 <lea_set_key+0x9fc>)
 8000a56:	4413      	add	r3, r2
 8000a58:	ea4f 62b3 	mov.w	r2, r3, ror #26
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
		key->rk[122] = ROL(key->rk[116] + delta[0][22], 6);
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 8000a68:	4a72      	ldr	r2, [pc, #456]	; (8000c34 <lea_set_key+0xa00>)
 8000a6a:	4413      	add	r3, r2
 8000a6c:	ea4f 62b3 	mov.w	r2, r3, ror #26
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
		key->rk[128] = ROL(key->rk[122] + delta[1][23], 6);
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8000a7c:	4a6e      	ldr	r2, [pc, #440]	; (8000c38 <lea_set_key+0xa04>)
 8000a7e:	4413      	add	r3, r2
 8000a80:	ea4f 62b3 	mov.w	r2, r3, ror #26
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		key->rk[134] = ROL(key->rk[128] + delta[2][24], 6);
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000a90:	4a6a      	ldr	r2, [pc, #424]	; (8000c3c <lea_set_key+0xa08>)
 8000a92:	4413      	add	r3, r2
 8000a94:	ea4f 62b3 	mov.w	r2, r3, ror #26
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		key->rk[140] = ROL(key->rk[134] + delta[3][25], 6);
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8000aa4:	4a66      	ldr	r2, [pc, #408]	; (8000c40 <lea_set_key+0xa0c>)
 8000aa6:	4413      	add	r3, r2
 8000aa8:	ea4f 62b3 	mov.w	r2, r3, ror #26
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
		key->rk[  4] = ROL(loadU32(_mk[3]) + delta[0][ 3], 11);
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	330c      	adds	r3, #12
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a62      	ldr	r2, [pc, #392]	; (8000c44 <lea_set_key+0xa10>)
 8000aba:	4413      	add	r3, r2
 8000abc:	ea4f 5273 	mov.w	r2, r3, ror #21
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	611a      	str	r2, [r3, #16]
		key->rk[ 10] = ROL(key->rk[  4] + delta[1][ 4], 11);
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	691b      	ldr	r3, [r3, #16]
 8000ac8:	4a5f      	ldr	r2, [pc, #380]	; (8000c48 <lea_set_key+0xa14>)
 8000aca:	4413      	add	r3, r2
 8000acc:	ea4f 5273 	mov.w	r2, r3, ror #21
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	629a      	str	r2, [r3, #40]	; 0x28
		key->rk[ 16] = ROL(key->rk[ 10] + delta[2][ 5], 11);
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ad8:	4a5c      	ldr	r2, [pc, #368]	; (8000c4c <lea_set_key+0xa18>)
 8000ada:	4413      	add	r3, r2
 8000adc:	ea4f 5273 	mov.w	r2, r3, ror #21
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	641a      	str	r2, [r3, #64]	; 0x40
		key->rk[ 22] = ROL(key->rk[ 16] + delta[3][ 6], 11);
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae8:	4a59      	ldr	r2, [pc, #356]	; (8000c50 <lea_set_key+0xa1c>)
 8000aea:	4413      	add	r3, r2
 8000aec:	ea4f 5273 	mov.w	r2, r3, ror #21
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	659a      	str	r2, [r3, #88]	; 0x58
		key->rk[ 28] = ROL(key->rk[ 22] + delta[0][ 7], 11);
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000af8:	4a56      	ldr	r2, [pc, #344]	; (8000c54 <lea_set_key+0xa20>)
 8000afa:	4413      	add	r3, r2
 8000afc:	ea4f 5273 	mov.w	r2, r3, ror #21
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	671a      	str	r2, [r3, #112]	; 0x70
		key->rk[ 34] = ROL(key->rk[ 28] + delta[1][ 8], 11);
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000b08:	4a53      	ldr	r2, [pc, #332]	; (8000c58 <lea_set_key+0xa24>)
 8000b0a:	4413      	add	r3, r2
 8000b0c:	ea4f 5273 	mov.w	r2, r3, ror #21
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		key->rk[ 40] = ROL(key->rk[ 34] + delta[2][ 9], 11);
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b1c:	4a4f      	ldr	r2, [pc, #316]	; (8000c5c <lea_set_key+0xa28>)
 8000b1e:	4413      	add	r3, r2
 8000b20:	ea4f 5273 	mov.w	r2, r3, ror #21
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		key->rk[ 46] = ROL(key->rk[ 40] + delta[3][10], 11);
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8000b30:	4a4b      	ldr	r2, [pc, #300]	; (8000c60 <lea_set_key+0xa2c>)
 8000b32:	4413      	add	r3, r2
 8000b34:	ea4f 5273 	mov.w	r2, r3, ror #21
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		key->rk[ 52] = ROL(key->rk[ 46] + delta[0][11], 11);
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000b44:	4a47      	ldr	r2, [pc, #284]	; (8000c64 <lea_set_key+0xa30>)
 8000b46:	4413      	add	r3, r2
 8000b48:	ea4f 5273 	mov.w	r2, r3, ror #21
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		key->rk[ 58] = ROL(key->rk[ 52] + delta[1][12], 11);
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8000b58:	4a43      	ldr	r2, [pc, #268]	; (8000c68 <lea_set_key+0xa34>)
 8000b5a:	4413      	add	r3, r2
 8000b5c:	ea4f 5273 	mov.w	r2, r3, ror #21
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
		key->rk[ 64] = ROL(key->rk[ 58] + delta[2][13], 11);
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b6c:	4a3f      	ldr	r2, [pc, #252]	; (8000c6c <lea_set_key+0xa38>)
 8000b6e:	4413      	add	r3, r2
 8000b70:	ea4f 5273 	mov.w	r2, r3, ror #21
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		key->rk[ 70] = ROL(key->rk[ 64] + delta[3][14], 11);
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8000b80:	4a3b      	ldr	r2, [pc, #236]	; (8000c70 <lea_set_key+0xa3c>)
 8000b82:	4413      	add	r3, r2
 8000b84:	ea4f 5273 	mov.w	r2, r3, ror #21
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		key->rk[ 76] = ROL(key->rk[ 70] + delta[0][15], 11);
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8000b94:	4a37      	ldr	r2, [pc, #220]	; (8000c74 <lea_set_key+0xa40>)
 8000b96:	4413      	add	r3, r2
 8000b98:	ea4f 5273 	mov.w	r2, r3, ror #21
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
		key->rk[ 82] = ROL(key->rk[ 76] + delta[1][16], 11);
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8000ba8:	4a33      	ldr	r2, [pc, #204]	; (8000c78 <lea_set_key+0xa44>)
 8000baa:	4413      	add	r3, r2
 8000bac:	ea4f 5273 	mov.w	r2, r3, ror #21
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
		key->rk[ 88] = ROL(key->rk[ 82] + delta[2][17], 11);
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000bbc:	4a2f      	ldr	r2, [pc, #188]	; (8000c7c <lea_set_key+0xa48>)
 8000bbe:	4413      	add	r3, r2
 8000bc0:	ea4f 5273 	mov.w	r2, r3, ror #21
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
		key->rk[ 94] = ROL(key->rk[ 88] + delta[3][18], 11);
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8000bd0:	4a2b      	ldr	r2, [pc, #172]	; (8000c80 <lea_set_key+0xa4c>)
 8000bd2:	4413      	add	r3, r2
 8000bd4:	ea4f 5273 	mov.w	r2, r3, ror #21
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
		key->rk[100] = ROL(key->rk[ 94] + delta[0][19], 11);
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8000be4:	e04e      	b.n	8000c84 <lea_set_key+0xa50>
 8000be6:	bf00      	nop
 8000be8:	23135812 	.word	0x23135812
 8000bec:	9e27c8a7 	.word	0x9e27c8a7
 8000bf0:	1be61d8f 	.word	0x1be61d8f
 8000bf4:	fbfa76f0 	.word	0xfbfa76f0
 8000bf8:	31358122 	.word	0x31358122
 8000bfc:	e27c8a79 	.word	0xe27c8a79
 8000c00:	be61d8f1 	.word	0xbe61d8f1
 8000c04:	bfa76f0f 	.word	0xbfa76f0f
 8000c08:	13581223 	.word	0x13581223
 8000c0c:	27c8a79e 	.word	0x27c8a79e
 8000c10:	e61d8f1b 	.word	0xe61d8f1b
 8000c14:	fa76f0fb 	.word	0xfa76f0fb
 8000c18:	35812231 	.word	0x35812231
 8000c1c:	7c8a79e2 	.word	0x7c8a79e2
 8000c20:	61d8f1be 	.word	0x61d8f1be
 8000c24:	a76f0fbf 	.word	0xa76f0fbf
 8000c28:	58122313 	.word	0x58122313
 8000c2c:	c8a79e27 	.word	0xc8a79e27
 8000c30:	1d8f1be6 	.word	0x1d8f1be6
 8000c34:	76f0fbfa 	.word	0x76f0fbfa
 8000c38:	81223135 	.word	0x81223135
 8000c3c:	8a79e27c 	.word	0x8a79e27c
 8000c40:	d8f1be61 	.word	0xd8f1be61
 8000c44:	1f7f4ede 	.word	0x1f7f4ede
 8000c48:	4626b024 	.word	0x4626b024
 8000c4c:	3c4f914f 	.word	0x3c4f914f
 8000c50:	37cc3b1e 	.word	0x37cc3b1e
 8000c54:	f7f4ede1 	.word	0xf7f4ede1
 8000c58:	626b0244 	.word	0x626b0244
 8000c5c:	c4f914f3 	.word	0xc4f914f3
 8000c60:	7cc3b1e3 	.word	0x7cc3b1e3
 8000c64:	7f4ede1f 	.word	0x7f4ede1f
 8000c68:	26b02446 	.word	0x26b02446
 8000c6c:	4f914f3c 	.word	0x4f914f3c
 8000c70:	cc3b1e37 	.word	0xcc3b1e37
 8000c74:	f4ede1f7 	.word	0xf4ede1f7
 8000c78:	6b024462 	.word	0x6b024462
 8000c7c:	f914f3c4 	.word	0xf914f3c4
 8000c80:	c3b1e37c 	.word	0xc3b1e37c
 8000c84:	4a27      	ldr	r2, [pc, #156]	; (8000d24 <lea_set_key+0xaf0>)
 8000c86:	4413      	add	r3, r2
 8000c88:	ea4f 5273 	mov.w	r2, r3, ror #21
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
		key->rk[106] = ROL(key->rk[100] + delta[1][20], 11);
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8000c98:	4a23      	ldr	r2, [pc, #140]	; (8000d28 <lea_set_key+0xaf4>)
 8000c9a:	4413      	add	r3, r2
 8000c9c:	ea4f 5273 	mov.w	r2, r3, ror #21
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
		key->rk[112] = ROL(key->rk[106] + delta[2][21], 11);
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8000cac:	4a1f      	ldr	r2, [pc, #124]	; (8000d2c <lea_set_key+0xaf8>)
 8000cae:	4413      	add	r3, r2
 8000cb0:	ea4f 5273 	mov.w	r2, r3, ror #21
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
		key->rk[118] = ROL(key->rk[112] + delta[3][22], 11);
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 8000cc0:	4a1b      	ldr	r2, [pc, #108]	; (8000d30 <lea_set_key+0xafc>)
 8000cc2:	4413      	add	r3, r2
 8000cc4:	ea4f 5273 	mov.w	r2, r3, ror #21
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
		key->rk[124] = ROL(key->rk[118] + delta[0][23], 11);
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 8000cd4:	4a17      	ldr	r2, [pc, #92]	; (8000d34 <lea_set_key+0xb00>)
 8000cd6:	4413      	add	r3, r2
 8000cd8:	ea4f 5273 	mov.w	r2, r3, ror #21
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
		key->rk[130] = ROL(key->rk[124] + delta[1][24], 11);
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 8000ce8:	4a13      	ldr	r2, [pc, #76]	; (8000d38 <lea_set_key+0xb04>)
 8000cea:	4413      	add	r3, r2
 8000cec:	ea4f 5273 	mov.w	r2, r3, ror #21
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		key->rk[136] = ROL(key->rk[130] + delta[2][25], 11);
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8000cfc:	4a0f      	ldr	r2, [pc, #60]	; (8000d3c <lea_set_key+0xb08>)
 8000cfe:	4413      	add	r3, r2
 8000d00:	ea4f 5273 	mov.w	r2, r3, ror #21
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		key->rk[142] = ROL(key->rk[136] + delta[3][26], 11);
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8000d10:	4a0b      	ldr	r2, [pc, #44]	; (8000d40 <lea_set_key+0xb0c>)
 8000d12:	4413      	add	r3, r2
 8000d14:	ea4f 5273 	mov.w	r2, r3, ror #21
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
		break;
 8000d1e:	f002 b839 	b.w	8002d94 <lea_set_key+0x2b60>
 8000d22:	bf00      	nop
 8000d24:	4ede1f7f 	.word	0x4ede1f7f
 8000d28:	b0244626 	.word	0xb0244626
 8000d2c:	914f3c4f 	.word	0x914f3c4f
 8000d30:	3b1e37cc 	.word	0x3b1e37cc
 8000d34:	ede1f7f4 	.word	0xede1f7f4
 8000d38:	0244626b 	.word	0x0244626b
 8000d3c:	14f3c4f9 	.word	0x14f3c4f9
 8000d40:	b1e37cc3 	.word	0xb1e37cc3
		key->rk[  0] = ROL(loadU32(_mk[0]) + delta[0][ 0], 1);
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4ab7      	ldr	r2, [pc, #732]	; (8001028 <lea_set_key+0xdf4>)
 8000d4a:	4413      	add	r3, r2
 8000d4c:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	601a      	str	r2, [r3, #0]
		key->rk[  6] = ROL(key->rk[  0] + delta[1][ 1], 1);
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4ab4      	ldr	r2, [pc, #720]	; (800102c <lea_set_key+0xdf8>)
 8000d5a:	4413      	add	r3, r2
 8000d5c:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	619a      	str	r2, [r3, #24]
		key->rk[ 12] = ROL(key->rk[  6] + delta[2][ 2], 1);
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	4ab1      	ldr	r2, [pc, #708]	; (8001030 <lea_set_key+0xdfc>)
 8000d6a:	4413      	add	r3, r2
 8000d6c:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	631a      	str	r2, [r3, #48]	; 0x30
		key->rk[ 18] = ROL(key->rk[ 12] + delta[3][ 3], 1);
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d78:	4aae      	ldr	r2, [pc, #696]	; (8001034 <lea_set_key+0xe00>)
 8000d7a:	4413      	add	r3, r2
 8000d7c:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	649a      	str	r2, [r3, #72]	; 0x48
		key->rk[ 24] = ROL(key->rk[ 18] + delta[4][ 4], 1);
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d88:	4aab      	ldr	r2, [pc, #684]	; (8001038 <lea_set_key+0xe04>)
 8000d8a:	4413      	add	r3, r2
 8000d8c:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	661a      	str	r2, [r3, #96]	; 0x60
		key->rk[ 30] = ROL(key->rk[ 24] + delta[5][ 5], 1);
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d98:	4aa8      	ldr	r2, [pc, #672]	; (800103c <lea_set_key+0xe08>)
 8000d9a:	4413      	add	r3, r2
 8000d9c:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	679a      	str	r2, [r3, #120]	; 0x78
		key->rk[ 36] = ROL(key->rk[ 30] + delta[0][ 6], 1);
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000da8:	4aa5      	ldr	r2, [pc, #660]	; (8001040 <lea_set_key+0xe0c>)
 8000daa:	4413      	add	r3, r2
 8000dac:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		key->rk[ 42] = ROL(key->rk[ 36] + delta[1][ 7], 1);
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000dbc:	4aa1      	ldr	r2, [pc, #644]	; (8001044 <lea_set_key+0xe10>)
 8000dbe:	4413      	add	r3, r2
 8000dc0:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		key->rk[ 48] = ROL(key->rk[ 42] + delta[2][ 8], 1);
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000dd0:	4a9d      	ldr	r2, [pc, #628]	; (8001048 <lea_set_key+0xe14>)
 8000dd2:	4413      	add	r3, r2
 8000dd4:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		key->rk[ 54] = ROL(key->rk[ 48] + delta[3][ 9], 1);
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000de4:	4a99      	ldr	r2, [pc, #612]	; (800104c <lea_set_key+0xe18>)
 8000de6:	4413      	add	r3, r2
 8000de8:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		key->rk[ 60] = ROL(key->rk[ 54] + delta[4][10], 1);
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000df8:	4a95      	ldr	r2, [pc, #596]	; (8001050 <lea_set_key+0xe1c>)
 8000dfa:	4413      	add	r3, r2
 8000dfc:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
		key->rk[ 66] = ROL(key->rk[ 60] + delta[5][11], 1);
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e0c:	4a91      	ldr	r2, [pc, #580]	; (8001054 <lea_set_key+0xe20>)
 8000e0e:	4413      	add	r3, r2
 8000e10:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
		key->rk[ 72] = ROL(key->rk[ 66] + delta[0][12], 1);
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000e20:	4a8d      	ldr	r2, [pc, #564]	; (8001058 <lea_set_key+0xe24>)
 8000e22:	4413      	add	r3, r2
 8000e24:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
		key->rk[ 78] = ROL(key->rk[ 72] + delta[1][13], 1);
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8000e34:	4a89      	ldr	r2, [pc, #548]	; (800105c <lea_set_key+0xe28>)
 8000e36:	4413      	add	r3, r2
 8000e38:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
		key->rk[ 84] = ROL(key->rk[ 78] + delta[2][14], 1);
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000e48:	4a85      	ldr	r2, [pc, #532]	; (8001060 <lea_set_key+0xe2c>)
 8000e4a:	4413      	add	r3, r2
 8000e4c:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
		key->rk[ 90] = ROL(key->rk[ 84] + delta[3][15], 1);
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8000e5c:	4a81      	ldr	r2, [pc, #516]	; (8001064 <lea_set_key+0xe30>)
 8000e5e:	4413      	add	r3, r2
 8000e60:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
		key->rk[ 96] = ROL(key->rk[ 90] + delta[4][16], 1);
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8000e70:	4a7d      	ldr	r2, [pc, #500]	; (8001068 <lea_set_key+0xe34>)
 8000e72:	4413      	add	r3, r2
 8000e74:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		key->rk[102] = ROL(key->rk[ 96] + delta[5][17], 1);
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8000e84:	4a79      	ldr	r2, [pc, #484]	; (800106c <lea_set_key+0xe38>)
 8000e86:	4413      	add	r3, r2
 8000e88:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
		key->rk[108] = ROL(key->rk[102] + delta[0][18], 1);
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8000e98:	4a75      	ldr	r2, [pc, #468]	; (8001070 <lea_set_key+0xe3c>)
 8000e9a:	4413      	add	r3, r2
 8000e9c:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
		key->rk[114] = ROL(key->rk[108] + delta[1][19], 1);
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8000eac:	4a71      	ldr	r2, [pc, #452]	; (8001074 <lea_set_key+0xe40>)
 8000eae:	4413      	add	r3, r2
 8000eb0:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
		key->rk[120] = ROL(key->rk[114] + delta[2][20], 1);
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8000ec0:	4a6d      	ldr	r2, [pc, #436]	; (8001078 <lea_set_key+0xe44>)
 8000ec2:	4413      	add	r3, r2
 8000ec4:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
		key->rk[126] = ROL(key->rk[120] + delta[3][21], 1);
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8000ed4:	4a69      	ldr	r2, [pc, #420]	; (800107c <lea_set_key+0xe48>)
 8000ed6:	4413      	add	r3, r2
 8000ed8:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
		key->rk[132] = ROL(key->rk[126] + delta[4][22], 1);
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 8000ee8:	4a65      	ldr	r2, [pc, #404]	; (8001080 <lea_set_key+0xe4c>)
 8000eea:	4413      	add	r3, r2
 8000eec:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
		key->rk[138] = ROL(key->rk[132] + delta[5][23], 1);
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8000efc:	4a61      	ldr	r2, [pc, #388]	; (8001084 <lea_set_key+0xe50>)
 8000efe:	4413      	add	r3, r2
 8000f00:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		key->rk[144] = ROL(key->rk[138] + delta[0][24], 1);
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8000f10:	4a5d      	ldr	r2, [pc, #372]	; (8001088 <lea_set_key+0xe54>)
 8000f12:	4413      	add	r3, r2
 8000f14:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
		key->rk[150] = ROL(key->rk[144] + delta[1][25], 1);
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8000f24:	4a59      	ldr	r2, [pc, #356]	; (800108c <lea_set_key+0xe58>)
 8000f26:	4413      	add	r3, r2
 8000f28:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
		key->rk[156] = ROL(key->rk[150] + delta[2][26], 1);
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
 8000f38:	4a55      	ldr	r2, [pc, #340]	; (8001090 <lea_set_key+0xe5c>)
 8000f3a:	4413      	add	r3, r2
 8000f3c:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
		key->rk[162] = ROL(key->rk[156] + delta[3][27], 1);
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8000f4c:	4a51      	ldr	r2, [pc, #324]	; (8001094 <lea_set_key+0xe60>)
 8000f4e:	4413      	add	r3, r2
 8000f50:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
		key->rk[  1] = ROL(loadU32(_mk[1]) + delta[0][ 1], 3);
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	3304      	adds	r3, #4
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a4d      	ldr	r2, [pc, #308]	; (8001098 <lea_set_key+0xe64>)
 8000f62:	4413      	add	r3, r2
 8000f64:	ea4f 7273 	mov.w	r2, r3, ror #29
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	605a      	str	r2, [r3, #4]
		key->rk[  7] = ROL(key->rk[  1] + delta[1][ 2], 3);
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	4a4a      	ldr	r2, [pc, #296]	; (800109c <lea_set_key+0xe68>)
 8000f72:	4413      	add	r3, r2
 8000f74:	ea4f 7273 	mov.w	r2, r3, ror #29
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	61da      	str	r2, [r3, #28]
		key->rk[ 13] = ROL(key->rk[  7] + delta[2][ 3], 3);
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	69db      	ldr	r3, [r3, #28]
 8000f80:	4a47      	ldr	r2, [pc, #284]	; (80010a0 <lea_set_key+0xe6c>)
 8000f82:	4413      	add	r3, r2
 8000f84:	ea4f 7273 	mov.w	r2, r3, ror #29
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	635a      	str	r2, [r3, #52]	; 0x34
		key->rk[ 19] = ROL(key->rk[ 13] + delta[3][ 4], 3);
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f90:	4a44      	ldr	r2, [pc, #272]	; (80010a4 <lea_set_key+0xe70>)
 8000f92:	4413      	add	r3, r2
 8000f94:	ea4f 7273 	mov.w	r2, r3, ror #29
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	64da      	str	r2, [r3, #76]	; 0x4c
		key->rk[ 25] = ROL(key->rk[ 19] + delta[4][ 5], 3);
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa0:	4a41      	ldr	r2, [pc, #260]	; (80010a8 <lea_set_key+0xe74>)
 8000fa2:	4413      	add	r3, r2
 8000fa4:	ea4f 7273 	mov.w	r2, r3, ror #29
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	665a      	str	r2, [r3, #100]	; 0x64
		key->rk[ 31] = ROL(key->rk[ 25] + delta[5][ 6], 3);
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000fb0:	4a3e      	ldr	r2, [pc, #248]	; (80010ac <lea_set_key+0xe78>)
 8000fb2:	4413      	add	r3, r2
 8000fb4:	ea4f 7273 	mov.w	r2, r3, ror #29
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	67da      	str	r2, [r3, #124]	; 0x7c
		key->rk[ 37] = ROL(key->rk[ 31] + delta[0][ 7], 3);
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000fc0:	4a3b      	ldr	r2, [pc, #236]	; (80010b0 <lea_set_key+0xe7c>)
 8000fc2:	4413      	add	r3, r2
 8000fc4:	ea4f 7273 	mov.w	r2, r3, ror #29
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		key->rk[ 43] = ROL(key->rk[ 37] + delta[1][ 8], 3);
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fd4:	4a37      	ldr	r2, [pc, #220]	; (80010b4 <lea_set_key+0xe80>)
 8000fd6:	4413      	add	r3, r2
 8000fd8:	ea4f 7273 	mov.w	r2, r3, ror #29
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		key->rk[ 49] = ROL(key->rk[ 43] + delta[2][ 9], 3);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8000fe8:	4a33      	ldr	r2, [pc, #204]	; (80010b8 <lea_set_key+0xe84>)
 8000fea:	4413      	add	r3, r2
 8000fec:	ea4f 7273 	mov.w	r2, r3, ror #29
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		key->rk[ 55] = ROL(key->rk[ 49] + delta[3][10], 3);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000ffc:	4a2f      	ldr	r2, [pc, #188]	; (80010bc <lea_set_key+0xe88>)
 8000ffe:	4413      	add	r3, r2
 8001000:	ea4f 7273 	mov.w	r2, r3, ror #29
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		key->rk[ 61] = ROL(key->rk[ 55] + delta[4][11], 3);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001010:	4a2b      	ldr	r2, [pc, #172]	; (80010c0 <lea_set_key+0xe8c>)
 8001012:	4413      	add	r3, r2
 8001014:	ea4f 7273 	mov.w	r2, r3, ror #29
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
		key->rk[ 67] = ROL(key->rk[ 61] + delta[5][12], 3);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001024:	e04e      	b.n	80010c4 <lea_set_key+0xe90>
 8001026:	bf00      	nop
 8001028:	c3efe9db 	.word	0xc3efe9db
 800102c:	88c4d604 	.word	0x88c4d604
 8001030:	e789f229 	.word	0xe789f229
 8001034:	c6f98763 	.word	0xc6f98763
 8001038:	15ea49e7 	.word	0x15ea49e7
 800103c:	f0bb4158 	.word	0xf0bb4158
 8001040:	fbfa76f0 	.word	0xfbfa76f0
 8001044:	31358122 	.word	0x31358122
 8001048:	e27c8a79 	.word	0xe27c8a79
 800104c:	be61d8f1 	.word	0xbe61d8f1
 8001050:	7a9279c5 	.word	0x7a9279c5
 8001054:	2ed0563c 	.word	0x2ed0563c
 8001058:	fe9dbc3e 	.word	0xfe9dbc3e
 800105c:	4d60488c 	.word	0x4d60488c
 8001060:	9f229e78 	.word	0x9f229e78
 8001064:	98763c6f 	.word	0x98763c6f
 8001068:	a49e715e 	.word	0xa49e715e
 800106c:	b4158f0b 	.word	0xb4158f0b
 8001070:	a76f0fbf 	.word	0xa76f0fbf
 8001074:	58122313 	.word	0x58122313
 8001078:	c8a79e27 	.word	0xc8a79e27
 800107c:	1d8f1be6 	.word	0x1d8f1be6
 8001080:	279c57a9 	.word	0x279c57a9
 8001084:	0563c2ed 	.word	0x0563c2ed
 8001088:	dbc3efe9 	.word	0xdbc3efe9
 800108c:	0488c4d6 	.word	0x0488c4d6
 8001090:	29e789f2 	.word	0x29e789f2
 8001094:	63c6f987 	.word	0x63c6f987
 8001098:	87dfd3b7 	.word	0x87dfd3b7
 800109c:	1189ac09 	.word	0x1189ac09
 80010a0:	cf13e453 	.word	0xcf13e453
 80010a4:	8df30ec7 	.word	0x8df30ec7
 80010a8:	2bd493ce 	.word	0x2bd493ce
 80010ac:	e17682b1 	.word	0xe17682b1
 80010b0:	f7f4ede1 	.word	0xf7f4ede1
 80010b4:	626b0244 	.word	0x626b0244
 80010b8:	c4f914f3 	.word	0xc4f914f3
 80010bc:	7cc3b1e3 	.word	0x7cc3b1e3
 80010c0:	f524f38a 	.word	0xf524f38a
 80010c4:	4abe      	ldr	r2, [pc, #760]	; (80013c0 <lea_set_key+0x118c>)
 80010c6:	4413      	add	r3, r2
 80010c8:	ea4f 7273 	mov.w	r2, r3, ror #29
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		key->rk[ 73] = ROL(key->rk[ 67] + delta[0][13], 3);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80010d8:	4aba      	ldr	r2, [pc, #744]	; (80013c4 <lea_set_key+0x1190>)
 80010da:	4413      	add	r3, r2
 80010dc:	ea4f 7273 	mov.w	r2, r3, ror #29
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
		key->rk[ 79] = ROL(key->rk[ 73] + delta[1][14], 3);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80010ec:	4ab6      	ldr	r2, [pc, #728]	; (80013c8 <lea_set_key+0x1194>)
 80010ee:	4413      	add	r3, r2
 80010f0:	ea4f 7273 	mov.w	r2, r3, ror #29
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
		key->rk[ 85] = ROL(key->rk[ 79] + delta[2][15], 3);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8001100:	4ab2      	ldr	r2, [pc, #712]	; (80013cc <lea_set_key+0x1198>)
 8001102:	4413      	add	r3, r2
 8001104:	ea4f 7273 	mov.w	r2, r3, ror #29
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
		key->rk[ 91] = ROL(key->rk[ 85] + delta[3][16], 3);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001114:	4aae      	ldr	r2, [pc, #696]	; (80013d0 <lea_set_key+0x119c>)
 8001116:	4413      	add	r3, r2
 8001118:	ea4f 7273 	mov.w	r2, r3, ror #29
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
		key->rk[ 97] = ROL(key->rk[ 91] + delta[4][17], 3);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8001128:	4aaa      	ldr	r2, [pc, #680]	; (80013d4 <lea_set_key+0x11a0>)
 800112a:	4413      	add	r3, r2
 800112c:	ea4f 7273 	mov.w	r2, r3, ror #29
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
		key->rk[103] = ROL(key->rk[ 97] + delta[5][18], 3);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 800113c:	4aa6      	ldr	r2, [pc, #664]	; (80013d8 <lea_set_key+0x11a4>)
 800113e:	4413      	add	r3, r2
 8001140:	ea4f 7273 	mov.w	r2, r3, ror #29
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
		key->rk[109] = ROL(key->rk[103] + delta[0][19], 3);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8001150:	4aa2      	ldr	r2, [pc, #648]	; (80013dc <lea_set_key+0x11a8>)
 8001152:	4413      	add	r3, r2
 8001154:	ea4f 7273 	mov.w	r2, r3, ror #29
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		key->rk[115] = ROL(key->rk[109] + delta[1][20], 3);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8001164:	4a9e      	ldr	r2, [pc, #632]	; (80013e0 <lea_set_key+0x11ac>)
 8001166:	4413      	add	r3, r2
 8001168:	ea4f 7273 	mov.w	r2, r3, ror #29
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
		key->rk[121] = ROL(key->rk[115] + delta[2][21], 3);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8001178:	4a9a      	ldr	r2, [pc, #616]	; (80013e4 <lea_set_key+0x11b0>)
 800117a:	4413      	add	r3, r2
 800117c:	ea4f 7273 	mov.w	r2, r3, ror #29
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
		key->rk[127] = ROL(key->rk[121] + delta[3][22], 3);
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 800118c:	4a96      	ldr	r2, [pc, #600]	; (80013e8 <lea_set_key+0x11b4>)
 800118e:	4413      	add	r3, r2
 8001190:	ea4f 7273 	mov.w	r2, r3, ror #29
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
		key->rk[133] = ROL(key->rk[127] + delta[4][23], 3);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 80011a0:	4a92      	ldr	r2, [pc, #584]	; (80013ec <lea_set_key+0x11b8>)
 80011a2:	4413      	add	r3, r2
 80011a4:	ea4f 7273 	mov.w	r2, r3, ror #29
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
		key->rk[139] = ROL(key->rk[133] + delta[5][24], 3);
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80011b4:	4a8e      	ldr	r2, [pc, #568]	; (80013f0 <lea_set_key+0x11bc>)
 80011b6:	4413      	add	r3, r2
 80011b8:	ea4f 7273 	mov.w	r2, r3, ror #29
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		key->rk[145] = ROL(key->rk[139] + delta[0][25], 3);
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80011c8:	4a8a      	ldr	r2, [pc, #552]	; (80013f4 <lea_set_key+0x11c0>)
 80011ca:	4413      	add	r3, r2
 80011cc:	ea4f 7273 	mov.w	r2, r3, ror #29
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
		key->rk[151] = ROL(key->rk[145] + delta[1][26], 3);
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 80011dc:	4a86      	ldr	r2, [pc, #536]	; (80013f8 <lea_set_key+0x11c4>)
 80011de:	4413      	add	r3, r2
 80011e0:	ea4f 7273 	mov.w	r2, r3, ror #29
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
		key->rk[157] = ROL(key->rk[151] + delta[2][27], 3);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
 80011f0:	4a82      	ldr	r2, [pc, #520]	; (80013fc <lea_set_key+0x11c8>)
 80011f2:	4413      	add	r3, r2
 80011f4:	ea4f 7273 	mov.w	r2, r3, ror #29
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f8c3 2274 	str.w	r2, [r3, #628]	; 0x274
		key->rk[163] = ROL(key->rk[157] + delta[3][28], 3);
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	f8d3 3274 	ldr.w	r3, [r3, #628]	; 0x274
 8001204:	4a7e      	ldr	r2, [pc, #504]	; (8001400 <lea_set_key+0x11cc>)
 8001206:	4413      	add	r3, r2
 8001208:	ea4f 7273 	mov.w	r2, r3, ror #29
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
		key->rk[  2] = ROL(loadU32(_mk[2]) + delta[0][ 2], 6);
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	3308      	adds	r3, #8
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a7a      	ldr	r2, [pc, #488]	; (8001404 <lea_set_key+0x11d0>)
 800121a:	4413      	add	r3, r2
 800121c:	ea4f 62b3 	mov.w	r2, r3, ror #26
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	609a      	str	r2, [r3, #8]
		key->rk[  8] = ROL(key->rk[  2] + delta[1][ 3], 6);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	4a77      	ldr	r2, [pc, #476]	; (8001408 <lea_set_key+0x11d4>)
 800122a:	4413      	add	r3, r2
 800122c:	ea4f 62b3 	mov.w	r2, r3, ror #26
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	621a      	str	r2, [r3, #32]
		key->rk[ 14] = ROL(key->rk[  8] + delta[2][ 4], 6);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	6a1b      	ldr	r3, [r3, #32]
 8001238:	4a74      	ldr	r2, [pc, #464]	; (800140c <lea_set_key+0x11d8>)
 800123a:	4413      	add	r3, r2
 800123c:	ea4f 62b3 	mov.w	r2, r3, ror #26
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	639a      	str	r2, [r3, #56]	; 0x38
		key->rk[ 20] = ROL(key->rk[ 14] + delta[3][ 5], 6);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001248:	4a71      	ldr	r2, [pc, #452]	; (8001410 <lea_set_key+0x11dc>)
 800124a:	4413      	add	r3, r2
 800124c:	ea4f 62b3 	mov.w	r2, r3, ror #26
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	651a      	str	r2, [r3, #80]	; 0x50
		key->rk[ 26] = ROL(key->rk[ 20] + delta[4][ 6], 6);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001258:	4a6e      	ldr	r2, [pc, #440]	; (8001414 <lea_set_key+0x11e0>)
 800125a:	4413      	add	r3, r2
 800125c:	ea4f 62b3 	mov.w	r2, r3, ror #26
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	669a      	str	r2, [r3, #104]	; 0x68
		key->rk[ 32] = ROL(key->rk[ 26] + delta[5][ 7], 6);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001268:	4a6b      	ldr	r2, [pc, #428]	; (8001418 <lea_set_key+0x11e4>)
 800126a:	4413      	add	r3, r2
 800126c:	ea4f 62b3 	mov.w	r2, r3, ror #26
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		key->rk[ 38] = ROL(key->rk[ 32] + delta[0][ 8], 6);
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800127c:	4a67      	ldr	r2, [pc, #412]	; (800141c <lea_set_key+0x11e8>)
 800127e:	4413      	add	r3, r2
 8001280:	ea4f 62b3 	mov.w	r2, r3, ror #26
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		key->rk[ 44] = ROL(key->rk[ 38] + delta[1][ 9], 6);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001290:	4a63      	ldr	r2, [pc, #396]	; (8001420 <lea_set_key+0x11ec>)
 8001292:	4413      	add	r3, r2
 8001294:	ea4f 62b3 	mov.w	r2, r3, ror #26
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		key->rk[ 50] = ROL(key->rk[ 44] + delta[2][10], 6);
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80012a4:	4a5f      	ldr	r2, [pc, #380]	; (8001424 <lea_set_key+0x11f0>)
 80012a6:	4413      	add	r3, r2
 80012a8:	ea4f 62b3 	mov.w	r2, r3, ror #26
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		key->rk[ 56] = ROL(key->rk[ 50] + delta[3][11], 6);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80012b8:	4a5b      	ldr	r2, [pc, #364]	; (8001428 <lea_set_key+0x11f4>)
 80012ba:	4413      	add	r3, r2
 80012bc:	ea4f 62b3 	mov.w	r2, r3, ror #26
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
		key->rk[ 62] = ROL(key->rk[ 56] + delta[4][12], 6);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012cc:	4a57      	ldr	r2, [pc, #348]	; (800142c <lea_set_key+0x11f8>)
 80012ce:	4413      	add	r3, r2
 80012d0:	ea4f 62b3 	mov.w	r2, r3, ror #26
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
		key->rk[ 68] = ROL(key->rk[ 62] + delta[5][13], 6);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80012e0:	4a53      	ldr	r2, [pc, #332]	; (8001430 <lea_set_key+0x11fc>)
 80012e2:	4413      	add	r3, r2
 80012e4:	ea4f 62b3 	mov.w	r2, r3, ror #26
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		key->rk[ 74] = ROL(key->rk[ 68] + delta[0][14], 6);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80012f4:	4a4f      	ldr	r2, [pc, #316]	; (8001434 <lea_set_key+0x1200>)
 80012f6:	4413      	add	r3, r2
 80012f8:	ea4f 62b3 	mov.w	r2, r3, ror #26
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
		key->rk[ 80] = ROL(key->rk[ 74] + delta[1][15], 6);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8001308:	4a4b      	ldr	r2, [pc, #300]	; (8001438 <lea_set_key+0x1204>)
 800130a:	4413      	add	r3, r2
 800130c:	ea4f 62b3 	mov.w	r2, r3, ror #26
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		key->rk[ 86] = ROL(key->rk[ 80] + delta[2][16], 6);
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800131c:	4a47      	ldr	r2, [pc, #284]	; (800143c <lea_set_key+0x1208>)
 800131e:	4413      	add	r3, r2
 8001320:	ea4f 62b3 	mov.w	r2, r3, ror #26
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		key->rk[ 92] = ROL(key->rk[ 86] + delta[3][17], 6);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8001330:	4a43      	ldr	r2, [pc, #268]	; (8001440 <lea_set_key+0x120c>)
 8001332:	4413      	add	r3, r2
 8001334:	ea4f 62b3 	mov.w	r2, r3, ror #26
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
		key->rk[ 98] = ROL(key->rk[ 92] + delta[4][18], 6);
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8001344:	4a3f      	ldr	r2, [pc, #252]	; (8001444 <lea_set_key+0x1210>)
 8001346:	4413      	add	r3, r2
 8001348:	ea4f 62b3 	mov.w	r2, r3, ror #26
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
		key->rk[104] = ROL(key->rk[ 98] + delta[5][19], 6);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8001358:	4a3b      	ldr	r2, [pc, #236]	; (8001448 <lea_set_key+0x1214>)
 800135a:	4413      	add	r3, r2
 800135c:	ea4f 62b3 	mov.w	r2, r3, ror #26
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
		key->rk[110] = ROL(key->rk[104] + delta[0][20], 6);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800136c:	4a37      	ldr	r2, [pc, #220]	; (800144c <lea_set_key+0x1218>)
 800136e:	4413      	add	r3, r2
 8001370:	ea4f 62b3 	mov.w	r2, r3, ror #26
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
		key->rk[116] = ROL(key->rk[110] + delta[1][21], 6);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8001380:	4a33      	ldr	r2, [pc, #204]	; (8001450 <lea_set_key+0x121c>)
 8001382:	4413      	add	r3, r2
 8001384:	ea4f 62b3 	mov.w	r2, r3, ror #26
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
		key->rk[122] = ROL(key->rk[116] + delta[2][22], 6);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 8001394:	4a2f      	ldr	r2, [pc, #188]	; (8001454 <lea_set_key+0x1220>)
 8001396:	4413      	add	r3, r2
 8001398:	ea4f 62b3 	mov.w	r2, r3, ror #26
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
		key->rk[128] = ROL(key->rk[122] + delta[3][23], 6);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80013a8:	4a2b      	ldr	r2, [pc, #172]	; (8001458 <lea_set_key+0x1224>)
 80013aa:	4413      	add	r3, r2
 80013ac:	ea4f 62b3 	mov.w	r2, r3, ror #26
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		key->rk[134] = ROL(key->rk[128] + delta[4][24], 6);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80013bc:	e04e      	b.n	800145c <lea_set_key+0x1228>
 80013be:	bf00      	nop
 80013c0:	5da0ac78 	.word	0x5da0ac78
 80013c4:	fd3b787d 	.word	0xfd3b787d
 80013c8:	9ac09118 	.word	0x9ac09118
 80013cc:	3e453cf1 	.word	0x3e453cf1
 80013d0:	30ec78df 	.word	0x30ec78df
 80013d4:	493ce2bd 	.word	0x493ce2bd
 80013d8:	682b1e17 	.word	0x682b1e17
 80013dc:	4ede1f7f 	.word	0x4ede1f7f
 80013e0:	b0244626 	.word	0xb0244626
 80013e4:	914f3c4f 	.word	0x914f3c4f
 80013e8:	3b1e37cc 	.word	0x3b1e37cc
 80013ec:	4f38af52 	.word	0x4f38af52
 80013f0:	0ac785da 	.word	0x0ac785da
 80013f4:	b787dfd3 	.word	0xb787dfd3
 80013f8:	091189ac 	.word	0x091189ac
 80013fc:	53cf13e4 	.word	0x53cf13e4
 8001400:	c78df30e 	.word	0xc78df30e
 8001404:	0fbfa76f 	.word	0x0fbfa76f
 8001408:	23135812 	.word	0x23135812
 800140c:	9e27c8a7 	.word	0x9e27c8a7
 8001410:	1be61d8f 	.word	0x1be61d8f
 8001414:	57a9279c 	.word	0x57a9279c
 8001418:	c2ed0563 	.word	0xc2ed0563
 800141c:	efe9dbc3 	.word	0xefe9dbc3
 8001420:	c4d60488 	.word	0xc4d60488
 8001424:	89f229e7 	.word	0x89f229e7
 8001428:	f98763c6 	.word	0xf98763c6
 800142c:	ea49e715 	.word	0xea49e715
 8001430:	bb4158f0 	.word	0xbb4158f0
 8001434:	fa76f0fb 	.word	0xfa76f0fb
 8001438:	35812231 	.word	0x35812231
 800143c:	7c8a79e2 	.word	0x7c8a79e2
 8001440:	61d8f1be 	.word	0x61d8f1be
 8001444:	9279c57a 	.word	0x9279c57a
 8001448:	d0563c2e 	.word	0xd0563c2e
 800144c:	9dbc3efe 	.word	0x9dbc3efe
 8001450:	60488c4d 	.word	0x60488c4d
 8001454:	229e789f 	.word	0x229e789f
 8001458:	763c6f98 	.word	0x763c6f98
 800145c:	4ab8      	ldr	r2, [pc, #736]	; (8001740 <lea_set_key+0x150c>)
 800145e:	4413      	add	r3, r2
 8001460:	ea4f 62b3 	mov.w	r2, r3, ror #26
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		key->rk[140] = ROL(key->rk[134] + delta[5][25], 6);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8001470:	4ab4      	ldr	r2, [pc, #720]	; (8001744 <lea_set_key+0x1510>)
 8001472:	4413      	add	r3, r2
 8001474:	ea4f 62b3 	mov.w	r2, r3, ror #26
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
		key->rk[146] = ROL(key->rk[140] + delta[0][26], 6);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8001484:	4ab0      	ldr	r2, [pc, #704]	; (8001748 <lea_set_key+0x1514>)
 8001486:	4413      	add	r3, r2
 8001488:	ea4f 62b3 	mov.w	r2, r3, ror #26
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
		key->rk[152] = ROL(key->rk[146] + delta[1][27], 6);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	f8d3 3248 	ldr.w	r3, [r3, #584]	; 0x248
 8001498:	4aac      	ldr	r2, [pc, #688]	; (800174c <lea_set_key+0x1518>)
 800149a:	4413      	add	r3, r2
 800149c:	ea4f 62b3 	mov.w	r2, r3, ror #26
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
		key->rk[158] = ROL(key->rk[152] + delta[2][28], 6);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 80014ac:	4aa8      	ldr	r2, [pc, #672]	; (8001750 <lea_set_key+0x151c>)
 80014ae:	4413      	add	r3, r2
 80014b0:	ea4f 62b3 	mov.w	r2, r3, ror #26
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
		key->rk[164] = ROL(key->rk[158] + delta[3][29], 6);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 80014c0:	4aa4      	ldr	r2, [pc, #656]	; (8001754 <lea_set_key+0x1520>)
 80014c2:	4413      	add	r3, r2
 80014c4:	ea4f 62b3 	mov.w	r2, r3, ror #26
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
		key->rk[  3] = ROL(loadU32(_mk[3]) + delta[0][ 3], 11);
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	330c      	adds	r3, #12
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4aa0      	ldr	r2, [pc, #640]	; (8001758 <lea_set_key+0x1524>)
 80014d6:	4413      	add	r3, r2
 80014d8:	ea4f 5273 	mov.w	r2, r3, ror #21
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	60da      	str	r2, [r3, #12]
		key->rk[  9] = ROL(key->rk[  3] + delta[1][ 4], 11);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	4a9d      	ldr	r2, [pc, #628]	; (800175c <lea_set_key+0x1528>)
 80014e6:	4413      	add	r3, r2
 80014e8:	ea4f 5273 	mov.w	r2, r3, ror #21
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	625a      	str	r2, [r3, #36]	; 0x24
		key->rk[ 15] = ROL(key->rk[  9] + delta[2][ 5], 11);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f4:	4a9a      	ldr	r2, [pc, #616]	; (8001760 <lea_set_key+0x152c>)
 80014f6:	4413      	add	r3, r2
 80014f8:	ea4f 5273 	mov.w	r2, r3, ror #21
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	63da      	str	r2, [r3, #60]	; 0x3c
		key->rk[ 21] = ROL(key->rk[ 15] + delta[3][ 6], 11);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001504:	4a97      	ldr	r2, [pc, #604]	; (8001764 <lea_set_key+0x1530>)
 8001506:	4413      	add	r3, r2
 8001508:	ea4f 5273 	mov.w	r2, r3, ror #21
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	655a      	str	r2, [r3, #84]	; 0x54
		key->rk[ 27] = ROL(key->rk[ 21] + delta[4][ 7], 11);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001514:	4a94      	ldr	r2, [pc, #592]	; (8001768 <lea_set_key+0x1534>)
 8001516:	4413      	add	r3, r2
 8001518:	ea4f 5273 	mov.w	r2, r3, ror #21
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	66da      	str	r2, [r3, #108]	; 0x6c
		key->rk[ 33] = ROL(key->rk[ 27] + delta[5][ 8], 11);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001524:	4a91      	ldr	r2, [pc, #580]	; (800176c <lea_set_key+0x1538>)
 8001526:	4413      	add	r3, r2
 8001528:	ea4f 5273 	mov.w	r2, r3, ror #21
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		key->rk[ 39] = ROL(key->rk[ 33] + delta[0][ 9], 11);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001538:	4a8d      	ldr	r2, [pc, #564]	; (8001770 <lea_set_key+0x153c>)
 800153a:	4413      	add	r3, r2
 800153c:	ea4f 5273 	mov.w	r2, r3, ror #21
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		key->rk[ 45] = ROL(key->rk[ 39] + delta[1][10], 11);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800154c:	4a89      	ldr	r2, [pc, #548]	; (8001774 <lea_set_key+0x1540>)
 800154e:	4413      	add	r3, r2
 8001550:	ea4f 5273 	mov.w	r2, r3, ror #21
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		key->rk[ 51] = ROL(key->rk[ 45] + delta[2][11], 11);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001560:	4a85      	ldr	r2, [pc, #532]	; (8001778 <lea_set_key+0x1544>)
 8001562:	4413      	add	r3, r2
 8001564:	ea4f 5273 	mov.w	r2, r3, ror #21
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		key->rk[ 57] = ROL(key->rk[ 51] + delta[3][12], 11);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001574:	4a81      	ldr	r2, [pc, #516]	; (800177c <lea_set_key+0x1548>)
 8001576:	4413      	add	r3, r2
 8001578:	ea4f 5273 	mov.w	r2, r3, ror #21
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
		key->rk[ 63] = ROL(key->rk[ 57] + delta[4][13], 11);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001588:	4a7d      	ldr	r2, [pc, #500]	; (8001780 <lea_set_key+0x154c>)
 800158a:	4413      	add	r3, r2
 800158c:	ea4f 5273 	mov.w	r2, r3, ror #21
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
		key->rk[ 69] = ROL(key->rk[ 63] + delta[5][14], 11);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800159c:	4a79      	ldr	r2, [pc, #484]	; (8001784 <lea_set_key+0x1550>)
 800159e:	4413      	add	r3, r2
 80015a0:	ea4f 5273 	mov.w	r2, r3, ror #21
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		key->rk[ 75] = ROL(key->rk[ 69] + delta[0][15], 11);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80015b0:	4a75      	ldr	r2, [pc, #468]	; (8001788 <lea_set_key+0x1554>)
 80015b2:	4413      	add	r3, r2
 80015b4:	ea4f 5273 	mov.w	r2, r3, ror #21
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
		key->rk[ 81] = ROL(key->rk[ 75] + delta[1][16], 11);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80015c4:	4a71      	ldr	r2, [pc, #452]	; (800178c <lea_set_key+0x1558>)
 80015c6:	4413      	add	r3, r2
 80015c8:	ea4f 5273 	mov.w	r2, r3, ror #21
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
		key->rk[ 87] = ROL(key->rk[ 81] + delta[2][17], 11);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80015d8:	4a6d      	ldr	r2, [pc, #436]	; (8001790 <lea_set_key+0x155c>)
 80015da:	4413      	add	r3, r2
 80015dc:	ea4f 5273 	mov.w	r2, r3, ror #21
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
		key->rk[ 93] = ROL(key->rk[ 87] + delta[3][18], 11);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 80015ec:	4a69      	ldr	r2, [pc, #420]	; (8001794 <lea_set_key+0x1560>)
 80015ee:	4413      	add	r3, r2
 80015f0:	ea4f 5273 	mov.w	r2, r3, ror #21
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
		key->rk[ 99] = ROL(key->rk[ 93] + delta[4][19], 11);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8001600:	4a65      	ldr	r2, [pc, #404]	; (8001798 <lea_set_key+0x1564>)
 8001602:	4413      	add	r3, r2
 8001604:	ea4f 5273 	mov.w	r2, r3, ror #21
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
		key->rk[105] = ROL(key->rk[ 99] + delta[5][20], 11);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8001614:	4a61      	ldr	r2, [pc, #388]	; (800179c <lea_set_key+0x1568>)
 8001616:	4413      	add	r3, r2
 8001618:	ea4f 5273 	mov.w	r2, r3, ror #21
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
		key->rk[111] = ROL(key->rk[105] + delta[0][21], 11);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001628:	4a5d      	ldr	r2, [pc, #372]	; (80017a0 <lea_set_key+0x156c>)
 800162a:	4413      	add	r3, r2
 800162c:	ea4f 5273 	mov.w	r2, r3, ror #21
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		key->rk[117] = ROL(key->rk[111] + delta[1][22], 11);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 800163c:	4a59      	ldr	r2, [pc, #356]	; (80017a4 <lea_set_key+0x1570>)
 800163e:	4413      	add	r3, r2
 8001640:	ea4f 5273 	mov.w	r2, r3, ror #21
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
		key->rk[123] = ROL(key->rk[117] + delta[2][23], 11);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 8001650:	4a55      	ldr	r2, [pc, #340]	; (80017a8 <lea_set_key+0x1574>)
 8001652:	4413      	add	r3, r2
 8001654:	ea4f 5273 	mov.w	r2, r3, ror #21
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
		key->rk[129] = ROL(key->rk[123] + delta[3][24], 11);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8001664:	4a51      	ldr	r2, [pc, #324]	; (80017ac <lea_set_key+0x1578>)
 8001666:	4413      	add	r3, r2
 8001668:	ea4f 5273 	mov.w	r2, r3, ror #21
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		key->rk[135] = ROL(key->rk[129] + delta[4][25], 11);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001678:	4a4d      	ldr	r2, [pc, #308]	; (80017b0 <lea_set_key+0x157c>)
 800167a:	4413      	add	r3, r2
 800167c:	ea4f 5273 	mov.w	r2, r3, ror #21
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
		key->rk[141] = ROL(key->rk[135] + delta[5][26], 11);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800168c:	4a49      	ldr	r2, [pc, #292]	; (80017b4 <lea_set_key+0x1580>)
 800168e:	4413      	add	r3, r2
 8001690:	ea4f 5273 	mov.w	r2, r3, ror #21
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
		key->rk[147] = ROL(key->rk[141] + delta[0][27], 11);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 80016a0:	4a45      	ldr	r2, [pc, #276]	; (80017b8 <lea_set_key+0x1584>)
 80016a2:	4413      	add	r3, r2
 80016a4:	ea4f 5273 	mov.w	r2, r3, ror #21
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
		key->rk[153] = ROL(key->rk[147] + delta[1][28], 11);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 80016b4:	4a41      	ldr	r2, [pc, #260]	; (80017bc <lea_set_key+0x1588>)
 80016b6:	4413      	add	r3, r2
 80016b8:	ea4f 5273 	mov.w	r2, r3, ror #21
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
		key->rk[159] = ROL(key->rk[153] + delta[2][29], 11);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 80016c8:	4a3d      	ldr	r2, [pc, #244]	; (80017c0 <lea_set_key+0x158c>)
 80016ca:	4413      	add	r3, r2
 80016cc:	ea4f 5273 	mov.w	r2, r3, ror #21
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
		key->rk[165] = ROL(key->rk[159] + delta[3][30], 11);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 80016dc:	4a39      	ldr	r2, [pc, #228]	; (80017c4 <lea_set_key+0x1590>)
 80016de:	4413      	add	r3, r2
 80016e0:	ea4f 5273 	mov.w	r2, r3, ror #21
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
		key->rk[  4] = ROL(loadU32(_mk[4]) + delta[0][ 4], 13);
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	3310      	adds	r3, #16
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a35      	ldr	r2, [pc, #212]	; (80017c8 <lea_set_key+0x1594>)
 80016f2:	4413      	add	r3, r2
 80016f4:	ea4f 42f3 	mov.w	r2, r3, ror #19
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	611a      	str	r2, [r3, #16]
		key->rk[ 10] = ROL(key->rk[  4] + delta[1][ 5], 13);
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	691b      	ldr	r3, [r3, #16]
 8001700:	4a32      	ldr	r2, [pc, #200]	; (80017cc <lea_set_key+0x1598>)
 8001702:	4413      	add	r3, r2
 8001704:	ea4f 42f3 	mov.w	r2, r3, ror #19
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	629a      	str	r2, [r3, #40]	; 0x28
		key->rk[ 16] = ROL(key->rk[ 10] + delta[2][ 6], 13);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001710:	4a2f      	ldr	r2, [pc, #188]	; (80017d0 <lea_set_key+0x159c>)
 8001712:	4413      	add	r3, r2
 8001714:	ea4f 42f3 	mov.w	r2, r3, ror #19
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	641a      	str	r2, [r3, #64]	; 0x40
		key->rk[ 22] = ROL(key->rk[ 16] + delta[3][ 7], 13);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001720:	4a2c      	ldr	r2, [pc, #176]	; (80017d4 <lea_set_key+0x15a0>)
 8001722:	4413      	add	r3, r2
 8001724:	ea4f 42f3 	mov.w	r2, r3, ror #19
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	659a      	str	r2, [r3, #88]	; 0x58
		key->rk[ 28] = ROL(key->rk[ 22] + delta[4][ 8], 13);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001730:	4a29      	ldr	r2, [pc, #164]	; (80017d8 <lea_set_key+0x15a4>)
 8001732:	4413      	add	r3, r2
 8001734:	ea4f 42f3 	mov.w	r2, r3, ror #19
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	671a      	str	r2, [r3, #112]	; 0x70
		key->rk[ 34] = ROL(key->rk[ 28] + delta[5][ 9], 13);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	e04d      	b.n	80017dc <lea_set_key+0x15a8>
 8001740:	9e715ea4 	.word	0x9e715ea4
 8001744:	158f0bb4 	.word	0x158f0bb4
 8001748:	6f0fbfa7 	.word	0x6f0fbfa7
 800174c:	12231358 	.word	0x12231358
 8001750:	a79e27c8 	.word	0xa79e27c8
 8001754:	8f1be61d 	.word	0x8f1be61d
 8001758:	1f7f4ede 	.word	0x1f7f4ede
 800175c:	4626b024 	.word	0x4626b024
 8001760:	3c4f914f 	.word	0x3c4f914f
 8001764:	37cc3b1e 	.word	0x37cc3b1e
 8001768:	af524f38 	.word	0xaf524f38
 800176c:	85da0ac7 	.word	0x85da0ac7
 8001770:	dfd3b787 	.word	0xdfd3b787
 8001774:	89ac0911 	.word	0x89ac0911
 8001778:	13e453cf 	.word	0x13e453cf
 800177c:	f30ec78d 	.word	0xf30ec78d
 8001780:	d493ce2b 	.word	0xd493ce2b
 8001784:	7682b1e1 	.word	0x7682b1e1
 8001788:	f4ede1f7 	.word	0xf4ede1f7
 800178c:	6b024462 	.word	0x6b024462
 8001790:	f914f3c4 	.word	0xf914f3c4
 8001794:	c3b1e37c 	.word	0xc3b1e37c
 8001798:	24f38af5 	.word	0x24f38af5
 800179c:	a0ac785d 	.word	0xa0ac785d
 80017a0:	3b787dfd 	.word	0x3b787dfd
 80017a4:	c091189a 	.word	0xc091189a
 80017a8:	453cf13e 	.word	0x453cf13e
 80017ac:	ec78df30 	.word	0xec78df30
 80017b0:	3ce2bd49 	.word	0x3ce2bd49
 80017b4:	2b1e1768 	.word	0x2b1e1768
 80017b8:	de1f7f4e 	.word	0xde1f7f4e
 80017bc:	244626b0 	.word	0x244626b0
 80017c0:	4f3c4f91 	.word	0x4f3c4f91
 80017c4:	1e37cc3b 	.word	0x1e37cc3b
 80017c8:	3efe9dbc 	.word	0x3efe9dbc
 80017cc:	8c4d6048 	.word	0x8c4d6048
 80017d0:	789f229e 	.word	0x789f229e
 80017d4:	6f98763c 	.word	0x6f98763c
 80017d8:	5ea49e71 	.word	0x5ea49e71
 80017dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017de:	4abe      	ldr	r2, [pc, #760]	; (8001ad8 <lea_set_key+0x18a4>)
 80017e0:	4413      	add	r3, r2
 80017e2:	ea4f 42f3 	mov.w	r2, r3, ror #19
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		key->rk[ 40] = ROL(key->rk[ 34] + delta[0][10], 13);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017f2:	4aba      	ldr	r2, [pc, #744]	; (8001adc <lea_set_key+0x18a8>)
 80017f4:	4413      	add	r3, r2
 80017f6:	ea4f 42f3 	mov.w	r2, r3, ror #19
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		key->rk[ 46] = ROL(key->rk[ 40] + delta[1][11], 13);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001806:	4ab6      	ldr	r2, [pc, #728]	; (8001ae0 <lea_set_key+0x18ac>)
 8001808:	4413      	add	r3, r2
 800180a:	ea4f 42f3 	mov.w	r2, r3, ror #19
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		key->rk[ 52] = ROL(key->rk[ 46] + delta[2][12], 13);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800181a:	4ab2      	ldr	r2, [pc, #712]	; (8001ae4 <lea_set_key+0x18b0>)
 800181c:	4413      	add	r3, r2
 800181e:	ea4f 42f3 	mov.w	r2, r3, ror #19
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		key->rk[ 58] = ROL(key->rk[ 52] + delta[3][13], 13);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800182e:	4aae      	ldr	r2, [pc, #696]	; (8001ae8 <lea_set_key+0x18b4>)
 8001830:	4413      	add	r3, r2
 8001832:	ea4f 42f3 	mov.w	r2, r3, ror #19
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
		key->rk[ 64] = ROL(key->rk[ 58] + delta[4][14], 13);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001842:	4aaa      	ldr	r2, [pc, #680]	; (8001aec <lea_set_key+0x18b8>)
 8001844:	4413      	add	r3, r2
 8001846:	ea4f 42f3 	mov.w	r2, r3, ror #19
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		key->rk[ 70] = ROL(key->rk[ 64] + delta[5][15], 13);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001856:	4aa6      	ldr	r2, [pc, #664]	; (8001af0 <lea_set_key+0x18bc>)
 8001858:	4413      	add	r3, r2
 800185a:	ea4f 42f3 	mov.w	r2, r3, ror #19
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		key->rk[ 76] = ROL(key->rk[ 70] + delta[0][16], 13);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800186a:	4aa2      	ldr	r2, [pc, #648]	; (8001af4 <lea_set_key+0x18c0>)
 800186c:	4413      	add	r3, r2
 800186e:	ea4f 42f3 	mov.w	r2, r3, ror #19
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
		key->rk[ 82] = ROL(key->rk[ 76] + delta[1][17], 13);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800187e:	4a9e      	ldr	r2, [pc, #632]	; (8001af8 <lea_set_key+0x18c4>)
 8001880:	4413      	add	r3, r2
 8001882:	ea4f 42f3 	mov.w	r2, r3, ror #19
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
		key->rk[ 88] = ROL(key->rk[ 82] + delta[2][18], 13);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001892:	4a9a      	ldr	r2, [pc, #616]	; (8001afc <lea_set_key+0x18c8>)
 8001894:	4413      	add	r3, r2
 8001896:	ea4f 42f3 	mov.w	r2, r3, ror #19
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
		key->rk[ 94] = ROL(key->rk[ 88] + delta[3][19], 13);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80018a6:	4a96      	ldr	r2, [pc, #600]	; (8001b00 <lea_set_key+0x18cc>)
 80018a8:	4413      	add	r3, r2
 80018aa:	ea4f 42f3 	mov.w	r2, r3, ror #19
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
		key->rk[100] = ROL(key->rk[ 94] + delta[4][20], 13);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 80018ba:	4a92      	ldr	r2, [pc, #584]	; (8001b04 <lea_set_key+0x18d0>)
 80018bc:	4413      	add	r3, r2
 80018be:	ea4f 42f3 	mov.w	r2, r3, ror #19
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
		key->rk[106] = ROL(key->rk[100] + delta[5][21], 13);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 80018ce:	4a8e      	ldr	r2, [pc, #568]	; (8001b08 <lea_set_key+0x18d4>)
 80018d0:	4413      	add	r3, r2
 80018d2:	ea4f 42f3 	mov.w	r2, r3, ror #19
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
		key->rk[112] = ROL(key->rk[106] + delta[0][22], 13);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 80018e2:	4a8a      	ldr	r2, [pc, #552]	; (8001b0c <lea_set_key+0x18d8>)
 80018e4:	4413      	add	r3, r2
 80018e6:	ea4f 42f3 	mov.w	r2, r3, ror #19
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
		key->rk[118] = ROL(key->rk[112] + delta[1][23], 13);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 80018f6:	4a86      	ldr	r2, [pc, #536]	; (8001b10 <lea_set_key+0x18dc>)
 80018f8:	4413      	add	r3, r2
 80018fa:	ea4f 42f3 	mov.w	r2, r3, ror #19
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
		key->rk[124] = ROL(key->rk[118] + delta[2][24], 13);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 800190a:	4a82      	ldr	r2, [pc, #520]	; (8001b14 <lea_set_key+0x18e0>)
 800190c:	4413      	add	r3, r2
 800190e:	ea4f 42f3 	mov.w	r2, r3, ror #19
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
		key->rk[130] = ROL(key->rk[124] + delta[3][25], 13);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 800191e:	4a7e      	ldr	r2, [pc, #504]	; (8001b18 <lea_set_key+0x18e4>)
 8001920:	4413      	add	r3, r2
 8001922:	ea4f 42f3 	mov.w	r2, r3, ror #19
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		key->rk[136] = ROL(key->rk[130] + delta[4][26], 13);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8001932:	4a7a      	ldr	r2, [pc, #488]	; (8001b1c <lea_set_key+0x18e8>)
 8001934:	4413      	add	r3, r2
 8001936:	ea4f 42f3 	mov.w	r2, r3, ror #19
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		key->rk[142] = ROL(key->rk[136] + delta[5][27], 13);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8001946:	4a76      	ldr	r2, [pc, #472]	; (8001b20 <lea_set_key+0x18ec>)
 8001948:	4413      	add	r3, r2
 800194a:	ea4f 42f3 	mov.w	r2, r3, ror #19
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
		key->rk[148] = ROL(key->rk[142] + delta[0][28], 13);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 800195a:	4a72      	ldr	r2, [pc, #456]	; (8001b24 <lea_set_key+0x18f0>)
 800195c:	4413      	add	r3, r2
 800195e:	ea4f 42f3 	mov.w	r2, r3, ror #19
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
		key->rk[154] = ROL(key->rk[148] + delta[1][29], 13);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 800196e:	4a6e      	ldr	r2, [pc, #440]	; (8001b28 <lea_set_key+0x18f4>)
 8001970:	4413      	add	r3, r2
 8001972:	ea4f 42f3 	mov.w	r2, r3, ror #19
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
		key->rk[160] = ROL(key->rk[154] + delta[2][30], 13);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8001982:	4a6a      	ldr	r2, [pc, #424]	; (8001b2c <lea_set_key+0x18f8>)
 8001984:	4413      	add	r3, r2
 8001986:	ea4f 42f3 	mov.w	r2, r3, ror #19
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
		key->rk[166] = ROL(key->rk[160] + delta[3][31], 13);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f8d3 3280 	ldr.w	r3, [r3, #640]	; 0x280
 8001996:	4a66      	ldr	r2, [pc, #408]	; (8001b30 <lea_set_key+0x18fc>)
 8001998:	4413      	add	r3, r2
 800199a:	ea4f 42f3 	mov.w	r2, r3, ror #19
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
		key->rk[  5] = ROL(loadU32(_mk[5]) + delta[0][ 5], 17);
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	3314      	adds	r3, #20
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a62      	ldr	r2, [pc, #392]	; (8001b34 <lea_set_key+0x1900>)
 80019ac:	4413      	add	r3, r2
 80019ae:	ea4f 32f3 	mov.w	r2, r3, ror #15
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	615a      	str	r2, [r3, #20]
		key->rk[ 11] = ROL(key->rk[  5] + delta[1][ 6], 17);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	695b      	ldr	r3, [r3, #20]
 80019ba:	4a5f      	ldr	r2, [pc, #380]	; (8001b38 <lea_set_key+0x1904>)
 80019bc:	4413      	add	r3, r2
 80019be:	ea4f 32f3 	mov.w	r2, r3, ror #15
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	62da      	str	r2, [r3, #44]	; 0x2c
		key->rk[ 17] = ROL(key->rk[ 11] + delta[2][ 7], 17);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ca:	4a5c      	ldr	r2, [pc, #368]	; (8001b3c <lea_set_key+0x1908>)
 80019cc:	4413      	add	r3, r2
 80019ce:	ea4f 32f3 	mov.w	r2, r3, ror #15
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	645a      	str	r2, [r3, #68]	; 0x44
		key->rk[ 23] = ROL(key->rk[ 17] + delta[3][ 8], 17);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019da:	4a59      	ldr	r2, [pc, #356]	; (8001b40 <lea_set_key+0x190c>)
 80019dc:	4413      	add	r3, r2
 80019de:	ea4f 32f3 	mov.w	r2, r3, ror #15
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	65da      	str	r2, [r3, #92]	; 0x5c
		key->rk[ 29] = ROL(key->rk[ 23] + delta[4][ 9], 17);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ea:	4a56      	ldr	r2, [pc, #344]	; (8001b44 <lea_set_key+0x1910>)
 80019ec:	4413      	add	r3, r2
 80019ee:	ea4f 32f3 	mov.w	r2, r3, ror #15
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	675a      	str	r2, [r3, #116]	; 0x74
		key->rk[ 35] = ROL(key->rk[ 29] + delta[5][10], 17);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019fa:	4a53      	ldr	r2, [pc, #332]	; (8001b48 <lea_set_key+0x1914>)
 80019fc:	4413      	add	r3, r2
 80019fe:	ea4f 32f3 	mov.w	r2, r3, ror #15
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		key->rk[ 41] = ROL(key->rk[ 35] + delta[0][11], 17);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a0e:	4a4f      	ldr	r2, [pc, #316]	; (8001b4c <lea_set_key+0x1918>)
 8001a10:	4413      	add	r3, r2
 8001a12:	ea4f 32f3 	mov.w	r2, r3, ror #15
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		key->rk[ 47] = ROL(key->rk[ 41] + delta[1][12], 17);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001a22:	4a4b      	ldr	r2, [pc, #300]	; (8001b50 <lea_set_key+0x191c>)
 8001a24:	4413      	add	r3, r2
 8001a26:	ea4f 32f3 	mov.w	r2, r3, ror #15
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		key->rk[ 53] = ROL(key->rk[ 47] + delta[2][13], 17);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001a36:	4a47      	ldr	r2, [pc, #284]	; (8001b54 <lea_set_key+0x1920>)
 8001a38:	4413      	add	r3, r2
 8001a3a:	ea4f 32f3 	mov.w	r2, r3, ror #15
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		key->rk[ 59] = ROL(key->rk[ 53] + delta[3][14], 17);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001a4a:	4a43      	ldr	r2, [pc, #268]	; (8001b58 <lea_set_key+0x1924>)
 8001a4c:	4413      	add	r3, r2
 8001a4e:	ea4f 32f3 	mov.w	r2, r3, ror #15
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
		key->rk[ 65] = ROL(key->rk[ 59] + delta[4][15], 17);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001a5e:	4a3f      	ldr	r2, [pc, #252]	; (8001b5c <lea_set_key+0x1928>)
 8001a60:	4413      	add	r3, r2
 8001a62:	ea4f 32f3 	mov.w	r2, r3, ror #15
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		key->rk[ 71] = ROL(key->rk[ 65] + delta[5][16], 17);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001a72:	4a3b      	ldr	r2, [pc, #236]	; (8001b60 <lea_set_key+0x192c>)
 8001a74:	4413      	add	r3, r2
 8001a76:	ea4f 32f3 	mov.w	r2, r3, ror #15
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
		key->rk[ 77] = ROL(key->rk[ 71] + delta[0][17], 17);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8001a86:	4a37      	ldr	r2, [pc, #220]	; (8001b64 <lea_set_key+0x1930>)
 8001a88:	4413      	add	r3, r2
 8001a8a:	ea4f 32f3 	mov.w	r2, r3, ror #15
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
		key->rk[ 83] = ROL(key->rk[ 77] + delta[1][18], 17);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001a9a:	4a33      	ldr	r2, [pc, #204]	; (8001b68 <lea_set_key+0x1934>)
 8001a9c:	4413      	add	r3, r2
 8001a9e:	ea4f 32f3 	mov.w	r2, r3, ror #15
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
		key->rk[ 89] = ROL(key->rk[ 83] + delta[2][19], 17);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8001aae:	4a2f      	ldr	r2, [pc, #188]	; (8001b6c <lea_set_key+0x1938>)
 8001ab0:	4413      	add	r3, r2
 8001ab2:	ea4f 32f3 	mov.w	r2, r3, ror #15
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
		key->rk[ 95] = ROL(key->rk[ 89] + delta[3][20], 17);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8001ac2:	4a2b      	ldr	r2, [pc, #172]	; (8001b70 <lea_set_key+0x193c>)
 8001ac4:	4413      	add	r3, r2
 8001ac6:	ea4f 32f3 	mov.w	r2, r3, ror #15
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
		key->rk[101] = ROL(key->rk[ 95] + delta[4][21], 17);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8001ad6:	e04d      	b.n	8001b74 <lea_set_key+0x1940>
 8001ad8:	0bb4158f 	.word	0x0bb4158f
 8001adc:	bfa76f0f 	.word	0xbfa76f0f
 8001ae0:	13581223 	.word	0x13581223
 8001ae4:	27c8a79e 	.word	0x27c8a79e
 8001ae8:	e61d8f1b 	.word	0xe61d8f1b
 8001aec:	a9279c57 	.word	0xa9279c57
 8001af0:	ed0563c2 	.word	0xed0563c2
 8001af4:	e9dbc3ef 	.word	0xe9dbc3ef
 8001af8:	d60488c4 	.word	0xd60488c4
 8001afc:	f229e789 	.word	0xf229e789
 8001b00:	8763c6f9 	.word	0x8763c6f9
 8001b04:	49e715ea 	.word	0x49e715ea
 8001b08:	4158f0bb 	.word	0x4158f0bb
 8001b0c:	76f0fbfa 	.word	0x76f0fbfa
 8001b10:	81223135 	.word	0x81223135
 8001b14:	8a79e27c 	.word	0x8a79e27c
 8001b18:	d8f1be61 	.word	0xd8f1be61
 8001b1c:	79c57a92 	.word	0x79c57a92
 8001b20:	563c2ed0 	.word	0x563c2ed0
 8001b24:	bc3efe9d 	.word	0xbc3efe9d
 8001b28:	488c4d60 	.word	0x488c4d60
 8001b2c:	9e789f22 	.word	0x9e789f22
 8001b30:	3c6f9876 	.word	0x3c6f9876
 8001b34:	7dfd3b78 	.word	0x7dfd3b78
 8001b38:	189ac091 	.word	0x189ac091
 8001b3c:	f13e453c 	.word	0xf13e453c
 8001b40:	df30ec78 	.word	0xdf30ec78
 8001b44:	bd493ce2 	.word	0xbd493ce2
 8001b48:	17682b1e 	.word	0x17682b1e
 8001b4c:	7f4ede1f 	.word	0x7f4ede1f
 8001b50:	26b02446 	.word	0x26b02446
 8001b54:	4f914f3c 	.word	0x4f914f3c
 8001b58:	cc3b1e37 	.word	0xcc3b1e37
 8001b5c:	524f38af 	.word	0x524f38af
 8001b60:	da0ac785 	.word	0xda0ac785
 8001b64:	d3b787df 	.word	0xd3b787df
 8001b68:	ac091189 	.word	0xac091189
 8001b6c:	e453cf13 	.word	0xe453cf13
 8001b70:	0ec78df3 	.word	0x0ec78df3
 8001b74:	4a3b      	ldr	r2, [pc, #236]	; (8001c64 <lea_set_key+0x1a30>)
 8001b76:	4413      	add	r3, r2
 8001b78:	ea4f 32f3 	mov.w	r2, r3, ror #15
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
		key->rk[107] = ROL(key->rk[101] + delta[5][22], 17);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8001b88:	4a37      	ldr	r2, [pc, #220]	; (8001c68 <lea_set_key+0x1a34>)
 8001b8a:	4413      	add	r3, r2
 8001b8c:	ea4f 32f3 	mov.w	r2, r3, ror #15
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		key->rk[113] = ROL(key->rk[107] + delta[0][23], 17);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8001b9c:	4a33      	ldr	r2, [pc, #204]	; (8001c6c <lea_set_key+0x1a38>)
 8001b9e:	4413      	add	r3, r2
 8001ba0:	ea4f 32f3 	mov.w	r2, r3, ror #15
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
		key->rk[119] = ROL(key->rk[113] + delta[1][24], 17);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8001bb0:	4a2f      	ldr	r2, [pc, #188]	; (8001c70 <lea_set_key+0x1a3c>)
 8001bb2:	4413      	add	r3, r2
 8001bb4:	ea4f 32f3 	mov.w	r2, r3, ror #15
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
		key->rk[125] = ROL(key->rk[119] + delta[2][25], 17);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 8001bc4:	4a2b      	ldr	r2, [pc, #172]	; (8001c74 <lea_set_key+0x1a40>)
 8001bc6:	4413      	add	r3, r2
 8001bc8:	ea4f 32f3 	mov.w	r2, r3, ror #15
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
		key->rk[131] = ROL(key->rk[125] + delta[3][26], 17);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8001bd8:	4a27      	ldr	r2, [pc, #156]	; (8001c78 <lea_set_key+0x1a44>)
 8001bda:	4413      	add	r3, r2
 8001bdc:	ea4f 32f3 	mov.w	r2, r3, ror #15
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		key->rk[137] = ROL(key->rk[131] + delta[4][27], 17);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8001bec:	4a23      	ldr	r2, [pc, #140]	; (8001c7c <lea_set_key+0x1a48>)
 8001bee:	4413      	add	r3, r2
 8001bf0:	ea4f 32f3 	mov.w	r2, r3, ror #15
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		key->rk[143] = ROL(key->rk[137] + delta[5][28], 17);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8001c00:	4a1f      	ldr	r2, [pc, #124]	; (8001c80 <lea_set_key+0x1a4c>)
 8001c02:	4413      	add	r3, r2
 8001c04:	ea4f 32f3 	mov.w	r2, r3, ror #15
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
		key->rk[149] = ROL(key->rk[143] + delta[0][29], 17);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f8d3 323c 	ldr.w	r3, [r3, #572]	; 0x23c
 8001c14:	4a1b      	ldr	r2, [pc, #108]	; (8001c84 <lea_set_key+0x1a50>)
 8001c16:	4413      	add	r3, r2
 8001c18:	ea4f 32f3 	mov.w	r2, r3, ror #15
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
		key->rk[155] = ROL(key->rk[149] + delta[1][30], 17);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	f8d3 3254 	ldr.w	r3, [r3, #596]	; 0x254
 8001c28:	4a17      	ldr	r2, [pc, #92]	; (8001c88 <lea_set_key+0x1a54>)
 8001c2a:	4413      	add	r3, r2
 8001c2c:	ea4f 32f3 	mov.w	r2, r3, ror #15
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
		key->rk[161] = ROL(key->rk[155] + delta[2][31], 17);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8001c3c:	4a13      	ldr	r2, [pc, #76]	; (8001c8c <lea_set_key+0x1a58>)
 8001c3e:	4413      	add	r3, r2
 8001c40:	ea4f 32f3 	mov.w	r2, r3, ror #15
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
		key->rk[167] = ROL(key->rk[161] + delta[3][ 0], 17);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	f8d3 3284 	ldr.w	r3, [r3, #644]	; 0x284
 8001c50:	4a0f      	ldr	r2, [pc, #60]	; (8001c90 <lea_set_key+0x1a5c>)
 8001c52:	4413      	add	r3, r2
 8001c54:	ea4f 32f3 	mov.w	r2, r3, ror #15
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
		break;
 8001c5e:	f001 b899 	b.w	8002d94 <lea_set_key+0x2b60>
 8001c62:	bf00      	nop
 8001c64:	93ce2bd4 	.word	0x93ce2bd4
 8001c68:	82b1e176 	.word	0x82b1e176
 8001c6c:	ede1f7f4 	.word	0xede1f7f4
 8001c70:	0244626b 	.word	0x0244626b
 8001c74:	14f3c4f9 	.word	0x14f3c4f9
 8001c78:	b1e37cc3 	.word	0xb1e37cc3
 8001c7c:	f38af524 	.word	0xf38af524
 8001c80:	ac785da0 	.word	0xac785da0
 8001c84:	787dfd3b 	.word	0x787dfd3b
 8001c88:	91189ac0 	.word	0x91189ac0
 8001c8c:	3cf13e45 	.word	0x3cf13e45
 8001c90:	78df30ec 	.word	0x78df30ec
		key->rk[  0] = ROL(loadU32(_mk[0]) + delta[0][ 0],  1);
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4abb      	ldr	r2, [pc, #748]	; (8001f88 <lea_set_key+0x1d54>)
 8001c9a:	4413      	add	r3, r2
 8001c9c:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	601a      	str	r2, [r3, #0]
		key->rk[  8] = ROL(key->rk[  0] + delta[1][ 3],  6);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4ab8      	ldr	r2, [pc, #736]	; (8001f8c <lea_set_key+0x1d58>)
 8001caa:	4413      	add	r3, r2
 8001cac:	ea4f 62b3 	mov.w	r2, r3, ror #26
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	621a      	str	r2, [r3, #32]
		key->rk[ 16] = ROL(key->rk[  8] + delta[2][ 6], 13);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	6a1b      	ldr	r3, [r3, #32]
 8001cb8:	4ab5      	ldr	r2, [pc, #724]	; (8001f90 <lea_set_key+0x1d5c>)
 8001cba:	4413      	add	r3, r2
 8001cbc:	ea4f 42f3 	mov.w	r2, r3, ror #19
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	641a      	str	r2, [r3, #64]	; 0x40
		key->rk[ 24] = ROL(key->rk[ 16] + delta[4][ 4],  1);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc8:	4ab2      	ldr	r2, [pc, #712]	; (8001f94 <lea_set_key+0x1d60>)
 8001cca:	4413      	add	r3, r2
 8001ccc:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	661a      	str	r2, [r3, #96]	; 0x60
		key->rk[ 32] = ROL(key->rk[ 24] + delta[5][ 7],  6);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cd8:	4aaf      	ldr	r2, [pc, #700]	; (8001f98 <lea_set_key+0x1d64>)
 8001cda:	4413      	add	r3, r2
 8001cdc:	ea4f 62b3 	mov.w	r2, r3, ror #26
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		key->rk[ 40] = ROL(key->rk[ 32] + delta[6][10], 13);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cec:	4aab      	ldr	r2, [pc, #684]	; (8001f9c <lea_set_key+0x1d68>)
 8001cee:	4413      	add	r3, r2
 8001cf0:	ea4f 42f3 	mov.w	r2, r3, ror #19
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		key->rk[ 48] = ROL(key->rk[ 40] + delta[0][ 8],  1);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001d00:	4aa7      	ldr	r2, [pc, #668]	; (8001fa0 <lea_set_key+0x1d6c>)
 8001d02:	4413      	add	r3, r2
 8001d04:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		key->rk[ 56] = ROL(key->rk[ 48] + delta[1][11],  6);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001d14:	4aa3      	ldr	r2, [pc, #652]	; (8001fa4 <lea_set_key+0x1d70>)
 8001d16:	4413      	add	r3, r2
 8001d18:	ea4f 62b3 	mov.w	r2, r3, ror #26
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
		key->rk[ 64] = ROL(key->rk[ 56] + delta[2][14], 13);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d28:	4a9f      	ldr	r2, [pc, #636]	; (8001fa8 <lea_set_key+0x1d74>)
 8001d2a:	4413      	add	r3, r2
 8001d2c:	ea4f 42f3 	mov.w	r2, r3, ror #19
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		key->rk[ 72] = ROL(key->rk[ 64] + delta[4][12],  1);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001d3c:	4a9b      	ldr	r2, [pc, #620]	; (8001fac <lea_set_key+0x1d78>)
 8001d3e:	4413      	add	r3, r2
 8001d40:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
		key->rk[ 80] = ROL(key->rk[ 72] + delta[5][15],  6);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8001d50:	4a97      	ldr	r2, [pc, #604]	; (8001fb0 <lea_set_key+0x1d7c>)
 8001d52:	4413      	add	r3, r2
 8001d54:	ea4f 62b3 	mov.w	r2, r3, ror #26
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		key->rk[ 88] = ROL(key->rk[ 80] + delta[6][18], 13);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001d64:	4a93      	ldr	r2, [pc, #588]	; (8001fb4 <lea_set_key+0x1d80>)
 8001d66:	4413      	add	r3, r2
 8001d68:	ea4f 42f3 	mov.w	r2, r3, ror #19
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
		key->rk[ 96] = ROL(key->rk[ 88] + delta[0][16],  1);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001d78:	4a8f      	ldr	r2, [pc, #572]	; (8001fb8 <lea_set_key+0x1d84>)
 8001d7a:	4413      	add	r3, r2
 8001d7c:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		key->rk[104] = ROL(key->rk[ 96] + delta[1][19],  6);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8001d8c:	4a8b      	ldr	r2, [pc, #556]	; (8001fbc <lea_set_key+0x1d88>)
 8001d8e:	4413      	add	r3, r2
 8001d90:	ea4f 62b3 	mov.w	r2, r3, ror #26
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
		key->rk[112] = ROL(key->rk[104] + delta[2][22], 13);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001da0:	4a87      	ldr	r2, [pc, #540]	; (8001fc0 <lea_set_key+0x1d8c>)
 8001da2:	4413      	add	r3, r2
 8001da4:	ea4f 42f3 	mov.w	r2, r3, ror #19
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
		key->rk[120] = ROL(key->rk[112] + delta[4][20],  1);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 8001db4:	4a83      	ldr	r2, [pc, #524]	; (8001fc4 <lea_set_key+0x1d90>)
 8001db6:	4413      	add	r3, r2
 8001db8:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
		key->rk[128] = ROL(key->rk[120] + delta[5][23],  6);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8001dc8:	4a7f      	ldr	r2, [pc, #508]	; (8001fc8 <lea_set_key+0x1d94>)
 8001dca:	4413      	add	r3, r2
 8001dcc:	ea4f 62b3 	mov.w	r2, r3, ror #26
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		key->rk[136] = ROL(key->rk[128] + delta[6][26], 13);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ddc:	4a7b      	ldr	r2, [pc, #492]	; (8001fcc <lea_set_key+0x1d98>)
 8001dde:	4413      	add	r3, r2
 8001de0:	ea4f 42f3 	mov.w	r2, r3, ror #19
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
		key->rk[144] = ROL(key->rk[136] + delta[0][24],  1);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8001df0:	4a77      	ldr	r2, [pc, #476]	; (8001fd0 <lea_set_key+0x1d9c>)
 8001df2:	4413      	add	r3, r2
 8001df4:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
		key->rk[152] = ROL(key->rk[144] + delta[1][27],  6);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8001e04:	4a73      	ldr	r2, [pc, #460]	; (8001fd4 <lea_set_key+0x1da0>)
 8001e06:	4413      	add	r3, r2
 8001e08:	ea4f 62b3 	mov.w	r2, r3, ror #26
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
		key->rk[160] = ROL(key->rk[152] + delta[2][30], 13);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8001e18:	4a6f      	ldr	r2, [pc, #444]	; (8001fd8 <lea_set_key+0x1da4>)
 8001e1a:	4413      	add	r3, r2
 8001e1c:	ea4f 42f3 	mov.w	r2, r3, ror #19
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
		key->rk[168] = ROL(key->rk[160] + delta[4][28],  1);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f8d3 3280 	ldr.w	r3, [r3, #640]	; 0x280
 8001e2c:	4a6b      	ldr	r2, [pc, #428]	; (8001fdc <lea_set_key+0x1da8>)
 8001e2e:	4413      	add	r3, r2
 8001e30:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
		key->rk[176] = ROL(key->rk[168] + delta[5][31],  6);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f8d3 32a0 	ldr.w	r3, [r3, #672]	; 0x2a0
 8001e40:	4a67      	ldr	r2, [pc, #412]	; (8001fe0 <lea_set_key+0x1dac>)
 8001e42:	4413      	add	r3, r2
 8001e44:	ea4f 62b3 	mov.w	r2, r3, ror #26
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
		key->rk[184] = ROL(key->rk[176] + delta[6][ 2], 13);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8001e54:	4a63      	ldr	r2, [pc, #396]	; (8001fe4 <lea_set_key+0x1db0>)
 8001e56:	4413      	add	r3, r2
 8001e58:	ea4f 42f3 	mov.w	r2, r3, ror #19
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f8c3 22e0 	str.w	r2, [r3, #736]	; 0x2e0
		key->rk[  1] = ROL(loadU32(_mk[1]) + delta[0][ 1],  3);
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	3304      	adds	r3, #4
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a5f      	ldr	r2, [pc, #380]	; (8001fe8 <lea_set_key+0x1db4>)
 8001e6a:	4413      	add	r3, r2
 8001e6c:	ea4f 7273 	mov.w	r2, r3, ror #29
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	605a      	str	r2, [r3, #4]
		key->rk[  9] = ROL(key->rk[  1] + delta[1][ 4], 11);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	4a5c      	ldr	r2, [pc, #368]	; (8001fec <lea_set_key+0x1db8>)
 8001e7a:	4413      	add	r3, r2
 8001e7c:	ea4f 5273 	mov.w	r2, r3, ror #21
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	625a      	str	r2, [r3, #36]	; 0x24
		key->rk[ 17] = ROL(key->rk[  9] + delta[2][ 7], 17);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e88:	4a59      	ldr	r2, [pc, #356]	; (8001ff0 <lea_set_key+0x1dbc>)
 8001e8a:	4413      	add	r3, r2
 8001e8c:	ea4f 32f3 	mov.w	r2, r3, ror #15
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	645a      	str	r2, [r3, #68]	; 0x44
		key->rk[ 25] = ROL(key->rk[ 17] + delta[4][ 5],  3);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e98:	4a56      	ldr	r2, [pc, #344]	; (8001ff4 <lea_set_key+0x1dc0>)
 8001e9a:	4413      	add	r3, r2
 8001e9c:	ea4f 7273 	mov.w	r2, r3, ror #29
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	665a      	str	r2, [r3, #100]	; 0x64
		key->rk[ 33] = ROL(key->rk[ 25] + delta[5][ 8], 11);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ea8:	4a53      	ldr	r2, [pc, #332]	; (8001ff8 <lea_set_key+0x1dc4>)
 8001eaa:	4413      	add	r3, r2
 8001eac:	ea4f 5273 	mov.w	r2, r3, ror #21
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		key->rk[ 41] = ROL(key->rk[ 33] + delta[6][11], 17);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ebc:	4a4f      	ldr	r2, [pc, #316]	; (8001ffc <lea_set_key+0x1dc8>)
 8001ebe:	4413      	add	r3, r2
 8001ec0:	ea4f 32f3 	mov.w	r2, r3, ror #15
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		key->rk[ 49] = ROL(key->rk[ 41] + delta[0][ 9],  3);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001ed0:	4a4b      	ldr	r2, [pc, #300]	; (8002000 <lea_set_key+0x1dcc>)
 8001ed2:	4413      	add	r3, r2
 8001ed4:	ea4f 7273 	mov.w	r2, r3, ror #29
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		key->rk[ 57] = ROL(key->rk[ 49] + delta[1][12], 11);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001ee4:	4a47      	ldr	r2, [pc, #284]	; (8002004 <lea_set_key+0x1dd0>)
 8001ee6:	4413      	add	r3, r2
 8001ee8:	ea4f 5273 	mov.w	r2, r3, ror #21
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
		key->rk[ 65] = ROL(key->rk[ 57] + delta[2][15], 17);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001ef8:	4a43      	ldr	r2, [pc, #268]	; (8002008 <lea_set_key+0x1dd4>)
 8001efa:	4413      	add	r3, r2
 8001efc:	ea4f 32f3 	mov.w	r2, r3, ror #15
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		key->rk[ 73] = ROL(key->rk[ 65] + delta[4][13],  3);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001f0c:	4a3f      	ldr	r2, [pc, #252]	; (800200c <lea_set_key+0x1dd8>)
 8001f0e:	4413      	add	r3, r2
 8001f10:	ea4f 7273 	mov.w	r2, r3, ror #29
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
		key->rk[ 81] = ROL(key->rk[ 73] + delta[5][16], 11);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8001f20:	4a3b      	ldr	r2, [pc, #236]	; (8002010 <lea_set_key+0x1ddc>)
 8001f22:	4413      	add	r3, r2
 8001f24:	ea4f 5273 	mov.w	r2, r3, ror #21
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
		key->rk[ 89] = ROL(key->rk[ 81] + delta[6][19], 17);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8001f34:	4a37      	ldr	r2, [pc, #220]	; (8002014 <lea_set_key+0x1de0>)
 8001f36:	4413      	add	r3, r2
 8001f38:	ea4f 32f3 	mov.w	r2, r3, ror #15
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
		key->rk[ 97] = ROL(key->rk[ 89] + delta[0][17],  3);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8001f48:	4a33      	ldr	r2, [pc, #204]	; (8002018 <lea_set_key+0x1de4>)
 8001f4a:	4413      	add	r3, r2
 8001f4c:	ea4f 7273 	mov.w	r2, r3, ror #29
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
		key->rk[105] = ROL(key->rk[ 97] + delta[1][20], 11);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8001f5c:	4a2f      	ldr	r2, [pc, #188]	; (800201c <lea_set_key+0x1de8>)
 8001f5e:	4413      	add	r3, r2
 8001f60:	ea4f 5273 	mov.w	r2, r3, ror #21
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
		key->rk[113] = ROL(key->rk[105] + delta[2][23], 17);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001f70:	4a2b      	ldr	r2, [pc, #172]	; (8002020 <lea_set_key+0x1dec>)
 8001f72:	4413      	add	r3, r2
 8001f74:	ea4f 32f3 	mov.w	r2, r3, ror #15
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
		key->rk[121] = ROL(key->rk[113] + delta[4][21],  3);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8001f84:	e04e      	b.n	8002024 <lea_set_key+0x1df0>
 8001f86:	bf00      	nop
 8001f88:	c3efe9db 	.word	0xc3efe9db
 8001f8c:	23135812 	.word	0x23135812
 8001f90:	789f229e 	.word	0x789f229e
 8001f94:	15ea49e7 	.word	0x15ea49e7
 8001f98:	c2ed0563 	.word	0xc2ed0563
 8001f9c:	3bc8ab81 	.word	0x3bc8ab81
 8001fa0:	efe9dbc3 	.word	0xefe9dbc3
 8001fa4:	13581223 	.word	0x13581223
 8001fa8:	9f229e78 	.word	0x9f229e78
 8001fac:	ea49e715 	.word	0xea49e715
 8001fb0:	ed0563c2 	.word	0xed0563c2
 8001fb4:	c8ab813b 	.word	0xc8ab813b
 8001fb8:	e9dbc3ef 	.word	0xe9dbc3ef
 8001fbc:	58122313 	.word	0x58122313
 8001fc0:	229e789f 	.word	0x229e789f
 8001fc4:	49e715ea 	.word	0x49e715ea
 8001fc8:	0563c2ed 	.word	0x0563c2ed
 8001fcc:	ab813bc8 	.word	0xab813bc8
 8001fd0:	dbc3efe9 	.word	0xdbc3efe9
 8001fd4:	12231358 	.word	0x12231358
 8001fd8:	9e789f22 	.word	0x9e789f22
 8001fdc:	e715ea49 	.word	0xe715ea49
 8001fe0:	63c2ed05 	.word	0x63c2ed05
 8001fe4:	813bc8ab 	.word	0x813bc8ab
 8001fe8:	87dfd3b7 	.word	0x87dfd3b7
 8001fec:	4626b024 	.word	0x4626b024
 8001ff0:	f13e453c 	.word	0xf13e453c
 8001ff4:	2bd493ce 	.word	0x2bd493ce
 8001ff8:	85da0ac7 	.word	0x85da0ac7
 8001ffc:	77915702 	.word	0x77915702
 8002000:	dfd3b787 	.word	0xdfd3b787
 8002004:	26b02446 	.word	0x26b02446
 8002008:	3e453cf1 	.word	0x3e453cf1
 800200c:	d493ce2b 	.word	0xd493ce2b
 8002010:	da0ac785 	.word	0xda0ac785
 8002014:	91570277 	.word	0x91570277
 8002018:	d3b787df 	.word	0xd3b787df
 800201c:	b0244626 	.word	0xb0244626
 8002020:	453cf13e 	.word	0x453cf13e
 8002024:	4aba      	ldr	r2, [pc, #744]	; (8002310 <lea_set_key+0x20dc>)
 8002026:	4413      	add	r3, r2
 8002028:	ea4f 7273 	mov.w	r2, r3, ror #29
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
		key->rk[129] = ROL(key->rk[121] + delta[5][24], 11);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 8002038:	4ab6      	ldr	r2, [pc, #728]	; (8002314 <lea_set_key+0x20e0>)
 800203a:	4413      	add	r3, r2
 800203c:	ea4f 5273 	mov.w	r2, r3, ror #21
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		key->rk[137] = ROL(key->rk[129] + delta[6][27], 17);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800204c:	4ab2      	ldr	r2, [pc, #712]	; (8002318 <lea_set_key+0x20e4>)
 800204e:	4413      	add	r3, r2
 8002050:	ea4f 32f3 	mov.w	r2, r3, ror #15
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		key->rk[145] = ROL(key->rk[137] + delta[0][25],  3);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8002060:	4aae      	ldr	r2, [pc, #696]	; (800231c <lea_set_key+0x20e8>)
 8002062:	4413      	add	r3, r2
 8002064:	ea4f 7273 	mov.w	r2, r3, ror #29
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
		key->rk[153] = ROL(key->rk[145] + delta[1][28], 11);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8002074:	4aaa      	ldr	r2, [pc, #680]	; (8002320 <lea_set_key+0x20ec>)
 8002076:	4413      	add	r3, r2
 8002078:	ea4f 5273 	mov.w	r2, r3, ror #21
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
		key->rk[161] = ROL(key->rk[153] + delta[2][31], 17);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 8002088:	4aa6      	ldr	r2, [pc, #664]	; (8002324 <lea_set_key+0x20f0>)
 800208a:	4413      	add	r3, r2
 800208c:	ea4f 32f3 	mov.w	r2, r3, ror #15
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
		key->rk[169] = ROL(key->rk[161] + delta[4][29],  3);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	f8d3 3284 	ldr.w	r3, [r3, #644]	; 0x284
 800209c:	4aa2      	ldr	r2, [pc, #648]	; (8002328 <lea_set_key+0x20f4>)
 800209e:	4413      	add	r3, r2
 80020a0:	ea4f 7273 	mov.w	r2, r3, ror #29
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
		key->rk[177] = ROL(key->rk[169] + delta[5][ 0], 11);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80020b0:	4a9e      	ldr	r2, [pc, #632]	; (800232c <lea_set_key+0x20f8>)
 80020b2:	4413      	add	r3, r2
 80020b4:	ea4f 5273 	mov.w	r2, r3, ror #21
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
		key->rk[185] = ROL(key->rk[177] + delta[6][ 3], 17);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80020c4:	4a9a      	ldr	r2, [pc, #616]	; (8002330 <lea_set_key+0x20fc>)
 80020c6:	4413      	add	r3, r2
 80020c8:	ea4f 32f3 	mov.w	r2, r3, ror #15
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
		key->rk[  2] = ROL(loadU32(_mk[2]) + delta[0][ 2],  6);
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	3308      	adds	r3, #8
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a96      	ldr	r2, [pc, #600]	; (8002334 <lea_set_key+0x2100>)
 80020da:	4413      	add	r3, r2
 80020dc:	ea4f 62b3 	mov.w	r2, r3, ror #26
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	609a      	str	r2, [r3, #8]
		key->rk[ 10] = ROL(key->rk[  2] + delta[1][ 5], 13);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	4a93      	ldr	r2, [pc, #588]	; (8002338 <lea_set_key+0x2104>)
 80020ea:	4413      	add	r3, r2
 80020ec:	ea4f 42f3 	mov.w	r2, r3, ror #19
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	629a      	str	r2, [r3, #40]	; 0x28
		key->rk[ 18] = ROL(key->rk[ 10] + delta[3][ 3],  1);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f8:	4a90      	ldr	r2, [pc, #576]	; (800233c <lea_set_key+0x2108>)
 80020fa:	4413      	add	r3, r2
 80020fc:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	649a      	str	r2, [r3, #72]	; 0x48
		key->rk[ 26] = ROL(key->rk[ 18] + delta[4][ 6],  6);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002108:	4a8d      	ldr	r2, [pc, #564]	; (8002340 <lea_set_key+0x210c>)
 800210a:	4413      	add	r3, r2
 800210c:	ea4f 62b3 	mov.w	r2, r3, ror #26
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	669a      	str	r2, [r3, #104]	; 0x68
		key->rk[ 34] = ROL(key->rk[ 26] + delta[5][ 9], 13);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002118:	4a8a      	ldr	r2, [pc, #552]	; (8002344 <lea_set_key+0x2110>)
 800211a:	4413      	add	r3, r2
 800211c:	ea4f 42f3 	mov.w	r2, r3, ror #19
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		key->rk[ 42] = ROL(key->rk[ 34] + delta[7][ 7],  1);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800212c:	4a86      	ldr	r2, [pc, #536]	; (8002348 <lea_set_key+0x2114>)
 800212e:	4413      	add	r3, r2
 8002130:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		key->rk[ 50] = ROL(key->rk[ 42] + delta[0][10],  6);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002140:	4a82      	ldr	r2, [pc, #520]	; (800234c <lea_set_key+0x2118>)
 8002142:	4413      	add	r3, r2
 8002144:	ea4f 62b3 	mov.w	r2, r3, ror #26
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		key->rk[ 58] = ROL(key->rk[ 50] + delta[1][13], 13);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8002154:	4a7e      	ldr	r2, [pc, #504]	; (8002350 <lea_set_key+0x211c>)
 8002156:	4413      	add	r3, r2
 8002158:	ea4f 42f3 	mov.w	r2, r3, ror #19
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
		key->rk[ 66] = ROL(key->rk[ 58] + delta[3][11],  1);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002168:	4a7a      	ldr	r2, [pc, #488]	; (8002354 <lea_set_key+0x2120>)
 800216a:	4413      	add	r3, r2
 800216c:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
		key->rk[ 74] = ROL(key->rk[ 66] + delta[4][14],  6);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800217c:	4a76      	ldr	r2, [pc, #472]	; (8002358 <lea_set_key+0x2124>)
 800217e:	4413      	add	r3, r2
 8002180:	ea4f 62b3 	mov.w	r2, r3, ror #26
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
		key->rk[ 82] = ROL(key->rk[ 74] + delta[5][17], 13);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8002190:	4a72      	ldr	r2, [pc, #456]	; (800235c <lea_set_key+0x2128>)
 8002192:	4413      	add	r3, r2
 8002194:	ea4f 42f3 	mov.w	r2, r3, ror #19
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
		key->rk[ 90] = ROL(key->rk[ 82] + delta[7][15],  1);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80021a4:	4a6e      	ldr	r2, [pc, #440]	; (8002360 <lea_set_key+0x212c>)
 80021a6:	4413      	add	r3, r2
 80021a8:	ea4f 72f3 	mov.w	r2, r3, ror #31
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
		key->rk[ 98] = ROL(key->rk[ 90] + delta[0][18],  6);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 80021b8:	4a6a      	ldr	r2, [pc, #424]	; (8002364 <lea_set_key+0x2130>)
 80021ba:	4413      	add	r3, r2
 80021bc:	ea4f 62b3 	mov.w	r2, r3, ror #26
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
		key->rk[106] = ROL(key->rk[ 98] + delta[1][21], 13);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 80021cc:	4a66      	ldr	r2, [pc, #408]	; (8002368 <lea_set_key+0x2134>)
 80021ce:	4413      	add	r3, r2
 80021d0:	ea4f 42f3 	mov.w	r2, r3, ror #19
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
		key->rk[114] = ROL(key->rk[106] + delta[3][19],  1);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 80021e0:	4a62      	ldr	r2, [pc, #392]	; (800236c <lea_set_key+0x2138>)
 80021e2:	4413      	add	r3, r2
 80021e4:	ea4f 72f3 	mov.w	r2, r3, ror #31
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
		key->rk[122] = ROL(key->rk[114] + delta[4][22],  6);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80021f4:	4a5e      	ldr	r2, [pc, #376]	; (8002370 <lea_set_key+0x213c>)
 80021f6:	4413      	add	r3, r2
 80021f8:	ea4f 62b3 	mov.w	r2, r3, ror #26
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
		key->rk[130] = ROL(key->rk[122] + delta[5][25], 13);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8002208:	4a5a      	ldr	r2, [pc, #360]	; (8002374 <lea_set_key+0x2140>)
 800220a:	4413      	add	r3, r2
 800220c:	ea4f 42f3 	mov.w	r2, r3, ror #19
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		key->rk[138] = ROL(key->rk[130] + delta[7][23],  1);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800221c:	4a56      	ldr	r2, [pc, #344]	; (8002378 <lea_set_key+0x2144>)
 800221e:	4413      	add	r3, r2
 8002220:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
		key->rk[146] = ROL(key->rk[138] + delta[0][26],  6);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8002230:	4a52      	ldr	r2, [pc, #328]	; (800237c <lea_set_key+0x2148>)
 8002232:	4413      	add	r3, r2
 8002234:	ea4f 62b3 	mov.w	r2, r3, ror #26
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f8c3 2248 	str.w	r2, [r3, #584]	; 0x248
		key->rk[154] = ROL(key->rk[146] + delta[1][29], 13);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f8d3 3248 	ldr.w	r3, [r3, #584]	; 0x248
 8002244:	4a4e      	ldr	r2, [pc, #312]	; (8002380 <lea_set_key+0x214c>)
 8002246:	4413      	add	r3, r2
 8002248:	ea4f 42f3 	mov.w	r2, r3, ror #19
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
		key->rk[162] = ROL(key->rk[154] + delta[3][27],  1);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8002258:	4a4a      	ldr	r2, [pc, #296]	; (8002384 <lea_set_key+0x2150>)
 800225a:	4413      	add	r3, r2
 800225c:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
		key->rk[170] = ROL(key->rk[162] + delta[4][30],  6);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800226c:	4a46      	ldr	r2, [pc, #280]	; (8002388 <lea_set_key+0x2154>)
 800226e:	4413      	add	r3, r2
 8002270:	ea4f 62b3 	mov.w	r2, r3, ror #26
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
		key->rk[178] = ROL(key->rk[170] + delta[5][ 1], 13);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f8d3 32a8 	ldr.w	r3, [r3, #680]	; 0x2a8
 8002280:	4a42      	ldr	r2, [pc, #264]	; (800238c <lea_set_key+0x2158>)
 8002282:	4413      	add	r3, r2
 8002284:	ea4f 42f3 	mov.w	r2, r3, ror #19
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8
		key->rk[186] = ROL(key->rk[178] + delta[7][31],  1);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8002294:	4a3e      	ldr	r2, [pc, #248]	; (8002390 <lea_set_key+0x215c>)
 8002296:	4413      	add	r3, r2
 8002298:	ea4f 72f3 	mov.w	r2, r3, ror #31
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
		key->rk[  3] = ROL(loadU32(_mk[3]) + delta[0][ 3], 11);
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	330c      	adds	r3, #12
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a3a      	ldr	r2, [pc, #232]	; (8002394 <lea_set_key+0x2160>)
 80022aa:	4413      	add	r3, r2
 80022ac:	ea4f 5273 	mov.w	r2, r3, ror #21
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	60da      	str	r2, [r3, #12]
		key->rk[ 11] = ROL(key->rk[  3] + delta[1][ 6], 17);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	4a37      	ldr	r2, [pc, #220]	; (8002398 <lea_set_key+0x2164>)
 80022ba:	4413      	add	r3, r2
 80022bc:	ea4f 32f3 	mov.w	r2, r3, ror #15
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	62da      	str	r2, [r3, #44]	; 0x2c
		key->rk[ 19] = ROL(key->rk[ 11] + delta[3][ 4],  3);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c8:	4a34      	ldr	r2, [pc, #208]	; (800239c <lea_set_key+0x2168>)
 80022ca:	4413      	add	r3, r2
 80022cc:	ea4f 7273 	mov.w	r2, r3, ror #29
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	64da      	str	r2, [r3, #76]	; 0x4c
		key->rk[ 27] = ROL(key->rk[ 19] + delta[4][ 7], 11);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d8:	4a31      	ldr	r2, [pc, #196]	; (80023a0 <lea_set_key+0x216c>)
 80022da:	4413      	add	r3, r2
 80022dc:	ea4f 5273 	mov.w	r2, r3, ror #21
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	66da      	str	r2, [r3, #108]	; 0x6c
		key->rk[ 35] = ROL(key->rk[ 27] + delta[5][10], 17);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022e8:	4a2e      	ldr	r2, [pc, #184]	; (80023a4 <lea_set_key+0x2170>)
 80022ea:	4413      	add	r3, r2
 80022ec:	ea4f 32f3 	mov.w	r2, r3, ror #15
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		key->rk[ 43] = ROL(key->rk[ 35] + delta[7][ 8],  3);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022fc:	4a2a      	ldr	r2, [pc, #168]	; (80023a8 <lea_set_key+0x2174>)
 80022fe:	4413      	add	r3, r2
 8002300:	ea4f 7273 	mov.w	r2, r3, ror #29
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		key->rk[ 51] = ROL(key->rk[ 43] + delta[0][11], 11);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	e04e      	b.n	80023ac <lea_set_key+0x2178>
 800230e:	bf00      	nop
 8002310:	93ce2bd4 	.word	0x93ce2bd4
 8002314:	0ac785da 	.word	0x0ac785da
 8002318:	57027791 	.word	0x57027791
 800231c:	b787dfd3 	.word	0xb787dfd3
 8002320:	244626b0 	.word	0x244626b0
 8002324:	3cf13e45 	.word	0x3cf13e45
 8002328:	ce2bd493 	.word	0xce2bd493
 800232c:	c785da0a 	.word	0xc785da0a
 8002330:	02779157 	.word	0x02779157
 8002334:	0fbfa76f 	.word	0x0fbfa76f
 8002338:	8c4d6048 	.word	0x8c4d6048
 800233c:	c6f98763 	.word	0xc6f98763
 8002340:	57a9279c 	.word	0x57a9279c
 8002344:	0bb4158f 	.word	0x0bb4158f
 8002348:	e204abf2 	.word	0xe204abf2
 800234c:	bfa76f0f 	.word	0xbfa76f0f
 8002350:	4d60488c 	.word	0x4d60488c
 8002354:	f98763c6 	.word	0xf98763c6
 8002358:	a9279c57 	.word	0xa9279c57
 800235c:	b4158f0b 	.word	0xb4158f0b
 8002360:	04abf2e2 	.word	0x04abf2e2
 8002364:	a76f0fbf 	.word	0xa76f0fbf
 8002368:	60488c4d 	.word	0x60488c4d
 800236c:	8763c6f9 	.word	0x8763c6f9
 8002370:	279c57a9 	.word	0x279c57a9
 8002374:	158f0bb4 	.word	0x158f0bb4
 8002378:	abf2e204 	.word	0xabf2e204
 800237c:	6f0fbfa7 	.word	0x6f0fbfa7
 8002380:	488c4d60 	.word	0x488c4d60
 8002384:	63c6f987 	.word	0x63c6f987
 8002388:	9c57a927 	.word	0x9c57a927
 800238c:	8f0bb415 	.word	0x8f0bb415
 8002390:	f2e204ab 	.word	0xf2e204ab
 8002394:	1f7f4ede 	.word	0x1f7f4ede
 8002398:	189ac091 	.word	0x189ac091
 800239c:	8df30ec7 	.word	0x8df30ec7
 80023a0:	af524f38 	.word	0xaf524f38
 80023a4:	17682b1e 	.word	0x17682b1e
 80023a8:	c40957e5 	.word	0xc40957e5
 80023ac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80023b0:	4abf      	ldr	r2, [pc, #764]	; (80026b0 <lea_set_key+0x247c>)
 80023b2:	4413      	add	r3, r2
 80023b4:	ea4f 5273 	mov.w	r2, r3, ror #21
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		key->rk[ 59] = ROL(key->rk[ 51] + delta[1][14], 17);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80023c4:	4abb      	ldr	r2, [pc, #748]	; (80026b4 <lea_set_key+0x2480>)
 80023c6:	4413      	add	r3, r2
 80023c8:	ea4f 32f3 	mov.w	r2, r3, ror #15
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
		key->rk[ 67] = ROL(key->rk[ 59] + delta[3][12],  3);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80023d8:	4ab7      	ldr	r2, [pc, #732]	; (80026b8 <lea_set_key+0x2484>)
 80023da:	4413      	add	r3, r2
 80023dc:	ea4f 7273 	mov.w	r2, r3, ror #29
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		key->rk[ 75] = ROL(key->rk[ 67] + delta[4][15], 11);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80023ec:	4ab3      	ldr	r2, [pc, #716]	; (80026bc <lea_set_key+0x2488>)
 80023ee:	4413      	add	r3, r2
 80023f0:	ea4f 5273 	mov.w	r2, r3, ror #21
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
		key->rk[ 83] = ROL(key->rk[ 75] + delta[5][18], 17);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8002400:	4aaf      	ldr	r2, [pc, #700]	; (80026c0 <lea_set_key+0x248c>)
 8002402:	4413      	add	r3, r2
 8002404:	ea4f 32f3 	mov.w	r2, r3, ror #15
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
		key->rk[ 91] = ROL(key->rk[ 83] + delta[7][16],  3);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8002414:	4aab      	ldr	r2, [pc, #684]	; (80026c4 <lea_set_key+0x2490>)
 8002416:	4413      	add	r3, r2
 8002418:	ea4f 7273 	mov.w	r2, r3, ror #29
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
		key->rk[ 99] = ROL(key->rk[ 91] + delta[0][19], 11);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8002428:	4aa7      	ldr	r2, [pc, #668]	; (80026c8 <lea_set_key+0x2494>)
 800242a:	4413      	add	r3, r2
 800242c:	ea4f 5273 	mov.w	r2, r3, ror #21
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
		key->rk[107] = ROL(key->rk[ 99] + delta[1][22], 17);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 800243c:	4aa3      	ldr	r2, [pc, #652]	; (80026cc <lea_set_key+0x2498>)
 800243e:	4413      	add	r3, r2
 8002440:	ea4f 32f3 	mov.w	r2, r3, ror #15
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		key->rk[115] = ROL(key->rk[107] + delta[3][20],  3);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8002450:	4a9f      	ldr	r2, [pc, #636]	; (80026d0 <lea_set_key+0x249c>)
 8002452:	4413      	add	r3, r2
 8002454:	ea4f 7273 	mov.w	r2, r3, ror #29
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
		key->rk[123] = ROL(key->rk[115] + delta[4][23], 11);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8002464:	4a9b      	ldr	r2, [pc, #620]	; (80026d4 <lea_set_key+0x24a0>)
 8002466:	4413      	add	r3, r2
 8002468:	ea4f 5273 	mov.w	r2, r3, ror #21
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
		key->rk[131] = ROL(key->rk[123] + delta[5][26], 17);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8002478:	4a97      	ldr	r2, [pc, #604]	; (80026d8 <lea_set_key+0x24a4>)
 800247a:	4413      	add	r3, r2
 800247c:	ea4f 32f3 	mov.w	r2, r3, ror #15
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		key->rk[139] = ROL(key->rk[131] + delta[7][24],  3);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800248c:	4a93      	ldr	r2, [pc, #588]	; (80026dc <lea_set_key+0x24a8>)
 800248e:	4413      	add	r3, r2
 8002490:	ea4f 7273 	mov.w	r2, r3, ror #29
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		key->rk[147] = ROL(key->rk[139] + delta[0][27], 11);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80024a0:	4a8f      	ldr	r2, [pc, #572]	; (80026e0 <lea_set_key+0x24ac>)
 80024a2:	4413      	add	r3, r2
 80024a4:	ea4f 5273 	mov.w	r2, r3, ror #21
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
		key->rk[155] = ROL(key->rk[147] + delta[1][30], 17);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 80024b4:	4a8b      	ldr	r2, [pc, #556]	; (80026e4 <lea_set_key+0x24b0>)
 80024b6:	4413      	add	r3, r2
 80024b8:	ea4f 32f3 	mov.w	r2, r3, ror #15
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
		key->rk[163] = ROL(key->rk[155] + delta[3][28],  3);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80024c8:	4a87      	ldr	r2, [pc, #540]	; (80026e8 <lea_set_key+0x24b4>)
 80024ca:	4413      	add	r3, r2
 80024cc:	ea4f 7273 	mov.w	r2, r3, ror #29
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
		key->rk[171] = ROL(key->rk[163] + delta[4][31], 11);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80024dc:	4a83      	ldr	r2, [pc, #524]	; (80026ec <lea_set_key+0x24b8>)
 80024de:	4413      	add	r3, r2
 80024e0:	ea4f 5273 	mov.w	r2, r3, ror #21
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
		key->rk[179] = ROL(key->rk[171] + delta[5][ 2], 17);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 80024f0:	4a7f      	ldr	r2, [pc, #508]	; (80026f0 <lea_set_key+0x24bc>)
 80024f2:	4413      	add	r3, r2
 80024f4:	ea4f 32f3 	mov.w	r2, r3, ror #15
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
		key->rk[187] = ROL(key->rk[179] + delta[7][ 0],  3);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8002504:	4a7b      	ldr	r2, [pc, #492]	; (80026f4 <lea_set_key+0x24c0>)
 8002506:	4413      	add	r3, r2
 8002508:	ea4f 7273 	mov.w	r2, r3, ror #29
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
		key->rk[  4] = ROL(loadU32(_mk[4]) + delta[0][ 4], 13);
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	3310      	adds	r3, #16
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a77      	ldr	r2, [pc, #476]	; (80026f8 <lea_set_key+0x24c4>)
 800251a:	4413      	add	r3, r2
 800251c:	ea4f 42f3 	mov.w	r2, r3, ror #19
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	611a      	str	r2, [r3, #16]
		key->rk[ 12] = ROL(key->rk[  4] + delta[2][ 2],  1);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	4a74      	ldr	r2, [pc, #464]	; (80026fc <lea_set_key+0x24c8>)
 800252a:	4413      	add	r3, r2
 800252c:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	631a      	str	r2, [r3, #48]	; 0x30
		key->rk[ 20] = ROL(key->rk[ 12] + delta[3][ 5],  6);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002538:	4a71      	ldr	r2, [pc, #452]	; (8002700 <lea_set_key+0x24cc>)
 800253a:	4413      	add	r3, r2
 800253c:	ea4f 62b3 	mov.w	r2, r3, ror #26
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	651a      	str	r2, [r3, #80]	; 0x50
		key->rk[ 28] = ROL(key->rk[ 20] + delta[4][ 8], 13);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002548:	4a6e      	ldr	r2, [pc, #440]	; (8002704 <lea_set_key+0x24d0>)
 800254a:	4413      	add	r3, r2
 800254c:	ea4f 42f3 	mov.w	r2, r3, ror #19
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	671a      	str	r2, [r3, #112]	; 0x70
		key->rk[ 36] = ROL(key->rk[ 28] + delta[6][ 6],  1);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002558:	4a6b      	ldr	r2, [pc, #428]	; (8002708 <lea_set_key+0x24d4>)
 800255a:	4413      	add	r3, r2
 800255c:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		key->rk[ 44] = ROL(key->rk[ 36] + delta[7][ 9],  6);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800256c:	4a67      	ldr	r2, [pc, #412]	; (800270c <lea_set_key+0x24d8>)
 800256e:	4413      	add	r3, r2
 8002570:	ea4f 62b3 	mov.w	r2, r3, ror #26
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		key->rk[ 52] = ROL(key->rk[ 44] + delta[0][12], 13);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002580:	4a63      	ldr	r2, [pc, #396]	; (8002710 <lea_set_key+0x24dc>)
 8002582:	4413      	add	r3, r2
 8002584:	ea4f 42f3 	mov.w	r2, r3, ror #19
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		key->rk[ 60] = ROL(key->rk[ 52] + delta[2][10],  1);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8002594:	4a5f      	ldr	r2, [pc, #380]	; (8002714 <lea_set_key+0x24e0>)
 8002596:	4413      	add	r3, r2
 8002598:	ea4f 72f3 	mov.w	r2, r3, ror #31
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
		key->rk[ 68] = ROL(key->rk[ 60] + delta[3][13],  6);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80025a8:	4a5b      	ldr	r2, [pc, #364]	; (8002718 <lea_set_key+0x24e4>)
 80025aa:	4413      	add	r3, r2
 80025ac:	ea4f 62b3 	mov.w	r2, r3, ror #26
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		key->rk[ 76] = ROL(key->rk[ 68] + delta[4][16], 13);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80025bc:	4a57      	ldr	r2, [pc, #348]	; (800271c <lea_set_key+0x24e8>)
 80025be:	4413      	add	r3, r2
 80025c0:	ea4f 42f3 	mov.w	r2, r3, ror #19
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
		key->rk[ 84] = ROL(key->rk[ 76] + delta[6][14],  1);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 80025d0:	4a53      	ldr	r2, [pc, #332]	; (8002720 <lea_set_key+0x24ec>)
 80025d2:	4413      	add	r3, r2
 80025d4:	ea4f 72f3 	mov.w	r2, r3, ror #31
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
		key->rk[ 92] = ROL(key->rk[ 84] + delta[7][17],  6);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80025e4:	4a4f      	ldr	r2, [pc, #316]	; (8002724 <lea_set_key+0x24f0>)
 80025e6:	4413      	add	r3, r2
 80025e8:	ea4f 62b3 	mov.w	r2, r3, ror #26
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
		key->rk[100] = ROL(key->rk[ 92] + delta[0][20], 13);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 80025f8:	4a4b      	ldr	r2, [pc, #300]	; (8002728 <lea_set_key+0x24f4>)
 80025fa:	4413      	add	r3, r2
 80025fc:	ea4f 42f3 	mov.w	r2, r3, ror #19
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
		key->rk[108] = ROL(key->rk[100] + delta[2][18],  1);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800260c:	4a47      	ldr	r2, [pc, #284]	; (800272c <lea_set_key+0x24f8>)
 800260e:	4413      	add	r3, r2
 8002610:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
		key->rk[116] = ROL(key->rk[108] + delta[3][21],  6);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8002620:	4a43      	ldr	r2, [pc, #268]	; (8002730 <lea_set_key+0x24fc>)
 8002622:	4413      	add	r3, r2
 8002624:	ea4f 62b3 	mov.w	r2, r3, ror #26
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
		key->rk[124] = ROL(key->rk[116] + delta[4][24], 13);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 8002634:	4a3f      	ldr	r2, [pc, #252]	; (8002734 <lea_set_key+0x2500>)
 8002636:	4413      	add	r3, r2
 8002638:	ea4f 42f3 	mov.w	r2, r3, ror #19
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
		key->rk[132] = ROL(key->rk[124] + delta[6][22],  1);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 8002648:	4a3b      	ldr	r2, [pc, #236]	; (8002738 <lea_set_key+0x2504>)
 800264a:	4413      	add	r3, r2
 800264c:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
		key->rk[140] = ROL(key->rk[132] + delta[7][25],  6);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800265c:	4a37      	ldr	r2, [pc, #220]	; (800273c <lea_set_key+0x2508>)
 800265e:	4413      	add	r3, r2
 8002660:	ea4f 62b3 	mov.w	r2, r3, ror #26
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
		key->rk[148] = ROL(key->rk[140] + delta[0][28], 13);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
 8002670:	4a33      	ldr	r2, [pc, #204]	; (8002740 <lea_set_key+0x250c>)
 8002672:	4413      	add	r3, r2
 8002674:	ea4f 42f3 	mov.w	r2, r3, ror #19
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
		key->rk[156] = ROL(key->rk[148] + delta[2][26],  1);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f8d3 3250 	ldr.w	r3, [r3, #592]	; 0x250
 8002684:	4a2f      	ldr	r2, [pc, #188]	; (8002744 <lea_set_key+0x2510>)
 8002686:	4413      	add	r3, r2
 8002688:	ea4f 72f3 	mov.w	r2, r3, ror #31
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
		key->rk[164] = ROL(key->rk[156] + delta[3][29],  6);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8002698:	4a2b      	ldr	r2, [pc, #172]	; (8002748 <lea_set_key+0x2514>)
 800269a:	4413      	add	r3, r2
 800269c:	ea4f 62b3 	mov.w	r2, r3, ror #26
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
		key->rk[172] = ROL(key->rk[164] + delta[4][ 0], 13);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80026ac:	e04e      	b.n	800274c <lea_set_key+0x2518>
 80026ae:	bf00      	nop
 80026b0:	7f4ede1f 	.word	0x7f4ede1f
 80026b4:	9ac09118 	.word	0x9ac09118
 80026b8:	f30ec78d 	.word	0xf30ec78d
 80026bc:	524f38af 	.word	0x524f38af
 80026c0:	682b1e17 	.word	0x682b1e17
 80026c4:	0957e5c4 	.word	0x0957e5c4
 80026c8:	4ede1f7f 	.word	0x4ede1f7f
 80026cc:	c091189a 	.word	0xc091189a
 80026d0:	0ec78df3 	.word	0x0ec78df3
 80026d4:	4f38af52 	.word	0x4f38af52
 80026d8:	2b1e1768 	.word	0x2b1e1768
 80026dc:	57e5c409 	.word	0x57e5c409
 80026e0:	de1f7f4e 	.word	0xde1f7f4e
 80026e4:	91189ac0 	.word	0x91189ac0
 80026e8:	c78df30e 	.word	0xc78df30e
 80026ec:	38af524f 	.word	0x38af524f
 80026f0:	1e17682b 	.word	0x1e17682b
 80026f4:	e5c40957 	.word	0xe5c40957
 80026f8:	3efe9dbc 	.word	0x3efe9dbc
 80026fc:	e789f229 	.word	0xe789f229
 8002700:	1be61d8f 	.word	0x1be61d8f
 8002704:	5ea49e71 	.word	0x5ea49e71
 8002708:	13bc8ab8 	.word	0x13bc8ab8
 800270c:	8812afcb 	.word	0x8812afcb
 8002710:	fe9dbc3e 	.word	0xfe9dbc3e
 8002714:	89f229e7 	.word	0x89f229e7
 8002718:	e61d8f1b 	.word	0xe61d8f1b
 800271c:	a49e715e 	.word	0xa49e715e
 8002720:	bc8ab813 	.word	0xbc8ab813
 8002724:	12afcb88 	.word	0x12afcb88
 8002728:	9dbc3efe 	.word	0x9dbc3efe
 800272c:	f229e789 	.word	0xf229e789
 8002730:	1d8f1be6 	.word	0x1d8f1be6
 8002734:	9e715ea4 	.word	0x9e715ea4
 8002738:	8ab813bc 	.word	0x8ab813bc
 800273c:	afcb8812 	.word	0xafcb8812
 8002740:	bc3efe9d 	.word	0xbc3efe9d
 8002744:	29e789f2 	.word	0x29e789f2
 8002748:	8f1be61d 	.word	0x8f1be61d
 800274c:	4aba      	ldr	r2, [pc, #744]	; (8002a38 <lea_set_key+0x2804>)
 800274e:	4413      	add	r3, r2
 8002750:	ea4f 42f3 	mov.w	r2, r3, ror #19
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
		key->rk[180] = ROL(key->rk[172] + delta[6][30],  1);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8002760:	4ab6      	ldr	r2, [pc, #728]	; (8002a3c <lea_set_key+0x2808>)
 8002762:	4413      	add	r3, r2
 8002764:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
		key->rk[188] = ROL(key->rk[180] + delta[7][ 1],  6);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8002774:	4ab2      	ldr	r2, [pc, #712]	; (8002a40 <lea_set_key+0x280c>)
 8002776:	4413      	add	r3, r2
 8002778:	ea4f 62b3 	mov.w	r2, r3, ror #26
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
		key->rk[  5] = ROL(loadU32(_mk[5]) + delta[0][ 5], 17);
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	3314      	adds	r3, #20
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4aae      	ldr	r2, [pc, #696]	; (8002a44 <lea_set_key+0x2810>)
 800278a:	4413      	add	r3, r2
 800278c:	ea4f 32f3 	mov.w	r2, r3, ror #15
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	615a      	str	r2, [r3, #20]
		key->rk[ 13] = ROL(key->rk[  5] + delta[2][ 3],  3);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	695b      	ldr	r3, [r3, #20]
 8002798:	4aab      	ldr	r2, [pc, #684]	; (8002a48 <lea_set_key+0x2814>)
 800279a:	4413      	add	r3, r2
 800279c:	ea4f 7273 	mov.w	r2, r3, ror #29
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	635a      	str	r2, [r3, #52]	; 0x34
		key->rk[ 21] = ROL(key->rk[ 13] + delta[3][ 6], 11);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027a8:	4aa8      	ldr	r2, [pc, #672]	; (8002a4c <lea_set_key+0x2818>)
 80027aa:	4413      	add	r3, r2
 80027ac:	ea4f 5273 	mov.w	r2, r3, ror #21
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	655a      	str	r2, [r3, #84]	; 0x54
		key->rk[ 29] = ROL(key->rk[ 21] + delta[4][ 9], 17);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b8:	4aa5      	ldr	r2, [pc, #660]	; (8002a50 <lea_set_key+0x281c>)
 80027ba:	4413      	add	r3, r2
 80027bc:	ea4f 32f3 	mov.w	r2, r3, ror #15
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	675a      	str	r2, [r3, #116]	; 0x74
		key->rk[ 37] = ROL(key->rk[ 29] + delta[6][ 7],  3);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027c8:	4aa2      	ldr	r2, [pc, #648]	; (8002a54 <lea_set_key+0x2820>)
 80027ca:	4413      	add	r3, r2
 80027cc:	ea4f 7273 	mov.w	r2, r3, ror #29
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		key->rk[ 45] = ROL(key->rk[ 37] + delta[7][10], 11);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027dc:	4a9e      	ldr	r2, [pc, #632]	; (8002a58 <lea_set_key+0x2824>)
 80027de:	4413      	add	r3, r2
 80027e0:	ea4f 5273 	mov.w	r2, r3, ror #21
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		key->rk[ 53] = ROL(key->rk[ 45] + delta[0][13], 17);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80027f0:	4a9a      	ldr	r2, [pc, #616]	; (8002a5c <lea_set_key+0x2828>)
 80027f2:	4413      	add	r3, r2
 80027f4:	ea4f 32f3 	mov.w	r2, r3, ror #15
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		key->rk[ 61] = ROL(key->rk[ 53] + delta[2][11],  3);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002804:	4a96      	ldr	r2, [pc, #600]	; (8002a60 <lea_set_key+0x282c>)
 8002806:	4413      	add	r3, r2
 8002808:	ea4f 7273 	mov.w	r2, r3, ror #29
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
		key->rk[ 69] = ROL(key->rk[ 61] + delta[3][14], 11);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002818:	4a92      	ldr	r2, [pc, #584]	; (8002a64 <lea_set_key+0x2830>)
 800281a:	4413      	add	r3, r2
 800281c:	ea4f 5273 	mov.w	r2, r3, ror #21
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		key->rk[ 77] = ROL(key->rk[ 69] + delta[4][17], 17);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800282c:	4a8e      	ldr	r2, [pc, #568]	; (8002a68 <lea_set_key+0x2834>)
 800282e:	4413      	add	r3, r2
 8002830:	ea4f 32f3 	mov.w	r2, r3, ror #15
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
		key->rk[ 85] = ROL(key->rk[ 77] + delta[6][15],  3);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002840:	4a8a      	ldr	r2, [pc, #552]	; (8002a6c <lea_set_key+0x2838>)
 8002842:	4413      	add	r3, r2
 8002844:	ea4f 7273 	mov.w	r2, r3, ror #29
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
		key->rk[ 93] = ROL(key->rk[ 85] + delta[7][18], 11);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002854:	4a86      	ldr	r2, [pc, #536]	; (8002a70 <lea_set_key+0x283c>)
 8002856:	4413      	add	r3, r2
 8002858:	ea4f 5273 	mov.w	r2, r3, ror #21
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
		key->rk[101] = ROL(key->rk[ 93] + delta[0][21], 17);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8002868:	4a82      	ldr	r2, [pc, #520]	; (8002a74 <lea_set_key+0x2840>)
 800286a:	4413      	add	r3, r2
 800286c:	ea4f 32f3 	mov.w	r2, r3, ror #15
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
		key->rk[109] = ROL(key->rk[101] + delta[2][19],  3);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 800287c:	4a7e      	ldr	r2, [pc, #504]	; (8002a78 <lea_set_key+0x2844>)
 800287e:	4413      	add	r3, r2
 8002880:	ea4f 7273 	mov.w	r2, r3, ror #29
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		key->rk[117] = ROL(key->rk[109] + delta[3][22], 11);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8002890:	4a7a      	ldr	r2, [pc, #488]	; (8002a7c <lea_set_key+0x2848>)
 8002892:	4413      	add	r3, r2
 8002894:	ea4f 5273 	mov.w	r2, r3, ror #21
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
		key->rk[125] = ROL(key->rk[117] + delta[4][25], 17);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 80028a4:	4a76      	ldr	r2, [pc, #472]	; (8002a80 <lea_set_key+0x284c>)
 80028a6:	4413      	add	r3, r2
 80028a8:	ea4f 32f3 	mov.w	r2, r3, ror #15
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
		key->rk[133] = ROL(key->rk[125] + delta[6][23],  3);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 80028b8:	4a72      	ldr	r2, [pc, #456]	; (8002a84 <lea_set_key+0x2850>)
 80028ba:	4413      	add	r3, r2
 80028bc:	ea4f 7273 	mov.w	r2, r3, ror #29
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
		key->rk[141] = ROL(key->rk[133] + delta[7][26], 11);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80028cc:	4a6e      	ldr	r2, [pc, #440]	; (8002a88 <lea_set_key+0x2854>)
 80028ce:	4413      	add	r3, r2
 80028d0:	ea4f 5273 	mov.w	r2, r3, ror #21
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
		key->rk[149] = ROL(key->rk[141] + delta[0][29], 17);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 80028e0:	4a6a      	ldr	r2, [pc, #424]	; (8002a8c <lea_set_key+0x2858>)
 80028e2:	4413      	add	r3, r2
 80028e4:	ea4f 32f3 	mov.w	r2, r3, ror #15
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
		key->rk[157] = ROL(key->rk[149] + delta[2][27],  3);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f8d3 3254 	ldr.w	r3, [r3, #596]	; 0x254
 80028f4:	4a66      	ldr	r2, [pc, #408]	; (8002a90 <lea_set_key+0x285c>)
 80028f6:	4413      	add	r3, r2
 80028f8:	ea4f 7273 	mov.w	r2, r3, ror #29
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f8c3 2274 	str.w	r2, [r3, #628]	; 0x274
		key->rk[165] = ROL(key->rk[157] + delta[3][30], 11);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f8d3 3274 	ldr.w	r3, [r3, #628]	; 0x274
 8002908:	4a62      	ldr	r2, [pc, #392]	; (8002a94 <lea_set_key+0x2860>)
 800290a:	4413      	add	r3, r2
 800290c:	ea4f 5273 	mov.w	r2, r3, ror #21
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
		key->rk[173] = ROL(key->rk[165] + delta[4][ 1], 17);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800291c:	4a5e      	ldr	r2, [pc, #376]	; (8002a98 <lea_set_key+0x2864>)
 800291e:	4413      	add	r3, r2
 8002920:	ea4f 32f3 	mov.w	r2, r3, ror #15
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
		key->rk[181] = ROL(key->rk[173] + delta[6][31],  3);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8002930:	4a5a      	ldr	r2, [pc, #360]	; (8002a9c <lea_set_key+0x2868>)
 8002932:	4413      	add	r3, r2
 8002934:	ea4f 7273 	mov.w	r2, r3, ror #29
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
		key->rk[189] = ROL(key->rk[181] + delta[7][ 2], 11);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8002944:	4a56      	ldr	r2, [pc, #344]	; (8002aa0 <lea_set_key+0x286c>)
 8002946:	4413      	add	r3, r2
 8002948:	ea4f 5273 	mov.w	r2, r3, ror #21
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
		key->rk[  6] = ROL(loadU32(_mk[6]) + delta[1][ 1],  1);
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	3318      	adds	r3, #24
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a52      	ldr	r2, [pc, #328]	; (8002aa4 <lea_set_key+0x2870>)
 800295a:	4413      	add	r3, r2
 800295c:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	619a      	str	r2, [r3, #24]
		key->rk[ 14] = ROL(key->rk[  6] + delta[2][ 4],  6);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	4a4f      	ldr	r2, [pc, #316]	; (8002aa8 <lea_set_key+0x2874>)
 800296a:	4413      	add	r3, r2
 800296c:	ea4f 62b3 	mov.w	r2, r3, ror #26
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	639a      	str	r2, [r3, #56]	; 0x38
		key->rk[ 22] = ROL(key->rk[ 14] + delta[3][ 7], 13);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002978:	4a4c      	ldr	r2, [pc, #304]	; (8002aac <lea_set_key+0x2878>)
 800297a:	4413      	add	r3, r2
 800297c:	ea4f 42f3 	mov.w	r2, r3, ror #19
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	659a      	str	r2, [r3, #88]	; 0x58
		key->rk[ 30] = ROL(key->rk[ 22] + delta[5][ 5],  1);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002988:	4a49      	ldr	r2, [pc, #292]	; (8002ab0 <lea_set_key+0x287c>)
 800298a:	4413      	add	r3, r2
 800298c:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	679a      	str	r2, [r3, #120]	; 0x78
		key->rk[ 38] = ROL(key->rk[ 30] + delta[6][ 8],  6);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002998:	4a46      	ldr	r2, [pc, #280]	; (8002ab4 <lea_set_key+0x2880>)
 800299a:	4413      	add	r3, r2
 800299c:	ea4f 62b3 	mov.w	r2, r3, ror #26
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		key->rk[ 46] = ROL(key->rk[ 38] + delta[7][11], 13);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029ac:	4a42      	ldr	r2, [pc, #264]	; (8002ab8 <lea_set_key+0x2884>)
 80029ae:	4413      	add	r3, r2
 80029b0:	ea4f 42f3 	mov.w	r2, r3, ror #19
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		key->rk[ 54] = ROL(key->rk[ 46] + delta[1][ 9],  1);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80029c0:	4a3e      	ldr	r2, [pc, #248]	; (8002abc <lea_set_key+0x2888>)
 80029c2:	4413      	add	r3, r2
 80029c4:	ea4f 72f3 	mov.w	r2, r3, ror #31
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		key->rk[ 62] = ROL(key->rk[ 54] + delta[2][12],  6);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80029d4:	4a3a      	ldr	r2, [pc, #232]	; (8002ac0 <lea_set_key+0x288c>)
 80029d6:	4413      	add	r3, r2
 80029d8:	ea4f 62b3 	mov.w	r2, r3, ror #26
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
		key->rk[ 70] = ROL(key->rk[ 62] + delta[3][15], 13);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80029e8:	4a36      	ldr	r2, [pc, #216]	; (8002ac4 <lea_set_key+0x2890>)
 80029ea:	4413      	add	r3, r2
 80029ec:	ea4f 42f3 	mov.w	r2, r3, ror #19
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		key->rk[ 78] = ROL(key->rk[ 70] + delta[5][13],  1);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80029fc:	4a32      	ldr	r2, [pc, #200]	; (8002ac8 <lea_set_key+0x2894>)
 80029fe:	4413      	add	r3, r2
 8002a00:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
		key->rk[ 86] = ROL(key->rk[ 78] + delta[6][16],  6);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8002a10:	4a2e      	ldr	r2, [pc, #184]	; (8002acc <lea_set_key+0x2898>)
 8002a12:	4413      	add	r3, r2
 8002a14:	ea4f 62b3 	mov.w	r2, r3, ror #26
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		key->rk[ 94] = ROL(key->rk[ 86] + delta[7][19], 13);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8002a24:	4a2a      	ldr	r2, [pc, #168]	; (8002ad0 <lea_set_key+0x289c>)
 8002a26:	4413      	add	r3, r2
 8002a28:	ea4f 42f3 	mov.w	r2, r3, ror #19
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
		key->rk[102] = ROL(key->rk[ 94] + delta[1][17],  1);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	e04e      	b.n	8002ad4 <lea_set_key+0x28a0>
 8002a36:	bf00      	nop
 8002a38:	715ea49e 	.word	0x715ea49e
 8002a3c:	b813bc8a 	.word	0xb813bc8a
 8002a40:	cb8812af 	.word	0xcb8812af
 8002a44:	7dfd3b78 	.word	0x7dfd3b78
 8002a48:	cf13e453 	.word	0xcf13e453
 8002a4c:	37cc3b1e 	.word	0x37cc3b1e
 8002a50:	bd493ce2 	.word	0xbd493ce2
 8002a54:	27791570 	.word	0x27791570
 8002a58:	10255f97 	.word	0x10255f97
 8002a5c:	fd3b787d 	.word	0xfd3b787d
 8002a60:	13e453cf 	.word	0x13e453cf
 8002a64:	cc3b1e37 	.word	0xcc3b1e37
 8002a68:	493ce2bd 	.word	0x493ce2bd
 8002a6c:	79157027 	.word	0x79157027
 8002a70:	255f9710 	.word	0x255f9710
 8002a74:	3b787dfd 	.word	0x3b787dfd
 8002a78:	e453cf13 	.word	0xe453cf13
 8002a7c:	3b1e37cc 	.word	0x3b1e37cc
 8002a80:	3ce2bd49 	.word	0x3ce2bd49
 8002a84:	15702779 	.word	0x15702779
 8002a88:	5f971025 	.word	0x5f971025
 8002a8c:	787dfd3b 	.word	0x787dfd3b
 8002a90:	53cf13e4 	.word	0x53cf13e4
 8002a94:	1e37cc3b 	.word	0x1e37cc3b
 8002a98:	e2bd493c 	.word	0xe2bd493c
 8002a9c:	70277915 	.word	0x70277915
 8002aa0:	9710255f 	.word	0x9710255f
 8002aa4:	88c4d604 	.word	0x88c4d604
 8002aa8:	9e27c8a7 	.word	0x9e27c8a7
 8002aac:	6f98763c 	.word	0x6f98763c
 8002ab0:	f0bb4158 	.word	0xf0bb4158
 8002ab4:	4ef22ae0 	.word	0x4ef22ae0
 8002ab8:	204abf2e 	.word	0x204abf2e
 8002abc:	c4d60488 	.word	0xc4d60488
 8002ac0:	27c8a79e 	.word	0x27c8a79e
 8002ac4:	98763c6f 	.word	0x98763c6f
 8002ac8:	bb4158f0 	.word	0xbb4158f0
 8002acc:	f22ae04e 	.word	0xf22ae04e
 8002ad0:	4abf2e20 	.word	0x4abf2e20
 8002ad4:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8002ad8:	4ab7      	ldr	r2, [pc, #732]	; (8002db8 <lea_set_key+0x2b84>)
 8002ada:	4413      	add	r3, r2
 8002adc:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
		key->rk[110] = ROL(key->rk[102] + delta[2][20],  6);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8002aec:	4ab3      	ldr	r2, [pc, #716]	; (8002dbc <lea_set_key+0x2b88>)
 8002aee:	4413      	add	r3, r2
 8002af0:	ea4f 62b3 	mov.w	r2, r3, ror #26
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
		key->rk[118] = ROL(key->rk[110] + delta[3][23], 13);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8002b00:	4aaf      	ldr	r2, [pc, #700]	; (8002dc0 <lea_set_key+0x2b8c>)
 8002b02:	4413      	add	r3, r2
 8002b04:	ea4f 42f3 	mov.w	r2, r3, ror #19
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
		key->rk[126] = ROL(key->rk[118] + delta[5][21],  1);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 8002b14:	4aab      	ldr	r2, [pc, #684]	; (8002dc4 <lea_set_key+0x2b90>)
 8002b16:	4413      	add	r3, r2
 8002b18:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
		key->rk[134] = ROL(key->rk[126] + delta[6][24],  6);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 8002b28:	4aa7      	ldr	r2, [pc, #668]	; (8002dc8 <lea_set_key+0x2b94>)
 8002b2a:	4413      	add	r3, r2
 8002b2c:	ea4f 62b3 	mov.w	r2, r3, ror #26
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		key->rk[142] = ROL(key->rk[134] + delta[7][27], 13);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8002b3c:	4aa3      	ldr	r2, [pc, #652]	; (8002dcc <lea_set_key+0x2b98>)
 8002b3e:	4413      	add	r3, r2
 8002b40:	ea4f 42f3 	mov.w	r2, r3, ror #19
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
		key->rk[150] = ROL(key->rk[142] + delta[1][25],  1);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f8d3 3238 	ldr.w	r3, [r3, #568]	; 0x238
 8002b50:	4a9f      	ldr	r2, [pc, #636]	; (8002dd0 <lea_set_key+0x2b9c>)
 8002b52:	4413      	add	r3, r2
 8002b54:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
		key->rk[158] = ROL(key->rk[150] + delta[2][28],  6);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
 8002b64:	4a9b      	ldr	r2, [pc, #620]	; (8002dd4 <lea_set_key+0x2ba0>)
 8002b66:	4413      	add	r3, r2
 8002b68:	ea4f 62b3 	mov.w	r2, r3, ror #26
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
		key->rk[166] = ROL(key->rk[158] + delta[3][31], 13);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f8d3 3278 	ldr.w	r3, [r3, #632]	; 0x278
 8002b78:	4a97      	ldr	r2, [pc, #604]	; (8002dd8 <lea_set_key+0x2ba4>)
 8002b7a:	4413      	add	r3, r2
 8002b7c:	ea4f 42f3 	mov.w	r2, r3, ror #19
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
		key->rk[174] = ROL(key->rk[166] + delta[5][29],  1);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8002b8c:	4a93      	ldr	r2, [pc, #588]	; (8002ddc <lea_set_key+0x2ba8>)
 8002b8e:	4413      	add	r3, r2
 8002b90:	ea4f 72f3 	mov.w	r2, r3, ror #31
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
		key->rk[182] = ROL(key->rk[174] + delta[6][ 0],  6);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8002ba0:	4a8f      	ldr	r2, [pc, #572]	; (8002de0 <lea_set_key+0x2bac>)
 8002ba2:	4413      	add	r3, r2
 8002ba4:	ea4f 62b3 	mov.w	r2, r3, ror #26
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8
		key->rk[190] = ROL(key->rk[182] + delta[7][ 3], 13);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8002bb4:	4a8b      	ldr	r2, [pc, #556]	; (8002de4 <lea_set_key+0x2bb0>)
 8002bb6:	4413      	add	r3, r2
 8002bb8:	ea4f 42f3 	mov.w	r2, r3, ror #19
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
		key->rk[  7] = ROL(loadU32(_mk[7]) + delta[1][ 2],  3);
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	331c      	adds	r3, #28
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a87      	ldr	r2, [pc, #540]	; (8002de8 <lea_set_key+0x2bb4>)
 8002bca:	4413      	add	r3, r2
 8002bcc:	ea4f 7273 	mov.w	r2, r3, ror #29
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	61da      	str	r2, [r3, #28]
		key->rk[ 15] = ROL(key->rk[  7] + delta[2][ 5], 11);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	69db      	ldr	r3, [r3, #28]
 8002bd8:	4a84      	ldr	r2, [pc, #528]	; (8002dec <lea_set_key+0x2bb8>)
 8002bda:	4413      	add	r3, r2
 8002bdc:	ea4f 5273 	mov.w	r2, r3, ror #21
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	63da      	str	r2, [r3, #60]	; 0x3c
		key->rk[ 23] = ROL(key->rk[ 15] + delta[3][ 8], 17);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be8:	4a81      	ldr	r2, [pc, #516]	; (8002df0 <lea_set_key+0x2bbc>)
 8002bea:	4413      	add	r3, r2
 8002bec:	ea4f 32f3 	mov.w	r2, r3, ror #15
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	65da      	str	r2, [r3, #92]	; 0x5c
		key->rk[ 31] = ROL(key->rk[ 23] + delta[5][ 6],  3);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf8:	4a7e      	ldr	r2, [pc, #504]	; (8002df4 <lea_set_key+0x2bc0>)
 8002bfa:	4413      	add	r3, r2
 8002bfc:	ea4f 7273 	mov.w	r2, r3, ror #29
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	67da      	str	r2, [r3, #124]	; 0x7c
		key->rk[ 39] = ROL(key->rk[ 31] + delta[6][ 9], 11);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c08:	4a7b      	ldr	r2, [pc, #492]	; (8002df8 <lea_set_key+0x2bc4>)
 8002c0a:	4413      	add	r3, r2
 8002c0c:	ea4f 5273 	mov.w	r2, r3, ror #21
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		key->rk[ 47] = ROL(key->rk[ 39] + delta[7][12], 17);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c1c:	4a77      	ldr	r2, [pc, #476]	; (8002dfc <lea_set_key+0x2bc8>)
 8002c1e:	4413      	add	r3, r2
 8002c20:	ea4f 32f3 	mov.w	r2, r3, ror #15
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		key->rk[ 55] = ROL(key->rk[ 47] + delta[1][10],  3);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002c30:	4a73      	ldr	r2, [pc, #460]	; (8002e00 <lea_set_key+0x2bcc>)
 8002c32:	4413      	add	r3, r2
 8002c34:	ea4f 7273 	mov.w	r2, r3, ror #29
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		key->rk[ 63] = ROL(key->rk[ 55] + delta[2][13], 11);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002c44:	4a6f      	ldr	r2, [pc, #444]	; (8002e04 <lea_set_key+0x2bd0>)
 8002c46:	4413      	add	r3, r2
 8002c48:	ea4f 5273 	mov.w	r2, r3, ror #21
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
		key->rk[ 71] = ROL(key->rk[ 63] + delta[3][16], 17);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8002c58:	4a6b      	ldr	r2, [pc, #428]	; (8002e08 <lea_set_key+0x2bd4>)
 8002c5a:	4413      	add	r3, r2
 8002c5c:	ea4f 32f3 	mov.w	r2, r3, ror #15
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
		key->rk[ 79] = ROL(key->rk[ 71] + delta[5][14],  3);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8002c6c:	4a67      	ldr	r2, [pc, #412]	; (8002e0c <lea_set_key+0x2bd8>)
 8002c6e:	4413      	add	r3, r2
 8002c70:	ea4f 7273 	mov.w	r2, r3, ror #29
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
		key->rk[ 87] = ROL(key->rk[ 79] + delta[6][17], 11);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8002c80:	4a63      	ldr	r2, [pc, #396]	; (8002e10 <lea_set_key+0x2bdc>)
 8002c82:	4413      	add	r3, r2
 8002c84:	ea4f 5273 	mov.w	r2, r3, ror #21
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
		key->rk[ 95] = ROL(key->rk[ 87] + delta[7][20], 17);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8002c94:	4a5f      	ldr	r2, [pc, #380]	; (8002e14 <lea_set_key+0x2be0>)
 8002c96:	4413      	add	r3, r2
 8002c98:	ea4f 32f3 	mov.w	r2, r3, ror #15
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
		key->rk[103] = ROL(key->rk[ 95] + delta[1][18],  3);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8002ca8:	4a5b      	ldr	r2, [pc, #364]	; (8002e18 <lea_set_key+0x2be4>)
 8002caa:	4413      	add	r3, r2
 8002cac:	ea4f 7273 	mov.w	r2, r3, ror #29
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
		key->rk[111] = ROL(key->rk[103] + delta[2][21], 11);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8002cbc:	4a57      	ldr	r2, [pc, #348]	; (8002e1c <lea_set_key+0x2be8>)
 8002cbe:	4413      	add	r3, r2
 8002cc0:	ea4f 5273 	mov.w	r2, r3, ror #21
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		key->rk[119] = ROL(key->rk[111] + delta[3][24], 17);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8002cd0:	4a53      	ldr	r2, [pc, #332]	; (8002e20 <lea_set_key+0x2bec>)
 8002cd2:	4413      	add	r3, r2
 8002cd4:	ea4f 32f3 	mov.w	r2, r3, ror #15
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
		key->rk[127] = ROL(key->rk[119] + delta[5][22],  3);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 8002ce4:	4a4f      	ldr	r2, [pc, #316]	; (8002e24 <lea_set_key+0x2bf0>)
 8002ce6:	4413      	add	r3, r2
 8002ce8:	ea4f 7273 	mov.w	r2, r3, ror #29
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
		key->rk[135] = ROL(key->rk[127] + delta[6][25], 11);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 8002cf8:	4a4b      	ldr	r2, [pc, #300]	; (8002e28 <lea_set_key+0x2bf4>)
 8002cfa:	4413      	add	r3, r2
 8002cfc:	ea4f 5273 	mov.w	r2, r3, ror #21
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
		key->rk[143] = ROL(key->rk[135] + delta[7][28], 17);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8002d0c:	4a47      	ldr	r2, [pc, #284]	; (8002e2c <lea_set_key+0x2bf8>)
 8002d0e:	4413      	add	r3, r2
 8002d10:	ea4f 32f3 	mov.w	r2, r3, ror #15
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
		key->rk[151] = ROL(key->rk[143] + delta[1][26],  3);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f8d3 323c 	ldr.w	r3, [r3, #572]	; 0x23c
 8002d20:	4a43      	ldr	r2, [pc, #268]	; (8002e30 <lea_set_key+0x2bfc>)
 8002d22:	4413      	add	r3, r2
 8002d24:	ea4f 7273 	mov.w	r2, r3, ror #29
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
		key->rk[159] = ROL(key->rk[151] + delta[2][29], 11);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
 8002d34:	4a3f      	ldr	r2, [pc, #252]	; (8002e34 <lea_set_key+0x2c00>)
 8002d36:	4413      	add	r3, r2
 8002d38:	ea4f 5273 	mov.w	r2, r3, ror #21
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
		key->rk[167] = ROL(key->rk[159] + delta[3][ 0], 17);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8002d48:	4a3b      	ldr	r2, [pc, #236]	; (8002e38 <lea_set_key+0x2c04>)
 8002d4a:	4413      	add	r3, r2
 8002d4c:	ea4f 32f3 	mov.w	r2, r3, ror #15
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
		key->rk[175] = ROL(key->rk[167] + delta[5][30],  3);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 8002d5c:	4a37      	ldr	r2, [pc, #220]	; (8002e3c <lea_set_key+0x2c08>)
 8002d5e:	4413      	add	r3, r2
 8002d60:	ea4f 7273 	mov.w	r2, r3, ror #29
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
		key->rk[183] = ROL(key->rk[175] + delta[6][ 1], 11);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8002d70:	4a33      	ldr	r2, [pc, #204]	; (8002e40 <lea_set_key+0x2c0c>)
 8002d72:	4413      	add	r3, r2
 8002d74:	ea4f 5273 	mov.w	r2, r3, ror #21
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f8c3 22dc 	str.w	r2, [r3, #732]	; 0x2dc
		key->rk[191] = ROL(key->rk[183] + delta[7][ 4], 17);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 8002d84:	4a2f      	ldr	r2, [pc, #188]	; (8002e44 <lea_set_key+0x2c10>)
 8002d86:	4413      	add	r3, r2
 8002d88:	ea4f 32f3 	mov.w	r2, r3, ror #15
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
		break;
 8002d92:	bf00      	nop
	}

	key->round = (mk_len >> 1) + 16;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	085b      	lsrs	r3, r3, #1
 8002d98:	f103 0210 	add.w	r2, r3, #16
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
 8002da2:	e004      	b.n	8002dae <lea_set_key+0x2b7a>
		return;
 8002da4:	bf00      	nop
 8002da6:	e002      	b.n	8002dae <lea_set_key+0x2b7a>
		return;
 8002da8:	bf00      	nop
 8002daa:	e000      	b.n	8002dae <lea_set_key+0x2b7a>
			return;
 8002dac:	bf00      	nop
}
 8002dae:	371c      	adds	r7, #28
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr
 8002db8:	d60488c4 	.word	0xd60488c4
 8002dbc:	c8a79e27 	.word	0xc8a79e27
 8002dc0:	763c6f98 	.word	0x763c6f98
 8002dc4:	4158f0bb 	.word	0x4158f0bb
 8002dc8:	2ae04ef2 	.word	0x2ae04ef2
 8002dcc:	bf2e204a 	.word	0xbf2e204a
 8002dd0:	0488c4d6 	.word	0x0488c4d6
 8002dd4:	a79e27c8 	.word	0xa79e27c8
 8002dd8:	3c6f9876 	.word	0x3c6f9876
 8002ddc:	58f0bb41 	.word	0x58f0bb41
 8002de0:	e04ef22a 	.word	0xe04ef22a
 8002de4:	2e204abf 	.word	0x2e204abf
 8002de8:	1189ac09 	.word	0x1189ac09
 8002dec:	3c4f914f 	.word	0x3c4f914f
 8002df0:	df30ec78 	.word	0xdf30ec78
 8002df4:	e17682b1 	.word	0xe17682b1
 8002df8:	9de455c0 	.word	0x9de455c0
 8002dfc:	40957e5c 	.word	0x40957e5c
 8002e00:	89ac0911 	.word	0x89ac0911
 8002e04:	4f914f3c 	.word	0x4f914f3c
 8002e08:	30ec78df 	.word	0x30ec78df
 8002e0c:	7682b1e1 	.word	0x7682b1e1
 8002e10:	e455c09d 	.word	0xe455c09d
 8002e14:	957e5c40 	.word	0x957e5c40
 8002e18:	ac091189 	.word	0xac091189
 8002e1c:	914f3c4f 	.word	0x914f3c4f
 8002e20:	ec78df30 	.word	0xec78df30
 8002e24:	82b1e176 	.word	0x82b1e176
 8002e28:	55c09de4 	.word	0x55c09de4
 8002e2c:	7e5c4095 	.word	0x7e5c4095
 8002e30:	091189ac 	.word	0x091189ac
 8002e34:	4f3c4f91 	.word	0x4f3c4f91
 8002e38:	78df30ec 	.word	0x78df30ec
 8002e3c:	b1e17682 	.word	0xb1e17682
 8002e40:	c09de455 	.word	0xc09de455
 8002e44:	5c40957e 	.word	0x5c40957e

08002e48 <lea_encrypt>:

void lea_encrypt(unsigned char *ct, const unsigned char *pt, const LEA_KEY *key)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b08b      	sub	sp, #44	; 0x2c
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
	unsigned int X0,X1,X2,X3;
	
	const unsigned int * _pt = (const unsigned int *)pt;
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	617b      	str	r3, [r7, #20]
	unsigned int * _ct  = (unsigned int*)ct;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	613b      	str	r3, [r7, #16]
	
	X0 = loadU32(_pt[0]);
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	627b      	str	r3, [r7, #36]	; 0x24
	X1 = loadU32(_pt[1]);
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	3304      	adds	r3, #4
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	623b      	str	r3, [r7, #32]
	X2 = loadU32(_pt[2]);
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	3308      	adds	r3, #8
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	61fb      	str	r3, [r7, #28]
	X3 = loadU32(_pt[3]);
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	330c      	adds	r3, #12
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	61bb      	str	r3, [r7, #24]

	X3 = ROR((X2 ^ key->rk[  4]) + (X3 ^ key->rk[  5]), 3);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	691a      	ldr	r2, [r3, #16]
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	405a      	eors	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6959      	ldr	r1, [r3, #20]
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	404b      	eors	r3, r1
 8002e8a:	4413      	add	r3, r2
 8002e8c:	ea4f 03f3 	mov.w	r3, r3, ror #3
 8002e90:	61bb      	str	r3, [r7, #24]
	X2 = ROR((X1 ^ key->rk[  2]) + (X2 ^ key->rk[  3]), 5);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	689a      	ldr	r2, [r3, #8]
 8002e96:	6a3b      	ldr	r3, [r7, #32]
 8002e98:	405a      	eors	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68d9      	ldr	r1, [r3, #12]
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	404b      	eors	r3, r1
 8002ea2:	4413      	add	r3, r2
 8002ea4:	ea4f 1373 	mov.w	r3, r3, ror #5
 8002ea8:	61fb      	str	r3, [r7, #28]
	X1 = ROL((X0 ^ key->rk[  0]) + (X1 ^ key->rk[  1]), 9);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb0:	405a      	eors	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6859      	ldr	r1, [r3, #4]
 8002eb6:	6a3b      	ldr	r3, [r7, #32]
 8002eb8:	404b      	eors	r3, r1
 8002eba:	4413      	add	r3, r2
 8002ebc:	ea4f 53f3 	mov.w	r3, r3, ror #23
 8002ec0:	623b      	str	r3, [r7, #32]
	X0 = ROR((X3 ^ key->rk[ 10]) + (X0 ^ key->rk[ 11]), 3);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	405a      	eors	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed0:	404b      	eors	r3, r1
 8002ed2:	4413      	add	r3, r2
 8002ed4:	ea4f 03f3 	mov.w	r3, r3, ror #3
 8002ed8:	627b      	str	r3, [r7, #36]	; 0x24
	X3 = ROR((X2 ^ key->rk[  8]) + (X3 ^ key->rk[  9]), 5);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a1a      	ldr	r2, [r3, #32]
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	405a      	eors	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	404b      	eors	r3, r1
 8002eea:	4413      	add	r3, r2
 8002eec:	ea4f 1373 	mov.w	r3, r3, ror #5
 8002ef0:	61bb      	str	r3, [r7, #24]
	X2 = ROL((X1 ^ key->rk[  6]) + (X2 ^ key->rk[  7]), 9);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	699a      	ldr	r2, [r3, #24]
 8002ef6:	6a3b      	ldr	r3, [r7, #32]
 8002ef8:	405a      	eors	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	69d9      	ldr	r1, [r3, #28]
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	404b      	eors	r3, r1
 8002f02:	4413      	add	r3, r2
 8002f04:	ea4f 53f3 	mov.w	r3, r3, ror #23
 8002f08:	61fb      	str	r3, [r7, #28]
	X1 = ROR((X0 ^ key->rk[ 16]) + (X1 ^ key->rk[ 17]), 3);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f10:	405a      	eors	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002f16:	6a3b      	ldr	r3, [r7, #32]
 8002f18:	404b      	eors	r3, r1
 8002f1a:	4413      	add	r3, r2
 8002f1c:	ea4f 03f3 	mov.w	r3, r3, ror #3
 8002f20:	623b      	str	r3, [r7, #32]
	X0 = ROR((X3 ^ key->rk[ 14]) + (X0 ^ key->rk[ 15]), 5);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	405a      	eors	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f30:	404b      	eors	r3, r1
 8002f32:	4413      	add	r3, r2
 8002f34:	ea4f 1373 	mov.w	r3, r3, ror #5
 8002f38:	627b      	str	r3, [r7, #36]	; 0x24
	X3 = ROL((X2 ^ key->rk[ 12]) + (X3 ^ key->rk[ 13]), 9);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	405a      	eors	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	404b      	eors	r3, r1
 8002f4a:	4413      	add	r3, r2
 8002f4c:	ea4f 53f3 	mov.w	r3, r3, ror #23
 8002f50:	61bb      	str	r3, [r7, #24]
	X2 = ROR((X1 ^ key->rk[ 22]) + (X2 ^ key->rk[ 23]), 3);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f56:	6a3b      	ldr	r3, [r7, #32]
 8002f58:	405a      	eors	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	404b      	eors	r3, r1
 8002f62:	4413      	add	r3, r2
 8002f64:	ea4f 03f3 	mov.w	r3, r3, ror #3
 8002f68:	61fb      	str	r3, [r7, #28]
	X1 = ROR((X0 ^ key->rk[ 20]) + (X1 ^ key->rk[ 21]), 5);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f70:	405a      	eors	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002f76:	6a3b      	ldr	r3, [r7, #32]
 8002f78:	404b      	eors	r3, r1
 8002f7a:	4413      	add	r3, r2
 8002f7c:	ea4f 1373 	mov.w	r3, r3, ror #5
 8002f80:	623b      	str	r3, [r7, #32]
	X0 = ROL((X3 ^ key->rk[ 18]) + (X0 ^ key->rk[ 19]), 9);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	405a      	eors	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f90:	404b      	eors	r3, r1
 8002f92:	4413      	add	r3, r2
 8002f94:	ea4f 53f3 	mov.w	r3, r3, ror #23
 8002f98:	627b      	str	r3, [r7, #36]	; 0x24
	
	X3 = ROR((X2 ^ key->rk[ 28]) + (X3 ^ key->rk[ 29]), 3);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	405a      	eors	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6f59      	ldr	r1, [r3, #116]	; 0x74
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	404b      	eors	r3, r1
 8002faa:	4413      	add	r3, r2
 8002fac:	ea4f 03f3 	mov.w	r3, r3, ror #3
 8002fb0:	61bb      	str	r3, [r7, #24]
	X2 = ROR((X1 ^ key->rk[ 26]) + (X2 ^ key->rk[ 27]), 5);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002fb6:	6a3b      	ldr	r3, [r7, #32]
 8002fb8:	405a      	eors	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	404b      	eors	r3, r1
 8002fc2:	4413      	add	r3, r2
 8002fc4:	ea4f 1373 	mov.w	r3, r3, ror #5
 8002fc8:	61fb      	str	r3, [r7, #28]
	X1 = ROL((X0 ^ key->rk[ 24]) + (X1 ^ key->rk[ 25]), 9);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd0:	405a      	eors	r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8002fd6:	6a3b      	ldr	r3, [r7, #32]
 8002fd8:	404b      	eors	r3, r1
 8002fda:	4413      	add	r3, r2
 8002fdc:	ea4f 53f3 	mov.w	r3, r3, ror #23
 8002fe0:	623b      	str	r3, [r7, #32]
	X0 = ROR((X3 ^ key->rk[ 34]) + (X0 ^ key->rk[ 35]), 3);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	405a      	eors	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8002ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff4:	404b      	eors	r3, r1
 8002ff6:	4413      	add	r3, r2
 8002ff8:	ea4f 03f3 	mov.w	r3, r3, ror #3
 8002ffc:	627b      	str	r3, [r7, #36]	; 0x24
	X3 = ROR((X2 ^ key->rk[ 32]) + (X3 ^ key->rk[ 33]), 5);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	405a      	eors	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	404b      	eors	r3, r1
 8003012:	4413      	add	r3, r2
 8003014:	ea4f 1373 	mov.w	r3, r3, ror #5
 8003018:	61bb      	str	r3, [r7, #24]
	X2 = ROL((X1 ^ key->rk[ 30]) + (X2 ^ key->rk[ 31]), 9);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800301e:	6a3b      	ldr	r3, [r7, #32]
 8003020:	405a      	eors	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	404b      	eors	r3, r1
 800302a:	4413      	add	r3, r2
 800302c:	ea4f 53f3 	mov.w	r3, r3, ror #23
 8003030:	61fb      	str	r3, [r7, #28]
	X1 = ROR((X0 ^ key->rk[ 40]) + (X1 ^ key->rk[ 41]), 3);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303a:	405a      	eors	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8003042:	6a3b      	ldr	r3, [r7, #32]
 8003044:	404b      	eors	r3, r1
 8003046:	4413      	add	r3, r2
 8003048:	ea4f 03f3 	mov.w	r3, r3, ror #3
 800304c:	623b      	str	r3, [r7, #32]
	X0 = ROR((X3 ^ key->rk[ 38]) + (X0 ^ key->rk[ 39]), 5);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	405a      	eors	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 800305e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003060:	404b      	eors	r3, r1
 8003062:	4413      	add	r3, r2
 8003064:	ea4f 1373 	mov.w	r3, r3, ror #5
 8003068:	627b      	str	r3, [r7, #36]	; 0x24
	X3 = ROL((X2 ^ key->rk[ 36]) + (X3 ^ key->rk[ 37]), 9);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	405a      	eors	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	404b      	eors	r3, r1
 800307e:	4413      	add	r3, r2
 8003080:	ea4f 53f3 	mov.w	r3, r3, ror #23
 8003084:	61bb      	str	r3, [r7, #24]
	X2 = ROR((X1 ^ key->rk[ 46]) + (X2 ^ key->rk[ 47]), 3);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800308c:	6a3b      	ldr	r3, [r7, #32]
 800308e:	405a      	eors	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	404b      	eors	r3, r1
 800309a:	4413      	add	r3, r2
 800309c:	ea4f 03f3 	mov.w	r3, r3, ror #3
 80030a0:	61fb      	str	r3, [r7, #28]
	X1 = ROR((X0 ^ key->rk[ 44]) + (X1 ^ key->rk[ 45]), 5);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80030a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030aa:	405a      	eors	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 80030b2:	6a3b      	ldr	r3, [r7, #32]
 80030b4:	404b      	eors	r3, r1
 80030b6:	4413      	add	r3, r2
 80030b8:	ea4f 1373 	mov.w	r3, r3, ror #5
 80030bc:	623b      	str	r3, [r7, #32]
	X0 = ROL((X3 ^ key->rk[ 42]) + (X0 ^ key->rk[ 43]), 9);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	405a      	eors	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 80030ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d0:	404b      	eors	r3, r1
 80030d2:	4413      	add	r3, r2
 80030d4:	ea4f 53f3 	mov.w	r3, r3, ror #23
 80030d8:	627b      	str	r3, [r7, #36]	; 0x24

	X3 = ROR((X2 ^ key->rk[ 52]) + (X3 ^ key->rk[ 53]), 3);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	405a      	eors	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f8d3 10d4 	ldr.w	r1, [r3, #212]	; 0xd4
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	404b      	eors	r3, r1
 80030ee:	4413      	add	r3, r2
 80030f0:	ea4f 03f3 	mov.w	r3, r3, ror #3
 80030f4:	61bb      	str	r3, [r7, #24]
	X2 = ROR((X1 ^ key->rk[ 50]) + (X2 ^ key->rk[ 51]), 5);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80030fc:	6a3b      	ldr	r3, [r7, #32]
 80030fe:	405a      	eors	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f8d3 10cc 	ldr.w	r1, [r3, #204]	; 0xcc
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	404b      	eors	r3, r1
 800310a:	4413      	add	r3, r2
 800310c:	ea4f 1373 	mov.w	r3, r3, ror #5
 8003110:	61fb      	str	r3, [r7, #28]
	X1 = ROL((X0 ^ key->rk[ 48]) + (X1 ^ key->rk[ 49]), 9);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311a:	405a      	eors	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8003122:	6a3b      	ldr	r3, [r7, #32]
 8003124:	404b      	eors	r3, r1
 8003126:	4413      	add	r3, r2
 8003128:	ea4f 53f3 	mov.w	r3, r3, ror #23
 800312c:	623b      	str	r3, [r7, #32]
	X0 = ROR((X3 ^ key->rk[ 58]) + (X0 ^ key->rk[ 59]), 3);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	405a      	eors	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f8d3 10ec 	ldr.w	r1, [r3, #236]	; 0xec
 800313e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003140:	404b      	eors	r3, r1
 8003142:	4413      	add	r3, r2
 8003144:	ea4f 03f3 	mov.w	r3, r3, ror #3
 8003148:	627b      	str	r3, [r7, #36]	; 0x24
	X3 = ROR((X2 ^ key->rk[ 56]) + (X3 ^ key->rk[ 57]), 5);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	405a      	eors	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	404b      	eors	r3, r1
 800315e:	4413      	add	r3, r2
 8003160:	ea4f 1373 	mov.w	r3, r3, ror #5
 8003164:	61bb      	str	r3, [r7, #24]
	X2 = ROL((X1 ^ key->rk[ 54]) + (X2 ^ key->rk[ 55]), 9);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 800316c:	6a3b      	ldr	r3, [r7, #32]
 800316e:	405a      	eors	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	404b      	eors	r3, r1
 800317a:	4413      	add	r3, r2
 800317c:	ea4f 53f3 	mov.w	r3, r3, ror #23
 8003180:	61fb      	str	r3, [r7, #28]
	X1 = ROR((X0 ^ key->rk[ 64]) + (X1 ^ key->rk[ 65]), 3);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8003188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318a:	405a      	eors	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
 8003192:	6a3b      	ldr	r3, [r7, #32]
 8003194:	404b      	eors	r3, r1
 8003196:	4413      	add	r3, r2
 8003198:	ea4f 03f3 	mov.w	r3, r3, ror #3
 800319c:	623b      	str	r3, [r7, #32]
	X0 = ROR((X3 ^ key->rk[ 62]) + (X0 ^ key->rk[ 63]), 5);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	405a      	eors	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f8d3 10fc 	ldr.w	r1, [r3, #252]	; 0xfc
 80031ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b0:	404b      	eors	r3, r1
 80031b2:	4413      	add	r3, r2
 80031b4:	ea4f 1373 	mov.w	r3, r3, ror #5
 80031b8:	627b      	str	r3, [r7, #36]	; 0x24
	X3 = ROL((X2 ^ key->rk[ 60]) + (X3 ^ key->rk[ 61]), 9);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	405a      	eors	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	404b      	eors	r3, r1
 80031ce:	4413      	add	r3, r2
 80031d0:	ea4f 53f3 	mov.w	r3, r3, ror #23
 80031d4:	61bb      	str	r3, [r7, #24]
	X2 = ROR((X1 ^ key->rk[ 70]) + (X2 ^ key->rk[ 71]), 3);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 80031dc:	6a3b      	ldr	r3, [r7, #32]
 80031de:	405a      	eors	r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f8d3 111c 	ldr.w	r1, [r3, #284]	; 0x11c
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	404b      	eors	r3, r1
 80031ea:	4413      	add	r3, r2
 80031ec:	ea4f 03f3 	mov.w	r3, r3, ror #3
 80031f0:	61fb      	str	r3, [r7, #28]
	X1 = ROR((X0 ^ key->rk[ 68]) + (X1 ^ key->rk[ 69]), 5);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80031f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fa:	405a      	eors	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
 8003202:	6a3b      	ldr	r3, [r7, #32]
 8003204:	404b      	eors	r3, r1
 8003206:	4413      	add	r3, r2
 8003208:	ea4f 1373 	mov.w	r3, r3, ror #5
 800320c:	623b      	str	r3, [r7, #32]
	X0 = ROL((X3 ^ key->rk[ 66]) + (X0 ^ key->rk[ 67]), 9);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	405a      	eors	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800321e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003220:	404b      	eors	r3, r1
 8003222:	4413      	add	r3, r2
 8003224:	ea4f 53f3 	mov.w	r3, r3, ror #23
 8003228:	627b      	str	r3, [r7, #36]	; 0x24

	X3 = ROR((X2 ^ key->rk[ 76]) + (X3 ^ key->rk[ 77]), 3);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	405a      	eors	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	404b      	eors	r3, r1
 800323e:	4413      	add	r3, r2
 8003240:	ea4f 03f3 	mov.w	r3, r3, ror #3
 8003244:	61bb      	str	r3, [r7, #24]
	X2 = ROR((X1 ^ key->rk[ 74]) + (X2 ^ key->rk[ 75]), 5);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 800324c:	6a3b      	ldr	r3, [r7, #32]
 800324e:	405a      	eors	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f8d3 112c 	ldr.w	r1, [r3, #300]	; 0x12c
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	404b      	eors	r3, r1
 800325a:	4413      	add	r3, r2
 800325c:	ea4f 1373 	mov.w	r3, r3, ror #5
 8003260:	61fb      	str	r3, [r7, #28]
	X1 = ROL((X0 ^ key->rk[ 72]) + (X1 ^ key->rk[ 73]), 9);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 8003268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326a:	405a      	eors	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
 8003272:	6a3b      	ldr	r3, [r7, #32]
 8003274:	404b      	eors	r3, r1
 8003276:	4413      	add	r3, r2
 8003278:	ea4f 53f3 	mov.w	r3, r3, ror #23
 800327c:	623b      	str	r3, [r7, #32]
	X0 = ROR((X3 ^ key->rk[ 82]) + (X0 ^ key->rk[ 83]), 3);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	405a      	eors	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
 800328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003290:	404b      	eors	r3, r1
 8003292:	4413      	add	r3, r2
 8003294:	ea4f 03f3 	mov.w	r3, r3, ror #3
 8003298:	627b      	str	r3, [r7, #36]	; 0x24
	X3 = ROR((X2 ^ key->rk[ 80]) + (X3 ^ key->rk[ 81]), 5);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	405a      	eors	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f8d3 1144 	ldr.w	r1, [r3, #324]	; 0x144
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	404b      	eors	r3, r1
 80032ae:	4413      	add	r3, r2
 80032b0:	ea4f 1373 	mov.w	r3, r3, ror #5
 80032b4:	61bb      	str	r3, [r7, #24]
	X2 = ROL((X1 ^ key->rk[ 78]) + (X2 ^ key->rk[ 79]), 9);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
 80032bc:	6a3b      	ldr	r3, [r7, #32]
 80032be:	405a      	eors	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f8d3 113c 	ldr.w	r1, [r3, #316]	; 0x13c
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	404b      	eors	r3, r1
 80032ca:	4413      	add	r3, r2
 80032cc:	ea4f 53f3 	mov.w	r3, r3, ror #23
 80032d0:	61fb      	str	r3, [r7, #28]
	X1 = ROR((X0 ^ key->rk[ 88]) + (X1 ^ key->rk[ 89]), 3);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 80032d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032da:	405a      	eors	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f8d3 1164 	ldr.w	r1, [r3, #356]	; 0x164
 80032e2:	6a3b      	ldr	r3, [r7, #32]
 80032e4:	404b      	eors	r3, r1
 80032e6:	4413      	add	r3, r2
 80032e8:	ea4f 03f3 	mov.w	r3, r3, ror #3
 80032ec:	623b      	str	r3, [r7, #32]
	X0 = ROR((X3 ^ key->rk[ 86]) + (X0 ^ key->rk[ 87]), 5);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	405a      	eors	r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f8d3 115c 	ldr.w	r1, [r3, #348]	; 0x15c
 80032fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003300:	404b      	eors	r3, r1
 8003302:	4413      	add	r3, r2
 8003304:	ea4f 1373 	mov.w	r3, r3, ror #5
 8003308:	627b      	str	r3, [r7, #36]	; 0x24
	X3 = ROL((X2 ^ key->rk[ 84]) + (X3 ^ key->rk[ 85]), 9);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	405a      	eors	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f8d3 1154 	ldr.w	r1, [r3, #340]	; 0x154
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	404b      	eors	r3, r1
 800331e:	4413      	add	r3, r2
 8003320:	ea4f 53f3 	mov.w	r3, r3, ror #23
 8003324:	61bb      	str	r3, [r7, #24]
	X2 = ROR((X1 ^ key->rk[ 94]) + (X2 ^ key->rk[ 95]), 3);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f8d3 2178 	ldr.w	r2, [r3, #376]	; 0x178
 800332c:	6a3b      	ldr	r3, [r7, #32]
 800332e:	405a      	eors	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f8d3 117c 	ldr.w	r1, [r3, #380]	; 0x17c
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	404b      	eors	r3, r1
 800333a:	4413      	add	r3, r2
 800333c:	ea4f 03f3 	mov.w	r3, r3, ror #3
 8003340:	61fb      	str	r3, [r7, #28]
	X1 = ROR((X0 ^ key->rk[ 92]) + (X1 ^ key->rk[ 93]), 5);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 8003348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334a:	405a      	eors	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f8d3 1174 	ldr.w	r1, [r3, #372]	; 0x174
 8003352:	6a3b      	ldr	r3, [r7, #32]
 8003354:	404b      	eors	r3, r1
 8003356:	4413      	add	r3, r2
 8003358:	ea4f 1373 	mov.w	r3, r3, ror #5
 800335c:	623b      	str	r3, [r7, #32]
	X0 = ROL((X3 ^ key->rk[ 90]) + (X0 ^ key->rk[ 91]), 9);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	405a      	eors	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f8d3 116c 	ldr.w	r1, [r3, #364]	; 0x16c
 800336e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003370:	404b      	eors	r3, r1
 8003372:	4413      	add	r3, r2
 8003374:	ea4f 53f3 	mov.w	r3, r3, ror #23
 8003378:	627b      	str	r3, [r7, #36]	; 0x24

	X3 = ROR((X2 ^ key->rk[100]) + (X3 ^ key->rk[101]), 3);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	405a      	eors	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f8d3 1194 	ldr.w	r1, [r3, #404]	; 0x194
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	404b      	eors	r3, r1
 800338e:	4413      	add	r3, r2
 8003390:	ea4f 03f3 	mov.w	r3, r3, ror #3
 8003394:	61bb      	str	r3, [r7, #24]
	X2 = ROR((X1 ^ key->rk[ 98]) + (X2 ^ key->rk[ 99]), 5);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
 800339c:	6a3b      	ldr	r3, [r7, #32]
 800339e:	405a      	eors	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	404b      	eors	r3, r1
 80033aa:	4413      	add	r3, r2
 80033ac:	ea4f 1373 	mov.w	r3, r3, ror #5
 80033b0:	61fb      	str	r3, [r7, #28]
	X1 = ROL((X0 ^ key->rk[ 96]) + (X1 ^ key->rk[ 97]), 9);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 80033b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ba:	405a      	eors	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f8d3 1184 	ldr.w	r1, [r3, #388]	; 0x184
 80033c2:	6a3b      	ldr	r3, [r7, #32]
 80033c4:	404b      	eors	r3, r1
 80033c6:	4413      	add	r3, r2
 80033c8:	ea4f 53f3 	mov.w	r3, r3, ror #23
 80033cc:	623b      	str	r3, [r7, #32]
	X0 = ROR((X3 ^ key->rk[106]) + (X0 ^ key->rk[107]), 3);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f8d3 21a8 	ldr.w	r2, [r3, #424]	; 0x1a8
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	405a      	eors	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f8d3 11ac 	ldr.w	r1, [r3, #428]	; 0x1ac
 80033de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e0:	404b      	eors	r3, r1
 80033e2:	4413      	add	r3, r2
 80033e4:	ea4f 03f3 	mov.w	r3, r3, ror #3
 80033e8:	627b      	str	r3, [r7, #36]	; 0x24
	X3 = ROR((X2 ^ key->rk[104]) + (X3 ^ key->rk[105]), 5);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f8d3 21a0 	ldr.w	r2, [r3, #416]	; 0x1a0
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	405a      	eors	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f8d3 11a4 	ldr.w	r1, [r3, #420]	; 0x1a4
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	404b      	eors	r3, r1
 80033fe:	4413      	add	r3, r2
 8003400:	ea4f 1373 	mov.w	r3, r3, ror #5
 8003404:	61bb      	str	r3, [r7, #24]
	X2 = ROL((X1 ^ key->rk[102]) + (X2 ^ key->rk[103]), 9);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 800340c:	6a3b      	ldr	r3, [r7, #32]
 800340e:	405a      	eors	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f8d3 119c 	ldr.w	r1, [r3, #412]	; 0x19c
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	404b      	eors	r3, r1
 800341a:	4413      	add	r3, r2
 800341c:	ea4f 53f3 	mov.w	r3, r3, ror #23
 8003420:	61fb      	str	r3, [r7, #28]
	X1 = ROR((X0 ^ key->rk[112]) + (X1 ^ key->rk[113]), 3);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f8d3 21c0 	ldr.w	r2, [r3, #448]	; 0x1c0
 8003428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342a:	405a      	eors	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f8d3 11c4 	ldr.w	r1, [r3, #452]	; 0x1c4
 8003432:	6a3b      	ldr	r3, [r7, #32]
 8003434:	404b      	eors	r3, r1
 8003436:	4413      	add	r3, r2
 8003438:	ea4f 03f3 	mov.w	r3, r3, ror #3
 800343c:	623b      	str	r3, [r7, #32]
	X0 = ROR((X3 ^ key->rk[110]) + (X0 ^ key->rk[111]), 5);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f8d3 21b8 	ldr.w	r2, [r3, #440]	; 0x1b8
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	405a      	eors	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f8d3 11bc 	ldr.w	r1, [r3, #444]	; 0x1bc
 800344e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003450:	404b      	eors	r3, r1
 8003452:	4413      	add	r3, r2
 8003454:	ea4f 1373 	mov.w	r3, r3, ror #5
 8003458:	627b      	str	r3, [r7, #36]	; 0x24
	X3 = ROL((X2 ^ key->rk[108]) + (X3 ^ key->rk[109]), 9);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f8d3 21b0 	ldr.w	r2, [r3, #432]	; 0x1b0
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	405a      	eors	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f8d3 11b4 	ldr.w	r1, [r3, #436]	; 0x1b4
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	404b      	eors	r3, r1
 800346e:	4413      	add	r3, r2
 8003470:	ea4f 53f3 	mov.w	r3, r3, ror #23
 8003474:	61bb      	str	r3, [r7, #24]
	X2 = ROR((X1 ^ key->rk[118]) + (X2 ^ key->rk[119]), 3);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f8d3 21d8 	ldr.w	r2, [r3, #472]	; 0x1d8
 800347c:	6a3b      	ldr	r3, [r7, #32]
 800347e:	405a      	eors	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f8d3 11dc 	ldr.w	r1, [r3, #476]	; 0x1dc
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	404b      	eors	r3, r1
 800348a:	4413      	add	r3, r2
 800348c:	ea4f 03f3 	mov.w	r3, r3, ror #3
 8003490:	61fb      	str	r3, [r7, #28]
	X1 = ROR((X0 ^ key->rk[116]) + (X1 ^ key->rk[117]), 5);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f8d3 21d0 	ldr.w	r2, [r3, #464]	; 0x1d0
 8003498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349a:	405a      	eors	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f8d3 11d4 	ldr.w	r1, [r3, #468]	; 0x1d4
 80034a2:	6a3b      	ldr	r3, [r7, #32]
 80034a4:	404b      	eors	r3, r1
 80034a6:	4413      	add	r3, r2
 80034a8:	ea4f 1373 	mov.w	r3, r3, ror #5
 80034ac:	623b      	str	r3, [r7, #32]
	X0 = ROL((X3 ^ key->rk[114]) + (X0 ^ key->rk[115]), 9);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	405a      	eors	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f8d3 11cc 	ldr.w	r1, [r3, #460]	; 0x1cc
 80034be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c0:	404b      	eors	r3, r1
 80034c2:	4413      	add	r3, r2
 80034c4:	ea4f 53f3 	mov.w	r3, r3, ror #23
 80034c8:	627b      	str	r3, [r7, #36]	; 0x24

	X3 = ROR((X2 ^ key->rk[124]) + (X3 ^ key->rk[125]), 3);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f8d3 21f0 	ldr.w	r2, [r3, #496]	; 0x1f0
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	405a      	eors	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f8d3 11f4 	ldr.w	r1, [r3, #500]	; 0x1f4
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	404b      	eors	r3, r1
 80034de:	4413      	add	r3, r2
 80034e0:	ea4f 03f3 	mov.w	r3, r3, ror #3
 80034e4:	61bb      	str	r3, [r7, #24]
	X2 = ROR((X1 ^ key->rk[122]) + (X2 ^ key->rk[123]), 5);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f8d3 21e8 	ldr.w	r2, [r3, #488]	; 0x1e8
 80034ec:	6a3b      	ldr	r3, [r7, #32]
 80034ee:	405a      	eors	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f8d3 11ec 	ldr.w	r1, [r3, #492]	; 0x1ec
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	404b      	eors	r3, r1
 80034fa:	4413      	add	r3, r2
 80034fc:	ea4f 1373 	mov.w	r3, r3, ror #5
 8003500:	61fb      	str	r3, [r7, #28]
	X1 = ROL((X0 ^ key->rk[120]) + (X1 ^ key->rk[121]), 9);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 8003508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350a:	405a      	eors	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f8d3 11e4 	ldr.w	r1, [r3, #484]	; 0x1e4
 8003512:	6a3b      	ldr	r3, [r7, #32]
 8003514:	404b      	eors	r3, r1
 8003516:	4413      	add	r3, r2
 8003518:	ea4f 53f3 	mov.w	r3, r3, ror #23
 800351c:	623b      	str	r3, [r7, #32]
	X0 = ROR((X3 ^ key->rk[130]) + (X0 ^ key->rk[131]), 3);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	405a      	eors	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f8d3 120c 	ldr.w	r1, [r3, #524]	; 0x20c
 800352e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003530:	404b      	eors	r3, r1
 8003532:	4413      	add	r3, r2
 8003534:	ea4f 03f3 	mov.w	r3, r3, ror #3
 8003538:	627b      	str	r3, [r7, #36]	; 0x24
	X3 = ROR((X2 ^ key->rk[128]) + (X3 ^ key->rk[129]), 5);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	405a      	eors	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	404b      	eors	r3, r1
 800354e:	4413      	add	r3, r2
 8003550:	ea4f 1373 	mov.w	r3, r3, ror #5
 8003554:	61bb      	str	r3, [r7, #24]
	X2 = ROL((X1 ^ key->rk[126]) + (X2 ^ key->rk[127]), 9);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f8d3 21f8 	ldr.w	r2, [r3, #504]	; 0x1f8
 800355c:	6a3b      	ldr	r3, [r7, #32]
 800355e:	405a      	eors	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f8d3 11fc 	ldr.w	r1, [r3, #508]	; 0x1fc
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	404b      	eors	r3, r1
 800356a:	4413      	add	r3, r2
 800356c:	ea4f 53f3 	mov.w	r3, r3, ror #23
 8003570:	61fb      	str	r3, [r7, #28]
	X1 = ROR((X0 ^ key->rk[136]) + (X1 ^ key->rk[137]), 3);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8003578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357a:	405a      	eors	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f8d3 1224 	ldr.w	r1, [r3, #548]	; 0x224
 8003582:	6a3b      	ldr	r3, [r7, #32]
 8003584:	404b      	eors	r3, r1
 8003586:	4413      	add	r3, r2
 8003588:	ea4f 03f3 	mov.w	r3, r3, ror #3
 800358c:	623b      	str	r3, [r7, #32]
	X0 = ROR((X3 ^ key->rk[134]) + (X0 ^ key->rk[135]), 5);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	405a      	eors	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 800359e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a0:	404b      	eors	r3, r1
 80035a2:	4413      	add	r3, r2
 80035a4:	ea4f 1373 	mov.w	r3, r3, ror #5
 80035a8:	627b      	str	r3, [r7, #36]	; 0x24
	X3 = ROL((X2 ^ key->rk[132]) + (X3 ^ key->rk[133]), 9);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	405a      	eors	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	404b      	eors	r3, r1
 80035be:	4413      	add	r3, r2
 80035c0:	ea4f 53f3 	mov.w	r3, r3, ror #23
 80035c4:	61bb      	str	r3, [r7, #24]
	X2 = ROR((X1 ^ key->rk[142]) + (X2 ^ key->rk[143]), 3);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 80035cc:	6a3b      	ldr	r3, [r7, #32]
 80035ce:	405a      	eors	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f8d3 123c 	ldr.w	r1, [r3, #572]	; 0x23c
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	404b      	eors	r3, r1
 80035da:	4413      	add	r3, r2
 80035dc:	ea4f 03f3 	mov.w	r3, r3, ror #3
 80035e0:	61fb      	str	r3, [r7, #28]
	X1 = ROR((X0 ^ key->rk[140]) + (X1 ^ key->rk[141]), 5);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f8d3 2230 	ldr.w	r2, [r3, #560]	; 0x230
 80035e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ea:	405a      	eors	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f8d3 1234 	ldr.w	r1, [r3, #564]	; 0x234
 80035f2:	6a3b      	ldr	r3, [r7, #32]
 80035f4:	404b      	eors	r3, r1
 80035f6:	4413      	add	r3, r2
 80035f8:	ea4f 1373 	mov.w	r3, r3, ror #5
 80035fc:	623b      	str	r3, [r7, #32]
	X0 = ROL((X3 ^ key->rk[138]) + (X0 ^ key->rk[139]), 9);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f8d3 2228 	ldr.w	r2, [r3, #552]	; 0x228
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	405a      	eors	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 800360e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003610:	404b      	eors	r3, r1
 8003612:	4413      	add	r3, r2
 8003614:	ea4f 53f3 	mov.w	r3, r3, ror #23
 8003618:	627b      	str	r3, [r7, #36]	; 0x24
		
	if(key->round > 24)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8003620:	2b18      	cmp	r3, #24
 8003622:	f240 80a8 	bls.w	8003776 <lea_encrypt+0x92e>
	{
		X3 = ROR((X2 ^ key->rk[148]) + (X3 ^ key->rk[149]), 3);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f8d3 2250 	ldr.w	r2, [r3, #592]	; 0x250
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	405a      	eors	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f8d3 1254 	ldr.w	r1, [r3, #596]	; 0x254
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	404b      	eors	r3, r1
 800363a:	4413      	add	r3, r2
 800363c:	ea4f 03f3 	mov.w	r3, r3, ror #3
 8003640:	61bb      	str	r3, [r7, #24]
		X2 = ROR((X1 ^ key->rk[146]) + (X2 ^ key->rk[147]), 5);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f8d3 2248 	ldr.w	r2, [r3, #584]	; 0x248
 8003648:	6a3b      	ldr	r3, [r7, #32]
 800364a:	405a      	eors	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f8d3 124c 	ldr.w	r1, [r3, #588]	; 0x24c
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	404b      	eors	r3, r1
 8003656:	4413      	add	r3, r2
 8003658:	ea4f 1373 	mov.w	r3, r3, ror #5
 800365c:	61fb      	str	r3, [r7, #28]
		X1 = ROL((X0 ^ key->rk[144]) + (X1 ^ key->rk[145]), 9);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f8d3 2240 	ldr.w	r2, [r3, #576]	; 0x240
 8003664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003666:	405a      	eors	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f8d3 1244 	ldr.w	r1, [r3, #580]	; 0x244
 800366e:	6a3b      	ldr	r3, [r7, #32]
 8003670:	404b      	eors	r3, r1
 8003672:	4413      	add	r3, r2
 8003674:	ea4f 53f3 	mov.w	r3, r3, ror #23
 8003678:	623b      	str	r3, [r7, #32]
		X0 = ROR((X3 ^ key->rk[154]) + (X0 ^ key->rk[155]), 3);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	405a      	eors	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f8d3 126c 	ldr.w	r1, [r3, #620]	; 0x26c
 800368a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368c:	404b      	eors	r3, r1
 800368e:	4413      	add	r3, r2
 8003690:	ea4f 03f3 	mov.w	r3, r3, ror #3
 8003694:	627b      	str	r3, [r7, #36]	; 0x24
		X3 = ROR((X2 ^ key->rk[152]) + (X3 ^ key->rk[153]), 5);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	405a      	eors	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f8d3 1264 	ldr.w	r1, [r3, #612]	; 0x264
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	404b      	eors	r3, r1
 80036aa:	4413      	add	r3, r2
 80036ac:	ea4f 1373 	mov.w	r3, r3, ror #5
 80036b0:	61bb      	str	r3, [r7, #24]
		X2 = ROL((X1 ^ key->rk[150]) + (X2 ^ key->rk[151]), 9);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f8d3 2258 	ldr.w	r2, [r3, #600]	; 0x258
 80036b8:	6a3b      	ldr	r3, [r7, #32]
 80036ba:	405a      	eors	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f8d3 125c 	ldr.w	r1, [r3, #604]	; 0x25c
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	404b      	eors	r3, r1
 80036c6:	4413      	add	r3, r2
 80036c8:	ea4f 53f3 	mov.w	r3, r3, ror #23
 80036cc:	61fb      	str	r3, [r7, #28]
		X1 = ROR((X0 ^ key->rk[160]) + (X1 ^ key->rk[161]), 3);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f8d3 2280 	ldr.w	r2, [r3, #640]	; 0x280
 80036d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d6:	405a      	eors	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f8d3 1284 	ldr.w	r1, [r3, #644]	; 0x284
 80036de:	6a3b      	ldr	r3, [r7, #32]
 80036e0:	404b      	eors	r3, r1
 80036e2:	4413      	add	r3, r2
 80036e4:	ea4f 03f3 	mov.w	r3, r3, ror #3
 80036e8:	623b      	str	r3, [r7, #32]
		X0 = ROR((X3 ^ key->rk[158]) + (X0 ^ key->rk[159]), 5);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f8d3 2278 	ldr.w	r2, [r3, #632]	; 0x278
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	405a      	eors	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f8d3 127c 	ldr.w	r1, [r3, #636]	; 0x27c
 80036fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fc:	404b      	eors	r3, r1
 80036fe:	4413      	add	r3, r2
 8003700:	ea4f 1373 	mov.w	r3, r3, ror #5
 8003704:	627b      	str	r3, [r7, #36]	; 0x24
		X3 = ROL((X2 ^ key->rk[156]) + (X3 ^ key->rk[157]), 9);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	405a      	eors	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f8d3 1274 	ldr.w	r1, [r3, #628]	; 0x274
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	404b      	eors	r3, r1
 800371a:	4413      	add	r3, r2
 800371c:	ea4f 53f3 	mov.w	r3, r3, ror #23
 8003720:	61bb      	str	r3, [r7, #24]
		X2 = ROR((X1 ^ key->rk[166]) + (X2 ^ key->rk[167]), 3);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f8d3 2298 	ldr.w	r2, [r3, #664]	; 0x298
 8003728:	6a3b      	ldr	r3, [r7, #32]
 800372a:	405a      	eors	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f8d3 129c 	ldr.w	r1, [r3, #668]	; 0x29c
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	404b      	eors	r3, r1
 8003736:	4413      	add	r3, r2
 8003738:	ea4f 03f3 	mov.w	r3, r3, ror #3
 800373c:	61fb      	str	r3, [r7, #28]
		X1 = ROR((X0 ^ key->rk[164]) + (X1 ^ key->rk[165]), 5);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
 8003744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003746:	405a      	eors	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f8d3 1294 	ldr.w	r1, [r3, #660]	; 0x294
 800374e:	6a3b      	ldr	r3, [r7, #32]
 8003750:	404b      	eors	r3, r1
 8003752:	4413      	add	r3, r2
 8003754:	ea4f 1373 	mov.w	r3, r3, ror #5
 8003758:	623b      	str	r3, [r7, #32]
		X0 = ROL((X3 ^ key->rk[162]) + (X0 ^ key->rk[163]), 9);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f8d3 2288 	ldr.w	r2, [r3, #648]	; 0x288
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	405a      	eors	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f8d3 128c 	ldr.w	r1, [r3, #652]	; 0x28c
 800376a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376c:	404b      	eors	r3, r1
 800376e:	4413      	add	r3, r2
 8003770:	ea4f 53f3 	mov.w	r3, r3, ror #23
 8003774:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if(key->round > 28)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800377c:	2b1c      	cmp	r3, #28
 800377e:	f240 80a8 	bls.w	80038d2 <lea_encrypt+0xa8a>
	{
		X3 = ROR((X2 ^ key->rk[172]) + (X3 ^ key->rk[173]), 3);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f8d3 22b0 	ldr.w	r2, [r3, #688]	; 0x2b0
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	405a      	eors	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f8d3 12b4 	ldr.w	r1, [r3, #692]	; 0x2b4
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	404b      	eors	r3, r1
 8003796:	4413      	add	r3, r2
 8003798:	ea4f 03f3 	mov.w	r3, r3, ror #3
 800379c:	61bb      	str	r3, [r7, #24]
		X2 = ROR((X1 ^ key->rk[170]) + (X2 ^ key->rk[171]), 5);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f8d3 22a8 	ldr.w	r2, [r3, #680]	; 0x2a8
 80037a4:	6a3b      	ldr	r3, [r7, #32]
 80037a6:	405a      	eors	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f8d3 12ac 	ldr.w	r1, [r3, #684]	; 0x2ac
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	404b      	eors	r3, r1
 80037b2:	4413      	add	r3, r2
 80037b4:	ea4f 1373 	mov.w	r3, r3, ror #5
 80037b8:	61fb      	str	r3, [r7, #28]
		X1 = ROL((X0 ^ key->rk[168]) + (X1 ^ key->rk[169]), 9);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f8d3 22a0 	ldr.w	r2, [r3, #672]	; 0x2a0
 80037c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c2:	405a      	eors	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f8d3 12a4 	ldr.w	r1, [r3, #676]	; 0x2a4
 80037ca:	6a3b      	ldr	r3, [r7, #32]
 80037cc:	404b      	eors	r3, r1
 80037ce:	4413      	add	r3, r2
 80037d0:	ea4f 53f3 	mov.w	r3, r3, ror #23
 80037d4:	623b      	str	r3, [r7, #32]
		X0 = ROR((X3 ^ key->rk[178]) + (X0 ^ key->rk[179]), 3);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f8d3 22c8 	ldr.w	r2, [r3, #712]	; 0x2c8
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	405a      	eors	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f8d3 12cc 	ldr.w	r1, [r3, #716]	; 0x2cc
 80037e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e8:	404b      	eors	r3, r1
 80037ea:	4413      	add	r3, r2
 80037ec:	ea4f 03f3 	mov.w	r3, r3, ror #3
 80037f0:	627b      	str	r3, [r7, #36]	; 0x24
		X3 = ROR((X2 ^ key->rk[176]) + (X3 ^ key->rk[177]), 5);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f8d3 22c0 	ldr.w	r2, [r3, #704]	; 0x2c0
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	405a      	eors	r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f8d3 12c4 	ldr.w	r1, [r3, #708]	; 0x2c4
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	404b      	eors	r3, r1
 8003806:	4413      	add	r3, r2
 8003808:	ea4f 1373 	mov.w	r3, r3, ror #5
 800380c:	61bb      	str	r3, [r7, #24]
		X2 = ROL((X1 ^ key->rk[174]) + (X2 ^ key->rk[175]), 9);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f8d3 22b8 	ldr.w	r2, [r3, #696]	; 0x2b8
 8003814:	6a3b      	ldr	r3, [r7, #32]
 8003816:	405a      	eors	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f8d3 12bc 	ldr.w	r1, [r3, #700]	; 0x2bc
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	404b      	eors	r3, r1
 8003822:	4413      	add	r3, r2
 8003824:	ea4f 53f3 	mov.w	r3, r3, ror #23
 8003828:	61fb      	str	r3, [r7, #28]
		X1 = ROR((X0 ^ key->rk[184]) + (X1 ^ key->rk[185]), 3);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f8d3 22e0 	ldr.w	r2, [r3, #736]	; 0x2e0
 8003830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003832:	405a      	eors	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f8d3 12e4 	ldr.w	r1, [r3, #740]	; 0x2e4
 800383a:	6a3b      	ldr	r3, [r7, #32]
 800383c:	404b      	eors	r3, r1
 800383e:	4413      	add	r3, r2
 8003840:	ea4f 03f3 	mov.w	r3, r3, ror #3
 8003844:	623b      	str	r3, [r7, #32]
		X0 = ROR((X3 ^ key->rk[182]) + (X0 ^ key->rk[183]), 5);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	405a      	eors	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f8d3 12dc 	ldr.w	r1, [r3, #732]	; 0x2dc
 8003856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003858:	404b      	eors	r3, r1
 800385a:	4413      	add	r3, r2
 800385c:	ea4f 1373 	mov.w	r3, r3, ror #5
 8003860:	627b      	str	r3, [r7, #36]	; 0x24
		X3 = ROL((X2 ^ key->rk[180]) + (X3 ^ key->rk[181]), 9);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f8d3 22d0 	ldr.w	r2, [r3, #720]	; 0x2d0
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	405a      	eors	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f8d3 12d4 	ldr.w	r1, [r3, #724]	; 0x2d4
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	404b      	eors	r3, r1
 8003876:	4413      	add	r3, r2
 8003878:	ea4f 53f3 	mov.w	r3, r3, ror #23
 800387c:	61bb      	str	r3, [r7, #24]
		X2 = ROR((X1 ^ key->rk[190]) + (X2 ^ key->rk[191]), 3);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f8d3 22f8 	ldr.w	r2, [r3, #760]	; 0x2f8
 8003884:	6a3b      	ldr	r3, [r7, #32]
 8003886:	405a      	eors	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f8d3 12fc 	ldr.w	r1, [r3, #764]	; 0x2fc
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	404b      	eors	r3, r1
 8003892:	4413      	add	r3, r2
 8003894:	ea4f 03f3 	mov.w	r3, r3, ror #3
 8003898:	61fb      	str	r3, [r7, #28]
		X1 = ROR((X0 ^ key->rk[188]) + (X1 ^ key->rk[189]), 5);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 80038a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a2:	405a      	eors	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f8d3 12f4 	ldr.w	r1, [r3, #756]	; 0x2f4
 80038aa:	6a3b      	ldr	r3, [r7, #32]
 80038ac:	404b      	eors	r3, r1
 80038ae:	4413      	add	r3, r2
 80038b0:	ea4f 1373 	mov.w	r3, r3, ror #5
 80038b4:	623b      	str	r3, [r7, #32]
		X0 = ROL((X3 ^ key->rk[186]) + (X0 ^ key->rk[187]), 9);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	405a      	eors	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f8d3 12ec 	ldr.w	r1, [r3, #748]	; 0x2ec
 80038c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c8:	404b      	eors	r3, r1
 80038ca:	4413      	add	r3, r2
 80038cc:	ea4f 53f3 	mov.w	r3, r3, ror #23
 80038d0:	627b      	str	r3, [r7, #36]	; 0x24
	}

	_ct[0] = loadU32(X0);
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038d6:	601a      	str	r2, [r3, #0]
	_ct[1] = loadU32(X1);
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	3304      	adds	r3, #4
 80038dc:	6a3a      	ldr	r2, [r7, #32]
 80038de:	601a      	str	r2, [r3, #0]
	_ct[2] = loadU32(X2);
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	3308      	adds	r3, #8
 80038e4:	69fa      	ldr	r2, [r7, #28]
 80038e6:	601a      	str	r2, [r3, #0]
	_ct[3] = loadU32(X3);
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	330c      	adds	r3, #12
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	601a      	str	r2, [r3, #0]
}
 80038f0:	bf00      	nop
 80038f2:	372c      	adds	r7, #44	; 0x2c
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <lea_decrypt>:

void lea_decrypt(unsigned char *pt, const unsigned char *ct, const LEA_KEY *key)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b08b      	sub	sp, #44	; 0x2c
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
	unsigned int X0,X1,X2,X3;

	unsigned int * _pt = (unsigned int *)pt;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	617b      	str	r3, [r7, #20]
	const unsigned int * _ct  = (const unsigned int*)ct;
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	613b      	str	r3, [r7, #16]
	
	X0 = loadU32(_ct[0]);
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	627b      	str	r3, [r7, #36]	; 0x24
	X1 = loadU32(_ct[1]);
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	3304      	adds	r3, #4
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	623b      	str	r3, [r7, #32]
	X2 = loadU32(_ct[2]);
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	3308      	adds	r3, #8
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	61fb      	str	r3, [r7, #28]
	X3 = loadU32(_ct[3]);
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	330c      	adds	r3, #12
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	61bb      	str	r3, [r7, #24]

	if(key->round > 28)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8003934:	2b1c      	cmp	r3, #28
 8003936:	f240 80a8 	bls.w	8003a8a <lea_decrypt+0x18e>
	{
		X0 = (ROR(X0, 9) - (X3 ^ key->rk[186])) ^ key->rk[187];
 800393a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393c:	ea4f 2273 	mov.w	r2, r3, ror #9
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f8d3 12e8 	ldr.w	r1, [r3, #744]	; 0x2e8
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	404b      	eors	r3, r1
 800394a:	1ad2      	subs	r2, r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8003952:	4053      	eors	r3, r2
 8003954:	627b      	str	r3, [r7, #36]	; 0x24
		X1 = (ROL(X1, 5) - (X0 ^ key->rk[188])) ^ key->rk[189];
 8003956:	6a3b      	ldr	r3, [r7, #32]
 8003958:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f8d3 12f0 	ldr.w	r1, [r3, #752]	; 0x2f0
 8003962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003964:	404b      	eors	r3, r1
 8003966:	1ad2      	subs	r2, r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f8d3 32f4 	ldr.w	r3, [r3, #756]	; 0x2f4
 800396e:	4053      	eors	r3, r2
 8003970:	623b      	str	r3, [r7, #32]
		X2 = (ROL(X2, 3) - (X1 ^ key->rk[190])) ^ key->rk[191];
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	ea4f 7273 	mov.w	r2, r3, ror #29
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f8d3 12f8 	ldr.w	r1, [r3, #760]	; 0x2f8
 800397e:	6a3b      	ldr	r3, [r7, #32]
 8003980:	404b      	eors	r3, r1
 8003982:	1ad2      	subs	r2, r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f8d3 32fc 	ldr.w	r3, [r3, #764]	; 0x2fc
 800398a:	4053      	eors	r3, r2
 800398c:	61fb      	str	r3, [r7, #28]
		X3 = (ROR(X3, 9) - (X2 ^ key->rk[180])) ^ key->rk[181];
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	ea4f 2273 	mov.w	r2, r3, ror #9
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f8d3 12d0 	ldr.w	r1, [r3, #720]	; 0x2d0
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	404b      	eors	r3, r1
 800399e:	1ad2      	subs	r2, r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80039a6:	4053      	eors	r3, r2
 80039a8:	61bb      	str	r3, [r7, #24]
		X0 = (ROL(X0, 5) - (X3 ^ key->rk[182])) ^ key->rk[183];
 80039aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ac:	ea4f 62f3 	mov.w	r2, r3, ror #27
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f8d3 12d8 	ldr.w	r1, [r3, #728]	; 0x2d8
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	404b      	eors	r3, r1
 80039ba:	1ad2      	subs	r2, r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 80039c2:	4053      	eors	r3, r2
 80039c4:	627b      	str	r3, [r7, #36]	; 0x24
		X1 = (ROL(X1, 3) - (X0 ^ key->rk[184])) ^ key->rk[185];
 80039c6:	6a3b      	ldr	r3, [r7, #32]
 80039c8:	ea4f 7273 	mov.w	r2, r3, ror #29
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f8d3 12e0 	ldr.w	r1, [r3, #736]	; 0x2e0
 80039d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d4:	404b      	eors	r3, r1
 80039d6:	1ad2      	subs	r2, r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 80039de:	4053      	eors	r3, r2
 80039e0:	623b      	str	r3, [r7, #32]
		X2 = (ROR(X2, 9) - (X1 ^ key->rk[174])) ^ key->rk[175];
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	ea4f 2273 	mov.w	r2, r3, ror #9
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f8d3 12b8 	ldr.w	r1, [r3, #696]	; 0x2b8
 80039ee:	6a3b      	ldr	r3, [r7, #32]
 80039f0:	404b      	eors	r3, r1
 80039f2:	1ad2      	subs	r2, r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80039fa:	4053      	eors	r3, r2
 80039fc:	61fb      	str	r3, [r7, #28]
		X3 = (ROL(X3, 5) - (X2 ^ key->rk[176])) ^ key->rk[177];
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f8d3 12c0 	ldr.w	r1, [r3, #704]	; 0x2c0
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	404b      	eors	r3, r1
 8003a0e:	1ad2      	subs	r2, r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8003a16:	4053      	eors	r3, r2
 8003a18:	61bb      	str	r3, [r7, #24]
		X0 = (ROL(X0, 3) - (X3 ^ key->rk[178])) ^ key->rk[179];
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1c:	ea4f 7273 	mov.w	r2, r3, ror #29
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f8d3 12c8 	ldr.w	r1, [r3, #712]	; 0x2c8
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	404b      	eors	r3, r1
 8003a2a:	1ad2      	subs	r2, r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8003a32:	4053      	eors	r3, r2
 8003a34:	627b      	str	r3, [r7, #36]	; 0x24
		X1 = (ROR(X1, 9) - (X0 ^ key->rk[168])) ^ key->rk[169];
 8003a36:	6a3b      	ldr	r3, [r7, #32]
 8003a38:	ea4f 2273 	mov.w	r2, r3, ror #9
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f8d3 12a0 	ldr.w	r1, [r3, #672]	; 0x2a0
 8003a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a44:	404b      	eors	r3, r1
 8003a46:	1ad2      	subs	r2, r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8003a4e:	4053      	eors	r3, r2
 8003a50:	623b      	str	r3, [r7, #32]
		X2 = (ROL(X2, 5) - (X1 ^ key->rk[170])) ^ key->rk[171];
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f8d3 12a8 	ldr.w	r1, [r3, #680]	; 0x2a8
 8003a5e:	6a3b      	ldr	r3, [r7, #32]
 8003a60:	404b      	eors	r3, r1
 8003a62:	1ad2      	subs	r2, r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 8003a6a:	4053      	eors	r3, r2
 8003a6c:	61fb      	str	r3, [r7, #28]
		X3 = (ROL(X3, 3) - (X2 ^ key->rk[172])) ^ key->rk[173];
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	ea4f 7273 	mov.w	r2, r3, ror #29
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f8d3 12b0 	ldr.w	r1, [r3, #688]	; 0x2b0
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	404b      	eors	r3, r1
 8003a7e:	1ad2      	subs	r2, r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003a86:	4053      	eors	r3, r2
 8003a88:	61bb      	str	r3, [r7, #24]
	}

	if(key->round > 24)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8003a90:	2b18      	cmp	r3, #24
 8003a92:	f240 80a8 	bls.w	8003be6 <lea_decrypt+0x2ea>
	{
		X0 = (ROR(X0, 9) - (X3 ^ key->rk[162])) ^ key->rk[163];
 8003a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a98:	ea4f 2273 	mov.w	r2, r3, ror #9
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f8d3 1288 	ldr.w	r1, [r3, #648]	; 0x288
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	404b      	eors	r3, r1
 8003aa6:	1ad2      	subs	r2, r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8003aae:	4053      	eors	r3, r2
 8003ab0:	627b      	str	r3, [r7, #36]	; 0x24
		X1 = (ROL(X1, 5) - (X0 ^ key->rk[164])) ^ key->rk[165];
 8003ab2:	6a3b      	ldr	r3, [r7, #32]
 8003ab4:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f8d3 1290 	ldr.w	r1, [r3, #656]	; 0x290
 8003abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac0:	404b      	eors	r3, r1
 8003ac2:	1ad2      	subs	r2, r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8003aca:	4053      	eors	r3, r2
 8003acc:	623b      	str	r3, [r7, #32]
		X2 = (ROL(X2, 3) - (X1 ^ key->rk[166])) ^ key->rk[167];
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	ea4f 7273 	mov.w	r2, r3, ror #29
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f8d3 1298 	ldr.w	r1, [r3, #664]	; 0x298
 8003ada:	6a3b      	ldr	r3, [r7, #32]
 8003adc:	404b      	eors	r3, r1
 8003ade:	1ad2      	subs	r2, r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 8003ae6:	4053      	eors	r3, r2
 8003ae8:	61fb      	str	r3, [r7, #28]
		X3 = (ROR(X3, 9) - (X2 ^ key->rk[156])) ^ key->rk[157];
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	ea4f 2273 	mov.w	r2, r3, ror #9
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f8d3 1270 	ldr.w	r1, [r3, #624]	; 0x270
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	404b      	eors	r3, r1
 8003afa:	1ad2      	subs	r2, r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f8d3 3274 	ldr.w	r3, [r3, #628]	; 0x274
 8003b02:	4053      	eors	r3, r2
 8003b04:	61bb      	str	r3, [r7, #24]
		X0 = (ROL(X0, 5) - (X3 ^ key->rk[158])) ^ key->rk[159];
 8003b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b08:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f8d3 1278 	ldr.w	r1, [r3, #632]	; 0x278
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	404b      	eors	r3, r1
 8003b16:	1ad2      	subs	r2, r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8003b1e:	4053      	eors	r3, r2
 8003b20:	627b      	str	r3, [r7, #36]	; 0x24
		X1 = (ROL(X1, 3) - (X0 ^ key->rk[160])) ^ key->rk[161];
 8003b22:	6a3b      	ldr	r3, [r7, #32]
 8003b24:	ea4f 7273 	mov.w	r2, r3, ror #29
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f8d3 1280 	ldr.w	r1, [r3, #640]	; 0x280
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b30:	404b      	eors	r3, r1
 8003b32:	1ad2      	subs	r2, r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f8d3 3284 	ldr.w	r3, [r3, #644]	; 0x284
 8003b3a:	4053      	eors	r3, r2
 8003b3c:	623b      	str	r3, [r7, #32]
		X2 = (ROR(X2, 9) - (X1 ^ key->rk[150])) ^ key->rk[151];
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	ea4f 2273 	mov.w	r2, r3, ror #9
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f8d3 1258 	ldr.w	r1, [r3, #600]	; 0x258
 8003b4a:	6a3b      	ldr	r3, [r7, #32]
 8003b4c:	404b      	eors	r3, r1
 8003b4e:	1ad2      	subs	r2, r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
 8003b56:	4053      	eors	r3, r2
 8003b58:	61fb      	str	r3, [r7, #28]
		X3 = (ROL(X3, 5) - (X2 ^ key->rk[152])) ^ key->rk[153];
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f8d3 1260 	ldr.w	r1, [r3, #608]	; 0x260
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	404b      	eors	r3, r1
 8003b6a:	1ad2      	subs	r2, r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 8003b72:	4053      	eors	r3, r2
 8003b74:	61bb      	str	r3, [r7, #24]
		X0 = (ROL(X0, 3) - (X3 ^ key->rk[154])) ^ key->rk[155];
 8003b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b78:	ea4f 7273 	mov.w	r2, r3, ror #29
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f8d3 1268 	ldr.w	r1, [r3, #616]	; 0x268
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	404b      	eors	r3, r1
 8003b86:	1ad2      	subs	r2, r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8003b8e:	4053      	eors	r3, r2
 8003b90:	627b      	str	r3, [r7, #36]	; 0x24
		X1 = (ROR(X1, 9) - (X0 ^ key->rk[144])) ^ key->rk[145];
 8003b92:	6a3b      	ldr	r3, [r7, #32]
 8003b94:	ea4f 2273 	mov.w	r2, r3, ror #9
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f8d3 1240 	ldr.w	r1, [r3, #576]	; 0x240
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba0:	404b      	eors	r3, r1
 8003ba2:	1ad2      	subs	r2, r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8003baa:	4053      	eors	r3, r2
 8003bac:	623b      	str	r3, [r7, #32]
		X2 = (ROL(X2, 5) - (X1 ^ key->rk[146])) ^ key->rk[147];
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f8d3 1248 	ldr.w	r1, [r3, #584]	; 0x248
 8003bba:	6a3b      	ldr	r3, [r7, #32]
 8003bbc:	404b      	eors	r3, r1
 8003bbe:	1ad2      	subs	r2, r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f8d3 324c 	ldr.w	r3, [r3, #588]	; 0x24c
 8003bc6:	4053      	eors	r3, r2
 8003bc8:	61fb      	str	r3, [r7, #28]
		X3 = (ROL(X3, 3) - (X2 ^ key->rk[148])) ^ key->rk[149];
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	ea4f 7273 	mov.w	r2, r3, ror #29
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f8d3 1250 	ldr.w	r1, [r3, #592]	; 0x250
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	404b      	eors	r3, r1
 8003bda:	1ad2      	subs	r2, r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f8d3 3254 	ldr.w	r3, [r3, #596]	; 0x254
 8003be2:	4053      	eors	r3, r2
 8003be4:	61bb      	str	r3, [r7, #24]
	}

	X0 = (ROR(X0, 9) - (X3 ^ key->rk[138])) ^ key->rk[139];
 8003be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be8:	ea4f 2273 	mov.w	r2, r3, ror #9
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f8d3 1228 	ldr.w	r1, [r3, #552]	; 0x228
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	404b      	eors	r3, r1
 8003bf6:	1ad2      	subs	r2, r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8003bfe:	4053      	eors	r3, r2
 8003c00:	627b      	str	r3, [r7, #36]	; 0x24
	X1 = (ROL(X1, 5) - (X0 ^ key->rk[140])) ^ key->rk[141];
 8003c02:	6a3b      	ldr	r3, [r7, #32]
 8003c04:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f8d3 1230 	ldr.w	r1, [r3, #560]	; 0x230
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c10:	404b      	eors	r3, r1
 8003c12:	1ad2      	subs	r2, r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f8d3 3234 	ldr.w	r3, [r3, #564]	; 0x234
 8003c1a:	4053      	eors	r3, r2
 8003c1c:	623b      	str	r3, [r7, #32]
	X2 = (ROL(X2, 3) - (X1 ^ key->rk[142])) ^ key->rk[143];
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	ea4f 7273 	mov.w	r2, r3, ror #29
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f8d3 1238 	ldr.w	r1, [r3, #568]	; 0x238
 8003c2a:	6a3b      	ldr	r3, [r7, #32]
 8003c2c:	404b      	eors	r3, r1
 8003c2e:	1ad2      	subs	r2, r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f8d3 323c 	ldr.w	r3, [r3, #572]	; 0x23c
 8003c36:	4053      	eors	r3, r2
 8003c38:	61fb      	str	r3, [r7, #28]
	X3 = (ROR(X3, 9) - (X2 ^ key->rk[132])) ^ key->rk[133];
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	ea4f 2273 	mov.w	r2, r3, ror #9
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	404b      	eors	r3, r1
 8003c4a:	1ad2      	subs	r2, r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8003c52:	4053      	eors	r3, r2
 8003c54:	61bb      	str	r3, [r7, #24]
	X0 = (ROL(X0, 5) - (X3 ^ key->rk[134])) ^ key->rk[135];
 8003c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c58:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f8d3 1218 	ldr.w	r1, [r3, #536]	; 0x218
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	404b      	eors	r3, r1
 8003c66:	1ad2      	subs	r2, r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8003c6e:	4053      	eors	r3, r2
 8003c70:	627b      	str	r3, [r7, #36]	; 0x24
	X1 = (ROL(X1, 3) - (X0 ^ key->rk[136])) ^ key->rk[137];
 8003c72:	6a3b      	ldr	r3, [r7, #32]
 8003c74:	ea4f 7273 	mov.w	r2, r3, ror #29
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f8d3 1220 	ldr.w	r1, [r3, #544]	; 0x220
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c80:	404b      	eors	r3, r1
 8003c82:	1ad2      	subs	r2, r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8003c8a:	4053      	eors	r3, r2
 8003c8c:	623b      	str	r3, [r7, #32]
	X2 = (ROR(X2, 9) - (X1 ^ key->rk[126])) ^ key->rk[127];
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	ea4f 2273 	mov.w	r2, r3, ror #9
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f8d3 11f8 	ldr.w	r1, [r3, #504]	; 0x1f8
 8003c9a:	6a3b      	ldr	r3, [r7, #32]
 8003c9c:	404b      	eors	r3, r1
 8003c9e:	1ad2      	subs	r2, r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 8003ca6:	4053      	eors	r3, r2
 8003ca8:	61fb      	str	r3, [r7, #28]
	X3 = (ROL(X3, 5) - (X2 ^ key->rk[128])) ^ key->rk[129];
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	404b      	eors	r3, r1
 8003cba:	1ad2      	subs	r2, r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003cc2:	4053      	eors	r3, r2
 8003cc4:	61bb      	str	r3, [r7, #24]
	X0 = (ROL(X0, 3) - (X3 ^ key->rk[130])) ^ key->rk[131];
 8003cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc8:	ea4f 7273 	mov.w	r2, r3, ror #29
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	404b      	eors	r3, r1
 8003cd6:	1ad2      	subs	r2, r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8003cde:	4053      	eors	r3, r2
 8003ce0:	627b      	str	r3, [r7, #36]	; 0x24
	X1 = (ROR(X1, 9) - (X0 ^ key->rk[120])) ^ key->rk[121];
 8003ce2:	6a3b      	ldr	r3, [r7, #32]
 8003ce4:	ea4f 2273 	mov.w	r2, r3, ror #9
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f8d3 11e0 	ldr.w	r1, [r3, #480]	; 0x1e0
 8003cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf0:	404b      	eors	r3, r1
 8003cf2:	1ad2      	subs	r2, r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f8d3 31e4 	ldr.w	r3, [r3, #484]	; 0x1e4
 8003cfa:	4053      	eors	r3, r2
 8003cfc:	623b      	str	r3, [r7, #32]
	X2 = (ROL(X2, 5) - (X1 ^ key->rk[122])) ^ key->rk[123];
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f8d3 11e8 	ldr.w	r1, [r3, #488]	; 0x1e8
 8003d0a:	6a3b      	ldr	r3, [r7, #32]
 8003d0c:	404b      	eors	r3, r1
 8003d0e:	1ad2      	subs	r2, r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8003d16:	4053      	eors	r3, r2
 8003d18:	61fb      	str	r3, [r7, #28]
	X3 = (ROL(X3, 3) - (X2 ^ key->rk[124])) ^ key->rk[125];
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	ea4f 7273 	mov.w	r2, r3, ror #29
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f8d3 11f0 	ldr.w	r1, [r3, #496]	; 0x1f0
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	404b      	eors	r3, r1
 8003d2a:	1ad2      	subs	r2, r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8003d32:	4053      	eors	r3, r2
 8003d34:	61bb      	str	r3, [r7, #24]

	X0 = (ROR(X0, 9) - (X3 ^ key->rk[114])) ^ key->rk[115];
 8003d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d38:	ea4f 2273 	mov.w	r2, r3, ror #9
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f8d3 11c8 	ldr.w	r1, [r3, #456]	; 0x1c8
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	404b      	eors	r3, r1
 8003d46:	1ad2      	subs	r2, r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8003d4e:	4053      	eors	r3, r2
 8003d50:	627b      	str	r3, [r7, #36]	; 0x24
	X1 = (ROL(X1, 5) - (X0 ^ key->rk[116])) ^ key->rk[117];
 8003d52:	6a3b      	ldr	r3, [r7, #32]
 8003d54:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f8d3 11d0 	ldr.w	r1, [r3, #464]	; 0x1d0
 8003d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d60:	404b      	eors	r3, r1
 8003d62:	1ad2      	subs	r2, r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 8003d6a:	4053      	eors	r3, r2
 8003d6c:	623b      	str	r3, [r7, #32]
	X2 = (ROL(X2, 3) - (X1 ^ key->rk[118])) ^ key->rk[119];
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	ea4f 7273 	mov.w	r2, r3, ror #29
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f8d3 11d8 	ldr.w	r1, [r3, #472]	; 0x1d8
 8003d7a:	6a3b      	ldr	r3, [r7, #32]
 8003d7c:	404b      	eors	r3, r1
 8003d7e:	1ad2      	subs	r2, r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 8003d86:	4053      	eors	r3, r2
 8003d88:	61fb      	str	r3, [r7, #28]
	X3 = (ROR(X3, 9) - (X2 ^ key->rk[108])) ^ key->rk[109];
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	ea4f 2273 	mov.w	r2, r3, ror #9
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f8d3 11b0 	ldr.w	r1, [r3, #432]	; 0x1b0
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	404b      	eors	r3, r1
 8003d9a:	1ad2      	subs	r2, r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8003da2:	4053      	eors	r3, r2
 8003da4:	61bb      	str	r3, [r7, #24]
	X0 = (ROL(X0, 5) - (X3 ^ key->rk[110])) ^ key->rk[111];
 8003da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da8:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f8d3 11b8 	ldr.w	r1, [r3, #440]	; 0x1b8
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	404b      	eors	r3, r1
 8003db6:	1ad2      	subs	r2, r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8003dbe:	4053      	eors	r3, r2
 8003dc0:	627b      	str	r3, [r7, #36]	; 0x24
	X1 = (ROL(X1, 3) - (X0 ^ key->rk[112])) ^ key->rk[113];
 8003dc2:	6a3b      	ldr	r3, [r7, #32]
 8003dc4:	ea4f 7273 	mov.w	r2, r3, ror #29
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f8d3 11c0 	ldr.w	r1, [r3, #448]	; 0x1c0
 8003dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd0:	404b      	eors	r3, r1
 8003dd2:	1ad2      	subs	r2, r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8003dda:	4053      	eors	r3, r2
 8003ddc:	623b      	str	r3, [r7, #32]
	X2 = (ROR(X2, 9) - (X1 ^ key->rk[102])) ^ key->rk[103];
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	ea4f 2273 	mov.w	r2, r3, ror #9
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f8d3 1198 	ldr.w	r1, [r3, #408]	; 0x198
 8003dea:	6a3b      	ldr	r3, [r7, #32]
 8003dec:	404b      	eors	r3, r1
 8003dee:	1ad2      	subs	r2, r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8003df6:	4053      	eors	r3, r2
 8003df8:	61fb      	str	r3, [r7, #28]
	X3 = (ROL(X3, 5) - (X2 ^ key->rk[104])) ^ key->rk[105];
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f8d3 11a0 	ldr.w	r1, [r3, #416]	; 0x1a0
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	404b      	eors	r3, r1
 8003e0a:	1ad2      	subs	r2, r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8003e12:	4053      	eors	r3, r2
 8003e14:	61bb      	str	r3, [r7, #24]
	X0 = (ROL(X0, 3) - (X3 ^ key->rk[106])) ^ key->rk[107];
 8003e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e18:	ea4f 7273 	mov.w	r2, r3, ror #29
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f8d3 11a8 	ldr.w	r1, [r3, #424]	; 0x1a8
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	404b      	eors	r3, r1
 8003e26:	1ad2      	subs	r2, r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8003e2e:	4053      	eors	r3, r2
 8003e30:	627b      	str	r3, [r7, #36]	; 0x24
	X1 = (ROR(X1, 9) - (X0 ^ key->rk[ 96])) ^ key->rk[ 97];
 8003e32:	6a3b      	ldr	r3, [r7, #32]
 8003e34:	ea4f 2273 	mov.w	r2, r3, ror #9
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f8d3 1180 	ldr.w	r1, [r3, #384]	; 0x180
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e40:	404b      	eors	r3, r1
 8003e42:	1ad2      	subs	r2, r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8003e4a:	4053      	eors	r3, r2
 8003e4c:	623b      	str	r3, [r7, #32]
	X2 = (ROL(X2, 5) - (X1 ^ key->rk[ 98])) ^ key->rk[ 99];
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f8d3 1188 	ldr.w	r1, [r3, #392]	; 0x188
 8003e5a:	6a3b      	ldr	r3, [r7, #32]
 8003e5c:	404b      	eors	r3, r1
 8003e5e:	1ad2      	subs	r2, r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8003e66:	4053      	eors	r3, r2
 8003e68:	61fb      	str	r3, [r7, #28]
	X3 = (ROL(X3, 3) - (X2 ^ key->rk[100])) ^ key->rk[101];
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	ea4f 7273 	mov.w	r2, r3, ror #29
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f8d3 1190 	ldr.w	r1, [r3, #400]	; 0x190
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	404b      	eors	r3, r1
 8003e7a:	1ad2      	subs	r2, r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8003e82:	4053      	eors	r3, r2
 8003e84:	61bb      	str	r3, [r7, #24]

	X0 = (ROR(X0, 9) - (X3 ^ key->rk[ 90])) ^ key->rk[ 91];
 8003e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e88:	ea4f 2273 	mov.w	r2, r3, ror #9
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f8d3 1168 	ldr.w	r1, [r3, #360]	; 0x168
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	404b      	eors	r3, r1
 8003e96:	1ad2      	subs	r2, r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8003e9e:	4053      	eors	r3, r2
 8003ea0:	627b      	str	r3, [r7, #36]	; 0x24
	X1 = (ROL(X1, 5) - (X0 ^ key->rk[ 92])) ^ key->rk[ 93];
 8003ea2:	6a3b      	ldr	r3, [r7, #32]
 8003ea4:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f8d3 1170 	ldr.w	r1, [r3, #368]	; 0x170
 8003eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb0:	404b      	eors	r3, r1
 8003eb2:	1ad2      	subs	r2, r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8003eba:	4053      	eors	r3, r2
 8003ebc:	623b      	str	r3, [r7, #32]
	X2 = (ROL(X2, 3) - (X1 ^ key->rk[ 94])) ^ key->rk[ 95];
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	ea4f 7273 	mov.w	r2, r3, ror #29
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f8d3 1178 	ldr.w	r1, [r3, #376]	; 0x178
 8003eca:	6a3b      	ldr	r3, [r7, #32]
 8003ecc:	404b      	eors	r3, r1
 8003ece:	1ad2      	subs	r2, r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8003ed6:	4053      	eors	r3, r2
 8003ed8:	61fb      	str	r3, [r7, #28]
	X3 = (ROR(X3, 9) - (X2 ^ key->rk[ 84])) ^ key->rk[ 85];
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	ea4f 2273 	mov.w	r2, r3, ror #9
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f8d3 1150 	ldr.w	r1, [r3, #336]	; 0x150
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	404b      	eors	r3, r1
 8003eea:	1ad2      	subs	r2, r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003ef2:	4053      	eors	r3, r2
 8003ef4:	61bb      	str	r3, [r7, #24]
	X0 = (ROL(X0, 5) - (X3 ^ key->rk[ 86])) ^ key->rk[ 87];
 8003ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef8:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	404b      	eors	r3, r1
 8003f06:	1ad2      	subs	r2, r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 8003f0e:	4053      	eors	r3, r2
 8003f10:	627b      	str	r3, [r7, #36]	; 0x24
	X1 = (ROL(X1, 3) - (X0 ^ key->rk[ 88])) ^ key->rk[ 89];
 8003f12:	6a3b      	ldr	r3, [r7, #32]
 8003f14:	ea4f 7273 	mov.w	r2, r3, ror #29
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f8d3 1160 	ldr.w	r1, [r3, #352]	; 0x160
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f20:	404b      	eors	r3, r1
 8003f22:	1ad2      	subs	r2, r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8003f2a:	4053      	eors	r3, r2
 8003f2c:	623b      	str	r3, [r7, #32]
	X2 = (ROR(X2, 9) - (X1 ^ key->rk[ 78])) ^ key->rk[ 79];
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	ea4f 2273 	mov.w	r2, r3, ror #9
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f8d3 1138 	ldr.w	r1, [r3, #312]	; 0x138
 8003f3a:	6a3b      	ldr	r3, [r7, #32]
 8003f3c:	404b      	eors	r3, r1
 8003f3e:	1ad2      	subs	r2, r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8003f46:	4053      	eors	r3, r2
 8003f48:	61fb      	str	r3, [r7, #28]
	X3 = (ROL(X3, 5) - (X2 ^ key->rk[ 80])) ^ key->rk[ 81];
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	404b      	eors	r3, r1
 8003f5a:	1ad2      	subs	r2, r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8003f62:	4053      	eors	r3, r2
 8003f64:	61bb      	str	r3, [r7, #24]
	X0 = (ROL(X0, 3) - (X3 ^ key->rk[ 82])) ^ key->rk[ 83];
 8003f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f68:	ea4f 7273 	mov.w	r2, r3, ror #29
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f8d3 1148 	ldr.w	r1, [r3, #328]	; 0x148
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	404b      	eors	r3, r1
 8003f76:	1ad2      	subs	r2, r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8003f7e:	4053      	eors	r3, r2
 8003f80:	627b      	str	r3, [r7, #36]	; 0x24
	X1 = (ROR(X1, 9) - (X0 ^ key->rk[ 72])) ^ key->rk[ 73];
 8003f82:	6a3b      	ldr	r3, [r7, #32]
 8003f84:	ea4f 2273 	mov.w	r2, r3, ror #9
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f90:	404b      	eors	r3, r1
 8003f92:	1ad2      	subs	r2, r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8003f9a:	4053      	eors	r3, r2
 8003f9c:	623b      	str	r3, [r7, #32]
	X2 = (ROL(X2, 5) - (X1 ^ key->rk[ 74])) ^ key->rk[ 75];
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f8d3 1128 	ldr.w	r1, [r3, #296]	; 0x128
 8003faa:	6a3b      	ldr	r3, [r7, #32]
 8003fac:	404b      	eors	r3, r1
 8003fae:	1ad2      	subs	r2, r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8003fb6:	4053      	eors	r3, r2
 8003fb8:	61fb      	str	r3, [r7, #28]
	X3 = (ROL(X3, 3) - (X2 ^ key->rk[ 76])) ^ key->rk[ 77];
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	ea4f 7273 	mov.w	r2, r3, ror #29
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f8d3 1130 	ldr.w	r1, [r3, #304]	; 0x130
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	404b      	eors	r3, r1
 8003fca:	1ad2      	subs	r2, r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8003fd2:	4053      	eors	r3, r2
 8003fd4:	61bb      	str	r3, [r7, #24]

	X0 = (ROR(X0, 9) - (X3 ^ key->rk[ 66])) ^ key->rk[ 67];
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd8:	ea4f 2273 	mov.w	r2, r3, ror #9
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	404b      	eors	r3, r1
 8003fe6:	1ad2      	subs	r2, r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8003fee:	4053      	eors	r3, r2
 8003ff0:	627b      	str	r3, [r7, #36]	; 0x24
	X1 = (ROL(X1, 5) - (X0 ^ key->rk[ 68])) ^ key->rk[ 69];
 8003ff2:	6a3b      	ldr	r3, [r7, #32]
 8003ff4:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004000:	404b      	eors	r3, r1
 8004002:	1ad2      	subs	r2, r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800400a:	4053      	eors	r3, r2
 800400c:	623b      	str	r3, [r7, #32]
	X2 = (ROL(X2, 3) - (X1 ^ key->rk[ 70])) ^ key->rk[ 71];
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	ea4f 7273 	mov.w	r2, r3, ror #29
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f8d3 1118 	ldr.w	r1, [r3, #280]	; 0x118
 800401a:	6a3b      	ldr	r3, [r7, #32]
 800401c:	404b      	eors	r3, r1
 800401e:	1ad2      	subs	r2, r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8004026:	4053      	eors	r3, r2
 8004028:	61fb      	str	r3, [r7, #28]
	X3 = (ROR(X3, 9) - (X2 ^ key->rk[ 60])) ^ key->rk[ 61];
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	ea4f 2273 	mov.w	r2, r3, ror #9
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	404b      	eors	r3, r1
 800403a:	1ad2      	subs	r2, r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004042:	4053      	eors	r3, r2
 8004044:	61bb      	str	r3, [r7, #24]
	X0 = (ROL(X0, 5) - (X3 ^ key->rk[ 62])) ^ key->rk[ 63];
 8004046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004048:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f8d3 10f8 	ldr.w	r1, [r3, #248]	; 0xf8
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	404b      	eors	r3, r1
 8004056:	1ad2      	subs	r2, r2, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800405e:	4053      	eors	r3, r2
 8004060:	627b      	str	r3, [r7, #36]	; 0x24
	X1 = (ROL(X1, 3) - (X0 ^ key->rk[ 64])) ^ key->rk[ 65];
 8004062:	6a3b      	ldr	r3, [r7, #32]
 8004064:	ea4f 7273 	mov.w	r2, r3, ror #29
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 800406e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004070:	404b      	eors	r3, r1
 8004072:	1ad2      	subs	r2, r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800407a:	4053      	eors	r3, r2
 800407c:	623b      	str	r3, [r7, #32]
	X2 = (ROR(X2, 9) - (X1 ^ key->rk[ 54])) ^ key->rk[ 55];
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	ea4f 2273 	mov.w	r2, r3, ror #9
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
 800408a:	6a3b      	ldr	r3, [r7, #32]
 800408c:	404b      	eors	r3, r1
 800408e:	1ad2      	subs	r2, r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004096:	4053      	eors	r3, r2
 8004098:	61fb      	str	r3, [r7, #28]
	X3 = (ROL(X3, 5) - (X2 ^ key->rk[ 56])) ^ key->rk[ 57];
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	ea4f 62f3 	mov.w	r2, r3, ror #27
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	404b      	eors	r3, r1
 80040aa:	1ad2      	subs	r2, r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80040b2:	4053      	eors	r3, r2
 80040b4:	61bb      	str	r3, [r7, #24]
	X0 = (ROL(X0, 3) - (X3 ^ key->rk[ 58])) ^ key->rk[ 59];
 80040b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b8:	ea4f 7273 	mov.w	r2, r3, ror #29
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f8d3 10e8 	ldr.w	r1, [r3, #232]	; 0xe8
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	404b      	eors	r3, r1
 80040c6:	1ad2      	subs	r2, r2, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80040ce:	4053      	eors	r3, r2
 80040d0:	627b      	str	r3, [r7, #36]	; 0x24
	X1 = (ROR(X1, 9) - (X0 ^ key->rk[ 48])) ^ key->rk[ 49];
 80040d2:	6a3b      	ldr	r3, [r7, #32]
 80040d4:	ea4f 2273 	mov.w	r2, r3, ror #9
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80040de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e0:	404b      	eors	r3, r1
 80040e2:	1ad2      	subs	r2, r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80040ea:	4053      	eors	r3, r2
 80040ec:	623b      	str	r3, [r7, #32]
	X2 = (ROL(X2, 5) - (X1 ^ key->rk[ 50])) ^ key->rk[ 51];
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	ea4f 62f3 	mov.w	r2, r3, ror #27
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f8d3 10c8 	ldr.w	r1, [r3, #200]	; 0xc8
 80040fa:	6a3b      	ldr	r3, [r7, #32]
 80040fc:	404b      	eors	r3, r1
 80040fe:	1ad2      	subs	r2, r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8004106:	4053      	eors	r3, r2
 8004108:	61fb      	str	r3, [r7, #28]
	X3 = (ROL(X3, 3) - (X2 ^ key->rk[ 52])) ^ key->rk[ 53];
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	ea4f 7273 	mov.w	r2, r3, ror #29
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f8d3 10d0 	ldr.w	r1, [r3, #208]	; 0xd0
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	404b      	eors	r3, r1
 800411a:	1ad2      	subs	r2, r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004122:	4053      	eors	r3, r2
 8004124:	61bb      	str	r3, [r7, #24]

	X0 = (ROR(X0, 9) - (X3 ^ key->rk[ 42])) ^ key->rk[ 43];
 8004126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004128:	ea4f 2273 	mov.w	r2, r3, ror #9
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	404b      	eors	r3, r1
 8004136:	1ad2      	subs	r2, r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800413e:	4053      	eors	r3, r2
 8004140:	627b      	str	r3, [r7, #36]	; 0x24
	X1 = (ROL(X1, 5) - (X0 ^ key->rk[ 44])) ^ key->rk[ 45];
 8004142:	6a3b      	ldr	r3, [r7, #32]
 8004144:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800414e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004150:	404b      	eors	r3, r1
 8004152:	1ad2      	subs	r2, r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800415a:	4053      	eors	r3, r2
 800415c:	623b      	str	r3, [r7, #32]
	X2 = (ROL(X2, 3) - (X1 ^ key->rk[ 46])) ^ key->rk[ 47];
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	ea4f 7273 	mov.w	r2, r3, ror #29
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 800416a:	6a3b      	ldr	r3, [r7, #32]
 800416c:	404b      	eors	r3, r1
 800416e:	1ad2      	subs	r2, r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004176:	4053      	eors	r3, r2
 8004178:	61fb      	str	r3, [r7, #28]
	X3 = (ROR(X3, 9) - (X2 ^ key->rk[ 36])) ^ key->rk[ 37];
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	ea4f 2273 	mov.w	r2, r3, ror #9
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	404b      	eors	r3, r1
 800418a:	1ad2      	subs	r2, r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004192:	4053      	eors	r3, r2
 8004194:	61bb      	str	r3, [r7, #24]
	X0 = (ROL(X0, 5) - (X3 ^ key->rk[ 38])) ^ key->rk[ 39];
 8004196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004198:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	404b      	eors	r3, r1
 80041a6:	1ad2      	subs	r2, r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041ae:	4053      	eors	r3, r2
 80041b0:	627b      	str	r3, [r7, #36]	; 0x24
	X1 = (ROL(X1, 3) - (X0 ^ key->rk[ 40])) ^ key->rk[ 41];
 80041b2:	6a3b      	ldr	r3, [r7, #32]
 80041b4:	ea4f 7273 	mov.w	r2, r3, ror #29
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 80041be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c0:	404b      	eors	r3, r1
 80041c2:	1ad2      	subs	r2, r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80041ca:	4053      	eors	r3, r2
 80041cc:	623b      	str	r3, [r7, #32]
	X2 = (ROR(X2, 9) - (X1 ^ key->rk[ 30])) ^ key->rk[ 31];
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	ea4f 2273 	mov.w	r2, r3, ror #9
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80041d8:	6a3b      	ldr	r3, [r7, #32]
 80041da:	404b      	eors	r3, r1
 80041dc:	1ad2      	subs	r2, r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041e2:	4053      	eors	r3, r2
 80041e4:	61fb      	str	r3, [r7, #28]
	X3 = (ROL(X3, 5) - (X2 ^ key->rk[ 32])) ^ key->rk[ 33];
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	ea4f 62f3 	mov.w	r2, r3, ror #27
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	404b      	eors	r3, r1
 80041f6:	1ad2      	subs	r2, r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041fe:	4053      	eors	r3, r2
 8004200:	61bb      	str	r3, [r7, #24]
	X0 = (ROL(X0, 3) - (X3 ^ key->rk[ 34])) ^ key->rk[ 35];
 8004202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004204:	ea4f 7273 	mov.w	r2, r3, ror #29
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	404b      	eors	r3, r1
 8004212:	1ad2      	subs	r2, r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800421a:	4053      	eors	r3, r2
 800421c:	627b      	str	r3, [r7, #36]	; 0x24
	X1 = (ROR(X1, 9) - (X0 ^ key->rk[ 24])) ^ key->rk[ 25];
 800421e:	6a3b      	ldr	r3, [r7, #32]
 8004220:	ea4f 2273 	mov.w	r2, r3, ror #9
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8004228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422a:	404b      	eors	r3, r1
 800422c:	1ad2      	subs	r2, r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004232:	4053      	eors	r3, r2
 8004234:	623b      	str	r3, [r7, #32]
	X2 = (ROL(X2, 5) - (X1 ^ key->rk[ 26])) ^ key->rk[ 27];
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004240:	6a3b      	ldr	r3, [r7, #32]
 8004242:	404b      	eors	r3, r1
 8004244:	1ad2      	subs	r2, r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800424a:	4053      	eors	r3, r2
 800424c:	61fb      	str	r3, [r7, #28]
	X3 = (ROL(X3, 3) - (X2 ^ key->rk[ 28])) ^ key->rk[ 29];
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	ea4f 7273 	mov.w	r2, r3, ror #29
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	404b      	eors	r3, r1
 800425c:	1ad2      	subs	r2, r2, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004262:	4053      	eors	r3, r2
 8004264:	61bb      	str	r3, [r7, #24]

	X0 = (ROR(X0, 9) - (X3 ^ key->rk[ 18])) ^ key->rk[ 19];
 8004266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004268:	ea4f 2273 	mov.w	r2, r3, ror #9
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	404b      	eors	r3, r1
 8004274:	1ad2      	subs	r2, r2, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800427a:	4053      	eors	r3, r2
 800427c:	627b      	str	r3, [r7, #36]	; 0x24
	X1 = (ROL(X1, 5) - (X0 ^ key->rk[ 20])) ^ key->rk[ 21];
 800427e:	6a3b      	ldr	r3, [r7, #32]
 8004280:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428a:	404b      	eors	r3, r1
 800428c:	1ad2      	subs	r2, r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004292:	4053      	eors	r3, r2
 8004294:	623b      	str	r3, [r7, #32]
	X2 = (ROL(X2, 3) - (X1 ^ key->rk[ 22])) ^ key->rk[ 23];
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	ea4f 7273 	mov.w	r2, r3, ror #29
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80042a0:	6a3b      	ldr	r3, [r7, #32]
 80042a2:	404b      	eors	r3, r1
 80042a4:	1ad2      	subs	r2, r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042aa:	4053      	eors	r3, r2
 80042ac:	61fb      	str	r3, [r7, #28]
	X3 = (ROR(X3, 9) - (X2 ^ key->rk[ 12])) ^ key->rk[ 13];
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	ea4f 2273 	mov.w	r2, r3, ror #9
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	404b      	eors	r3, r1
 80042bc:	1ad2      	subs	r2, r2, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042c2:	4053      	eors	r3, r2
 80042c4:	61bb      	str	r3, [r7, #24]
	X0 = (ROL(X0, 5) - (X3 ^ key->rk[ 14])) ^ key->rk[ 15];
 80042c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c8:	ea4f 62f3 	mov.w	r2, r3, ror #27
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	404b      	eors	r3, r1
 80042d4:	1ad2      	subs	r2, r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042da:	4053      	eors	r3, r2
 80042dc:	627b      	str	r3, [r7, #36]	; 0x24
	X1 = (ROL(X1, 3) - (X0 ^ key->rk[ 16])) ^ key->rk[ 17];
 80042de:	6a3b      	ldr	r3, [r7, #32]
 80042e0:	ea4f 7273 	mov.w	r2, r3, ror #29
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80042e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ea:	404b      	eors	r3, r1
 80042ec:	1ad2      	subs	r2, r2, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f2:	4053      	eors	r3, r2
 80042f4:	623b      	str	r3, [r7, #32]
	X2 = (ROR(X2, 9) - (X1 ^ key->rk[  6])) ^ key->rk[  7];
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	ea4f 2273 	mov.w	r2, r3, ror #9
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6999      	ldr	r1, [r3, #24]
 8004300:	6a3b      	ldr	r3, [r7, #32]
 8004302:	404b      	eors	r3, r1
 8004304:	1ad2      	subs	r2, r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	69db      	ldr	r3, [r3, #28]
 800430a:	4053      	eors	r3, r2
 800430c:	61fb      	str	r3, [r7, #28]
	X3 = (ROL(X3, 5) - (X2 ^ key->rk[  8])) ^ key->rk[  9];
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	ea4f 62f3 	mov.w	r2, r3, ror #27
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a19      	ldr	r1, [r3, #32]
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	404b      	eors	r3, r1
 800431c:	1ad2      	subs	r2, r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004322:	4053      	eors	r3, r2
 8004324:	61bb      	str	r3, [r7, #24]
	X0 = (ROL(X0, 3) - (X3 ^ key->rk[ 10])) ^ key->rk[ 11];
 8004326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004328:	ea4f 7273 	mov.w	r2, r3, ror #29
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	404b      	eors	r3, r1
 8004334:	1ad2      	subs	r2, r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433a:	4053      	eors	r3, r2
 800433c:	627b      	str	r3, [r7, #36]	; 0x24
	X1 = (ROR(X1, 9) - (X0 ^ key->rk[  0])) ^ key->rk[  1];
 800433e:	6a3b      	ldr	r3, [r7, #32]
 8004340:	ea4f 2273 	mov.w	r2, r3, ror #9
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6819      	ldr	r1, [r3, #0]
 8004348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434a:	404b      	eors	r3, r1
 800434c:	1ad2      	subs	r2, r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	4053      	eors	r3, r2
 8004354:	623b      	str	r3, [r7, #32]
	X2 = (ROL(X2, 5) - (X1 ^ key->rk[  2])) ^ key->rk[  3];
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6899      	ldr	r1, [r3, #8]
 8004360:	6a3b      	ldr	r3, [r7, #32]
 8004362:	404b      	eors	r3, r1
 8004364:	1ad2      	subs	r2, r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	4053      	eors	r3, r2
 800436c:	61fb      	str	r3, [r7, #28]
	X3 = (ROL(X3, 3) - (X2 ^ key->rk[  4])) ^ key->rk[  5];
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	ea4f 7273 	mov.w	r2, r3, ror #29
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6919      	ldr	r1, [r3, #16]
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	404b      	eors	r3, r1
 800437c:	1ad2      	subs	r2, r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	4053      	eors	r3, r2
 8004384:	61bb      	str	r3, [r7, #24]

	_pt[0] = loadU32(X0);
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800438a:	601a      	str	r2, [r3, #0]
	_pt[1] = loadU32(X1);
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	3304      	adds	r3, #4
 8004390:	6a3a      	ldr	r2, [r7, #32]
 8004392:	601a      	str	r2, [r3, #0]
	_pt[2] = loadU32(X2);
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	3308      	adds	r3, #8
 8004398:	69fa      	ldr	r2, [r7, #28]
 800439a:	601a      	str	r2, [r3, #0]
	_pt[3] = loadU32(X3);
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	330c      	adds	r3, #12
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	601a      	str	r2, [r3, #0]
}
 80043a4:	bf00      	nop
 80043a6:	372c      	adds	r7, #44	; 0x2c
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80043b8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80043bc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80043c0:	f003 0301 	and.w	r3, r3, #1
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d013      	beq.n	80043f0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80043c8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80043cc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80043d0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00b      	beq.n	80043f0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80043d8:	e000      	b.n	80043dc <ITM_SendChar+0x2c>
    {
      __NOP();
 80043da:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80043dc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d0f9      	beq.n	80043da <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80043e6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	b2d2      	uxtb	r2, r2
 80043ee:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80043f0:	687b      	ldr	r3, [r7, #4]
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	370c      	adds	r7, #12
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
	...

08004400 <print_hex>:
#ifndef _UTIL_H
#define _UTIL_H

static void print_hex(const unsigned char* hex, int len)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
	for (const unsigned char* p = hex; p - hex < len; p++)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	60fb      	str	r3, [r7, #12]
 800440e:	e008      	b.n	8004422 <print_hex+0x22>
		printf("%02X ", *p);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	4619      	mov	r1, r3
 8004416:	4809      	ldr	r0, [pc, #36]	; (800443c <print_hex+0x3c>)
 8004418:	f002 fa36 	bl	8006888 <iprintf>
	for (const unsigned char* p = hex; p - hex < len; p++)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	3301      	adds	r3, #1
 8004420:	60fb      	str	r3, [r7, #12]
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	683a      	ldr	r2, [r7, #0]
 800442a:	429a      	cmp	r2, r3
 800442c:	dcf0      	bgt.n	8004410 <print_hex+0x10>
	printf("\n");
 800442e:	200a      	movs	r0, #10
 8004430:	f002 fa3c 	bl	80068ac <putchar>
}
 8004434:	bf00      	nop
 8004436:	3710      	adds	r7, #16
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	08007618 	.word	0x08007618

08004440 <lea_cbc_enc>:
#define _LEA_CBC
#define lea_encrypt_1block lea_encrypt
#define lea_decrypt_1block lea_decrypt

void MAKE_FUNC(cbc_enc)(unsigned char *ct, const unsigned char *pt, unsigned int pt_len, const unsigned char *iv, const LEA_KEY *key)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b088      	sub	sp, #32
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	607a      	str	r2, [r7, #4]
 800444c:	603b      	str	r3, [r7, #0]
#ifdef USE_OWN_FUNC
	_lea_cbc_enc(ct,pt,pt_len,iv,key);
#else
	unsigned int nBlock1 = pt_len >> 4, i;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	091b      	lsrs	r3, r3, #4
 8004452:	617b      	str	r3, [r7, #20]
	const unsigned char *iv_ptr = iv;
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	61bb      	str	r3, [r7, #24]

	if (ct == NULL)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2b00      	cmp	r3, #0
 800445c:	f000 80dc 	beq.w	8004618 <lea_cbc_enc+0x1d8>
		return;
	else if (pt == NULL)
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	2b00      	cmp	r3, #0
 8004464:	f000 80da 	beq.w	800461c <lea_cbc_enc+0x1dc>
		return;
	else if ((pt_len == 0) || (pt_len & 0xf))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	f000 80d8 	beq.w	8004620 <lea_cbc_enc+0x1e0>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f003 030f 	and.w	r3, r3, #15
 8004476:	2b00      	cmp	r3, #0
 8004478:	f040 80d2 	bne.w	8004620 <lea_cbc_enc+0x1e0>
		return;
	else if (iv == NULL)
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	2b00      	cmp	r3, #0
 8004480:	f000 80d0 	beq.w	8004624 <lea_cbc_enc+0x1e4>
		return;
	else if (key == NULL)
 8004484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004486:	2b00      	cmp	r3, #0
 8004488:	f000 80ce 	beq.w	8004628 <lea_cbc_enc+0x1e8>
		return;

	for(i = 0; i < nBlock1; i++, pt += 16, ct += 16)
 800448c:	2300      	movs	r3, #0
 800448e:	61fb      	str	r3, [r7, #28]
 8004490:	e0bc      	b.n	800460c <lea_cbc_enc+0x1cc>
	{
		XOR8x16(ct, pt, iv_ptr);
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	781a      	ldrb	r2, [r3, #0]
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	4053      	eors	r3, r2
 800449c:	b2da      	uxtb	r2, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	701a      	strb	r2, [r3, #0]
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	3301      	adds	r3, #1
 80044a6:	7819      	ldrb	r1, [r3, #0]
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	3301      	adds	r3, #1
 80044ac:	781a      	ldrb	r2, [r3, #0]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	3301      	adds	r3, #1
 80044b2:	404a      	eors	r2, r1
 80044b4:	b2d2      	uxtb	r2, r2
 80044b6:	701a      	strb	r2, [r3, #0]
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	3302      	adds	r3, #2
 80044bc:	7819      	ldrb	r1, [r3, #0]
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	3302      	adds	r3, #2
 80044c2:	781a      	ldrb	r2, [r3, #0]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	3302      	adds	r3, #2
 80044c8:	404a      	eors	r2, r1
 80044ca:	b2d2      	uxtb	r2, r2
 80044cc:	701a      	strb	r2, [r3, #0]
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	3303      	adds	r3, #3
 80044d2:	7819      	ldrb	r1, [r3, #0]
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	3303      	adds	r3, #3
 80044d8:	781a      	ldrb	r2, [r3, #0]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	3303      	adds	r3, #3
 80044de:	404a      	eors	r2, r1
 80044e0:	b2d2      	uxtb	r2, r2
 80044e2:	701a      	strb	r2, [r3, #0]
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	3304      	adds	r3, #4
 80044e8:	7819      	ldrb	r1, [r3, #0]
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	3304      	adds	r3, #4
 80044ee:	781a      	ldrb	r2, [r3, #0]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	3304      	adds	r3, #4
 80044f4:	404a      	eors	r2, r1
 80044f6:	b2d2      	uxtb	r2, r2
 80044f8:	701a      	strb	r2, [r3, #0]
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	3305      	adds	r3, #5
 80044fe:	7819      	ldrb	r1, [r3, #0]
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	3305      	adds	r3, #5
 8004504:	781a      	ldrb	r2, [r3, #0]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	3305      	adds	r3, #5
 800450a:	404a      	eors	r2, r1
 800450c:	b2d2      	uxtb	r2, r2
 800450e:	701a      	strb	r2, [r3, #0]
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	3306      	adds	r3, #6
 8004514:	7819      	ldrb	r1, [r3, #0]
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	3306      	adds	r3, #6
 800451a:	781a      	ldrb	r2, [r3, #0]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	3306      	adds	r3, #6
 8004520:	404a      	eors	r2, r1
 8004522:	b2d2      	uxtb	r2, r2
 8004524:	701a      	strb	r2, [r3, #0]
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	3307      	adds	r3, #7
 800452a:	7819      	ldrb	r1, [r3, #0]
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	3307      	adds	r3, #7
 8004530:	781a      	ldrb	r2, [r3, #0]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	3307      	adds	r3, #7
 8004536:	404a      	eors	r2, r1
 8004538:	b2d2      	uxtb	r2, r2
 800453a:	701a      	strb	r2, [r3, #0]
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	3308      	adds	r3, #8
 8004540:	7819      	ldrb	r1, [r3, #0]
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	3308      	adds	r3, #8
 8004546:	781a      	ldrb	r2, [r3, #0]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	3308      	adds	r3, #8
 800454c:	404a      	eors	r2, r1
 800454e:	b2d2      	uxtb	r2, r2
 8004550:	701a      	strb	r2, [r3, #0]
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	3309      	adds	r3, #9
 8004556:	7819      	ldrb	r1, [r3, #0]
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	3309      	adds	r3, #9
 800455c:	781a      	ldrb	r2, [r3, #0]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	3309      	adds	r3, #9
 8004562:	404a      	eors	r2, r1
 8004564:	b2d2      	uxtb	r2, r2
 8004566:	701a      	strb	r2, [r3, #0]
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	330a      	adds	r3, #10
 800456c:	7819      	ldrb	r1, [r3, #0]
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	330a      	adds	r3, #10
 8004572:	781a      	ldrb	r2, [r3, #0]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	330a      	adds	r3, #10
 8004578:	404a      	eors	r2, r1
 800457a:	b2d2      	uxtb	r2, r2
 800457c:	701a      	strb	r2, [r3, #0]
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	330b      	adds	r3, #11
 8004582:	7819      	ldrb	r1, [r3, #0]
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	330b      	adds	r3, #11
 8004588:	781a      	ldrb	r2, [r3, #0]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	330b      	adds	r3, #11
 800458e:	404a      	eors	r2, r1
 8004590:	b2d2      	uxtb	r2, r2
 8004592:	701a      	strb	r2, [r3, #0]
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	330c      	adds	r3, #12
 8004598:	7819      	ldrb	r1, [r3, #0]
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	330c      	adds	r3, #12
 800459e:	781a      	ldrb	r2, [r3, #0]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	330c      	adds	r3, #12
 80045a4:	404a      	eors	r2, r1
 80045a6:	b2d2      	uxtb	r2, r2
 80045a8:	701a      	strb	r2, [r3, #0]
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	330d      	adds	r3, #13
 80045ae:	7819      	ldrb	r1, [r3, #0]
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	330d      	adds	r3, #13
 80045b4:	781a      	ldrb	r2, [r3, #0]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	330d      	adds	r3, #13
 80045ba:	404a      	eors	r2, r1
 80045bc:	b2d2      	uxtb	r2, r2
 80045be:	701a      	strb	r2, [r3, #0]
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	330e      	adds	r3, #14
 80045c4:	7819      	ldrb	r1, [r3, #0]
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	330e      	adds	r3, #14
 80045ca:	781a      	ldrb	r2, [r3, #0]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	330e      	adds	r3, #14
 80045d0:	404a      	eors	r2, r1
 80045d2:	b2d2      	uxtb	r2, r2
 80045d4:	701a      	strb	r2, [r3, #0]
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	330f      	adds	r3, #15
 80045da:	7819      	ldrb	r1, [r3, #0]
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	330f      	adds	r3, #15
 80045e0:	781a      	ldrb	r2, [r3, #0]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	330f      	adds	r3, #15
 80045e6:	404a      	eors	r2, r1
 80045e8:	b2d2      	uxtb	r2, r2
 80045ea:	701a      	strb	r2, [r3, #0]
		lea_encrypt_1block(ct, ct, key);
 80045ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045ee:	68f9      	ldr	r1, [r7, #12]
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	f7fe fc29 	bl	8002e48 <lea_encrypt>

		iv_ptr = ct;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	61bb      	str	r3, [r7, #24]
	for(i = 0; i < nBlock1; i++, pt += 16, ct += 16)
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	3301      	adds	r3, #1
 80045fe:	61fb      	str	r3, [r7, #28]
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	3310      	adds	r3, #16
 8004604:	60bb      	str	r3, [r7, #8]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	3310      	adds	r3, #16
 800460a:	60fb      	str	r3, [r7, #12]
 800460c:	69fa      	ldr	r2, [r7, #28]
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	429a      	cmp	r2, r3
 8004612:	f4ff af3e 	bcc.w	8004492 <lea_cbc_enc+0x52>
 8004616:	e008      	b.n	800462a <lea_cbc_enc+0x1ea>
		return;
 8004618:	bf00      	nop
 800461a:	e006      	b.n	800462a <lea_cbc_enc+0x1ea>
		return;
 800461c:	bf00      	nop
 800461e:	e004      	b.n	800462a <lea_cbc_enc+0x1ea>
		return;
 8004620:	bf00      	nop
 8004622:	e002      	b.n	800462a <lea_cbc_enc+0x1ea>
		return;
 8004624:	bf00      	nop
 8004626:	e000      	b.n	800462a <lea_cbc_enc+0x1ea>
		return;
 8004628:	bf00      	nop
	}
#endif
}
 800462a:	3720      	adds	r7, #32
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <lea_cbc_dec>:

void MAKE_FUNC(cbc_dec)(unsigned char *pt, const unsigned char *ct, unsigned int ct_len, const unsigned char *iv, const LEA_KEY *key)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b0a6      	sub	sp, #152	; 0x98
 8004634:	af00      	add	r7, sp, #0
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	607a      	str	r2, [r7, #4]
 800463c:	603b      	str	r3, [r7, #0]
	unsigned int remainBlock = ct_len >> 4;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	091b      	lsrs	r3, r3, #4
 8004642:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	const unsigned char *pIv = iv;
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	unsigned char tmp[128];// = {0, };

	if (pt == NULL)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2b00      	cmp	r3, #0
 8004650:	f000 81b1 	beq.w	80049b6 <lea_cbc_dec+0x386>
		return;
	else if (ct == NULL)
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	2b00      	cmp	r3, #0
 8004658:	f000 81af 	beq.w	80049ba <lea_cbc_dec+0x38a>
		return;
	else if ((ct_len == 0) || (ct_len & 0xf))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	f000 81ad 	beq.w	80049be <lea_cbc_dec+0x38e>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f003 030f 	and.w	r3, r3, #15
 800466a:	2b00      	cmp	r3, #0
 800466c:	f040 81a7 	bne.w	80049be <lea_cbc_dec+0x38e>
		return;
	else if (iv == NULL)
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	2b00      	cmp	r3, #0
 8004674:	f000 81a5 	beq.w	80049c2 <lea_cbc_dec+0x392>
		return;
	else if (key == NULL)
 8004678:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800467c:	2b00      	cmp	r3, #0
 800467e:	f000 81a2 	beq.w	80049c6 <lea_cbc_dec+0x396>
		return;

	pt += ct_len;
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4413      	add	r3, r2
 8004688:	60fb      	str	r3, [r7, #12]
	ct += ct_len;
 800468a:	68ba      	ldr	r2, [r7, #8]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4413      	add	r3, r2
 8004690:	60bb      	str	r3, [r7, #8]

		remainBlock -= 4;
	}
#endif

	while (remainBlock > 1){ // > 1, not >= 1.
 8004692:	e0d1      	b.n	8004838 <lea_cbc_dec+0x208>
		pt -= 0x10;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	3b10      	subs	r3, #16
 8004698:	60fb      	str	r3, [r7, #12]
		ct -= 0x10;
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	3b10      	subs	r3, #16
 800469e:	60bb      	str	r3, [r7, #8]
		pIv = ct - 16;
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	3b10      	subs	r3, #16
 80046a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

		lea_decrypt_1block(pt, ct, key);
 80046a8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80046ac:	68b9      	ldr	r1, [r7, #8]
 80046ae:	68f8      	ldr	r0, [r7, #12]
 80046b0:	f7ff f924 	bl	80038fc <lea_decrypt>

		XOR8x16(pt, pt, pIv);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	781a      	ldrb	r2, [r3, #0]
 80046b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	4053      	eors	r3, r2
 80046c0:	b2da      	uxtb	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	701a      	strb	r2, [r3, #0]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	3301      	adds	r3, #1
 80046ca:	7819      	ldrb	r1, [r3, #0]
 80046cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80046d0:	3301      	adds	r3, #1
 80046d2:	781a      	ldrb	r2, [r3, #0]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	3301      	adds	r3, #1
 80046d8:	404a      	eors	r2, r1
 80046da:	b2d2      	uxtb	r2, r2
 80046dc:	701a      	strb	r2, [r3, #0]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	3302      	adds	r3, #2
 80046e2:	7819      	ldrb	r1, [r3, #0]
 80046e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80046e8:	3302      	adds	r3, #2
 80046ea:	781a      	ldrb	r2, [r3, #0]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	3302      	adds	r3, #2
 80046f0:	404a      	eors	r2, r1
 80046f2:	b2d2      	uxtb	r2, r2
 80046f4:	701a      	strb	r2, [r3, #0]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	3303      	adds	r3, #3
 80046fa:	7819      	ldrb	r1, [r3, #0]
 80046fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004700:	3303      	adds	r3, #3
 8004702:	781a      	ldrb	r2, [r3, #0]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	3303      	adds	r3, #3
 8004708:	404a      	eors	r2, r1
 800470a:	b2d2      	uxtb	r2, r2
 800470c:	701a      	strb	r2, [r3, #0]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	3304      	adds	r3, #4
 8004712:	7819      	ldrb	r1, [r3, #0]
 8004714:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004718:	3304      	adds	r3, #4
 800471a:	781a      	ldrb	r2, [r3, #0]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	3304      	adds	r3, #4
 8004720:	404a      	eors	r2, r1
 8004722:	b2d2      	uxtb	r2, r2
 8004724:	701a      	strb	r2, [r3, #0]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	3305      	adds	r3, #5
 800472a:	7819      	ldrb	r1, [r3, #0]
 800472c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004730:	3305      	adds	r3, #5
 8004732:	781a      	ldrb	r2, [r3, #0]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	3305      	adds	r3, #5
 8004738:	404a      	eors	r2, r1
 800473a:	b2d2      	uxtb	r2, r2
 800473c:	701a      	strb	r2, [r3, #0]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	3306      	adds	r3, #6
 8004742:	7819      	ldrb	r1, [r3, #0]
 8004744:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004748:	3306      	adds	r3, #6
 800474a:	781a      	ldrb	r2, [r3, #0]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	3306      	adds	r3, #6
 8004750:	404a      	eors	r2, r1
 8004752:	b2d2      	uxtb	r2, r2
 8004754:	701a      	strb	r2, [r3, #0]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	3307      	adds	r3, #7
 800475a:	7819      	ldrb	r1, [r3, #0]
 800475c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004760:	3307      	adds	r3, #7
 8004762:	781a      	ldrb	r2, [r3, #0]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	3307      	adds	r3, #7
 8004768:	404a      	eors	r2, r1
 800476a:	b2d2      	uxtb	r2, r2
 800476c:	701a      	strb	r2, [r3, #0]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	3308      	adds	r3, #8
 8004772:	7819      	ldrb	r1, [r3, #0]
 8004774:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004778:	3308      	adds	r3, #8
 800477a:	781a      	ldrb	r2, [r3, #0]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	3308      	adds	r3, #8
 8004780:	404a      	eors	r2, r1
 8004782:	b2d2      	uxtb	r2, r2
 8004784:	701a      	strb	r2, [r3, #0]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	3309      	adds	r3, #9
 800478a:	7819      	ldrb	r1, [r3, #0]
 800478c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004790:	3309      	adds	r3, #9
 8004792:	781a      	ldrb	r2, [r3, #0]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	3309      	adds	r3, #9
 8004798:	404a      	eors	r2, r1
 800479a:	b2d2      	uxtb	r2, r2
 800479c:	701a      	strb	r2, [r3, #0]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	330a      	adds	r3, #10
 80047a2:	7819      	ldrb	r1, [r3, #0]
 80047a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80047a8:	330a      	adds	r3, #10
 80047aa:	781a      	ldrb	r2, [r3, #0]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	330a      	adds	r3, #10
 80047b0:	404a      	eors	r2, r1
 80047b2:	b2d2      	uxtb	r2, r2
 80047b4:	701a      	strb	r2, [r3, #0]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	330b      	adds	r3, #11
 80047ba:	7819      	ldrb	r1, [r3, #0]
 80047bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80047c0:	330b      	adds	r3, #11
 80047c2:	781a      	ldrb	r2, [r3, #0]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	330b      	adds	r3, #11
 80047c8:	404a      	eors	r2, r1
 80047ca:	b2d2      	uxtb	r2, r2
 80047cc:	701a      	strb	r2, [r3, #0]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	330c      	adds	r3, #12
 80047d2:	7819      	ldrb	r1, [r3, #0]
 80047d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80047d8:	330c      	adds	r3, #12
 80047da:	781a      	ldrb	r2, [r3, #0]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	330c      	adds	r3, #12
 80047e0:	404a      	eors	r2, r1
 80047e2:	b2d2      	uxtb	r2, r2
 80047e4:	701a      	strb	r2, [r3, #0]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	330d      	adds	r3, #13
 80047ea:	7819      	ldrb	r1, [r3, #0]
 80047ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80047f0:	330d      	adds	r3, #13
 80047f2:	781a      	ldrb	r2, [r3, #0]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	330d      	adds	r3, #13
 80047f8:	404a      	eors	r2, r1
 80047fa:	b2d2      	uxtb	r2, r2
 80047fc:	701a      	strb	r2, [r3, #0]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	330e      	adds	r3, #14
 8004802:	7819      	ldrb	r1, [r3, #0]
 8004804:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004808:	330e      	adds	r3, #14
 800480a:	781a      	ldrb	r2, [r3, #0]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	330e      	adds	r3, #14
 8004810:	404a      	eors	r2, r1
 8004812:	b2d2      	uxtb	r2, r2
 8004814:	701a      	strb	r2, [r3, #0]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	330f      	adds	r3, #15
 800481a:	7819      	ldrb	r1, [r3, #0]
 800481c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004820:	330f      	adds	r3, #15
 8004822:	781a      	ldrb	r2, [r3, #0]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	330f      	adds	r3, #15
 8004828:	404a      	eors	r2, r1
 800482a:	b2d2      	uxtb	r2, r2
 800482c:	701a      	strb	r2, [r3, #0]

		remainBlock -= 1;
 800482e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004832:	3b01      	subs	r3, #1
 8004834:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	while (remainBlock > 1){ // > 1, not >= 1.
 8004838:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800483c:	2b01      	cmp	r3, #1
 800483e:	f63f af29 	bhi.w	8004694 <lea_cbc_dec+0x64>
	}
	
	pt -= 0x10;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	3b10      	subs	r3, #16
 8004846:	60fb      	str	r3, [r7, #12]
	ct -= 0x10;
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	3b10      	subs	r3, #16
 800484c:	60bb      	str	r3, [r7, #8]
	lea_decrypt_1block(pt, ct, key);
 800484e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8004852:	68b9      	ldr	r1, [r7, #8]
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f7ff f851 	bl	80038fc <lea_decrypt>

	XOR8x16(pt, pt, iv);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	781a      	ldrb	r2, [r3, #0]
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	4053      	eors	r3, r2
 8004864:	b2da      	uxtb	r2, r3
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	701a      	strb	r2, [r3, #0]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	3301      	adds	r3, #1
 800486e:	7819      	ldrb	r1, [r3, #0]
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	3301      	adds	r3, #1
 8004874:	781a      	ldrb	r2, [r3, #0]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	3301      	adds	r3, #1
 800487a:	404a      	eors	r2, r1
 800487c:	b2d2      	uxtb	r2, r2
 800487e:	701a      	strb	r2, [r3, #0]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	3302      	adds	r3, #2
 8004884:	7819      	ldrb	r1, [r3, #0]
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	3302      	adds	r3, #2
 800488a:	781a      	ldrb	r2, [r3, #0]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	3302      	adds	r3, #2
 8004890:	404a      	eors	r2, r1
 8004892:	b2d2      	uxtb	r2, r2
 8004894:	701a      	strb	r2, [r3, #0]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	3303      	adds	r3, #3
 800489a:	7819      	ldrb	r1, [r3, #0]
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	3303      	adds	r3, #3
 80048a0:	781a      	ldrb	r2, [r3, #0]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	3303      	adds	r3, #3
 80048a6:	404a      	eors	r2, r1
 80048a8:	b2d2      	uxtb	r2, r2
 80048aa:	701a      	strb	r2, [r3, #0]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	3304      	adds	r3, #4
 80048b0:	7819      	ldrb	r1, [r3, #0]
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	3304      	adds	r3, #4
 80048b6:	781a      	ldrb	r2, [r3, #0]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	3304      	adds	r3, #4
 80048bc:	404a      	eors	r2, r1
 80048be:	b2d2      	uxtb	r2, r2
 80048c0:	701a      	strb	r2, [r3, #0]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	3305      	adds	r3, #5
 80048c6:	7819      	ldrb	r1, [r3, #0]
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	3305      	adds	r3, #5
 80048cc:	781a      	ldrb	r2, [r3, #0]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	3305      	adds	r3, #5
 80048d2:	404a      	eors	r2, r1
 80048d4:	b2d2      	uxtb	r2, r2
 80048d6:	701a      	strb	r2, [r3, #0]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	3306      	adds	r3, #6
 80048dc:	7819      	ldrb	r1, [r3, #0]
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	3306      	adds	r3, #6
 80048e2:	781a      	ldrb	r2, [r3, #0]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	3306      	adds	r3, #6
 80048e8:	404a      	eors	r2, r1
 80048ea:	b2d2      	uxtb	r2, r2
 80048ec:	701a      	strb	r2, [r3, #0]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	3307      	adds	r3, #7
 80048f2:	7819      	ldrb	r1, [r3, #0]
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	3307      	adds	r3, #7
 80048f8:	781a      	ldrb	r2, [r3, #0]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	3307      	adds	r3, #7
 80048fe:	404a      	eors	r2, r1
 8004900:	b2d2      	uxtb	r2, r2
 8004902:	701a      	strb	r2, [r3, #0]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	3308      	adds	r3, #8
 8004908:	7819      	ldrb	r1, [r3, #0]
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	3308      	adds	r3, #8
 800490e:	781a      	ldrb	r2, [r3, #0]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	3308      	adds	r3, #8
 8004914:	404a      	eors	r2, r1
 8004916:	b2d2      	uxtb	r2, r2
 8004918:	701a      	strb	r2, [r3, #0]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	3309      	adds	r3, #9
 800491e:	7819      	ldrb	r1, [r3, #0]
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	3309      	adds	r3, #9
 8004924:	781a      	ldrb	r2, [r3, #0]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	3309      	adds	r3, #9
 800492a:	404a      	eors	r2, r1
 800492c:	b2d2      	uxtb	r2, r2
 800492e:	701a      	strb	r2, [r3, #0]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	330a      	adds	r3, #10
 8004934:	7819      	ldrb	r1, [r3, #0]
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	330a      	adds	r3, #10
 800493a:	781a      	ldrb	r2, [r3, #0]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	330a      	adds	r3, #10
 8004940:	404a      	eors	r2, r1
 8004942:	b2d2      	uxtb	r2, r2
 8004944:	701a      	strb	r2, [r3, #0]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	330b      	adds	r3, #11
 800494a:	7819      	ldrb	r1, [r3, #0]
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	330b      	adds	r3, #11
 8004950:	781a      	ldrb	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	330b      	adds	r3, #11
 8004956:	404a      	eors	r2, r1
 8004958:	b2d2      	uxtb	r2, r2
 800495a:	701a      	strb	r2, [r3, #0]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	330c      	adds	r3, #12
 8004960:	7819      	ldrb	r1, [r3, #0]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	330c      	adds	r3, #12
 8004966:	781a      	ldrb	r2, [r3, #0]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	330c      	adds	r3, #12
 800496c:	404a      	eors	r2, r1
 800496e:	b2d2      	uxtb	r2, r2
 8004970:	701a      	strb	r2, [r3, #0]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	330d      	adds	r3, #13
 8004976:	7819      	ldrb	r1, [r3, #0]
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	330d      	adds	r3, #13
 800497c:	781a      	ldrb	r2, [r3, #0]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	330d      	adds	r3, #13
 8004982:	404a      	eors	r2, r1
 8004984:	b2d2      	uxtb	r2, r2
 8004986:	701a      	strb	r2, [r3, #0]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	330e      	adds	r3, #14
 800498c:	7819      	ldrb	r1, [r3, #0]
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	330e      	adds	r3, #14
 8004992:	781a      	ldrb	r2, [r3, #0]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	330e      	adds	r3, #14
 8004998:	404a      	eors	r2, r1
 800499a:	b2d2      	uxtb	r2, r2
 800499c:	701a      	strb	r2, [r3, #0]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	330f      	adds	r3, #15
 80049a2:	7819      	ldrb	r1, [r3, #0]
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	330f      	adds	r3, #15
 80049a8:	781a      	ldrb	r2, [r3, #0]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	330f      	adds	r3, #15
 80049ae:	404a      	eors	r2, r1
 80049b0:	b2d2      	uxtb	r2, r2
 80049b2:	701a      	strb	r2, [r3, #0]
 80049b4:	e008      	b.n	80049c8 <lea_cbc_dec+0x398>
		return;
 80049b6:	bf00      	nop
 80049b8:	e006      	b.n	80049c8 <lea_cbc_dec+0x398>
		return;
 80049ba:	bf00      	nop
 80049bc:	e004      	b.n	80049c8 <lea_cbc_dec+0x398>
		return;
 80049be:	bf00      	nop
 80049c0:	e002      	b.n	80049c8 <lea_cbc_dec+0x398>
		return;
 80049c2:	bf00      	nop
 80049c4:	e000      	b.n	80049c8 <lea_cbc_dec+0x398>
		return;
 80049c6:	bf00      	nop

}
 80049c8:	3798      	adds	r7, #152	; 0x98
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
	...

080049d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	f5ad 7d4c 	sub.w	sp, sp, #816	; 0x330
 80049d6:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80049d8:	4b52      	ldr	r3, [pc, #328]	; (8004b24 <main+0x154>)
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	4a51      	ldr	r2, [pc, #324]	; (8004b24 <main+0x154>)
 80049de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049e2:	60d3      	str	r3, [r2, #12]
	  DWT->CYCCNT = 0;
 80049e4:	4b50      	ldr	r3, [pc, #320]	; (8004b28 <main+0x158>)
 80049e6:	2200      	movs	r2, #0
 80049e8:	605a      	str	r2, [r3, #4]
	  DWT->CTRL  |= 1;
 80049ea:	4b4f      	ldr	r3, [pc, #316]	; (8004b28 <main+0x158>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a4e      	ldr	r2, [pc, #312]	; (8004b28 <main+0x158>)
 80049f0:	f043 0301 	orr.w	r3, r3, #1
 80049f4:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80049f6:	f000 fb5c 	bl	80050b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80049fa:	f000 f8b3 	bl	8004b64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80049fe:	f000 f8f7 	bl	8004bf0 <MX_GPIO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 8004a02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004a06:	4849      	ldr	r0, [pc, #292]	; (8004b2c <main+0x15c>)
 8004a08:	f000 fe46 	bl	8005698 <HAL_GPIO_TogglePin>

	  		print_hex(plain, STRING_LENGTH);
 8004a0c:	2140      	movs	r1, #64	; 0x40
 8004a0e:	4848      	ldr	r0, [pc, #288]	; (8004b30 <main+0x160>)
 8004a10:	f7ff fcf6 	bl	8004400 <print_hex>

	  		uint32_t key_cycle_count = DWT->CYCCNT;
 8004a14:	4b44      	ldr	r3, [pc, #272]	; (8004b28 <main+0x158>)
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324

	  		LEA_KEY lea_key;

	  		/* set LEA key */
	  		lea_set_key(&lea_key, key, 16);
 8004a1c:	1d3b      	adds	r3, r7, #4
 8004a1e:	2210      	movs	r2, #16
 8004a20:	4944      	ldr	r1, [pc, #272]	; (8004b34 <main+0x164>)
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7fb fc06 	bl	8000234 <lea_set_key>

			uint32_t enc_start_cycle_count = DWT->CYCCNT;
 8004a28:	4b3f      	ldr	r3, [pc, #252]	; (8004b28 <main+0x158>)
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
			/* encryption */
			lea_cbc_enc(plain, plain, 64, iv, &lea_key);
 8004a30:	1d3b      	adds	r3, r7, #4
 8004a32:	9300      	str	r3, [sp, #0]
 8004a34:	4b40      	ldr	r3, [pc, #256]	; (8004b38 <main+0x168>)
 8004a36:	2240      	movs	r2, #64	; 0x40
 8004a38:	493d      	ldr	r1, [pc, #244]	; (8004b30 <main+0x160>)
 8004a3a:	483d      	ldr	r0, [pc, #244]	; (8004b30 <main+0x160>)
 8004a3c:	f7ff fd00 	bl	8004440 <lea_cbc_enc>
			uint32_t enc_end_cycle_count = DWT->CYCCNT;
 8004a40:	4b39      	ldr	r3, [pc, #228]	; (8004b28 <main+0x158>)
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c

			print_hex(plain, STRING_LENGTH);
 8004a48:	2140      	movs	r1, #64	; 0x40
 8004a4a:	4839      	ldr	r0, [pc, #228]	; (8004b30 <main+0x160>)
 8004a4c:	f7ff fcd8 	bl	8004400 <print_hex>

			uint32_t dec_start_cycle_count = DWT->CYCCNT;
 8004a50:	4b35      	ldr	r3, [pc, #212]	; (8004b28 <main+0x158>)
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f8c7 3318 	str.w	r3, [r7, #792]	; 0x318
			/* decryption */
			lea_cbc_dec(plain, plain, 64, iv, &lea_key);
 8004a58:	1d3b      	adds	r3, r7, #4
 8004a5a:	9300      	str	r3, [sp, #0]
 8004a5c:	4b36      	ldr	r3, [pc, #216]	; (8004b38 <main+0x168>)
 8004a5e:	2240      	movs	r2, #64	; 0x40
 8004a60:	4933      	ldr	r1, [pc, #204]	; (8004b30 <main+0x160>)
 8004a62:	4833      	ldr	r0, [pc, #204]	; (8004b30 <main+0x160>)
 8004a64:	f7ff fde4 	bl	8004630 <lea_cbc_dec>
			uint32_t dec_end_cycle_count = DWT->CYCCNT;
 8004a68:	4b2f      	ldr	r3, [pc, #188]	; (8004b28 <main+0x158>)
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314

			print_hex(plain, STRING_LENGTH);
 8004a70:	2140      	movs	r1, #64	; 0x40
 8004a72:	482f      	ldr	r0, [pc, #188]	; (8004b30 <main+0x160>)
 8004a74:	f7ff fcc4 	bl	8004400 <print_hex>

			uint32_t key_cycles = enc_start_cycle_count - key_cycle_count;
 8004a78:	f8d7 2320 	ldr.w	r2, [r7, #800]	; 0x320
 8004a7c:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
		    uint32_t enc_total_cycles = enc_end_cycle_count - enc_start_cycle_count;
 8004a86:	f8d7 231c 	ldr.w	r2, [r7, #796]	; 0x31c
 8004a8a:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
		    uint32_t dec_total_cycles = dec_end_cycle_count - dec_start_cycle_count;
 8004a94:	f8d7 2314 	ldr.w	r2, [r7, #788]	; 0x314
 8004a98:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308

		    printf("Key cycles: %u\n", key_cycles);
 8004aa2:	f8d7 1310 	ldr.w	r1, [r7, #784]	; 0x310
 8004aa6:	4825      	ldr	r0, [pc, #148]	; (8004b3c <main+0x16c>)
 8004aa8:	f001 feee 	bl	8006888 <iprintf>
		    printf("\nEnc start cycles: %u\n", enc_start_cycle_count);
 8004aac:	f8d7 1320 	ldr.w	r1, [r7, #800]	; 0x320
 8004ab0:	4823      	ldr	r0, [pc, #140]	; (8004b40 <main+0x170>)
 8004ab2:	f001 fee9 	bl	8006888 <iprintf>
		    printf("Enc end cycles: %u\n", enc_end_cycle_count);
 8004ab6:	f8d7 131c 	ldr.w	r1, [r7, #796]	; 0x31c
 8004aba:	4822      	ldr	r0, [pc, #136]	; (8004b44 <main+0x174>)
 8004abc:	f001 fee4 	bl	8006888 <iprintf>
		    printf("Enc total cycles: %u\n", enc_total_cycles);
 8004ac0:	f8d7 130c 	ldr.w	r1, [r7, #780]	; 0x30c
 8004ac4:	4820      	ldr	r0, [pc, #128]	; (8004b48 <main+0x178>)
 8004ac6:	f001 fedf 	bl	8006888 <iprintf>
		    printf("\nDec start cycles: %u\n", dec_start_cycle_count);
 8004aca:	f8d7 1318 	ldr.w	r1, [r7, #792]	; 0x318
 8004ace:	481f      	ldr	r0, [pc, #124]	; (8004b4c <main+0x17c>)
 8004ad0:	f001 feda 	bl	8006888 <iprintf>
		    printf("Dec end cycles: %u\n", dec_end_cycle_count);
 8004ad4:	f8d7 1314 	ldr.w	r1, [r7, #788]	; 0x314
 8004ad8:	481d      	ldr	r0, [pc, #116]	; (8004b50 <main+0x180>)
 8004ada:	f001 fed5 	bl	8006888 <iprintf>
		    printf("Dec total cycles: %u\n", dec_total_cycles);
 8004ade:	f8d7 1308 	ldr.w	r1, [r7, #776]	; 0x308
 8004ae2:	481c      	ldr	r0, [pc, #112]	; (8004b54 <main+0x184>)
 8004ae4:	f001 fed0 	bl	8006888 <iprintf>
		    printf("\nKey + Enc: %u\n", key_cycles + enc_total_cycles);
 8004ae8:	f8d7 2310 	ldr.w	r2, [r7, #784]	; 0x310
 8004aec:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 8004af0:	4413      	add	r3, r2
 8004af2:	4619      	mov	r1, r3
 8004af4:	4818      	ldr	r0, [pc, #96]	; (8004b58 <main+0x188>)
 8004af6:	f001 fec7 	bl	8006888 <iprintf>
		    printf("Key + Dec: %u\n", key_cycles + dec_total_cycles);
 8004afa:	f8d7 2310 	ldr.w	r2, [r7, #784]	; 0x310
 8004afe:	f8d7 3308 	ldr.w	r3, [r7, #776]	; 0x308
 8004b02:	4413      	add	r3, r2
 8004b04:	4619      	mov	r1, r3
 8004b06:	4815      	ldr	r0, [pc, #84]	; (8004b5c <main+0x18c>)
 8004b08:	f001 febe 	bl	8006888 <iprintf>

		    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8004b0c:	2180      	movs	r1, #128	; 0x80
 8004b0e:	4814      	ldr	r0, [pc, #80]	; (8004b60 <main+0x190>)
 8004b10:	f000 fdc2 	bl	8005698 <HAL_GPIO_TogglePin>

		    break;
 8004b14:	bf00      	nop
 8004b16:	2300      	movs	r3, #0
  }
  /* USER CODE END 3 */
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f507 774a 	add.w	r7, r7, #808	; 0x328
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	e000edf0 	.word	0xe000edf0
 8004b28:	e0001000 	.word	0xe0001000
 8004b2c:	42020000 	.word	0x42020000
 8004b30:	20000000 	.word	0x20000000
 8004b34:	20000040 	.word	0x20000040
 8004b38:	20000050 	.word	0x20000050
 8004b3c:	08007620 	.word	0x08007620
 8004b40:	08007630 	.word	0x08007630
 8004b44:	08007648 	.word	0x08007648
 8004b48:	0800765c 	.word	0x0800765c
 8004b4c:	08007674 	.word	0x08007674
 8004b50:	0800768c 	.word	0x0800768c
 8004b54:	080076a0 	.word	0x080076a0
 8004b58:	080076b8 	.word	0x080076b8
 8004b5c:	080076c8 	.word	0x080076c8
 8004b60:	42020400 	.word	0x42020400

08004b64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b098      	sub	sp, #96	; 0x60
 8004b68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004b6a:	f107 0318 	add.w	r3, r7, #24
 8004b6e:	2248      	movs	r2, #72	; 0x48
 8004b70:	2100      	movs	r1, #0
 8004b72:	4618      	mov	r0, r3
 8004b74:	f001 fea2 	bl	80068bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004b78:	1d3b      	adds	r3, r7, #4
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	601a      	str	r2, [r3, #0]
 8004b7e:	605a      	str	r2, [r3, #4]
 8004b80:	609a      	str	r2, [r3, #8]
 8004b82:	60da      	str	r2, [r3, #12]
 8004b84:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 8004b86:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004b8a:	f000 fdad 	bl	80056e8 <HAL_PWREx_ControlVoltageScaling>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d001      	beq.n	8004b98 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8004b94:	f000 f8af 	bl	8004cf6 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8004b98:	2310      	movs	r3, #16
 8004b9a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8004ba4:	2360      	movs	r3, #96	; 0x60
 8004ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004bac:	f107 0318 	add.w	r3, r7, #24
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f000 fe19 	bl	80057e8 <HAL_RCC_OscConfig>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d001      	beq.n	8004bc0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8004bbc:	f000 f89b 	bl	8004cf6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004bc0:	230f      	movs	r3, #15
 8004bc2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004bd4:	1d3b      	adds	r3, r7, #4
 8004bd6:	2100      	movs	r1, #0
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f001 fadb 	bl	8006194 <HAL_RCC_ClockConfig>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d001      	beq.n	8004be8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8004be4:	f000 f887 	bl	8004cf6 <Error_Handler>
  }
}
 8004be8:	bf00      	nop
 8004bea:	3760      	adds	r7, #96	; 0x60
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b088      	sub	sp, #32
 8004bf4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bf6:	f107 030c 	add.w	r3, r7, #12
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	601a      	str	r2, [r3, #0]
 8004bfe:	605a      	str	r2, [r3, #4]
 8004c00:	609a      	str	r2, [r3, #8]
 8004c02:	60da      	str	r2, [r3, #12]
 8004c04:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c06:	4b31      	ldr	r3, [pc, #196]	; (8004ccc <MX_GPIO_Init+0xdc>)
 8004c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c0a:	4a30      	ldr	r2, [pc, #192]	; (8004ccc <MX_GPIO_Init+0xdc>)
 8004c0c:	f043 0304 	orr.w	r3, r3, #4
 8004c10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c12:	4b2e      	ldr	r3, [pc, #184]	; (8004ccc <MX_GPIO_Init+0xdc>)
 8004c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c16:	f003 0304 	and.w	r3, r3, #4
 8004c1a:	60bb      	str	r3, [r7, #8]
 8004c1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c1e:	4b2b      	ldr	r3, [pc, #172]	; (8004ccc <MX_GPIO_Init+0xdc>)
 8004c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c22:	4a2a      	ldr	r2, [pc, #168]	; (8004ccc <MX_GPIO_Init+0xdc>)
 8004c24:	f043 0301 	orr.w	r3, r3, #1
 8004c28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c2a:	4b28      	ldr	r3, [pc, #160]	; (8004ccc <MX_GPIO_Init+0xdc>)
 8004c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	607b      	str	r3, [r7, #4]
 8004c34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c36:	4b25      	ldr	r3, [pc, #148]	; (8004ccc <MX_GPIO_Init+0xdc>)
 8004c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c3a:	4a24      	ldr	r2, [pc, #144]	; (8004ccc <MX_GPIO_Init+0xdc>)
 8004c3c:	f043 0302 	orr.w	r3, r3, #2
 8004c40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c42:	4b22      	ldr	r3, [pc, #136]	; (8004ccc <MX_GPIO_Init+0xdc>)
 8004c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c46:	f003 0302 	and.w	r3, r3, #2
 8004c4a:	603b      	str	r3, [r7, #0]
 8004c4c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8004c4e:	2200      	movs	r2, #0
 8004c50:	2180      	movs	r1, #128	; 0x80
 8004c52:	481f      	ldr	r0, [pc, #124]	; (8004cd0 <MX_GPIO_Init+0xe0>)
 8004c54:	f000 fd08 	bl	8005668 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c5e:	481d      	ldr	r0, [pc, #116]	; (8004cd4 <MX_GPIO_Init+0xe4>)
 8004c60:	f000 fd02 	bl	8005668 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8004c64:	2200      	movs	r2, #0
 8004c66:	2180      	movs	r1, #128	; 0x80
 8004c68:	481b      	ldr	r0, [pc, #108]	; (8004cd8 <MX_GPIO_Init+0xe8>)
 8004c6a:	f000 fcfd 	bl	8005668 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004c6e:	2380      	movs	r3, #128	; 0x80
 8004c70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c72:	2301      	movs	r3, #1
 8004c74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c76:	2300      	movs	r3, #0
 8004c78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c7e:	f107 030c 	add.w	r3, r7, #12
 8004c82:	4619      	mov	r1, r3
 8004c84:	4812      	ldr	r0, [pc, #72]	; (8004cd0 <MX_GPIO_Init+0xe0>)
 8004c86:	f000 fb6f 	bl	8005368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004c8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c90:	2301      	movs	r3, #1
 8004c92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c94:	2300      	movs	r3, #0
 8004c96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c9c:	f107 030c 	add.w	r3, r7, #12
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	480c      	ldr	r0, [pc, #48]	; (8004cd4 <MX_GPIO_Init+0xe4>)
 8004ca4:	f000 fb60 	bl	8005368 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004ca8:	2380      	movs	r3, #128	; 0x80
 8004caa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cac:	2301      	movs	r3, #1
 8004cae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cb8:	f107 030c 	add.w	r3, r7, #12
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	4806      	ldr	r0, [pc, #24]	; (8004cd8 <MX_GPIO_Init+0xe8>)
 8004cc0:	f000 fb52 	bl	8005368 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004cc4:	bf00      	nop
 8004cc6:	3720      	adds	r7, #32
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	40021000 	.word	0x40021000
 8004cd0:	42020800 	.word	0x42020800
 8004cd4:	42020000 	.word	0x42020000
 8004cd8:	42020400 	.word	0x42020400

08004cdc <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
	return ITM_SendChar(ch);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7ff fb62 	bl	80043b0 <ITM_SendChar>
 8004cec:	4603      	mov	r3, r0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3708      	adds	r7, #8
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}

08004cf6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004cf6:	b480      	push	{r7}
 8004cf8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004cfa:	b672      	cpsid	i
}
 8004cfc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004cfe:	e7fe      	b.n	8004cfe <Error_Handler+0x8>

08004d00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d06:	4b0f      	ldr	r3, [pc, #60]	; (8004d44 <HAL_MspInit+0x44>)
 8004d08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d0a:	4a0e      	ldr	r2, [pc, #56]	; (8004d44 <HAL_MspInit+0x44>)
 8004d0c:	f043 0301 	orr.w	r3, r3, #1
 8004d10:	6613      	str	r3, [r2, #96]	; 0x60
 8004d12:	4b0c      	ldr	r3, [pc, #48]	; (8004d44 <HAL_MspInit+0x44>)
 8004d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d16:	f003 0301 	and.w	r3, r3, #1
 8004d1a:	607b      	str	r3, [r7, #4]
 8004d1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004d1e:	4b09      	ldr	r3, [pc, #36]	; (8004d44 <HAL_MspInit+0x44>)
 8004d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d22:	4a08      	ldr	r2, [pc, #32]	; (8004d44 <HAL_MspInit+0x44>)
 8004d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d28:	6593      	str	r3, [r2, #88]	; 0x58
 8004d2a:	4b06      	ldr	r3, [pc, #24]	; (8004d44 <HAL_MspInit+0x44>)
 8004d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d32:	603b      	str	r3, [r7, #0]
 8004d34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004d36:	bf00      	nop
 8004d38:	370c      	adds	r7, #12
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	40021000 	.word	0x40021000

08004d48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004d4c:	e7fe      	b.n	8004d4c <NMI_Handler+0x4>

08004d4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d4e:	b480      	push	{r7}
 8004d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d52:	e7fe      	b.n	8004d52 <HardFault_Handler+0x4>

08004d54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004d54:	b480      	push	{r7}
 8004d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004d58:	e7fe      	b.n	8004d58 <MemManage_Handler+0x4>

08004d5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004d5e:	e7fe      	b.n	8004d5e <BusFault_Handler+0x4>

08004d60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004d60:	b480      	push	{r7}
 8004d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004d64:	e7fe      	b.n	8004d64 <UsageFault_Handler+0x4>

08004d66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004d66:	b480      	push	{r7}
 8004d68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004d6a:	bf00      	nop
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004d74:	b480      	push	{r7}
 8004d76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004d78:	bf00      	nop
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr

08004d82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004d82:	b480      	push	{r7}
 8004d84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004d86:	bf00      	nop
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004d94:	f000 f9e4 	bl	8005160 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004d98:	bf00      	nop
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b086      	sub	sp, #24
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004da8:	2300      	movs	r3, #0
 8004daa:	617b      	str	r3, [r7, #20]
 8004dac:	e00a      	b.n	8004dc4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004dae:	f3af 8000 	nop.w
 8004db2:	4601      	mov	r1, r0
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	1c5a      	adds	r2, r3, #1
 8004db8:	60ba      	str	r2, [r7, #8]
 8004dba:	b2ca      	uxtb	r2, r1
 8004dbc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	617b      	str	r3, [r7, #20]
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	dbf0      	blt.n	8004dae <_read+0x12>
  }

  return len;
 8004dcc:	687b      	ldr	r3, [r7, #4]
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3718      	adds	r7, #24
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}

08004dd6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004dd6:	b580      	push	{r7, lr}
 8004dd8:	b086      	sub	sp, #24
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	60f8      	str	r0, [r7, #12]
 8004dde:	60b9      	str	r1, [r7, #8]
 8004de0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004de2:	2300      	movs	r3, #0
 8004de4:	617b      	str	r3, [r7, #20]
 8004de6:	e009      	b.n	8004dfc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	1c5a      	adds	r2, r3, #1
 8004dec:	60ba      	str	r2, [r7, #8]
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	4618      	mov	r0, r3
 8004df2:	f7ff ff73 	bl	8004cdc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	3301      	adds	r3, #1
 8004dfa:	617b      	str	r3, [r7, #20]
 8004dfc:	697a      	ldr	r2, [r7, #20]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	dbf1      	blt.n	8004de8 <_write+0x12>
  }
  return len;
 8004e04:	687b      	ldr	r3, [r7, #4]
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3718      	adds	r7, #24
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}

08004e0e <_close>:

int _close(int file)
{
 8004e0e:	b480      	push	{r7}
 8004e10:	b083      	sub	sp, #12
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004e16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	370c      	adds	r7, #12
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr

08004e26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004e26:	b480      	push	{r7}
 8004e28:	b083      	sub	sp, #12
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
 8004e2e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004e36:	605a      	str	r2, [r3, #4]
  return 0;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	370c      	adds	r7, #12
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr

08004e46 <_isatty>:

int _isatty(int file)
{
 8004e46:	b480      	push	{r7}
 8004e48:	b083      	sub	sp, #12
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004e4e:	2301      	movs	r3, #1
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b085      	sub	sp, #20
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3714      	adds	r7, #20
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
	...

08004e78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b086      	sub	sp, #24
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004e80:	4a14      	ldr	r2, [pc, #80]	; (8004ed4 <_sbrk+0x5c>)
 8004e82:	4b15      	ldr	r3, [pc, #84]	; (8004ed8 <_sbrk+0x60>)
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004e8c:	4b13      	ldr	r3, [pc, #76]	; (8004edc <_sbrk+0x64>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d102      	bne.n	8004e9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004e94:	4b11      	ldr	r3, [pc, #68]	; (8004edc <_sbrk+0x64>)
 8004e96:	4a12      	ldr	r2, [pc, #72]	; (8004ee0 <_sbrk+0x68>)
 8004e98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004e9a:	4b10      	ldr	r3, [pc, #64]	; (8004edc <_sbrk+0x64>)
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d207      	bcs.n	8004eb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004ea8:	f001 fd10 	bl	80068cc <__errno>
 8004eac:	4603      	mov	r3, r0
 8004eae:	220c      	movs	r2, #12
 8004eb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004eb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004eb6:	e009      	b.n	8004ecc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004eb8:	4b08      	ldr	r3, [pc, #32]	; (8004edc <_sbrk+0x64>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004ebe:	4b07      	ldr	r3, [pc, #28]	; (8004edc <_sbrk+0x64>)
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	4a05      	ldr	r2, [pc, #20]	; (8004edc <_sbrk+0x64>)
 8004ec8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004eca:	68fb      	ldr	r3, [r7, #12]
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3718      	adds	r7, #24
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	20030000 	.word	0x20030000
 8004ed8:	00000400 	.word	0x00000400
 8004edc:	200000e4 	.word	0x200000e4
 8004ee0:	20000238 	.word	0x20000238

08004ee4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004ee8:	4b06      	ldr	r3, [pc, #24]	; (8004f04 <SystemInit+0x20>)
 8004eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eee:	4a05      	ldr	r2, [pc, #20]	; (8004f04 <SystemInit+0x20>)
 8004ef0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ef4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8004ef8:	bf00      	nop
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop
 8004f04:	e000ed00 	.word	0xe000ed00

08004f08 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b087      	sub	sp, #28
 8004f0c:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8004f0e:	4b4f      	ldr	r3, [pc, #316]	; (800504c <SystemCoreClockUpdate+0x144>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0308 	and.w	r3, r3, #8
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d107      	bne.n	8004f2a <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8004f1a:	4b4c      	ldr	r3, [pc, #304]	; (800504c <SystemCoreClockUpdate+0x144>)
 8004f1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f20:	0a1b      	lsrs	r3, r3, #8
 8004f22:	f003 030f 	and.w	r3, r3, #15
 8004f26:	617b      	str	r3, [r7, #20]
 8004f28:	e005      	b.n	8004f36 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8004f2a:	4b48      	ldr	r3, [pc, #288]	; (800504c <SystemCoreClockUpdate+0x144>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	091b      	lsrs	r3, r3, #4
 8004f30:	f003 030f 	and.w	r3, r3, #15
 8004f34:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8004f36:	4a46      	ldr	r2, [pc, #280]	; (8005050 <SystemCoreClockUpdate+0x148>)
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f3e:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f40:	4b42      	ldr	r3, [pc, #264]	; (800504c <SystemCoreClockUpdate+0x144>)
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	f003 030c 	and.w	r3, r3, #12
 8004f48:	2b0c      	cmp	r3, #12
 8004f4a:	d866      	bhi.n	800501a <SystemCoreClockUpdate+0x112>
 8004f4c:	a201      	add	r2, pc, #4	; (adr r2, 8004f54 <SystemCoreClockUpdate+0x4c>)
 8004f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f52:	bf00      	nop
 8004f54:	08004f89 	.word	0x08004f89
 8004f58:	0800501b 	.word	0x0800501b
 8004f5c:	0800501b 	.word	0x0800501b
 8004f60:	0800501b 	.word	0x0800501b
 8004f64:	08004f91 	.word	0x08004f91
 8004f68:	0800501b 	.word	0x0800501b
 8004f6c:	0800501b 	.word	0x0800501b
 8004f70:	0800501b 	.word	0x0800501b
 8004f74:	08004f99 	.word	0x08004f99
 8004f78:	0800501b 	.word	0x0800501b
 8004f7c:	0800501b 	.word	0x0800501b
 8004f80:	0800501b 	.word	0x0800501b
 8004f84:	08004fa1 	.word	0x08004fa1
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8004f88:	4a32      	ldr	r2, [pc, #200]	; (8005054 <SystemCoreClockUpdate+0x14c>)
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	6013      	str	r3, [r2, #0]
      break;
 8004f8e:	e048      	b.n	8005022 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8004f90:	4b30      	ldr	r3, [pc, #192]	; (8005054 <SystemCoreClockUpdate+0x14c>)
 8004f92:	4a31      	ldr	r2, [pc, #196]	; (8005058 <SystemCoreClockUpdate+0x150>)
 8004f94:	601a      	str	r2, [r3, #0]
      break;
 8004f96:	e044      	b.n	8005022 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8004f98:	4b2e      	ldr	r3, [pc, #184]	; (8005054 <SystemCoreClockUpdate+0x14c>)
 8004f9a:	4a2f      	ldr	r2, [pc, #188]	; (8005058 <SystemCoreClockUpdate+0x150>)
 8004f9c:	601a      	str	r2, [r3, #0]
      break;
 8004f9e:	e040      	b.n	8005022 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004fa0:	4b2a      	ldr	r3, [pc, #168]	; (800504c <SystemCoreClockUpdate+0x144>)
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	f003 0303 	and.w	r3, r3, #3
 8004fa8:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8004faa:	4b28      	ldr	r3, [pc, #160]	; (800504c <SystemCoreClockUpdate+0x144>)
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	091b      	lsrs	r3, r3, #4
 8004fb0:	f003 030f 	and.w	r3, r3, #15
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	60bb      	str	r3, [r7, #8]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d003      	beq.n	8004fc6 <SystemCoreClockUpdate+0xbe>
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2b03      	cmp	r3, #3
 8004fc2:	d006      	beq.n	8004fd2 <SystemCoreClockUpdate+0xca>
 8004fc4:	e00b      	b.n	8004fde <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8004fc6:	4a24      	ldr	r2, [pc, #144]	; (8005058 <SystemCoreClockUpdate+0x150>)
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fce:	613b      	str	r3, [r7, #16]
          break;
 8004fd0:	e00b      	b.n	8004fea <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8004fd2:	4a21      	ldr	r2, [pc, #132]	; (8005058 <SystemCoreClockUpdate+0x150>)
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fda:	613b      	str	r3, [r7, #16]
          break;
 8004fdc:	e005      	b.n	8004fea <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8004fde:	697a      	ldr	r2, [r7, #20]
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fe6:	613b      	str	r3, [r7, #16]
          break;
 8004fe8:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8004fea:	4b18      	ldr	r3, [pc, #96]	; (800504c <SystemCoreClockUpdate+0x144>)
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	0a1b      	lsrs	r3, r3, #8
 8004ff0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	fb02 f303 	mul.w	r3, r2, r3
 8004ffa:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8004ffc:	4b13      	ldr	r3, [pc, #76]	; (800504c <SystemCoreClockUpdate+0x144>)
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	0e5b      	lsrs	r3, r3, #25
 8005002:	f003 0303 	and.w	r3, r3, #3
 8005006:	3301      	adds	r3, #1
 8005008:	005b      	lsls	r3, r3, #1
 800500a:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 800500c:	693a      	ldr	r2, [r7, #16]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	fbb2 f3f3 	udiv	r3, r2, r3
 8005014:	4a0f      	ldr	r2, [pc, #60]	; (8005054 <SystemCoreClockUpdate+0x14c>)
 8005016:	6013      	str	r3, [r2, #0]
      break;
 8005018:	e003      	b.n	8005022 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 800501a:	4a0e      	ldr	r2, [pc, #56]	; (8005054 <SystemCoreClockUpdate+0x14c>)
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	6013      	str	r3, [r2, #0]
      break;
 8005020:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8005022:	4b0a      	ldr	r3, [pc, #40]	; (800504c <SystemCoreClockUpdate+0x144>)
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	091b      	lsrs	r3, r3, #4
 8005028:	f003 030f 	and.w	r3, r3, #15
 800502c:	4a0b      	ldr	r2, [pc, #44]	; (800505c <SystemCoreClockUpdate+0x154>)
 800502e:	5cd3      	ldrb	r3, [r2, r3]
 8005030:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8005032:	4b08      	ldr	r3, [pc, #32]	; (8005054 <SystemCoreClockUpdate+0x14c>)
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	fa22 f303 	lsr.w	r3, r2, r3
 800503c:	4a05      	ldr	r2, [pc, #20]	; (8005054 <SystemCoreClockUpdate+0x14c>)
 800503e:	6013      	str	r3, [r2, #0]
}
 8005040:	bf00      	nop
 8005042:	371c      	adds	r7, #28
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr
 800504c:	40021000 	.word	0x40021000
 8005050:	080076e8 	.word	0x080076e8
 8005054:	20000060 	.word	0x20000060
 8005058:	00f42400 	.word	0x00f42400
 800505c:	080076d8 	.word	0x080076d8

08005060 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8005060:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005098 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005064:	f7ff ff3e 	bl	8004ee4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8005068:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800506a:	e003      	b.n	8005074 <LoopCopyDataInit>

0800506c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800506c:	4b0b      	ldr	r3, [pc, #44]	; (800509c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800506e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005070:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8005072:	3104      	adds	r1, #4

08005074 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005074:	480a      	ldr	r0, [pc, #40]	; (80050a0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8005076:	4b0b      	ldr	r3, [pc, #44]	; (80050a4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8005078:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800507a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800507c:	d3f6      	bcc.n	800506c <CopyDataInit>
	ldr	r2, =_sbss
 800507e:	4a0a      	ldr	r2, [pc, #40]	; (80050a8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8005080:	e002      	b.n	8005088 <LoopFillZerobss>

08005082 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8005082:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8005084:	f842 3b04 	str.w	r3, [r2], #4

08005088 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8005088:	4b08      	ldr	r3, [pc, #32]	; (80050ac <LoopForever+0x16>)
	cmp	r2, r3
 800508a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800508c:	d3f9      	bcc.n	8005082 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800508e:	f001 fc23 	bl	80068d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005092:	f7ff fc9d 	bl	80049d0 <main>

08005096 <LoopForever>:

LoopForever:
    b LoopForever
 8005096:	e7fe      	b.n	8005096 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8005098:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 800509c:	08007764 	.word	0x08007764
	ldr	r0, =_sdata
 80050a0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80050a4:	200000c8 	.word	0x200000c8
	ldr	r2, =_sbss
 80050a8:	200000c8 	.word	0x200000c8
	ldr	r3, = _ebss
 80050ac:	20000238 	.word	0x20000238

080050b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80050b0:	e7fe      	b.n	80050b0 <ADC1_2_IRQHandler>

080050b2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80050b2:	b580      	push	{r7, lr}
 80050b4:	b082      	sub	sp, #8
 80050b6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80050b8:	2300      	movs	r3, #0
 80050ba:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80050bc:	2004      	movs	r0, #4
 80050be:	f000 f921 	bl	8005304 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 80050c2:	f7ff ff21 	bl	8004f08 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80050c6:	2007      	movs	r0, #7
 80050c8:	f000 f80e 	bl	80050e8 <HAL_InitTick>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d002      	beq.n	80050d8 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	71fb      	strb	r3, [r7, #7]
 80050d6:	e001      	b.n	80050dc <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80050d8:	f7ff fe12 	bl	8004d00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80050dc:	79fb      	ldrb	r3, [r7, #7]
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3708      	adds	r7, #8
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
	...

080050e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80050f0:	2300      	movs	r3, #0
 80050f2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80050f4:	4b17      	ldr	r3, [pc, #92]	; (8005154 <HAL_InitTick+0x6c>)
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d023      	beq.n	8005144 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80050fc:	4b16      	ldr	r3, [pc, #88]	; (8005158 <HAL_InitTick+0x70>)
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	4b14      	ldr	r3, [pc, #80]	; (8005154 <HAL_InitTick+0x6c>)
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	4619      	mov	r1, r3
 8005106:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800510a:	fbb3 f3f1 	udiv	r3, r3, r1
 800510e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005112:	4618      	mov	r0, r3
 8005114:	f000 f91b 	bl	800534e <HAL_SYSTICK_Config>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d10f      	bne.n	800513e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2b07      	cmp	r3, #7
 8005122:	d809      	bhi.n	8005138 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005124:	2200      	movs	r2, #0
 8005126:	6879      	ldr	r1, [r7, #4]
 8005128:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800512c:	f000 f8f5 	bl	800531a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005130:	4a0a      	ldr	r2, [pc, #40]	; (800515c <HAL_InitTick+0x74>)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6013      	str	r3, [r2, #0]
 8005136:	e007      	b.n	8005148 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	73fb      	strb	r3, [r7, #15]
 800513c:	e004      	b.n	8005148 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	73fb      	strb	r3, [r7, #15]
 8005142:	e001      	b.n	8005148 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005148:	7bfb      	ldrb	r3, [r7, #15]
}
 800514a:	4618      	mov	r0, r3
 800514c:	3710      	adds	r7, #16
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	20000068 	.word	0x20000068
 8005158:	20000060 	.word	0x20000060
 800515c:	20000064 	.word	0x20000064

08005160 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005160:	b480      	push	{r7}
 8005162:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005164:	4b06      	ldr	r3, [pc, #24]	; (8005180 <HAL_IncTick+0x20>)
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	461a      	mov	r2, r3
 800516a:	4b06      	ldr	r3, [pc, #24]	; (8005184 <HAL_IncTick+0x24>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4413      	add	r3, r2
 8005170:	4a04      	ldr	r2, [pc, #16]	; (8005184 <HAL_IncTick+0x24>)
 8005172:	6013      	str	r3, [r2, #0]
}
 8005174:	bf00      	nop
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr
 800517e:	bf00      	nop
 8005180:	20000068 	.word	0x20000068
 8005184:	200000e8 	.word	0x200000e8

08005188 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005188:	b480      	push	{r7}
 800518a:	af00      	add	r7, sp, #0
  return uwTick;
 800518c:	4b03      	ldr	r3, [pc, #12]	; (800519c <HAL_GetTick+0x14>)
 800518e:	681b      	ldr	r3, [r3, #0]
}
 8005190:	4618      	mov	r0, r3
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr
 800519a:	bf00      	nop
 800519c:	200000e8 	.word	0x200000e8

080051a0 <__NVIC_SetPriorityGrouping>:
{
 80051a0:	b480      	push	{r7}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f003 0307 	and.w	r3, r3, #7
 80051ae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80051b0:	4b0c      	ldr	r3, [pc, #48]	; (80051e4 <__NVIC_SetPriorityGrouping+0x44>)
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80051b6:	68ba      	ldr	r2, [r7, #8]
 80051b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80051bc:	4013      	ands	r3, r2
 80051be:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80051c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80051cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80051d2:	4a04      	ldr	r2, [pc, #16]	; (80051e4 <__NVIC_SetPriorityGrouping+0x44>)
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	60d3      	str	r3, [r2, #12]
}
 80051d8:	bf00      	nop
 80051da:	3714      	adds	r7, #20
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr
 80051e4:	e000ed00 	.word	0xe000ed00

080051e8 <__NVIC_GetPriorityGrouping>:
{
 80051e8:	b480      	push	{r7}
 80051ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80051ec:	4b04      	ldr	r3, [pc, #16]	; (8005200 <__NVIC_GetPriorityGrouping+0x18>)
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	0a1b      	lsrs	r3, r3, #8
 80051f2:	f003 0307 	and.w	r3, r3, #7
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr
 8005200:	e000ed00 	.word	0xe000ed00

08005204 <__NVIC_SetPriority>:
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	4603      	mov	r3, r0
 800520c:	6039      	str	r1, [r7, #0]
 800520e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005214:	2b00      	cmp	r3, #0
 8005216:	db0a      	blt.n	800522e <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	b2da      	uxtb	r2, r3
 800521c:	490c      	ldr	r1, [pc, #48]	; (8005250 <__NVIC_SetPriority+0x4c>)
 800521e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005222:	0152      	lsls	r2, r2, #5
 8005224:	b2d2      	uxtb	r2, r2
 8005226:	440b      	add	r3, r1
 8005228:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800522c:	e00a      	b.n	8005244 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	b2da      	uxtb	r2, r3
 8005232:	4908      	ldr	r1, [pc, #32]	; (8005254 <__NVIC_SetPriority+0x50>)
 8005234:	79fb      	ldrb	r3, [r7, #7]
 8005236:	f003 030f 	and.w	r3, r3, #15
 800523a:	3b04      	subs	r3, #4
 800523c:	0152      	lsls	r2, r2, #5
 800523e:	b2d2      	uxtb	r2, r2
 8005240:	440b      	add	r3, r1
 8005242:	761a      	strb	r2, [r3, #24]
}
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr
 8005250:	e000e100 	.word	0xe000e100
 8005254:	e000ed00 	.word	0xe000ed00

08005258 <NVIC_EncodePriority>:
{
 8005258:	b480      	push	{r7}
 800525a:	b089      	sub	sp, #36	; 0x24
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f003 0307 	and.w	r3, r3, #7
 800526a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	f1c3 0307 	rsb	r3, r3, #7
 8005272:	2b03      	cmp	r3, #3
 8005274:	bf28      	it	cs
 8005276:	2303      	movcs	r3, #3
 8005278:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	3303      	adds	r3, #3
 800527e:	2b06      	cmp	r3, #6
 8005280:	d902      	bls.n	8005288 <NVIC_EncodePriority+0x30>
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	3b04      	subs	r3, #4
 8005286:	e000      	b.n	800528a <NVIC_EncodePriority+0x32>
 8005288:	2300      	movs	r3, #0
 800528a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800528c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	fa02 f303 	lsl.w	r3, r2, r3
 8005296:	43da      	mvns	r2, r3
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	401a      	ands	r2, r3
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80052a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	fa01 f303 	lsl.w	r3, r1, r3
 80052aa:	43d9      	mvns	r1, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052b0:	4313      	orrs	r3, r2
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3724      	adds	r7, #36	; 0x24
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
	...

080052c0 <SysTick_Config>:
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	3b01      	subs	r3, #1
 80052cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80052d0:	d301      	bcc.n	80052d6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80052d2:	2301      	movs	r3, #1
 80052d4:	e00f      	b.n	80052f6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80052d6:	4a0a      	ldr	r2, [pc, #40]	; (8005300 <SysTick_Config+0x40>)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	3b01      	subs	r3, #1
 80052dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80052de:	2107      	movs	r1, #7
 80052e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80052e4:	f7ff ff8e 	bl	8005204 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80052e8:	4b05      	ldr	r3, [pc, #20]	; (8005300 <SysTick_Config+0x40>)
 80052ea:	2200      	movs	r2, #0
 80052ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80052ee:	4b04      	ldr	r3, [pc, #16]	; (8005300 <SysTick_Config+0x40>)
 80052f0:	2207      	movs	r2, #7
 80052f2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3708      	adds	r7, #8
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	e000e010 	.word	0xe000e010

08005304 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f7ff ff47 	bl	80051a0 <__NVIC_SetPriorityGrouping>
}
 8005312:	bf00      	nop
 8005314:	3708      	adds	r7, #8
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}

0800531a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800531a:	b580      	push	{r7, lr}
 800531c:	b086      	sub	sp, #24
 800531e:	af00      	add	r7, sp, #0
 8005320:	4603      	mov	r3, r0
 8005322:	60b9      	str	r1, [r7, #8]
 8005324:	607a      	str	r2, [r7, #4]
 8005326:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005328:	f7ff ff5e 	bl	80051e8 <__NVIC_GetPriorityGrouping>
 800532c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	68b9      	ldr	r1, [r7, #8]
 8005332:	6978      	ldr	r0, [r7, #20]
 8005334:	f7ff ff90 	bl	8005258 <NVIC_EncodePriority>
 8005338:	4602      	mov	r2, r0
 800533a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800533e:	4611      	mov	r1, r2
 8005340:	4618      	mov	r0, r3
 8005342:	f7ff ff5f 	bl	8005204 <__NVIC_SetPriority>
}
 8005346:	bf00      	nop
 8005348:	3718      	adds	r7, #24
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}

0800534e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800534e:	b580      	push	{r7, lr}
 8005350:	b082      	sub	sp, #8
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f7ff ffb2 	bl	80052c0 <SysTick_Config>
 800535c:	4603      	mov	r3, r0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3708      	adds	r7, #8
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
	...

08005368 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005368:	b480      	push	{r7}
 800536a:	b087      	sub	sp, #28
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8005372:	2300      	movs	r3, #0
 8005374:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005376:	e158      	b.n	800562a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	2101      	movs	r1, #1
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	fa01 f303 	lsl.w	r3, r1, r3
 8005384:	4013      	ands	r3, r2
 8005386:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2b00      	cmp	r3, #0
 800538c:	f000 814a 	beq.w	8005624 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	f003 0303 	and.w	r3, r3, #3
 8005398:	2b01      	cmp	r3, #1
 800539a:	d005      	beq.n	80053a8 <HAL_GPIO_Init+0x40>
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	f003 0303 	and.w	r3, r3, #3
 80053a4:	2b02      	cmp	r3, #2
 80053a6:	d130      	bne.n	800540a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	005b      	lsls	r3, r3, #1
 80053b2:	2203      	movs	r2, #3
 80053b4:	fa02 f303 	lsl.w	r3, r2, r3
 80053b8:	43db      	mvns	r3, r3
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	4013      	ands	r3, r2
 80053be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	68da      	ldr	r2, [r3, #12]
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	005b      	lsls	r3, r3, #1
 80053c8:	fa02 f303 	lsl.w	r3, r2, r3
 80053cc:	693a      	ldr	r2, [r7, #16]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	693a      	ldr	r2, [r7, #16]
 80053d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80053de:	2201      	movs	r2, #1
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	fa02 f303 	lsl.w	r3, r2, r3
 80053e6:	43db      	mvns	r3, r3
 80053e8:	693a      	ldr	r2, [r7, #16]
 80053ea:	4013      	ands	r3, r2
 80053ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	091b      	lsrs	r3, r3, #4
 80053f4:	f003 0201 	and.w	r2, r3, #1
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	fa02 f303 	lsl.w	r3, r2, r3
 80053fe:	693a      	ldr	r2, [r7, #16]
 8005400:	4313      	orrs	r3, r2
 8005402:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	693a      	ldr	r2, [r7, #16]
 8005408:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f003 0303 	and.w	r3, r3, #3
 8005412:	2b03      	cmp	r3, #3
 8005414:	d017      	beq.n	8005446 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	005b      	lsls	r3, r3, #1
 8005420:	2203      	movs	r2, #3
 8005422:	fa02 f303 	lsl.w	r3, r2, r3
 8005426:	43db      	mvns	r3, r3
 8005428:	693a      	ldr	r2, [r7, #16]
 800542a:	4013      	ands	r3, r2
 800542c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	689a      	ldr	r2, [r3, #8]
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	005b      	lsls	r3, r3, #1
 8005436:	fa02 f303 	lsl.w	r3, r2, r3
 800543a:	693a      	ldr	r2, [r7, #16]
 800543c:	4313      	orrs	r3, r2
 800543e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	693a      	ldr	r2, [r7, #16]
 8005444:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	f003 0303 	and.w	r3, r3, #3
 800544e:	2b02      	cmp	r3, #2
 8005450:	d123      	bne.n	800549a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	08da      	lsrs	r2, r3, #3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	3208      	adds	r2, #8
 800545a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800545e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	f003 0307 	and.w	r3, r3, #7
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	220f      	movs	r2, #15
 800546a:	fa02 f303 	lsl.w	r3, r2, r3
 800546e:	43db      	mvns	r3, r3
 8005470:	693a      	ldr	r2, [r7, #16]
 8005472:	4013      	ands	r3, r2
 8005474:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	691a      	ldr	r2, [r3, #16]
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	f003 0307 	and.w	r3, r3, #7
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	fa02 f303 	lsl.w	r3, r2, r3
 8005486:	693a      	ldr	r2, [r7, #16]
 8005488:	4313      	orrs	r3, r2
 800548a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	08da      	lsrs	r2, r3, #3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	3208      	adds	r2, #8
 8005494:	6939      	ldr	r1, [r7, #16]
 8005496:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	005b      	lsls	r3, r3, #1
 80054a4:	2203      	movs	r2, #3
 80054a6:	fa02 f303 	lsl.w	r3, r2, r3
 80054aa:	43db      	mvns	r3, r3
 80054ac:	693a      	ldr	r2, [r7, #16]
 80054ae:	4013      	ands	r3, r2
 80054b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	f003 0203 	and.w	r2, r3, #3
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	005b      	lsls	r3, r3, #1
 80054be:	fa02 f303 	lsl.w	r3, r2, r3
 80054c2:	693a      	ldr	r2, [r7, #16]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	693a      	ldr	r2, [r7, #16]
 80054cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	f000 80a4 	beq.w	8005624 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 80054dc:	4a5a      	ldr	r2, [pc, #360]	; (8005648 <HAL_GPIO_Init+0x2e0>)
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	089b      	lsrs	r3, r3, #2
 80054e2:	3318      	adds	r3, #24
 80054e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054e8:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	f003 0303 	and.w	r3, r3, #3
 80054f0:	00db      	lsls	r3, r3, #3
 80054f2:	220f      	movs	r2, #15
 80054f4:	fa02 f303 	lsl.w	r3, r2, r3
 80054f8:	43db      	mvns	r3, r3
 80054fa:	693a      	ldr	r2, [r7, #16]
 80054fc:	4013      	ands	r3, r2
 80054fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a52      	ldr	r2, [pc, #328]	; (800564c <HAL_GPIO_Init+0x2e4>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d025      	beq.n	8005554 <HAL_GPIO_Init+0x1ec>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a51      	ldr	r2, [pc, #324]	; (8005650 <HAL_GPIO_Init+0x2e8>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d01f      	beq.n	8005550 <HAL_GPIO_Init+0x1e8>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a50      	ldr	r2, [pc, #320]	; (8005654 <HAL_GPIO_Init+0x2ec>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d019      	beq.n	800554c <HAL_GPIO_Init+0x1e4>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a4f      	ldr	r2, [pc, #316]	; (8005658 <HAL_GPIO_Init+0x2f0>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d013      	beq.n	8005548 <HAL_GPIO_Init+0x1e0>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a4e      	ldr	r2, [pc, #312]	; (800565c <HAL_GPIO_Init+0x2f4>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d00d      	beq.n	8005544 <HAL_GPIO_Init+0x1dc>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a4d      	ldr	r2, [pc, #308]	; (8005660 <HAL_GPIO_Init+0x2f8>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d007      	beq.n	8005540 <HAL_GPIO_Init+0x1d8>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a4c      	ldr	r2, [pc, #304]	; (8005664 <HAL_GPIO_Init+0x2fc>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d101      	bne.n	800553c <HAL_GPIO_Init+0x1d4>
 8005538:	2306      	movs	r3, #6
 800553a:	e00c      	b.n	8005556 <HAL_GPIO_Init+0x1ee>
 800553c:	2307      	movs	r3, #7
 800553e:	e00a      	b.n	8005556 <HAL_GPIO_Init+0x1ee>
 8005540:	2305      	movs	r3, #5
 8005542:	e008      	b.n	8005556 <HAL_GPIO_Init+0x1ee>
 8005544:	2304      	movs	r3, #4
 8005546:	e006      	b.n	8005556 <HAL_GPIO_Init+0x1ee>
 8005548:	2303      	movs	r3, #3
 800554a:	e004      	b.n	8005556 <HAL_GPIO_Init+0x1ee>
 800554c:	2302      	movs	r3, #2
 800554e:	e002      	b.n	8005556 <HAL_GPIO_Init+0x1ee>
 8005550:	2301      	movs	r3, #1
 8005552:	e000      	b.n	8005556 <HAL_GPIO_Init+0x1ee>
 8005554:	2300      	movs	r3, #0
 8005556:	697a      	ldr	r2, [r7, #20]
 8005558:	f002 0203 	and.w	r2, r2, #3
 800555c:	00d2      	lsls	r2, r2, #3
 800555e:	4093      	lsls	r3, r2
 8005560:	693a      	ldr	r2, [r7, #16]
 8005562:	4313      	orrs	r3, r2
 8005564:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8005566:	4938      	ldr	r1, [pc, #224]	; (8005648 <HAL_GPIO_Init+0x2e0>)
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	089b      	lsrs	r3, r3, #2
 800556c:	3318      	adds	r3, #24
 800556e:	693a      	ldr	r2, [r7, #16]
 8005570:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005574:	4b34      	ldr	r3, [pc, #208]	; (8005648 <HAL_GPIO_Init+0x2e0>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	43db      	mvns	r3, r3
 800557e:	693a      	ldr	r2, [r7, #16]
 8005580:	4013      	ands	r3, r2
 8005582:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d003      	beq.n	8005598 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	4313      	orrs	r3, r2
 8005596:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005598:	4a2b      	ldr	r2, [pc, #172]	; (8005648 <HAL_GPIO_Init+0x2e0>)
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800559e:	4b2a      	ldr	r3, [pc, #168]	; (8005648 <HAL_GPIO_Init+0x2e0>)
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	43db      	mvns	r3, r3
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	4013      	ands	r3, r2
 80055ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d003      	beq.n	80055c2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80055ba:	693a      	ldr	r2, [r7, #16]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4313      	orrs	r3, r2
 80055c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80055c2:	4a21      	ldr	r2, [pc, #132]	; (8005648 <HAL_GPIO_Init+0x2e0>)
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80055c8:	4b1f      	ldr	r3, [pc, #124]	; (8005648 <HAL_GPIO_Init+0x2e0>)
 80055ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	43db      	mvns	r3, r3
 80055d4:	693a      	ldr	r2, [r7, #16]
 80055d6:	4013      	ands	r3, r2
 80055d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d003      	beq.n	80055ee <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80055e6:	693a      	ldr	r2, [r7, #16]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80055ee:	4a16      	ldr	r2, [pc, #88]	; (8005648 <HAL_GPIO_Init+0x2e0>)
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 80055f6:	4b14      	ldr	r3, [pc, #80]	; (8005648 <HAL_GPIO_Init+0x2e0>)
 80055f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	43db      	mvns	r3, r3
 8005602:	693a      	ldr	r2, [r7, #16]
 8005604:	4013      	ands	r3, r2
 8005606:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005610:	2b00      	cmp	r3, #0
 8005612:	d003      	beq.n	800561c <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	4313      	orrs	r3, r2
 800561a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800561c:	4a0a      	ldr	r2, [pc, #40]	; (8005648 <HAL_GPIO_Init+0x2e0>)
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	3301      	adds	r3, #1
 8005628:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	fa22 f303 	lsr.w	r3, r2, r3
 8005634:	2b00      	cmp	r3, #0
 8005636:	f47f ae9f 	bne.w	8005378 <HAL_GPIO_Init+0x10>
  }
}
 800563a:	bf00      	nop
 800563c:	bf00      	nop
 800563e:	371c      	adds	r7, #28
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr
 8005648:	4002f400 	.word	0x4002f400
 800564c:	42020000 	.word	0x42020000
 8005650:	42020400 	.word	0x42020400
 8005654:	42020800 	.word	0x42020800
 8005658:	42020c00 	.word	0x42020c00
 800565c:	42021000 	.word	0x42021000
 8005660:	42021400 	.word	0x42021400
 8005664:	42021800 	.word	0x42021800

08005668 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	460b      	mov	r3, r1
 8005672:	807b      	strh	r3, [r7, #2]
 8005674:	4613      	mov	r3, r2
 8005676:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005678:	787b      	ldrb	r3, [r7, #1]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d003      	beq.n	8005686 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800567e:	887a      	ldrh	r2, [r7, #2]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005684:	e002      	b.n	800568c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005686:	887a      	ldrh	r2, [r7, #2]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800568c:	bf00      	nop
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005698:	b480      	push	{r7}
 800569a:	b085      	sub	sp, #20
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	460b      	mov	r3, r1
 80056a2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	695b      	ldr	r3, [r3, #20]
 80056a8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80056aa:	887a      	ldrh	r2, [r7, #2]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	4013      	ands	r3, r2
 80056b0:	041a      	lsls	r2, r3, #16
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	43d9      	mvns	r1, r3
 80056b6:	887b      	ldrh	r3, [r7, #2]
 80056b8:	400b      	ands	r3, r1
 80056ba:	431a      	orrs	r2, r3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	619a      	str	r2, [r3, #24]
}
 80056c0:	bf00      	nop
 80056c2:	3714      	adds	r7, #20
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80056cc:	b480      	push	{r7}
 80056ce:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80056d0:	4b04      	ldr	r3, [pc, #16]	; (80056e4 <HAL_PWREx_GetVoltageRange+0x18>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80056d8:	4618      	mov	r0, r3
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	40007000 	.word	0x40007000

080056e8 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 80056f0:	4b27      	ldr	r3, [pc, #156]	; (8005790 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80056f8:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 80056fa:	f000 f851 	bl	80057a0 <HAL_PWREx_SMPS_GetEffectiveMode>
 80056fe:	4603      	mov	r3, r0
 8005700:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005704:	d101      	bne.n	800570a <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e03e      	b.n	8005788 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 800570a:	4b21      	ldr	r3, [pc, #132]	; (8005790 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005712:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005716:	d101      	bne.n	800571c <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e035      	b.n	8005788 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800571c:	68ba      	ldr	r2, [r7, #8]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	429a      	cmp	r2, r3
 8005722:	d101      	bne.n	8005728 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8005724:	2300      	movs	r3, #0
 8005726:	e02f      	b.n	8005788 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005728:	4b19      	ldr	r3, [pc, #100]	; (8005790 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8005730:	4917      	ldr	r1, [pc, #92]	; (8005790 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4313      	orrs	r3, r2
 8005736:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8005738:	4b16      	ldr	r3, [pc, #88]	; (8005794 <HAL_PWREx_ControlVoltageScaling+0xac>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	095b      	lsrs	r3, r3, #5
 800573e:	4a16      	ldr	r2, [pc, #88]	; (8005798 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8005740:	fba2 2303 	umull	r2, r3, r2, r3
 8005744:	09db      	lsrs	r3, r3, #7
 8005746:	2232      	movs	r2, #50	; 0x32
 8005748:	fb02 f303 	mul.w	r3, r2, r3
 800574c:	4a13      	ldr	r2, [pc, #76]	; (800579c <HAL_PWREx_ControlVoltageScaling+0xb4>)
 800574e:	fba2 2303 	umull	r2, r3, r2, r3
 8005752:	08db      	lsrs	r3, r3, #3
 8005754:	3301      	adds	r3, #1
 8005756:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005758:	e002      	b.n	8005760 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	3b01      	subs	r3, #1
 800575e:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005760:	4b0b      	ldr	r3, [pc, #44]	; (8005790 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005762:	695b      	ldr	r3, [r3, #20]
 8005764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005768:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800576c:	d102      	bne.n	8005774 <HAL_PWREx_ControlVoltageScaling+0x8c>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d1f2      	bne.n	800575a <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005774:	4b06      	ldr	r3, [pc, #24]	; (8005790 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005776:	695b      	ldr	r3, [r3, #20]
 8005778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800577c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005780:	d101      	bne.n	8005786 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e000      	b.n	8005788 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}
 8005790:	40007000 	.word	0x40007000
 8005794:	20000060 	.word	0x20000060
 8005798:	0a7c5ac5 	.word	0x0a7c5ac5
 800579c:	cccccccd 	.word	0xcccccccd

080057a0 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 80057a6:	4b0f      	ldr	r3, [pc, #60]	; (80057e4 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d003      	beq.n	80057be <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 80057b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057ba:	607b      	str	r3, [r7, #4]
 80057bc:	e00a      	b.n	80057d4 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d103      	bne.n	80057d0 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 80057c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057cc:	607b      	str	r3, [r7, #4]
 80057ce:	e001      	b.n	80057d4 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 80057d0:	2300      	movs	r3, #0
 80057d2:	607b      	str	r3, [r7, #4]
  }

  return mode;
 80057d4:	687b      	ldr	r3, [r7, #4]
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	370c      	adds	r7, #12
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	40007000 	.word	0x40007000

080057e8 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b088      	sub	sp, #32
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d102      	bne.n	80057fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	f000 bcc2 	b.w	8006180 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057fc:	4b99      	ldr	r3, [pc, #612]	; (8005a64 <HAL_RCC_OscConfig+0x27c>)
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	f003 030c 	and.w	r3, r3, #12
 8005804:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005806:	4b97      	ldr	r3, [pc, #604]	; (8005a64 <HAL_RCC_OscConfig+0x27c>)
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	f003 0303 	and.w	r3, r3, #3
 800580e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 0310 	and.w	r3, r3, #16
 8005818:	2b00      	cmp	r3, #0
 800581a:	f000 80e9 	beq.w	80059f0 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d006      	beq.n	8005832 <HAL_RCC_OscConfig+0x4a>
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	2b0c      	cmp	r3, #12
 8005828:	f040 8083 	bne.w	8005932 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	2b01      	cmp	r3, #1
 8005830:	d17f      	bne.n	8005932 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005832:	4b8c      	ldr	r3, [pc, #560]	; (8005a64 <HAL_RCC_OscConfig+0x27c>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 0302 	and.w	r3, r3, #2
 800583a:	2b00      	cmp	r3, #0
 800583c:	d006      	beq.n	800584c <HAL_RCC_OscConfig+0x64>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	69db      	ldr	r3, [r3, #28]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d102      	bne.n	800584c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	f000 bc9a 	b.w	8006180 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005850:	4b84      	ldr	r3, [pc, #528]	; (8005a64 <HAL_RCC_OscConfig+0x27c>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0308 	and.w	r3, r3, #8
 8005858:	2b00      	cmp	r3, #0
 800585a:	d004      	beq.n	8005866 <HAL_RCC_OscConfig+0x7e>
 800585c:	4b81      	ldr	r3, [pc, #516]	; (8005a64 <HAL_RCC_OscConfig+0x27c>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005864:	e005      	b.n	8005872 <HAL_RCC_OscConfig+0x8a>
 8005866:	4b7f      	ldr	r3, [pc, #508]	; (8005a64 <HAL_RCC_OscConfig+0x27c>)
 8005868:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800586c:	091b      	lsrs	r3, r3, #4
 800586e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005872:	4293      	cmp	r3, r2
 8005874:	d224      	bcs.n	80058c0 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587a:	4618      	mov	r0, r3
 800587c:	f000 fe72 	bl	8006564 <RCC_SetFlashLatencyFromMSIRange>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d002      	beq.n	800588c <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	f000 bc7a 	b.w	8006180 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800588c:	4b75      	ldr	r3, [pc, #468]	; (8005a64 <HAL_RCC_OscConfig+0x27c>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a74      	ldr	r2, [pc, #464]	; (8005a64 <HAL_RCC_OscConfig+0x27c>)
 8005892:	f043 0308 	orr.w	r3, r3, #8
 8005896:	6013      	str	r3, [r2, #0]
 8005898:	4b72      	ldr	r3, [pc, #456]	; (8005a64 <HAL_RCC_OscConfig+0x27c>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a4:	496f      	ldr	r1, [pc, #444]	; (8005a64 <HAL_RCC_OscConfig+0x27c>)
 80058a6:	4313      	orrs	r3, r2
 80058a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80058aa:	4b6e      	ldr	r3, [pc, #440]	; (8005a64 <HAL_RCC_OscConfig+0x27c>)
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a1b      	ldr	r3, [r3, #32]
 80058b6:	021b      	lsls	r3, r3, #8
 80058b8:	496a      	ldr	r1, [pc, #424]	; (8005a64 <HAL_RCC_OscConfig+0x27c>)
 80058ba:	4313      	orrs	r3, r2
 80058bc:	604b      	str	r3, [r1, #4]
 80058be:	e026      	b.n	800590e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80058c0:	4b68      	ldr	r3, [pc, #416]	; (8005a64 <HAL_RCC_OscConfig+0x27c>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a67      	ldr	r2, [pc, #412]	; (8005a64 <HAL_RCC_OscConfig+0x27c>)
 80058c6:	f043 0308 	orr.w	r3, r3, #8
 80058ca:	6013      	str	r3, [r2, #0]
 80058cc:	4b65      	ldr	r3, [pc, #404]	; (8005a64 <HAL_RCC_OscConfig+0x27c>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d8:	4962      	ldr	r1, [pc, #392]	; (8005a64 <HAL_RCC_OscConfig+0x27c>)
 80058da:	4313      	orrs	r3, r2
 80058dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80058de:	4b61      	ldr	r3, [pc, #388]	; (8005a64 <HAL_RCC_OscConfig+0x27c>)
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a1b      	ldr	r3, [r3, #32]
 80058ea:	021b      	lsls	r3, r3, #8
 80058ec:	495d      	ldr	r1, [pc, #372]	; (8005a64 <HAL_RCC_OscConfig+0x27c>)
 80058ee:	4313      	orrs	r3, r2
 80058f0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d10a      	bne.n	800590e <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fc:	4618      	mov	r0, r3
 80058fe:	f000 fe31 	bl	8006564 <RCC_SetFlashLatencyFromMSIRange>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d002      	beq.n	800590e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	f000 bc39 	b.w	8006180 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800590e:	f000 fe15 	bl	800653c <HAL_RCC_GetHCLKFreq>
 8005912:	4603      	mov	r3, r0
 8005914:	4a54      	ldr	r2, [pc, #336]	; (8005a68 <HAL_RCC_OscConfig+0x280>)
 8005916:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005918:	4b54      	ldr	r3, [pc, #336]	; (8005a6c <HAL_RCC_OscConfig+0x284>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4618      	mov	r0, r3
 800591e:	f7ff fbe3 	bl	80050e8 <HAL_InitTick>
 8005922:	4603      	mov	r3, r0
 8005924:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8005926:	7bfb      	ldrb	r3, [r7, #15]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d060      	beq.n	80059ee <HAL_RCC_OscConfig+0x206>
        {
          return status;
 800592c:	7bfb      	ldrb	r3, [r7, #15]
 800592e:	f000 bc27 	b.w	8006180 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	69db      	ldr	r3, [r3, #28]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d039      	beq.n	80059ae <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800593a:	4b4a      	ldr	r3, [pc, #296]	; (8005a64 <HAL_RCC_OscConfig+0x27c>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a49      	ldr	r2, [pc, #292]	; (8005a64 <HAL_RCC_OscConfig+0x27c>)
 8005940:	f043 0301 	orr.w	r3, r3, #1
 8005944:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005946:	f7ff fc1f 	bl	8005188 <HAL_GetTick>
 800594a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800594c:	e00f      	b.n	800596e <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800594e:	f7ff fc1b 	bl	8005188 <HAL_GetTick>
 8005952:	4602      	mov	r2, r0
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	2b02      	cmp	r3, #2
 800595a:	d908      	bls.n	800596e <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800595c:	4b41      	ldr	r3, [pc, #260]	; (8005a64 <HAL_RCC_OscConfig+0x27c>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 0302 	and.w	r3, r3, #2
 8005964:	2b00      	cmp	r3, #0
 8005966:	d102      	bne.n	800596e <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8005968:	2303      	movs	r3, #3
 800596a:	f000 bc09 	b.w	8006180 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800596e:	4b3d      	ldr	r3, [pc, #244]	; (8005a64 <HAL_RCC_OscConfig+0x27c>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 0302 	and.w	r3, r3, #2
 8005976:	2b00      	cmp	r3, #0
 8005978:	d0e9      	beq.n	800594e <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800597a:	4b3a      	ldr	r3, [pc, #232]	; (8005a64 <HAL_RCC_OscConfig+0x27c>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a39      	ldr	r2, [pc, #228]	; (8005a64 <HAL_RCC_OscConfig+0x27c>)
 8005980:	f043 0308 	orr.w	r3, r3, #8
 8005984:	6013      	str	r3, [r2, #0]
 8005986:	4b37      	ldr	r3, [pc, #220]	; (8005a64 <HAL_RCC_OscConfig+0x27c>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005992:	4934      	ldr	r1, [pc, #208]	; (8005a64 <HAL_RCC_OscConfig+0x27c>)
 8005994:	4313      	orrs	r3, r2
 8005996:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005998:	4b32      	ldr	r3, [pc, #200]	; (8005a64 <HAL_RCC_OscConfig+0x27c>)
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a1b      	ldr	r3, [r3, #32]
 80059a4:	021b      	lsls	r3, r3, #8
 80059a6:	492f      	ldr	r1, [pc, #188]	; (8005a64 <HAL_RCC_OscConfig+0x27c>)
 80059a8:	4313      	orrs	r3, r2
 80059aa:	604b      	str	r3, [r1, #4]
 80059ac:	e020      	b.n	80059f0 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80059ae:	4b2d      	ldr	r3, [pc, #180]	; (8005a64 <HAL_RCC_OscConfig+0x27c>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a2c      	ldr	r2, [pc, #176]	; (8005a64 <HAL_RCC_OscConfig+0x27c>)
 80059b4:	f023 0301 	bic.w	r3, r3, #1
 80059b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80059ba:	f7ff fbe5 	bl	8005188 <HAL_GetTick>
 80059be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80059c0:	e00e      	b.n	80059e0 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80059c2:	f7ff fbe1 	bl	8005188 <HAL_GetTick>
 80059c6:	4602      	mov	r2, r0
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	d907      	bls.n	80059e0 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80059d0:	4b24      	ldr	r3, [pc, #144]	; (8005a64 <HAL_RCC_OscConfig+0x27c>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 0302 	and.w	r3, r3, #2
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d001      	beq.n	80059e0 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 80059dc:	2303      	movs	r3, #3
 80059de:	e3cf      	b.n	8006180 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80059e0:	4b20      	ldr	r3, [pc, #128]	; (8005a64 <HAL_RCC_OscConfig+0x27c>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 0302 	and.w	r3, r3, #2
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d1ea      	bne.n	80059c2 <HAL_RCC_OscConfig+0x1da>
 80059ec:	e000      	b.n	80059f0 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80059ee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 0301 	and.w	r3, r3, #1
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d07e      	beq.n	8005afa <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	2b08      	cmp	r3, #8
 8005a00:	d005      	beq.n	8005a0e <HAL_RCC_OscConfig+0x226>
 8005a02:	69bb      	ldr	r3, [r7, #24]
 8005a04:	2b0c      	cmp	r3, #12
 8005a06:	d10e      	bne.n	8005a26 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	2b03      	cmp	r3, #3
 8005a0c:	d10b      	bne.n	8005a26 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a0e:	4b15      	ldr	r3, [pc, #84]	; (8005a64 <HAL_RCC_OscConfig+0x27c>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d06e      	beq.n	8005af8 <HAL_RCC_OscConfig+0x310>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d16a      	bne.n	8005af8 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e3ac      	b.n	8006180 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a2e:	d106      	bne.n	8005a3e <HAL_RCC_OscConfig+0x256>
 8005a30:	4b0c      	ldr	r3, [pc, #48]	; (8005a64 <HAL_RCC_OscConfig+0x27c>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a0b      	ldr	r2, [pc, #44]	; (8005a64 <HAL_RCC_OscConfig+0x27c>)
 8005a36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a3a:	6013      	str	r3, [r2, #0]
 8005a3c:	e024      	b.n	8005a88 <HAL_RCC_OscConfig+0x2a0>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a46:	d113      	bne.n	8005a70 <HAL_RCC_OscConfig+0x288>
 8005a48:	4b06      	ldr	r3, [pc, #24]	; (8005a64 <HAL_RCC_OscConfig+0x27c>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a05      	ldr	r2, [pc, #20]	; (8005a64 <HAL_RCC_OscConfig+0x27c>)
 8005a4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a52:	6013      	str	r3, [r2, #0]
 8005a54:	4b03      	ldr	r3, [pc, #12]	; (8005a64 <HAL_RCC_OscConfig+0x27c>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a02      	ldr	r2, [pc, #8]	; (8005a64 <HAL_RCC_OscConfig+0x27c>)
 8005a5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a5e:	6013      	str	r3, [r2, #0]
 8005a60:	e012      	b.n	8005a88 <HAL_RCC_OscConfig+0x2a0>
 8005a62:	bf00      	nop
 8005a64:	40021000 	.word	0x40021000
 8005a68:	20000060 	.word	0x20000060
 8005a6c:	20000064 	.word	0x20000064
 8005a70:	4b8b      	ldr	r3, [pc, #556]	; (8005ca0 <HAL_RCC_OscConfig+0x4b8>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a8a      	ldr	r2, [pc, #552]	; (8005ca0 <HAL_RCC_OscConfig+0x4b8>)
 8005a76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a7a:	6013      	str	r3, [r2, #0]
 8005a7c:	4b88      	ldr	r3, [pc, #544]	; (8005ca0 <HAL_RCC_OscConfig+0x4b8>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a87      	ldr	r2, [pc, #540]	; (8005ca0 <HAL_RCC_OscConfig+0x4b8>)
 8005a82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d019      	beq.n	8005ac4 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a90:	f7ff fb7a 	bl	8005188 <HAL_GetTick>
 8005a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a96:	e00e      	b.n	8005ab6 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a98:	f7ff fb76 	bl	8005188 <HAL_GetTick>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	2b64      	cmp	r3, #100	; 0x64
 8005aa4:	d907      	bls.n	8005ab6 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005aa6:	4b7e      	ldr	r3, [pc, #504]	; (8005ca0 <HAL_RCC_OscConfig+0x4b8>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d101      	bne.n	8005ab6 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	e364      	b.n	8006180 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ab6:	4b7a      	ldr	r3, [pc, #488]	; (8005ca0 <HAL_RCC_OscConfig+0x4b8>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d0ea      	beq.n	8005a98 <HAL_RCC_OscConfig+0x2b0>
 8005ac2:	e01a      	b.n	8005afa <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ac4:	f7ff fb60 	bl	8005188 <HAL_GetTick>
 8005ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005aca:	e00e      	b.n	8005aea <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005acc:	f7ff fb5c 	bl	8005188 <HAL_GetTick>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	2b64      	cmp	r3, #100	; 0x64
 8005ad8:	d907      	bls.n	8005aea <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005ada:	4b71      	ldr	r3, [pc, #452]	; (8005ca0 <HAL_RCC_OscConfig+0x4b8>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d001      	beq.n	8005aea <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	e34a      	b.n	8006180 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005aea:	4b6d      	ldr	r3, [pc, #436]	; (8005ca0 <HAL_RCC_OscConfig+0x4b8>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d1ea      	bne.n	8005acc <HAL_RCC_OscConfig+0x2e4>
 8005af6:	e000      	b.n	8005afa <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005af8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 0302 	and.w	r3, r3, #2
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d06c      	beq.n	8005be0 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	2b04      	cmp	r3, #4
 8005b0a:	d005      	beq.n	8005b18 <HAL_RCC_OscConfig+0x330>
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	2b0c      	cmp	r3, #12
 8005b10:	d119      	bne.n	8005b46 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d116      	bne.n	8005b46 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b18:	4b61      	ldr	r3, [pc, #388]	; (8005ca0 <HAL_RCC_OscConfig+0x4b8>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d005      	beq.n	8005b30 <HAL_RCC_OscConfig+0x348>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d101      	bne.n	8005b30 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e327      	b.n	8006180 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b30:	4b5b      	ldr	r3, [pc, #364]	; (8005ca0 <HAL_RCC_OscConfig+0x4b8>)
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	061b      	lsls	r3, r3, #24
 8005b3e:	4958      	ldr	r1, [pc, #352]	; (8005ca0 <HAL_RCC_OscConfig+0x4b8>)
 8005b40:	4313      	orrs	r3, r2
 8005b42:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b44:	e04c      	b.n	8005be0 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d029      	beq.n	8005ba2 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b4e:	4b54      	ldr	r3, [pc, #336]	; (8005ca0 <HAL_RCC_OscConfig+0x4b8>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a53      	ldr	r2, [pc, #332]	; (8005ca0 <HAL_RCC_OscConfig+0x4b8>)
 8005b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b5a:	f7ff fb15 	bl	8005188 <HAL_GetTick>
 8005b5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b60:	e00e      	b.n	8005b80 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b62:	f7ff fb11 	bl	8005188 <HAL_GetTick>
 8005b66:	4602      	mov	r2, r0
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	2b02      	cmp	r3, #2
 8005b6e:	d907      	bls.n	8005b80 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b70:	4b4b      	ldr	r3, [pc, #300]	; (8005ca0 <HAL_RCC_OscConfig+0x4b8>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d101      	bne.n	8005b80 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	e2ff      	b.n	8006180 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b80:	4b47      	ldr	r3, [pc, #284]	; (8005ca0 <HAL_RCC_OscConfig+0x4b8>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d0ea      	beq.n	8005b62 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b8c:	4b44      	ldr	r3, [pc, #272]	; (8005ca0 <HAL_RCC_OscConfig+0x4b8>)
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	061b      	lsls	r3, r3, #24
 8005b9a:	4941      	ldr	r1, [pc, #260]	; (8005ca0 <HAL_RCC_OscConfig+0x4b8>)
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	604b      	str	r3, [r1, #4]
 8005ba0:	e01e      	b.n	8005be0 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ba2:	4b3f      	ldr	r3, [pc, #252]	; (8005ca0 <HAL_RCC_OscConfig+0x4b8>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a3e      	ldr	r2, [pc, #248]	; (8005ca0 <HAL_RCC_OscConfig+0x4b8>)
 8005ba8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bae:	f7ff faeb 	bl	8005188 <HAL_GetTick>
 8005bb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005bb4:	e00e      	b.n	8005bd4 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bb6:	f7ff fae7 	bl	8005188 <HAL_GetTick>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	1ad3      	subs	r3, r2, r3
 8005bc0:	2b02      	cmp	r3, #2
 8005bc2:	d907      	bls.n	8005bd4 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005bc4:	4b36      	ldr	r3, [pc, #216]	; (8005ca0 <HAL_RCC_OscConfig+0x4b8>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d001      	beq.n	8005bd4 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8005bd0:	2303      	movs	r3, #3
 8005bd2:	e2d5      	b.n	8006180 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005bd4:	4b32      	ldr	r3, [pc, #200]	; (8005ca0 <HAL_RCC_OscConfig+0x4b8>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d1ea      	bne.n	8005bb6 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 0308 	and.w	r3, r3, #8
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d062      	beq.n	8005cb2 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	695b      	ldr	r3, [r3, #20]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d038      	beq.n	8005c66 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	699b      	ldr	r3, [r3, #24]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d108      	bne.n	8005c0e <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8005bfc:	4b28      	ldr	r3, [pc, #160]	; (8005ca0 <HAL_RCC_OscConfig+0x4b8>)
 8005bfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c02:	4a27      	ldr	r2, [pc, #156]	; (8005ca0 <HAL_RCC_OscConfig+0x4b8>)
 8005c04:	f023 0310 	bic.w	r3, r3, #16
 8005c08:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005c0c:	e007      	b.n	8005c1e <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8005c0e:	4b24      	ldr	r3, [pc, #144]	; (8005ca0 <HAL_RCC_OscConfig+0x4b8>)
 8005c10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c14:	4a22      	ldr	r2, [pc, #136]	; (8005ca0 <HAL_RCC_OscConfig+0x4b8>)
 8005c16:	f043 0310 	orr.w	r3, r3, #16
 8005c1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c1e:	4b20      	ldr	r3, [pc, #128]	; (8005ca0 <HAL_RCC_OscConfig+0x4b8>)
 8005c20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c24:	4a1e      	ldr	r2, [pc, #120]	; (8005ca0 <HAL_RCC_OscConfig+0x4b8>)
 8005c26:	f043 0301 	orr.w	r3, r3, #1
 8005c2a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c2e:	f7ff faab 	bl	8005188 <HAL_GetTick>
 8005c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005c34:	e00f      	b.n	8005c56 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c36:	f7ff faa7 	bl	8005188 <HAL_GetTick>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	1ad3      	subs	r3, r2, r3
 8005c40:	2b07      	cmp	r3, #7
 8005c42:	d908      	bls.n	8005c56 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005c44:	4b16      	ldr	r3, [pc, #88]	; (8005ca0 <HAL_RCC_OscConfig+0x4b8>)
 8005c46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c4a:	f003 0302 	and.w	r3, r3, #2
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d101      	bne.n	8005c56 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8005c52:	2303      	movs	r3, #3
 8005c54:	e294      	b.n	8006180 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005c56:	4b12      	ldr	r3, [pc, #72]	; (8005ca0 <HAL_RCC_OscConfig+0x4b8>)
 8005c58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c5c:	f003 0302 	and.w	r3, r3, #2
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d0e8      	beq.n	8005c36 <HAL_RCC_OscConfig+0x44e>
 8005c64:	e025      	b.n	8005cb2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c66:	4b0e      	ldr	r3, [pc, #56]	; (8005ca0 <HAL_RCC_OscConfig+0x4b8>)
 8005c68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c6c:	4a0c      	ldr	r2, [pc, #48]	; (8005ca0 <HAL_RCC_OscConfig+0x4b8>)
 8005c6e:	f023 0301 	bic.w	r3, r3, #1
 8005c72:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c76:	f7ff fa87 	bl	8005188 <HAL_GetTick>
 8005c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005c7c:	e012      	b.n	8005ca4 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c7e:	f7ff fa83 	bl	8005188 <HAL_GetTick>
 8005c82:	4602      	mov	r2, r0
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	1ad3      	subs	r3, r2, r3
 8005c88:	2b07      	cmp	r3, #7
 8005c8a:	d90b      	bls.n	8005ca4 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005c8c:	4b04      	ldr	r3, [pc, #16]	; (8005ca0 <HAL_RCC_OscConfig+0x4b8>)
 8005c8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c92:	f003 0302 	and.w	r3, r3, #2
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d004      	beq.n	8005ca4 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e270      	b.n	8006180 <HAL_RCC_OscConfig+0x998>
 8005c9e:	bf00      	nop
 8005ca0:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005ca4:	4ba8      	ldr	r3, [pc, #672]	; (8005f48 <HAL_RCC_OscConfig+0x760>)
 8005ca6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005caa:	f003 0302 	and.w	r3, r3, #2
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d1e5      	bne.n	8005c7e <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 0304 	and.w	r3, r3, #4
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	f000 812d 	beq.w	8005f1a <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005cc4:	4ba0      	ldr	r3, [pc, #640]	; (8005f48 <HAL_RCC_OscConfig+0x760>)
 8005cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d10d      	bne.n	8005cec <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cd0:	4b9d      	ldr	r3, [pc, #628]	; (8005f48 <HAL_RCC_OscConfig+0x760>)
 8005cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cd4:	4a9c      	ldr	r2, [pc, #624]	; (8005f48 <HAL_RCC_OscConfig+0x760>)
 8005cd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cda:	6593      	str	r3, [r2, #88]	; 0x58
 8005cdc:	4b9a      	ldr	r3, [pc, #616]	; (8005f48 <HAL_RCC_OscConfig+0x760>)
 8005cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ce0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ce4:	60bb      	str	r3, [r7, #8]
 8005ce6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005cec:	4b97      	ldr	r3, [pc, #604]	; (8005f4c <HAL_RCC_OscConfig+0x764>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d11e      	bne.n	8005d36 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005cf8:	4b94      	ldr	r3, [pc, #592]	; (8005f4c <HAL_RCC_OscConfig+0x764>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a93      	ldr	r2, [pc, #588]	; (8005f4c <HAL_RCC_OscConfig+0x764>)
 8005cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d02:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d04:	f7ff fa40 	bl	8005188 <HAL_GetTick>
 8005d08:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d0a:	e00e      	b.n	8005d2a <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d0c:	f7ff fa3c 	bl	8005188 <HAL_GetTick>
 8005d10:	4602      	mov	r2, r0
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	2b02      	cmp	r3, #2
 8005d18:	d907      	bls.n	8005d2a <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d1a:	4b8c      	ldr	r3, [pc, #560]	; (8005f4c <HAL_RCC_OscConfig+0x764>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d101      	bne.n	8005d2a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005d26:	2303      	movs	r3, #3
 8005d28:	e22a      	b.n	8006180 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d2a:	4b88      	ldr	r3, [pc, #544]	; (8005f4c <HAL_RCC_OscConfig+0x764>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d0ea      	beq.n	8005d0c <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	f003 0301 	and.w	r3, r3, #1
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d01f      	beq.n	8005d82 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	f003 0304 	and.w	r3, r3, #4
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d010      	beq.n	8005d70 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005d4e:	4b7e      	ldr	r3, [pc, #504]	; (8005f48 <HAL_RCC_OscConfig+0x760>)
 8005d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d54:	4a7c      	ldr	r2, [pc, #496]	; (8005f48 <HAL_RCC_OscConfig+0x760>)
 8005d56:	f043 0304 	orr.w	r3, r3, #4
 8005d5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005d5e:	4b7a      	ldr	r3, [pc, #488]	; (8005f48 <HAL_RCC_OscConfig+0x760>)
 8005d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d64:	4a78      	ldr	r2, [pc, #480]	; (8005f48 <HAL_RCC_OscConfig+0x760>)
 8005d66:	f043 0301 	orr.w	r3, r3, #1
 8005d6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005d6e:	e018      	b.n	8005da2 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005d70:	4b75      	ldr	r3, [pc, #468]	; (8005f48 <HAL_RCC_OscConfig+0x760>)
 8005d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d76:	4a74      	ldr	r2, [pc, #464]	; (8005f48 <HAL_RCC_OscConfig+0x760>)
 8005d78:	f043 0301 	orr.w	r3, r3, #1
 8005d7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005d80:	e00f      	b.n	8005da2 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005d82:	4b71      	ldr	r3, [pc, #452]	; (8005f48 <HAL_RCC_OscConfig+0x760>)
 8005d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d88:	4a6f      	ldr	r2, [pc, #444]	; (8005f48 <HAL_RCC_OscConfig+0x760>)
 8005d8a:	f023 0301 	bic.w	r3, r3, #1
 8005d8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005d92:	4b6d      	ldr	r3, [pc, #436]	; (8005f48 <HAL_RCC_OscConfig+0x760>)
 8005d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d98:	4a6b      	ldr	r2, [pc, #428]	; (8005f48 <HAL_RCC_OscConfig+0x760>)
 8005d9a:	f023 0304 	bic.w	r3, r3, #4
 8005d9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d068      	beq.n	8005e7c <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005daa:	f7ff f9ed 	bl	8005188 <HAL_GetTick>
 8005dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005db0:	e011      	b.n	8005dd6 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005db2:	f7ff f9e9 	bl	8005188 <HAL_GetTick>
 8005db6:	4602      	mov	r2, r0
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	1ad3      	subs	r3, r2, r3
 8005dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d908      	bls.n	8005dd6 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005dc4:	4b60      	ldr	r3, [pc, #384]	; (8005f48 <HAL_RCC_OscConfig+0x760>)
 8005dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dca:	f003 0302 	and.w	r3, r3, #2
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d101      	bne.n	8005dd6 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e1d4      	b.n	8006180 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005dd6:	4b5c      	ldr	r3, [pc, #368]	; (8005f48 <HAL_RCC_OscConfig+0x760>)
 8005dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ddc:	f003 0302 	and.w	r3, r3, #2
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d0e6      	beq.n	8005db2 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d022      	beq.n	8005e36 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005df0:	4b55      	ldr	r3, [pc, #340]	; (8005f48 <HAL_RCC_OscConfig+0x760>)
 8005df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005df6:	4a54      	ldr	r2, [pc, #336]	; (8005f48 <HAL_RCC_OscConfig+0x760>)
 8005df8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005e00:	e011      	b.n	8005e26 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e02:	f7ff f9c1 	bl	8005188 <HAL_GetTick>
 8005e06:	4602      	mov	r2, r0
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d908      	bls.n	8005e26 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005e14:	4b4c      	ldr	r3, [pc, #304]	; (8005f48 <HAL_RCC_OscConfig+0x760>)
 8005e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d101      	bne.n	8005e26 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8005e22:	2303      	movs	r3, #3
 8005e24:	e1ac      	b.n	8006180 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005e26:	4b48      	ldr	r3, [pc, #288]	; (8005f48 <HAL_RCC_OscConfig+0x760>)
 8005e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d0e6      	beq.n	8005e02 <HAL_RCC_OscConfig+0x61a>
 8005e34:	e068      	b.n	8005f08 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005e36:	4b44      	ldr	r3, [pc, #272]	; (8005f48 <HAL_RCC_OscConfig+0x760>)
 8005e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e3c:	4a42      	ldr	r2, [pc, #264]	; (8005f48 <HAL_RCC_OscConfig+0x760>)
 8005e3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005e46:	e011      	b.n	8005e6c <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e48:	f7ff f99e 	bl	8005188 <HAL_GetTick>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d908      	bls.n	8005e6c <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005e5a:	4b3b      	ldr	r3, [pc, #236]	; (8005f48 <HAL_RCC_OscConfig+0x760>)
 8005e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d001      	beq.n	8005e6c <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	e189      	b.n	8006180 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005e6c:	4b36      	ldr	r3, [pc, #216]	; (8005f48 <HAL_RCC_OscConfig+0x760>)
 8005e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d1e6      	bne.n	8005e48 <HAL_RCC_OscConfig+0x660>
 8005e7a:	e045      	b.n	8005f08 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e7c:	f7ff f984 	bl	8005188 <HAL_GetTick>
 8005e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e82:	e011      	b.n	8005ea8 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e84:	f7ff f980 	bl	8005188 <HAL_GetTick>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	1ad3      	subs	r3, r2, r3
 8005e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d908      	bls.n	8005ea8 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e96:	4b2c      	ldr	r3, [pc, #176]	; (8005f48 <HAL_RCC_OscConfig+0x760>)
 8005e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e9c:	f003 0302 	and.w	r3, r3, #2
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d001      	beq.n	8005ea8 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	e16b      	b.n	8006180 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ea8:	4b27      	ldr	r3, [pc, #156]	; (8005f48 <HAL_RCC_OscConfig+0x760>)
 8005eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eae:	f003 0302 	and.w	r3, r3, #2
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d1e6      	bne.n	8005e84 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8005eb6:	4b24      	ldr	r3, [pc, #144]	; (8005f48 <HAL_RCC_OscConfig+0x760>)
 8005eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d021      	beq.n	8005f08 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005ec4:	4b20      	ldr	r3, [pc, #128]	; (8005f48 <HAL_RCC_OscConfig+0x760>)
 8005ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eca:	4a1f      	ldr	r2, [pc, #124]	; (8005f48 <HAL_RCC_OscConfig+0x760>)
 8005ecc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ed0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005ed4:	e011      	b.n	8005efa <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ed6:	f7ff f957 	bl	8005188 <HAL_GetTick>
 8005eda:	4602      	mov	r2, r0
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	1ad3      	subs	r3, r2, r3
 8005ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d908      	bls.n	8005efa <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005ee8:	4b17      	ldr	r3, [pc, #92]	; (8005f48 <HAL_RCC_OscConfig+0x760>)
 8005eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d001      	beq.n	8005efa <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e142      	b.n	8006180 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005efa:	4b13      	ldr	r3, [pc, #76]	; (8005f48 <HAL_RCC_OscConfig+0x760>)
 8005efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d1e6      	bne.n	8005ed6 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005f08:	7ffb      	ldrb	r3, [r7, #31]
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d105      	bne.n	8005f1a <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f0e:	4b0e      	ldr	r3, [pc, #56]	; (8005f48 <HAL_RCC_OscConfig+0x760>)
 8005f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f12:	4a0d      	ldr	r2, [pc, #52]	; (8005f48 <HAL_RCC_OscConfig+0x760>)
 8005f14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f18:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 0320 	and.w	r3, r3, #32
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d04f      	beq.n	8005fc6 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d028      	beq.n	8005f80 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005f2e:	4b06      	ldr	r3, [pc, #24]	; (8005f48 <HAL_RCC_OscConfig+0x760>)
 8005f30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f34:	4a04      	ldr	r2, [pc, #16]	; (8005f48 <HAL_RCC_OscConfig+0x760>)
 8005f36:	f043 0301 	orr.w	r3, r3, #1
 8005f3a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f3e:	f7ff f923 	bl	8005188 <HAL_GetTick>
 8005f42:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005f44:	e014      	b.n	8005f70 <HAL_RCC_OscConfig+0x788>
 8005f46:	bf00      	nop
 8005f48:	40021000 	.word	0x40021000
 8005f4c:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f50:	f7ff f91a 	bl	8005188 <HAL_GetTick>
 8005f54:	4602      	mov	r2, r0
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	1ad3      	subs	r3, r2, r3
 8005f5a:	2b02      	cmp	r3, #2
 8005f5c:	d908      	bls.n	8005f70 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005f5e:	4b8a      	ldr	r3, [pc, #552]	; (8006188 <HAL_RCC_OscConfig+0x9a0>)
 8005f60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f64:	f003 0302 	and.w	r3, r3, #2
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d101      	bne.n	8005f70 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	e107      	b.n	8006180 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005f70:	4b85      	ldr	r3, [pc, #532]	; (8006188 <HAL_RCC_OscConfig+0x9a0>)
 8005f72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f76:	f003 0302 	and.w	r3, r3, #2
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d0e8      	beq.n	8005f50 <HAL_RCC_OscConfig+0x768>
 8005f7e:	e022      	b.n	8005fc6 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005f80:	4b81      	ldr	r3, [pc, #516]	; (8006188 <HAL_RCC_OscConfig+0x9a0>)
 8005f82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f86:	4a80      	ldr	r2, [pc, #512]	; (8006188 <HAL_RCC_OscConfig+0x9a0>)
 8005f88:	f023 0301 	bic.w	r3, r3, #1
 8005f8c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f90:	f7ff f8fa 	bl	8005188 <HAL_GetTick>
 8005f94:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005f96:	e00f      	b.n	8005fb8 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f98:	f7ff f8f6 	bl	8005188 <HAL_GetTick>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d908      	bls.n	8005fb8 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005fa6:	4b78      	ldr	r3, [pc, #480]	; (8006188 <HAL_RCC_OscConfig+0x9a0>)
 8005fa8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005fac:	f003 0302 	and.w	r3, r3, #2
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d001      	beq.n	8005fb8 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	e0e3      	b.n	8006180 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005fb8:	4b73      	ldr	r3, [pc, #460]	; (8006188 <HAL_RCC_OscConfig+0x9a0>)
 8005fba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005fbe:	f003 0302 	and.w	r3, r3, #2
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d1e8      	bne.n	8005f98 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	f000 80d7 	beq.w	800617e <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005fd0:	4b6d      	ldr	r3, [pc, #436]	; (8006188 <HAL_RCC_OscConfig+0x9a0>)
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	f003 030c 	and.w	r3, r3, #12
 8005fd8:	2b0c      	cmp	r3, #12
 8005fda:	f000 8091 	beq.w	8006100 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe2:	2b02      	cmp	r3, #2
 8005fe4:	d166      	bne.n	80060b4 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fe6:	4b68      	ldr	r3, [pc, #416]	; (8006188 <HAL_RCC_OscConfig+0x9a0>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a67      	ldr	r2, [pc, #412]	; (8006188 <HAL_RCC_OscConfig+0x9a0>)
 8005fec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ff0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ff2:	f7ff f8c9 	bl	8005188 <HAL_GetTick>
 8005ff6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ff8:	e00e      	b.n	8006018 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ffa:	f7ff f8c5 	bl	8005188 <HAL_GetTick>
 8005ffe:	4602      	mov	r2, r0
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	2b02      	cmp	r3, #2
 8006006:	d907      	bls.n	8006018 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006008:	4b5f      	ldr	r3, [pc, #380]	; (8006188 <HAL_RCC_OscConfig+0x9a0>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006010:	2b00      	cmp	r3, #0
 8006012:	d001      	beq.n	8006018 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8006014:	2303      	movs	r3, #3
 8006016:	e0b3      	b.n	8006180 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006018:	4b5b      	ldr	r3, [pc, #364]	; (8006188 <HAL_RCC_OscConfig+0x9a0>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006020:	2b00      	cmp	r3, #0
 8006022:	d1ea      	bne.n	8005ffa <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006024:	4b58      	ldr	r3, [pc, #352]	; (8006188 <HAL_RCC_OscConfig+0x9a0>)
 8006026:	68da      	ldr	r2, [r3, #12]
 8006028:	4b58      	ldr	r3, [pc, #352]	; (800618c <HAL_RCC_OscConfig+0x9a4>)
 800602a:	4013      	ands	r3, r2
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006034:	3a01      	subs	r2, #1
 8006036:	0112      	lsls	r2, r2, #4
 8006038:	4311      	orrs	r1, r2
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800603e:	0212      	lsls	r2, r2, #8
 8006040:	4311      	orrs	r1, r2
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006046:	0852      	lsrs	r2, r2, #1
 8006048:	3a01      	subs	r2, #1
 800604a:	0552      	lsls	r2, r2, #21
 800604c:	4311      	orrs	r1, r2
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006052:	0852      	lsrs	r2, r2, #1
 8006054:	3a01      	subs	r2, #1
 8006056:	0652      	lsls	r2, r2, #25
 8006058:	4311      	orrs	r1, r2
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800605e:	06d2      	lsls	r2, r2, #27
 8006060:	430a      	orrs	r2, r1
 8006062:	4949      	ldr	r1, [pc, #292]	; (8006188 <HAL_RCC_OscConfig+0x9a0>)
 8006064:	4313      	orrs	r3, r2
 8006066:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006068:	4b47      	ldr	r3, [pc, #284]	; (8006188 <HAL_RCC_OscConfig+0x9a0>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a46      	ldr	r2, [pc, #280]	; (8006188 <HAL_RCC_OscConfig+0x9a0>)
 800606e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006072:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006074:	4b44      	ldr	r3, [pc, #272]	; (8006188 <HAL_RCC_OscConfig+0x9a0>)
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	4a43      	ldr	r2, [pc, #268]	; (8006188 <HAL_RCC_OscConfig+0x9a0>)
 800607a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800607e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006080:	f7ff f882 	bl	8005188 <HAL_GetTick>
 8006084:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006086:	e00e      	b.n	80060a6 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006088:	f7ff f87e 	bl	8005188 <HAL_GetTick>
 800608c:	4602      	mov	r2, r0
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	2b02      	cmp	r3, #2
 8006094:	d907      	bls.n	80060a6 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006096:	4b3c      	ldr	r3, [pc, #240]	; (8006188 <HAL_RCC_OscConfig+0x9a0>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d101      	bne.n	80060a6 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 80060a2:	2303      	movs	r3, #3
 80060a4:	e06c      	b.n	8006180 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060a6:	4b38      	ldr	r3, [pc, #224]	; (8006188 <HAL_RCC_OscConfig+0x9a0>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d0ea      	beq.n	8006088 <HAL_RCC_OscConfig+0x8a0>
 80060b2:	e064      	b.n	800617e <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060b4:	4b34      	ldr	r3, [pc, #208]	; (8006188 <HAL_RCC_OscConfig+0x9a0>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a33      	ldr	r2, [pc, #204]	; (8006188 <HAL_RCC_OscConfig+0x9a0>)
 80060ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060c0:	f7ff f862 	bl	8005188 <HAL_GetTick>
 80060c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80060c6:	e00e      	b.n	80060e6 <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060c8:	f7ff f85e 	bl	8005188 <HAL_GetTick>
 80060cc:	4602      	mov	r2, r0
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	d907      	bls.n	80060e6 <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80060d6:	4b2c      	ldr	r3, [pc, #176]	; (8006188 <HAL_RCC_OscConfig+0x9a0>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d001      	beq.n	80060e6 <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 80060e2:	2303      	movs	r3, #3
 80060e4:	e04c      	b.n	8006180 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80060e6:	4b28      	ldr	r3, [pc, #160]	; (8006188 <HAL_RCC_OscConfig+0x9a0>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d1ea      	bne.n	80060c8 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80060f2:	4b25      	ldr	r3, [pc, #148]	; (8006188 <HAL_RCC_OscConfig+0x9a0>)
 80060f4:	68da      	ldr	r2, [r3, #12]
 80060f6:	4924      	ldr	r1, [pc, #144]	; (8006188 <HAL_RCC_OscConfig+0x9a0>)
 80060f8:	4b25      	ldr	r3, [pc, #148]	; (8006190 <HAL_RCC_OscConfig+0x9a8>)
 80060fa:	4013      	ands	r3, r2
 80060fc:	60cb      	str	r3, [r1, #12]
 80060fe:	e03e      	b.n	800617e <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006104:	2b01      	cmp	r3, #1
 8006106:	d101      	bne.n	800610c <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	e039      	b.n	8006180 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 800610c:	4b1e      	ldr	r3, [pc, #120]	; (8006188 <HAL_RCC_OscConfig+0x9a0>)
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	f003 0203 	and.w	r2, r3, #3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800611c:	429a      	cmp	r2, r3
 800611e:	d12c      	bne.n	800617a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800612a:	3b01      	subs	r3, #1
 800612c:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800612e:	429a      	cmp	r2, r3
 8006130:	d123      	bne.n	800617a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800613c:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800613e:	429a      	cmp	r2, r3
 8006140:	d11b      	bne.n	800617a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800614c:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800614e:	429a      	cmp	r2, r3
 8006150:	d113      	bne.n	800617a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615c:	085b      	lsrs	r3, r3, #1
 800615e:	3b01      	subs	r3, #1
 8006160:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006162:	429a      	cmp	r2, r3
 8006164:	d109      	bne.n	800617a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006170:	085b      	lsrs	r3, r3, #1
 8006172:	3b01      	subs	r3, #1
 8006174:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006176:	429a      	cmp	r2, r3
 8006178:	d001      	beq.n	800617e <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	e000      	b.n	8006180 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 800617e:	2300      	movs	r3, #0
}
 8006180:	4618      	mov	r0, r3
 8006182:	3720      	adds	r7, #32
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}
 8006188:	40021000 	.word	0x40021000
 800618c:	019f800c 	.word	0x019f800c
 8006190:	feeefffc 	.word	0xfeeefffc

08006194 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b086      	sub	sp, #24
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800619e:	2300      	movs	r3, #0
 80061a0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d101      	bne.n	80061ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	e11c      	b.n	80063e6 <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80061ac:	4b90      	ldr	r3, [pc, #576]	; (80063f0 <HAL_RCC_ClockConfig+0x25c>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 030f 	and.w	r3, r3, #15
 80061b4:	683a      	ldr	r2, [r7, #0]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d910      	bls.n	80061dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061ba:	4b8d      	ldr	r3, [pc, #564]	; (80063f0 <HAL_RCC_ClockConfig+0x25c>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f023 020f 	bic.w	r2, r3, #15
 80061c2:	498b      	ldr	r1, [pc, #556]	; (80063f0 <HAL_RCC_ClockConfig+0x25c>)
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061ca:	4b89      	ldr	r3, [pc, #548]	; (80063f0 <HAL_RCC_ClockConfig+0x25c>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 030f 	and.w	r3, r3, #15
 80061d2:	683a      	ldr	r2, [r7, #0]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d001      	beq.n	80061dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	e104      	b.n	80063e6 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 0302 	and.w	r3, r3, #2
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d010      	beq.n	800620a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	689a      	ldr	r2, [r3, #8]
 80061ec:	4b81      	ldr	r3, [pc, #516]	; (80063f4 <HAL_RCC_ClockConfig+0x260>)
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d908      	bls.n	800620a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061f8:	4b7e      	ldr	r3, [pc, #504]	; (80063f4 <HAL_RCC_ClockConfig+0x260>)
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	497b      	ldr	r1, [pc, #492]	; (80063f4 <HAL_RCC_ClockConfig+0x260>)
 8006206:	4313      	orrs	r3, r2
 8006208:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f003 0301 	and.w	r3, r3, #1
 8006212:	2b00      	cmp	r3, #0
 8006214:	f000 8085 	beq.w	8006322 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	2b03      	cmp	r3, #3
 800621e:	d11f      	bne.n	8006260 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006220:	4b74      	ldr	r3, [pc, #464]	; (80063f4 <HAL_RCC_ClockConfig+0x260>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006228:	2b00      	cmp	r3, #0
 800622a:	d101      	bne.n	8006230 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e0da      	b.n	80063e6 <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006230:	f000 f9fc 	bl	800662c <RCC_GetSysClockFreqFromPLLSource>
 8006234:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	4a6f      	ldr	r2, [pc, #444]	; (80063f8 <HAL_RCC_ClockConfig+0x264>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d947      	bls.n	80062ce <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800623e:	4b6d      	ldr	r3, [pc, #436]	; (80063f4 <HAL_RCC_ClockConfig+0x260>)
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d141      	bne.n	80062ce <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800624a:	4b6a      	ldr	r3, [pc, #424]	; (80063f4 <HAL_RCC_ClockConfig+0x260>)
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006252:	4a68      	ldr	r2, [pc, #416]	; (80063f4 <HAL_RCC_ClockConfig+0x260>)
 8006254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006258:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800625a:	2380      	movs	r3, #128	; 0x80
 800625c:	617b      	str	r3, [r7, #20]
 800625e:	e036      	b.n	80062ce <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	2b02      	cmp	r3, #2
 8006266:	d107      	bne.n	8006278 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006268:	4b62      	ldr	r3, [pc, #392]	; (80063f4 <HAL_RCC_ClockConfig+0x260>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006270:	2b00      	cmp	r3, #0
 8006272:	d115      	bne.n	80062a0 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e0b6      	b.n	80063e6 <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d107      	bne.n	8006290 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006280:	4b5c      	ldr	r3, [pc, #368]	; (80063f4 <HAL_RCC_ClockConfig+0x260>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f003 0302 	and.w	r3, r3, #2
 8006288:	2b00      	cmp	r3, #0
 800628a:	d109      	bne.n	80062a0 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	e0aa      	b.n	80063e6 <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006290:	4b58      	ldr	r3, [pc, #352]	; (80063f4 <HAL_RCC_ClockConfig+0x260>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006298:	2b00      	cmp	r3, #0
 800629a:	d101      	bne.n	80062a0 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	e0a2      	b.n	80063e6 <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80062a0:	f000 f8b0 	bl	8006404 <HAL_RCC_GetSysClockFreq>
 80062a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	4a53      	ldr	r2, [pc, #332]	; (80063f8 <HAL_RCC_ClockConfig+0x264>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d90f      	bls.n	80062ce <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80062ae:	4b51      	ldr	r3, [pc, #324]	; (80063f4 <HAL_RCC_ClockConfig+0x260>)
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d109      	bne.n	80062ce <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80062ba:	4b4e      	ldr	r3, [pc, #312]	; (80063f4 <HAL_RCC_ClockConfig+0x260>)
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062c2:	4a4c      	ldr	r2, [pc, #304]	; (80063f4 <HAL_RCC_ClockConfig+0x260>)
 80062c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062c8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80062ca:	2380      	movs	r3, #128	; 0x80
 80062cc:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80062ce:	4b49      	ldr	r3, [pc, #292]	; (80063f4 <HAL_RCC_ClockConfig+0x260>)
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	f023 0203 	bic.w	r2, r3, #3
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	4946      	ldr	r1, [pc, #280]	; (80063f4 <HAL_RCC_ClockConfig+0x260>)
 80062dc:	4313      	orrs	r3, r2
 80062de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062e0:	f7fe ff52 	bl	8005188 <HAL_GetTick>
 80062e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062e6:	e013      	b.n	8006310 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062e8:	f7fe ff4e 	bl	8005188 <HAL_GetTick>
 80062ec:	4602      	mov	r2, r0
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	1ad3      	subs	r3, r2, r3
 80062f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d90a      	bls.n	8006310 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062fa:	4b3e      	ldr	r3, [pc, #248]	; (80063f4 <HAL_RCC_ClockConfig+0x260>)
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	f003 020c 	and.w	r2, r3, #12
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	429a      	cmp	r2, r3
 800630a:	d001      	beq.n	8006310 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 800630c:	2303      	movs	r3, #3
 800630e:	e06a      	b.n	80063e6 <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006310:	4b38      	ldr	r3, [pc, #224]	; (80063f4 <HAL_RCC_ClockConfig+0x260>)
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	f003 020c 	and.w	r2, r3, #12
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	429a      	cmp	r2, r3
 8006320:	d1e2      	bne.n	80062e8 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	2b80      	cmp	r3, #128	; 0x80
 8006326:	d105      	bne.n	8006334 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006328:	4b32      	ldr	r3, [pc, #200]	; (80063f4 <HAL_RCC_ClockConfig+0x260>)
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	4a31      	ldr	r2, [pc, #196]	; (80063f4 <HAL_RCC_ClockConfig+0x260>)
 800632e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006332:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 0302 	and.w	r3, r3, #2
 800633c:	2b00      	cmp	r3, #0
 800633e:	d010      	beq.n	8006362 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	689a      	ldr	r2, [r3, #8]
 8006344:	4b2b      	ldr	r3, [pc, #172]	; (80063f4 <HAL_RCC_ClockConfig+0x260>)
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800634c:	429a      	cmp	r2, r3
 800634e:	d208      	bcs.n	8006362 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006350:	4b28      	ldr	r3, [pc, #160]	; (80063f4 <HAL_RCC_ClockConfig+0x260>)
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	4925      	ldr	r1, [pc, #148]	; (80063f4 <HAL_RCC_ClockConfig+0x260>)
 800635e:	4313      	orrs	r3, r2
 8006360:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006362:	4b23      	ldr	r3, [pc, #140]	; (80063f0 <HAL_RCC_ClockConfig+0x25c>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 030f 	and.w	r3, r3, #15
 800636a:	683a      	ldr	r2, [r7, #0]
 800636c:	429a      	cmp	r2, r3
 800636e:	d210      	bcs.n	8006392 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006370:	4b1f      	ldr	r3, [pc, #124]	; (80063f0 <HAL_RCC_ClockConfig+0x25c>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f023 020f 	bic.w	r2, r3, #15
 8006378:	491d      	ldr	r1, [pc, #116]	; (80063f0 <HAL_RCC_ClockConfig+0x25c>)
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	4313      	orrs	r3, r2
 800637e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006380:	4b1b      	ldr	r3, [pc, #108]	; (80063f0 <HAL_RCC_ClockConfig+0x25c>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f003 030f 	and.w	r3, r3, #15
 8006388:	683a      	ldr	r2, [r7, #0]
 800638a:	429a      	cmp	r2, r3
 800638c:	d001      	beq.n	8006392 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e029      	b.n	80063e6 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 0304 	and.w	r3, r3, #4
 800639a:	2b00      	cmp	r3, #0
 800639c:	d008      	beq.n	80063b0 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800639e:	4b15      	ldr	r3, [pc, #84]	; (80063f4 <HAL_RCC_ClockConfig+0x260>)
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	4912      	ldr	r1, [pc, #72]	; (80063f4 <HAL_RCC_ClockConfig+0x260>)
 80063ac:	4313      	orrs	r3, r2
 80063ae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 0308 	and.w	r3, r3, #8
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d009      	beq.n	80063d0 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80063bc:	4b0d      	ldr	r3, [pc, #52]	; (80063f4 <HAL_RCC_ClockConfig+0x260>)
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	691b      	ldr	r3, [r3, #16]
 80063c8:	00db      	lsls	r3, r3, #3
 80063ca:	490a      	ldr	r1, [pc, #40]	; (80063f4 <HAL_RCC_ClockConfig+0x260>)
 80063cc:	4313      	orrs	r3, r2
 80063ce:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80063d0:	f000 f8b4 	bl	800653c <HAL_RCC_GetHCLKFreq>
 80063d4:	4603      	mov	r3, r0
 80063d6:	4a09      	ldr	r2, [pc, #36]	; (80063fc <HAL_RCC_ClockConfig+0x268>)
 80063d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80063da:	4b09      	ldr	r3, [pc, #36]	; (8006400 <HAL_RCC_ClockConfig+0x26c>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4618      	mov	r0, r3
 80063e0:	f7fe fe82 	bl	80050e8 <HAL_InitTick>
 80063e4:	4603      	mov	r3, r0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3718      	adds	r7, #24
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	bf00      	nop
 80063f0:	40022000 	.word	0x40022000
 80063f4:	40021000 	.word	0x40021000
 80063f8:	04c4b400 	.word	0x04c4b400
 80063fc:	20000060 	.word	0x20000060
 8006400:	20000064 	.word	0x20000064

08006404 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006404:	b480      	push	{r7}
 8006406:	b089      	sub	sp, #36	; 0x24
 8006408:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800640a:	2300      	movs	r3, #0
 800640c:	61fb      	str	r3, [r7, #28]
 800640e:	2300      	movs	r3, #0
 8006410:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006412:	4b47      	ldr	r3, [pc, #284]	; (8006530 <HAL_RCC_GetSysClockFreq+0x12c>)
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	f003 030c 	and.w	r3, r3, #12
 800641a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800641c:	4b44      	ldr	r3, [pc, #272]	; (8006530 <HAL_RCC_GetSysClockFreq+0x12c>)
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	f003 0303 	and.w	r3, r3, #3
 8006424:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d005      	beq.n	8006438 <HAL_RCC_GetSysClockFreq+0x34>
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	2b0c      	cmp	r3, #12
 8006430:	d121      	bne.n	8006476 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2b01      	cmp	r3, #1
 8006436:	d11e      	bne.n	8006476 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006438:	4b3d      	ldr	r3, [pc, #244]	; (8006530 <HAL_RCC_GetSysClockFreq+0x12c>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 0308 	and.w	r3, r3, #8
 8006440:	2b00      	cmp	r3, #0
 8006442:	d107      	bne.n	8006454 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006444:	4b3a      	ldr	r3, [pc, #232]	; (8006530 <HAL_RCC_GetSysClockFreq+0x12c>)
 8006446:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800644a:	0a1b      	lsrs	r3, r3, #8
 800644c:	f003 030f 	and.w	r3, r3, #15
 8006450:	61fb      	str	r3, [r7, #28]
 8006452:	e005      	b.n	8006460 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006454:	4b36      	ldr	r3, [pc, #216]	; (8006530 <HAL_RCC_GetSysClockFreq+0x12c>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	091b      	lsrs	r3, r3, #4
 800645a:	f003 030f 	and.w	r3, r3, #15
 800645e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8006460:	4a34      	ldr	r2, [pc, #208]	; (8006534 <HAL_RCC_GetSysClockFreq+0x130>)
 8006462:	69fb      	ldr	r3, [r7, #28]
 8006464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006468:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d10d      	bne.n	800648c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006474:	e00a      	b.n	800648c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	2b04      	cmp	r3, #4
 800647a:	d102      	bne.n	8006482 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800647c:	4b2e      	ldr	r3, [pc, #184]	; (8006538 <HAL_RCC_GetSysClockFreq+0x134>)
 800647e:	61bb      	str	r3, [r7, #24]
 8006480:	e004      	b.n	800648c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	2b08      	cmp	r3, #8
 8006486:	d101      	bne.n	800648c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006488:	4b2b      	ldr	r3, [pc, #172]	; (8006538 <HAL_RCC_GetSysClockFreq+0x134>)
 800648a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	2b0c      	cmp	r3, #12
 8006490:	d146      	bne.n	8006520 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8006492:	4b27      	ldr	r3, [pc, #156]	; (8006530 <HAL_RCC_GetSysClockFreq+0x12c>)
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	f003 0303 	and.w	r3, r3, #3
 800649a:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800649c:	4b24      	ldr	r3, [pc, #144]	; (8006530 <HAL_RCC_GetSysClockFreq+0x12c>)
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	091b      	lsrs	r3, r3, #4
 80064a2:	f003 030f 	and.w	r3, r3, #15
 80064a6:	3301      	adds	r3, #1
 80064a8:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	d003      	beq.n	80064b8 <HAL_RCC_GetSysClockFreq+0xb4>
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	2b03      	cmp	r3, #3
 80064b4:	d00d      	beq.n	80064d2 <HAL_RCC_GetSysClockFreq+0xce>
 80064b6:	e019      	b.n	80064ec <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80064b8:	4a1f      	ldr	r2, [pc, #124]	; (8006538 <HAL_RCC_GetSysClockFreq+0x134>)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80064c0:	4a1b      	ldr	r2, [pc, #108]	; (8006530 <HAL_RCC_GetSysClockFreq+0x12c>)
 80064c2:	68d2      	ldr	r2, [r2, #12]
 80064c4:	0a12      	lsrs	r2, r2, #8
 80064c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80064ca:	fb02 f303 	mul.w	r3, r2, r3
 80064ce:	617b      	str	r3, [r7, #20]
        break;
 80064d0:	e019      	b.n	8006506 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80064d2:	4a19      	ldr	r2, [pc, #100]	; (8006538 <HAL_RCC_GetSysClockFreq+0x134>)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80064da:	4a15      	ldr	r2, [pc, #84]	; (8006530 <HAL_RCC_GetSysClockFreq+0x12c>)
 80064dc:	68d2      	ldr	r2, [r2, #12]
 80064de:	0a12      	lsrs	r2, r2, #8
 80064e0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80064e4:	fb02 f303 	mul.w	r3, r2, r3
 80064e8:	617b      	str	r3, [r7, #20]
        break;
 80064ea:	e00c      	b.n	8006506 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80064ec:	69fa      	ldr	r2, [r7, #28]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80064f4:	4a0e      	ldr	r2, [pc, #56]	; (8006530 <HAL_RCC_GetSysClockFreq+0x12c>)
 80064f6:	68d2      	ldr	r2, [r2, #12]
 80064f8:	0a12      	lsrs	r2, r2, #8
 80064fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80064fe:	fb02 f303 	mul.w	r3, r2, r3
 8006502:	617b      	str	r3, [r7, #20]
        break;
 8006504:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8006506:	4b0a      	ldr	r3, [pc, #40]	; (8006530 <HAL_RCC_GetSysClockFreq+0x12c>)
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	0e5b      	lsrs	r3, r3, #25
 800650c:	f003 0303 	and.w	r3, r3, #3
 8006510:	3301      	adds	r3, #1
 8006512:	005b      	lsls	r3, r3, #1
 8006514:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006516:	697a      	ldr	r2, [r7, #20]
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	fbb2 f3f3 	udiv	r3, r2, r3
 800651e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006520:	69bb      	ldr	r3, [r7, #24]
}
 8006522:	4618      	mov	r0, r3
 8006524:	3724      	adds	r7, #36	; 0x24
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr
 800652e:	bf00      	nop
 8006530:	40021000 	.word	0x40021000
 8006534:	080076e8 	.word	0x080076e8
 8006538:	00f42400 	.word	0x00f42400

0800653c <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8006540:	f7ff ff60 	bl	8006404 <HAL_RCC_GetSysClockFreq>
 8006544:	4602      	mov	r2, r0
 8006546:	4b05      	ldr	r3, [pc, #20]	; (800655c <HAL_RCC_GetHCLKFreq+0x20>)
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	091b      	lsrs	r3, r3, #4
 800654c:	f003 030f 	and.w	r3, r3, #15
 8006550:	4903      	ldr	r1, [pc, #12]	; (8006560 <HAL_RCC_GetHCLKFreq+0x24>)
 8006552:	5ccb      	ldrb	r3, [r1, r3]
 8006554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006558:	4618      	mov	r0, r3
 800655a:	bd80      	pop	{r7, pc}
 800655c:	40021000 	.word	0x40021000
 8006560:	080076d8 	.word	0x080076d8

08006564 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b086      	sub	sp, #24
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800656c:	2300      	movs	r3, #0
 800656e:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006570:	4b2c      	ldr	r3, [pc, #176]	; (8006624 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8006572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006578:	2b00      	cmp	r3, #0
 800657a:	d003      	beq.n	8006584 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800657c:	f7ff f8a6 	bl	80056cc <HAL_PWREx_GetVoltageRange>
 8006580:	6138      	str	r0, [r7, #16]
 8006582:	e014      	b.n	80065ae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006584:	4b27      	ldr	r3, [pc, #156]	; (8006624 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8006586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006588:	4a26      	ldr	r2, [pc, #152]	; (8006624 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800658a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800658e:	6593      	str	r3, [r2, #88]	; 0x58
 8006590:	4b24      	ldr	r3, [pc, #144]	; (8006624 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8006592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006598:	60fb      	str	r3, [r7, #12]
 800659a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800659c:	f7ff f896 	bl	80056cc <HAL_PWREx_GetVoltageRange>
 80065a0:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 80065a2:	4b20      	ldr	r3, [pc, #128]	; (8006624 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80065a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065a6:	4a1f      	ldr	r2, [pc, #124]	; (8006624 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80065a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065ac:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d003      	beq.n	80065bc <RCC_SetFlashLatencyFromMSIRange+0x58>
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065ba:	d10b      	bne.n	80065d4 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2b80      	cmp	r3, #128	; 0x80
 80065c0:	d919      	bls.n	80065f6 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2ba0      	cmp	r3, #160	; 0xa0
 80065c6:	d902      	bls.n	80065ce <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80065c8:	2302      	movs	r3, #2
 80065ca:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 80065cc:	e013      	b.n	80065f6 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80065ce:	2301      	movs	r3, #1
 80065d0:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 80065d2:	e010      	b.n	80065f6 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2b80      	cmp	r3, #128	; 0x80
 80065d8:	d902      	bls.n	80065e0 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80065da:	2303      	movs	r3, #3
 80065dc:	617b      	str	r3, [r7, #20]
 80065de:	e00a      	b.n	80065f6 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2b80      	cmp	r3, #128	; 0x80
 80065e4:	d102      	bne.n	80065ec <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80065e6:	2302      	movs	r3, #2
 80065e8:	617b      	str	r3, [r7, #20]
 80065ea:	e004      	b.n	80065f6 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2b70      	cmp	r3, #112	; 0x70
 80065f0:	d101      	bne.n	80065f6 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80065f2:	2301      	movs	r3, #1
 80065f4:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80065f6:	4b0c      	ldr	r3, [pc, #48]	; (8006628 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f023 020f 	bic.w	r2, r3, #15
 80065fe:	490a      	ldr	r1, [pc, #40]	; (8006628 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	4313      	orrs	r3, r2
 8006604:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8006606:	4b08      	ldr	r3, [pc, #32]	; (8006628 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 030f 	and.w	r3, r3, #15
 800660e:	697a      	ldr	r2, [r7, #20]
 8006610:	429a      	cmp	r2, r3
 8006612:	d001      	beq.n	8006618 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	e000      	b.n	800661a <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3718      	adds	r7, #24
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	40021000 	.word	0x40021000
 8006628:	40022000 	.word	0x40022000

0800662c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800662c:	b480      	push	{r7}
 800662e:	b087      	sub	sp, #28
 8006630:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006632:	4b31      	ldr	r3, [pc, #196]	; (80066f8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	f003 0303 	and.w	r3, r3, #3
 800663a:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800663c:	4b2e      	ldr	r3, [pc, #184]	; (80066f8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	091b      	lsrs	r3, r3, #4
 8006642:	f003 030f 	and.w	r3, r3, #15
 8006646:	3301      	adds	r3, #1
 8006648:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2b03      	cmp	r3, #3
 800664e:	d015      	beq.n	800667c <RCC_GetSysClockFreqFromPLLSource+0x50>
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2b03      	cmp	r3, #3
 8006654:	d839      	bhi.n	80066ca <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2b01      	cmp	r3, #1
 800665a:	d01c      	beq.n	8006696 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2b02      	cmp	r3, #2
 8006660:	d133      	bne.n	80066ca <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006662:	4a26      	ldr	r2, [pc, #152]	; (80066fc <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	fbb2 f3f3 	udiv	r3, r2, r3
 800666a:	4a23      	ldr	r2, [pc, #140]	; (80066f8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800666c:	68d2      	ldr	r2, [r2, #12]
 800666e:	0a12      	lsrs	r2, r2, #8
 8006670:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006674:	fb02 f303 	mul.w	r3, r2, r3
 8006678:	613b      	str	r3, [r7, #16]
      break;
 800667a:	e029      	b.n	80066d0 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800667c:	4a1f      	ldr	r2, [pc, #124]	; (80066fc <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	fbb2 f3f3 	udiv	r3, r2, r3
 8006684:	4a1c      	ldr	r2, [pc, #112]	; (80066f8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8006686:	68d2      	ldr	r2, [r2, #12]
 8006688:	0a12      	lsrs	r2, r2, #8
 800668a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800668e:	fb02 f303 	mul.w	r3, r2, r3
 8006692:	613b      	str	r3, [r7, #16]
      break;
 8006694:	e01c      	b.n	80066d0 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006696:	4b18      	ldr	r3, [pc, #96]	; (80066f8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 0308 	and.w	r3, r3, #8
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d107      	bne.n	80066b2 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80066a2:	4b15      	ldr	r3, [pc, #84]	; (80066f8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80066a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066a8:	0a1b      	lsrs	r3, r3, #8
 80066aa:	f003 030f 	and.w	r3, r3, #15
 80066ae:	617b      	str	r3, [r7, #20]
 80066b0:	e005      	b.n	80066be <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80066b2:	4b11      	ldr	r3, [pc, #68]	; (80066f8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	091b      	lsrs	r3, r3, #4
 80066b8:	f003 030f 	and.w	r3, r3, #15
 80066bc:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 80066be:	4a10      	ldr	r2, [pc, #64]	; (8006700 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066c6:	613b      	str	r3, [r7, #16]
        break;
 80066c8:	e002      	b.n	80066d0 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 80066ca:	2300      	movs	r3, #0
 80066cc:	613b      	str	r3, [r7, #16]
      break;
 80066ce:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80066d0:	4b09      	ldr	r3, [pc, #36]	; (80066f8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	0e5b      	lsrs	r3, r3, #25
 80066d6:	f003 0303 	and.w	r3, r3, #3
 80066da:	3301      	adds	r3, #1
 80066dc:	005b      	lsls	r3, r3, #1
 80066de:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80066e0:	693a      	ldr	r2, [r7, #16]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80066e8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80066ea:	683b      	ldr	r3, [r7, #0]
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	371c      	adds	r7, #28
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr
 80066f8:	40021000 	.word	0x40021000
 80066fc:	00f42400 	.word	0x00f42400
 8006700:	080076e8 	.word	0x080076e8

08006704 <std>:
 8006704:	2300      	movs	r3, #0
 8006706:	b510      	push	{r4, lr}
 8006708:	4604      	mov	r4, r0
 800670a:	6083      	str	r3, [r0, #8]
 800670c:	8181      	strh	r1, [r0, #12]
 800670e:	4619      	mov	r1, r3
 8006710:	6643      	str	r3, [r0, #100]	; 0x64
 8006712:	81c2      	strh	r2, [r0, #14]
 8006714:	2208      	movs	r2, #8
 8006716:	6183      	str	r3, [r0, #24]
 8006718:	e9c0 3300 	strd	r3, r3, [r0]
 800671c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006720:	305c      	adds	r0, #92	; 0x5c
 8006722:	f000 f8cb 	bl	80068bc <memset>
 8006726:	4b0d      	ldr	r3, [pc, #52]	; (800675c <std+0x58>)
 8006728:	6224      	str	r4, [r4, #32]
 800672a:	6263      	str	r3, [r4, #36]	; 0x24
 800672c:	4b0c      	ldr	r3, [pc, #48]	; (8006760 <std+0x5c>)
 800672e:	62a3      	str	r3, [r4, #40]	; 0x28
 8006730:	4b0c      	ldr	r3, [pc, #48]	; (8006764 <std+0x60>)
 8006732:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006734:	4b0c      	ldr	r3, [pc, #48]	; (8006768 <std+0x64>)
 8006736:	6323      	str	r3, [r4, #48]	; 0x30
 8006738:	4b0c      	ldr	r3, [pc, #48]	; (800676c <std+0x68>)
 800673a:	429c      	cmp	r4, r3
 800673c:	d006      	beq.n	800674c <std+0x48>
 800673e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006742:	4294      	cmp	r4, r2
 8006744:	d002      	beq.n	800674c <std+0x48>
 8006746:	33d0      	adds	r3, #208	; 0xd0
 8006748:	429c      	cmp	r4, r3
 800674a:	d105      	bne.n	8006758 <std+0x54>
 800674c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006754:	f000 b8e4 	b.w	8006920 <__retarget_lock_init_recursive>
 8006758:	bd10      	pop	{r4, pc}
 800675a:	bf00      	nop
 800675c:	08007181 	.word	0x08007181
 8006760:	080071a3 	.word	0x080071a3
 8006764:	080071db 	.word	0x080071db
 8006768:	080071ff 	.word	0x080071ff
 800676c:	200000ec 	.word	0x200000ec

08006770 <stdio_exit_handler>:
 8006770:	4a02      	ldr	r2, [pc, #8]	; (800677c <stdio_exit_handler+0xc>)
 8006772:	4903      	ldr	r1, [pc, #12]	; (8006780 <stdio_exit_handler+0x10>)
 8006774:	4803      	ldr	r0, [pc, #12]	; (8006784 <stdio_exit_handler+0x14>)
 8006776:	f000 b869 	b.w	800684c <_fwalk_sglue>
 800677a:	bf00      	nop
 800677c:	2000006c 	.word	0x2000006c
 8006780:	08007119 	.word	0x08007119
 8006784:	20000078 	.word	0x20000078

08006788 <cleanup_stdio>:
 8006788:	6841      	ldr	r1, [r0, #4]
 800678a:	4b0c      	ldr	r3, [pc, #48]	; (80067bc <cleanup_stdio+0x34>)
 800678c:	4299      	cmp	r1, r3
 800678e:	b510      	push	{r4, lr}
 8006790:	4604      	mov	r4, r0
 8006792:	d001      	beq.n	8006798 <cleanup_stdio+0x10>
 8006794:	f000 fcc0 	bl	8007118 <_fflush_r>
 8006798:	68a1      	ldr	r1, [r4, #8]
 800679a:	4b09      	ldr	r3, [pc, #36]	; (80067c0 <cleanup_stdio+0x38>)
 800679c:	4299      	cmp	r1, r3
 800679e:	d002      	beq.n	80067a6 <cleanup_stdio+0x1e>
 80067a0:	4620      	mov	r0, r4
 80067a2:	f000 fcb9 	bl	8007118 <_fflush_r>
 80067a6:	68e1      	ldr	r1, [r4, #12]
 80067a8:	4b06      	ldr	r3, [pc, #24]	; (80067c4 <cleanup_stdio+0x3c>)
 80067aa:	4299      	cmp	r1, r3
 80067ac:	d004      	beq.n	80067b8 <cleanup_stdio+0x30>
 80067ae:	4620      	mov	r0, r4
 80067b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067b4:	f000 bcb0 	b.w	8007118 <_fflush_r>
 80067b8:	bd10      	pop	{r4, pc}
 80067ba:	bf00      	nop
 80067bc:	200000ec 	.word	0x200000ec
 80067c0:	20000154 	.word	0x20000154
 80067c4:	200001bc 	.word	0x200001bc

080067c8 <global_stdio_init.part.0>:
 80067c8:	b510      	push	{r4, lr}
 80067ca:	4b0b      	ldr	r3, [pc, #44]	; (80067f8 <global_stdio_init.part.0+0x30>)
 80067cc:	2104      	movs	r1, #4
 80067ce:	4c0b      	ldr	r4, [pc, #44]	; (80067fc <global_stdio_init.part.0+0x34>)
 80067d0:	4a0b      	ldr	r2, [pc, #44]	; (8006800 <global_stdio_init.part.0+0x38>)
 80067d2:	4620      	mov	r0, r4
 80067d4:	601a      	str	r2, [r3, #0]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f7ff ff94 	bl	8006704 <std>
 80067dc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80067e0:	2201      	movs	r2, #1
 80067e2:	2109      	movs	r1, #9
 80067e4:	f7ff ff8e 	bl	8006704 <std>
 80067e8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80067ec:	2202      	movs	r2, #2
 80067ee:	2112      	movs	r1, #18
 80067f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067f4:	f7ff bf86 	b.w	8006704 <std>
 80067f8:	20000224 	.word	0x20000224
 80067fc:	200000ec 	.word	0x200000ec
 8006800:	08006771 	.word	0x08006771

08006804 <__sfp_lock_acquire>:
 8006804:	4801      	ldr	r0, [pc, #4]	; (800680c <__sfp_lock_acquire+0x8>)
 8006806:	f000 b88c 	b.w	8006922 <__retarget_lock_acquire_recursive>
 800680a:	bf00      	nop
 800680c:	20000229 	.word	0x20000229

08006810 <__sfp_lock_release>:
 8006810:	4801      	ldr	r0, [pc, #4]	; (8006818 <__sfp_lock_release+0x8>)
 8006812:	f000 b887 	b.w	8006924 <__retarget_lock_release_recursive>
 8006816:	bf00      	nop
 8006818:	20000229 	.word	0x20000229

0800681c <__sinit>:
 800681c:	b510      	push	{r4, lr}
 800681e:	4604      	mov	r4, r0
 8006820:	f7ff fff0 	bl	8006804 <__sfp_lock_acquire>
 8006824:	6a23      	ldr	r3, [r4, #32]
 8006826:	b11b      	cbz	r3, 8006830 <__sinit+0x14>
 8006828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800682c:	f7ff bff0 	b.w	8006810 <__sfp_lock_release>
 8006830:	4b04      	ldr	r3, [pc, #16]	; (8006844 <__sinit+0x28>)
 8006832:	6223      	str	r3, [r4, #32]
 8006834:	4b04      	ldr	r3, [pc, #16]	; (8006848 <__sinit+0x2c>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d1f5      	bne.n	8006828 <__sinit+0xc>
 800683c:	f7ff ffc4 	bl	80067c8 <global_stdio_init.part.0>
 8006840:	e7f2      	b.n	8006828 <__sinit+0xc>
 8006842:	bf00      	nop
 8006844:	08006789 	.word	0x08006789
 8006848:	20000224 	.word	0x20000224

0800684c <_fwalk_sglue>:
 800684c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006850:	4607      	mov	r7, r0
 8006852:	4688      	mov	r8, r1
 8006854:	4614      	mov	r4, r2
 8006856:	2600      	movs	r6, #0
 8006858:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800685c:	f1b9 0901 	subs.w	r9, r9, #1
 8006860:	d505      	bpl.n	800686e <_fwalk_sglue+0x22>
 8006862:	6824      	ldr	r4, [r4, #0]
 8006864:	2c00      	cmp	r4, #0
 8006866:	d1f7      	bne.n	8006858 <_fwalk_sglue+0xc>
 8006868:	4630      	mov	r0, r6
 800686a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800686e:	89ab      	ldrh	r3, [r5, #12]
 8006870:	2b01      	cmp	r3, #1
 8006872:	d907      	bls.n	8006884 <_fwalk_sglue+0x38>
 8006874:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006878:	3301      	adds	r3, #1
 800687a:	d003      	beq.n	8006884 <_fwalk_sglue+0x38>
 800687c:	4629      	mov	r1, r5
 800687e:	4638      	mov	r0, r7
 8006880:	47c0      	blx	r8
 8006882:	4306      	orrs	r6, r0
 8006884:	3568      	adds	r5, #104	; 0x68
 8006886:	e7e9      	b.n	800685c <_fwalk_sglue+0x10>

08006888 <iprintf>:
 8006888:	b40f      	push	{r0, r1, r2, r3}
 800688a:	b507      	push	{r0, r1, r2, lr}
 800688c:	4906      	ldr	r1, [pc, #24]	; (80068a8 <iprintf+0x20>)
 800688e:	ab04      	add	r3, sp, #16
 8006890:	6808      	ldr	r0, [r1, #0]
 8006892:	f853 2b04 	ldr.w	r2, [r3], #4
 8006896:	6881      	ldr	r1, [r0, #8]
 8006898:	9301      	str	r3, [sp, #4]
 800689a:	f000 f86d 	bl	8006978 <_vfiprintf_r>
 800689e:	b003      	add	sp, #12
 80068a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80068a4:	b004      	add	sp, #16
 80068a6:	4770      	bx	lr
 80068a8:	200000c4 	.word	0x200000c4

080068ac <putchar>:
 80068ac:	4b02      	ldr	r3, [pc, #8]	; (80068b8 <putchar+0xc>)
 80068ae:	4601      	mov	r1, r0
 80068b0:	6818      	ldr	r0, [r3, #0]
 80068b2:	6882      	ldr	r2, [r0, #8]
 80068b4:	f000 bd9d 	b.w	80073f2 <_putc_r>
 80068b8:	200000c4 	.word	0x200000c4

080068bc <memset>:
 80068bc:	4402      	add	r2, r0
 80068be:	4603      	mov	r3, r0
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d100      	bne.n	80068c6 <memset+0xa>
 80068c4:	4770      	bx	lr
 80068c6:	f803 1b01 	strb.w	r1, [r3], #1
 80068ca:	e7f9      	b.n	80068c0 <memset+0x4>

080068cc <__errno>:
 80068cc:	4b01      	ldr	r3, [pc, #4]	; (80068d4 <__errno+0x8>)
 80068ce:	6818      	ldr	r0, [r3, #0]
 80068d0:	4770      	bx	lr
 80068d2:	bf00      	nop
 80068d4:	200000c4 	.word	0x200000c4

080068d8 <__libc_init_array>:
 80068d8:	b570      	push	{r4, r5, r6, lr}
 80068da:	4d0d      	ldr	r5, [pc, #52]	; (8006910 <__libc_init_array+0x38>)
 80068dc:	2600      	movs	r6, #0
 80068de:	4c0d      	ldr	r4, [pc, #52]	; (8006914 <__libc_init_array+0x3c>)
 80068e0:	1b64      	subs	r4, r4, r5
 80068e2:	10a4      	asrs	r4, r4, #2
 80068e4:	42a6      	cmp	r6, r4
 80068e6:	d109      	bne.n	80068fc <__libc_init_array+0x24>
 80068e8:	4d0b      	ldr	r5, [pc, #44]	; (8006918 <__libc_init_array+0x40>)
 80068ea:	2600      	movs	r6, #0
 80068ec:	4c0b      	ldr	r4, [pc, #44]	; (800691c <__libc_init_array+0x44>)
 80068ee:	f000 fe87 	bl	8007600 <_init>
 80068f2:	1b64      	subs	r4, r4, r5
 80068f4:	10a4      	asrs	r4, r4, #2
 80068f6:	42a6      	cmp	r6, r4
 80068f8:	d105      	bne.n	8006906 <__libc_init_array+0x2e>
 80068fa:	bd70      	pop	{r4, r5, r6, pc}
 80068fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006900:	3601      	adds	r6, #1
 8006902:	4798      	blx	r3
 8006904:	e7ee      	b.n	80068e4 <__libc_init_array+0xc>
 8006906:	f855 3b04 	ldr.w	r3, [r5], #4
 800690a:	3601      	adds	r6, #1
 800690c:	4798      	blx	r3
 800690e:	e7f2      	b.n	80068f6 <__libc_init_array+0x1e>
 8006910:	0800775c 	.word	0x0800775c
 8006914:	0800775c 	.word	0x0800775c
 8006918:	0800775c 	.word	0x0800775c
 800691c:	08007760 	.word	0x08007760

08006920 <__retarget_lock_init_recursive>:
 8006920:	4770      	bx	lr

08006922 <__retarget_lock_acquire_recursive>:
 8006922:	4770      	bx	lr

08006924 <__retarget_lock_release_recursive>:
 8006924:	4770      	bx	lr

08006926 <__sfputc_r>:
 8006926:	6893      	ldr	r3, [r2, #8]
 8006928:	3b01      	subs	r3, #1
 800692a:	2b00      	cmp	r3, #0
 800692c:	6093      	str	r3, [r2, #8]
 800692e:	b410      	push	{r4}
 8006930:	da08      	bge.n	8006944 <__sfputc_r+0x1e>
 8006932:	6994      	ldr	r4, [r2, #24]
 8006934:	42a3      	cmp	r3, r4
 8006936:	db01      	blt.n	800693c <__sfputc_r+0x16>
 8006938:	290a      	cmp	r1, #10
 800693a:	d103      	bne.n	8006944 <__sfputc_r+0x1e>
 800693c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006940:	f000 bc61 	b.w	8007206 <__swbuf_r>
 8006944:	6813      	ldr	r3, [r2, #0]
 8006946:	1c58      	adds	r0, r3, #1
 8006948:	6010      	str	r0, [r2, #0]
 800694a:	4608      	mov	r0, r1
 800694c:	7019      	strb	r1, [r3, #0]
 800694e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006952:	4770      	bx	lr

08006954 <__sfputs_r>:
 8006954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006956:	4606      	mov	r6, r0
 8006958:	460f      	mov	r7, r1
 800695a:	4614      	mov	r4, r2
 800695c:	18d5      	adds	r5, r2, r3
 800695e:	42ac      	cmp	r4, r5
 8006960:	d101      	bne.n	8006966 <__sfputs_r+0x12>
 8006962:	2000      	movs	r0, #0
 8006964:	e007      	b.n	8006976 <__sfputs_r+0x22>
 8006966:	463a      	mov	r2, r7
 8006968:	f814 1b01 	ldrb.w	r1, [r4], #1
 800696c:	4630      	mov	r0, r6
 800696e:	f7ff ffda 	bl	8006926 <__sfputc_r>
 8006972:	1c43      	adds	r3, r0, #1
 8006974:	d1f3      	bne.n	800695e <__sfputs_r+0xa>
 8006976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006978 <_vfiprintf_r>:
 8006978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800697c:	460d      	mov	r5, r1
 800697e:	b09d      	sub	sp, #116	; 0x74
 8006980:	4614      	mov	r4, r2
 8006982:	4698      	mov	r8, r3
 8006984:	4606      	mov	r6, r0
 8006986:	b118      	cbz	r0, 8006990 <_vfiprintf_r+0x18>
 8006988:	6a03      	ldr	r3, [r0, #32]
 800698a:	b90b      	cbnz	r3, 8006990 <_vfiprintf_r+0x18>
 800698c:	f7ff ff46 	bl	800681c <__sinit>
 8006990:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006992:	07d9      	lsls	r1, r3, #31
 8006994:	d405      	bmi.n	80069a2 <_vfiprintf_r+0x2a>
 8006996:	89ab      	ldrh	r3, [r5, #12]
 8006998:	059a      	lsls	r2, r3, #22
 800699a:	d402      	bmi.n	80069a2 <_vfiprintf_r+0x2a>
 800699c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800699e:	f7ff ffc0 	bl	8006922 <__retarget_lock_acquire_recursive>
 80069a2:	89ab      	ldrh	r3, [r5, #12]
 80069a4:	071b      	lsls	r3, r3, #28
 80069a6:	d501      	bpl.n	80069ac <_vfiprintf_r+0x34>
 80069a8:	692b      	ldr	r3, [r5, #16]
 80069aa:	b99b      	cbnz	r3, 80069d4 <_vfiprintf_r+0x5c>
 80069ac:	4629      	mov	r1, r5
 80069ae:	4630      	mov	r0, r6
 80069b0:	f000 fc66 	bl	8007280 <__swsetup_r>
 80069b4:	b170      	cbz	r0, 80069d4 <_vfiprintf_r+0x5c>
 80069b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069b8:	07dc      	lsls	r4, r3, #31
 80069ba:	d504      	bpl.n	80069c6 <_vfiprintf_r+0x4e>
 80069bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80069c0:	b01d      	add	sp, #116	; 0x74
 80069c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069c6:	89ab      	ldrh	r3, [r5, #12]
 80069c8:	0598      	lsls	r0, r3, #22
 80069ca:	d4f7      	bmi.n	80069bc <_vfiprintf_r+0x44>
 80069cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069ce:	f7ff ffa9 	bl	8006924 <__retarget_lock_release_recursive>
 80069d2:	e7f3      	b.n	80069bc <_vfiprintf_r+0x44>
 80069d4:	2300      	movs	r3, #0
 80069d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80069da:	f04f 0901 	mov.w	r9, #1
 80069de:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 8006b98 <_vfiprintf_r+0x220>
 80069e2:	9309      	str	r3, [sp, #36]	; 0x24
 80069e4:	2320      	movs	r3, #32
 80069e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80069ea:	2330      	movs	r3, #48	; 0x30
 80069ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80069f0:	4623      	mov	r3, r4
 80069f2:	469a      	mov	sl, r3
 80069f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80069f8:	b10a      	cbz	r2, 80069fe <_vfiprintf_r+0x86>
 80069fa:	2a25      	cmp	r2, #37	; 0x25
 80069fc:	d1f9      	bne.n	80069f2 <_vfiprintf_r+0x7a>
 80069fe:	ebba 0b04 	subs.w	fp, sl, r4
 8006a02:	d00b      	beq.n	8006a1c <_vfiprintf_r+0xa4>
 8006a04:	465b      	mov	r3, fp
 8006a06:	4622      	mov	r2, r4
 8006a08:	4629      	mov	r1, r5
 8006a0a:	4630      	mov	r0, r6
 8006a0c:	f7ff ffa2 	bl	8006954 <__sfputs_r>
 8006a10:	3001      	adds	r0, #1
 8006a12:	f000 80a9 	beq.w	8006b68 <_vfiprintf_r+0x1f0>
 8006a16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a18:	445a      	add	r2, fp
 8006a1a:	9209      	str	r2, [sp, #36]	; 0x24
 8006a1c:	f89a 3000 	ldrb.w	r3, [sl]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	f000 80a1 	beq.w	8006b68 <_vfiprintf_r+0x1f0>
 8006a26:	2300      	movs	r3, #0
 8006a28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a2c:	f10a 0a01 	add.w	sl, sl, #1
 8006a30:	9304      	str	r3, [sp, #16]
 8006a32:	9307      	str	r3, [sp, #28]
 8006a34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a38:	931a      	str	r3, [sp, #104]	; 0x68
 8006a3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a3e:	4654      	mov	r4, sl
 8006a40:	2205      	movs	r2, #5
 8006a42:	4855      	ldr	r0, [pc, #340]	; (8006b98 <_vfiprintf_r+0x220>)
 8006a44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a48:	f000 fd80 	bl	800754c <memchr>
 8006a4c:	9a04      	ldr	r2, [sp, #16]
 8006a4e:	b9d8      	cbnz	r0, 8006a88 <_vfiprintf_r+0x110>
 8006a50:	06d1      	lsls	r1, r2, #27
 8006a52:	bf44      	itt	mi
 8006a54:	2320      	movmi	r3, #32
 8006a56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a5a:	0713      	lsls	r3, r2, #28
 8006a5c:	bf44      	itt	mi
 8006a5e:	232b      	movmi	r3, #43	; 0x2b
 8006a60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a64:	f89a 3000 	ldrb.w	r3, [sl]
 8006a68:	2b2a      	cmp	r3, #42	; 0x2a
 8006a6a:	d015      	beq.n	8006a98 <_vfiprintf_r+0x120>
 8006a6c:	9a07      	ldr	r2, [sp, #28]
 8006a6e:	4654      	mov	r4, sl
 8006a70:	2000      	movs	r0, #0
 8006a72:	f04f 0c0a 	mov.w	ip, #10
 8006a76:	4621      	mov	r1, r4
 8006a78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a7c:	3b30      	subs	r3, #48	; 0x30
 8006a7e:	2b09      	cmp	r3, #9
 8006a80:	d94d      	bls.n	8006b1e <_vfiprintf_r+0x1a6>
 8006a82:	b1b0      	cbz	r0, 8006ab2 <_vfiprintf_r+0x13a>
 8006a84:	9207      	str	r2, [sp, #28]
 8006a86:	e014      	b.n	8006ab2 <_vfiprintf_r+0x13a>
 8006a88:	eba0 0308 	sub.w	r3, r0, r8
 8006a8c:	46a2      	mov	sl, r4
 8006a8e:	fa09 f303 	lsl.w	r3, r9, r3
 8006a92:	4313      	orrs	r3, r2
 8006a94:	9304      	str	r3, [sp, #16]
 8006a96:	e7d2      	b.n	8006a3e <_vfiprintf_r+0xc6>
 8006a98:	9b03      	ldr	r3, [sp, #12]
 8006a9a:	1d19      	adds	r1, r3, #4
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	9103      	str	r1, [sp, #12]
 8006aa2:	bfbb      	ittet	lt
 8006aa4:	425b      	neglt	r3, r3
 8006aa6:	f042 0202 	orrlt.w	r2, r2, #2
 8006aaa:	9307      	strge	r3, [sp, #28]
 8006aac:	9307      	strlt	r3, [sp, #28]
 8006aae:	bfb8      	it	lt
 8006ab0:	9204      	strlt	r2, [sp, #16]
 8006ab2:	7823      	ldrb	r3, [r4, #0]
 8006ab4:	2b2e      	cmp	r3, #46	; 0x2e
 8006ab6:	d10c      	bne.n	8006ad2 <_vfiprintf_r+0x15a>
 8006ab8:	7863      	ldrb	r3, [r4, #1]
 8006aba:	2b2a      	cmp	r3, #42	; 0x2a
 8006abc:	d134      	bne.n	8006b28 <_vfiprintf_r+0x1b0>
 8006abe:	9b03      	ldr	r3, [sp, #12]
 8006ac0:	3402      	adds	r4, #2
 8006ac2:	1d1a      	adds	r2, r3, #4
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	9203      	str	r2, [sp, #12]
 8006aca:	bfb8      	it	lt
 8006acc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006ad0:	9305      	str	r3, [sp, #20]
 8006ad2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006ba8 <_vfiprintf_r+0x230>
 8006ad6:	2203      	movs	r2, #3
 8006ad8:	7821      	ldrb	r1, [r4, #0]
 8006ada:	4650      	mov	r0, sl
 8006adc:	f000 fd36 	bl	800754c <memchr>
 8006ae0:	b138      	cbz	r0, 8006af2 <_vfiprintf_r+0x17a>
 8006ae2:	eba0 000a 	sub.w	r0, r0, sl
 8006ae6:	2240      	movs	r2, #64	; 0x40
 8006ae8:	9b04      	ldr	r3, [sp, #16]
 8006aea:	3401      	adds	r4, #1
 8006aec:	4082      	lsls	r2, r0
 8006aee:	4313      	orrs	r3, r2
 8006af0:	9304      	str	r3, [sp, #16]
 8006af2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006af6:	2206      	movs	r2, #6
 8006af8:	4828      	ldr	r0, [pc, #160]	; (8006b9c <_vfiprintf_r+0x224>)
 8006afa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006afe:	f000 fd25 	bl	800754c <memchr>
 8006b02:	2800      	cmp	r0, #0
 8006b04:	d03f      	beq.n	8006b86 <_vfiprintf_r+0x20e>
 8006b06:	4b26      	ldr	r3, [pc, #152]	; (8006ba0 <_vfiprintf_r+0x228>)
 8006b08:	bb1b      	cbnz	r3, 8006b52 <_vfiprintf_r+0x1da>
 8006b0a:	9b03      	ldr	r3, [sp, #12]
 8006b0c:	3307      	adds	r3, #7
 8006b0e:	f023 0307 	bic.w	r3, r3, #7
 8006b12:	3308      	adds	r3, #8
 8006b14:	9303      	str	r3, [sp, #12]
 8006b16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b18:	443b      	add	r3, r7
 8006b1a:	9309      	str	r3, [sp, #36]	; 0x24
 8006b1c:	e768      	b.n	80069f0 <_vfiprintf_r+0x78>
 8006b1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b22:	460c      	mov	r4, r1
 8006b24:	2001      	movs	r0, #1
 8006b26:	e7a6      	b.n	8006a76 <_vfiprintf_r+0xfe>
 8006b28:	2300      	movs	r3, #0
 8006b2a:	3401      	adds	r4, #1
 8006b2c:	f04f 0c0a 	mov.w	ip, #10
 8006b30:	4619      	mov	r1, r3
 8006b32:	9305      	str	r3, [sp, #20]
 8006b34:	4620      	mov	r0, r4
 8006b36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b3a:	3a30      	subs	r2, #48	; 0x30
 8006b3c:	2a09      	cmp	r2, #9
 8006b3e:	d903      	bls.n	8006b48 <_vfiprintf_r+0x1d0>
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d0c6      	beq.n	8006ad2 <_vfiprintf_r+0x15a>
 8006b44:	9105      	str	r1, [sp, #20]
 8006b46:	e7c4      	b.n	8006ad2 <_vfiprintf_r+0x15a>
 8006b48:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b4c:	4604      	mov	r4, r0
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e7f0      	b.n	8006b34 <_vfiprintf_r+0x1bc>
 8006b52:	ab03      	add	r3, sp, #12
 8006b54:	462a      	mov	r2, r5
 8006b56:	a904      	add	r1, sp, #16
 8006b58:	4630      	mov	r0, r6
 8006b5a:	9300      	str	r3, [sp, #0]
 8006b5c:	4b11      	ldr	r3, [pc, #68]	; (8006ba4 <_vfiprintf_r+0x22c>)
 8006b5e:	f3af 8000 	nop.w
 8006b62:	4607      	mov	r7, r0
 8006b64:	1c78      	adds	r0, r7, #1
 8006b66:	d1d6      	bne.n	8006b16 <_vfiprintf_r+0x19e>
 8006b68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b6a:	07d9      	lsls	r1, r3, #31
 8006b6c:	d405      	bmi.n	8006b7a <_vfiprintf_r+0x202>
 8006b6e:	89ab      	ldrh	r3, [r5, #12]
 8006b70:	059a      	lsls	r2, r3, #22
 8006b72:	d402      	bmi.n	8006b7a <_vfiprintf_r+0x202>
 8006b74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b76:	f7ff fed5 	bl	8006924 <__retarget_lock_release_recursive>
 8006b7a:	89ab      	ldrh	r3, [r5, #12]
 8006b7c:	065b      	lsls	r3, r3, #25
 8006b7e:	f53f af1d 	bmi.w	80069bc <_vfiprintf_r+0x44>
 8006b82:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b84:	e71c      	b.n	80069c0 <_vfiprintf_r+0x48>
 8006b86:	ab03      	add	r3, sp, #12
 8006b88:	462a      	mov	r2, r5
 8006b8a:	a904      	add	r1, sp, #16
 8006b8c:	4630      	mov	r0, r6
 8006b8e:	9300      	str	r3, [sp, #0]
 8006b90:	4b04      	ldr	r3, [pc, #16]	; (8006ba4 <_vfiprintf_r+0x22c>)
 8006b92:	f000 f91d 	bl	8006dd0 <_printf_i>
 8006b96:	e7e4      	b.n	8006b62 <_vfiprintf_r+0x1ea>
 8006b98:	08007728 	.word	0x08007728
 8006b9c:	08007732 	.word	0x08007732
 8006ba0:	00000000 	.word	0x00000000
 8006ba4:	08006955 	.word	0x08006955
 8006ba8:	0800772e 	.word	0x0800772e

08006bac <sbrk_aligned>:
 8006bac:	b570      	push	{r4, r5, r6, lr}
 8006bae:	4e0e      	ldr	r6, [pc, #56]	; (8006be8 <sbrk_aligned+0x3c>)
 8006bb0:	460c      	mov	r4, r1
 8006bb2:	4605      	mov	r5, r0
 8006bb4:	6831      	ldr	r1, [r6, #0]
 8006bb6:	b911      	cbnz	r1, 8006bbe <sbrk_aligned+0x12>
 8006bb8:	f000 fca6 	bl	8007508 <_sbrk_r>
 8006bbc:	6030      	str	r0, [r6, #0]
 8006bbe:	4621      	mov	r1, r4
 8006bc0:	4628      	mov	r0, r5
 8006bc2:	f000 fca1 	bl	8007508 <_sbrk_r>
 8006bc6:	1c43      	adds	r3, r0, #1
 8006bc8:	d00a      	beq.n	8006be0 <sbrk_aligned+0x34>
 8006bca:	1cc4      	adds	r4, r0, #3
 8006bcc:	f024 0403 	bic.w	r4, r4, #3
 8006bd0:	42a0      	cmp	r0, r4
 8006bd2:	d007      	beq.n	8006be4 <sbrk_aligned+0x38>
 8006bd4:	1a21      	subs	r1, r4, r0
 8006bd6:	4628      	mov	r0, r5
 8006bd8:	f000 fc96 	bl	8007508 <_sbrk_r>
 8006bdc:	3001      	adds	r0, #1
 8006bde:	d101      	bne.n	8006be4 <sbrk_aligned+0x38>
 8006be0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006be4:	4620      	mov	r0, r4
 8006be6:	bd70      	pop	{r4, r5, r6, pc}
 8006be8:	20000230 	.word	0x20000230

08006bec <_malloc_r>:
 8006bec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bf0:	1ccd      	adds	r5, r1, #3
 8006bf2:	4607      	mov	r7, r0
 8006bf4:	f025 0503 	bic.w	r5, r5, #3
 8006bf8:	3508      	adds	r5, #8
 8006bfa:	2d0c      	cmp	r5, #12
 8006bfc:	bf38      	it	cc
 8006bfe:	250c      	movcc	r5, #12
 8006c00:	2d00      	cmp	r5, #0
 8006c02:	db01      	blt.n	8006c08 <_malloc_r+0x1c>
 8006c04:	42a9      	cmp	r1, r5
 8006c06:	d905      	bls.n	8006c14 <_malloc_r+0x28>
 8006c08:	230c      	movs	r3, #12
 8006c0a:	2600      	movs	r6, #0
 8006c0c:	603b      	str	r3, [r7, #0]
 8006c0e:	4630      	mov	r0, r6
 8006c10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c14:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006ce8 <_malloc_r+0xfc>
 8006c18:	f000 faa6 	bl	8007168 <__malloc_lock>
 8006c1c:	f8d8 3000 	ldr.w	r3, [r8]
 8006c20:	461c      	mov	r4, r3
 8006c22:	bb5c      	cbnz	r4, 8006c7c <_malloc_r+0x90>
 8006c24:	4629      	mov	r1, r5
 8006c26:	4638      	mov	r0, r7
 8006c28:	f7ff ffc0 	bl	8006bac <sbrk_aligned>
 8006c2c:	1c43      	adds	r3, r0, #1
 8006c2e:	4604      	mov	r4, r0
 8006c30:	d155      	bne.n	8006cde <_malloc_r+0xf2>
 8006c32:	f8d8 4000 	ldr.w	r4, [r8]
 8006c36:	4626      	mov	r6, r4
 8006c38:	2e00      	cmp	r6, #0
 8006c3a:	d145      	bne.n	8006cc8 <_malloc_r+0xdc>
 8006c3c:	2c00      	cmp	r4, #0
 8006c3e:	d048      	beq.n	8006cd2 <_malloc_r+0xe6>
 8006c40:	6823      	ldr	r3, [r4, #0]
 8006c42:	4631      	mov	r1, r6
 8006c44:	4638      	mov	r0, r7
 8006c46:	eb04 0903 	add.w	r9, r4, r3
 8006c4a:	f000 fc5d 	bl	8007508 <_sbrk_r>
 8006c4e:	4581      	cmp	r9, r0
 8006c50:	d13f      	bne.n	8006cd2 <_malloc_r+0xe6>
 8006c52:	6821      	ldr	r1, [r4, #0]
 8006c54:	4638      	mov	r0, r7
 8006c56:	1a6d      	subs	r5, r5, r1
 8006c58:	4629      	mov	r1, r5
 8006c5a:	f7ff ffa7 	bl	8006bac <sbrk_aligned>
 8006c5e:	3001      	adds	r0, #1
 8006c60:	d037      	beq.n	8006cd2 <_malloc_r+0xe6>
 8006c62:	6823      	ldr	r3, [r4, #0]
 8006c64:	442b      	add	r3, r5
 8006c66:	6023      	str	r3, [r4, #0]
 8006c68:	f8d8 3000 	ldr.w	r3, [r8]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d038      	beq.n	8006ce2 <_malloc_r+0xf6>
 8006c70:	685a      	ldr	r2, [r3, #4]
 8006c72:	42a2      	cmp	r2, r4
 8006c74:	d12b      	bne.n	8006cce <_malloc_r+0xe2>
 8006c76:	2200      	movs	r2, #0
 8006c78:	605a      	str	r2, [r3, #4]
 8006c7a:	e00f      	b.n	8006c9c <_malloc_r+0xb0>
 8006c7c:	6822      	ldr	r2, [r4, #0]
 8006c7e:	1b52      	subs	r2, r2, r5
 8006c80:	d41f      	bmi.n	8006cc2 <_malloc_r+0xd6>
 8006c82:	2a0b      	cmp	r2, #11
 8006c84:	d917      	bls.n	8006cb6 <_malloc_r+0xca>
 8006c86:	1961      	adds	r1, r4, r5
 8006c88:	42a3      	cmp	r3, r4
 8006c8a:	6025      	str	r5, [r4, #0]
 8006c8c:	bf18      	it	ne
 8006c8e:	6059      	strne	r1, [r3, #4]
 8006c90:	6863      	ldr	r3, [r4, #4]
 8006c92:	bf08      	it	eq
 8006c94:	f8c8 1000 	streq.w	r1, [r8]
 8006c98:	5162      	str	r2, [r4, r5]
 8006c9a:	604b      	str	r3, [r1, #4]
 8006c9c:	f104 060b 	add.w	r6, r4, #11
 8006ca0:	4638      	mov	r0, r7
 8006ca2:	f000 fa67 	bl	8007174 <__malloc_unlock>
 8006ca6:	1d23      	adds	r3, r4, #4
 8006ca8:	f026 0607 	bic.w	r6, r6, #7
 8006cac:	1af2      	subs	r2, r6, r3
 8006cae:	d0ae      	beq.n	8006c0e <_malloc_r+0x22>
 8006cb0:	1b9b      	subs	r3, r3, r6
 8006cb2:	50a3      	str	r3, [r4, r2]
 8006cb4:	e7ab      	b.n	8006c0e <_malloc_r+0x22>
 8006cb6:	42a3      	cmp	r3, r4
 8006cb8:	6862      	ldr	r2, [r4, #4]
 8006cba:	d1dd      	bne.n	8006c78 <_malloc_r+0x8c>
 8006cbc:	f8c8 2000 	str.w	r2, [r8]
 8006cc0:	e7ec      	b.n	8006c9c <_malloc_r+0xb0>
 8006cc2:	4623      	mov	r3, r4
 8006cc4:	6864      	ldr	r4, [r4, #4]
 8006cc6:	e7ac      	b.n	8006c22 <_malloc_r+0x36>
 8006cc8:	4634      	mov	r4, r6
 8006cca:	6876      	ldr	r6, [r6, #4]
 8006ccc:	e7b4      	b.n	8006c38 <_malloc_r+0x4c>
 8006cce:	4613      	mov	r3, r2
 8006cd0:	e7cc      	b.n	8006c6c <_malloc_r+0x80>
 8006cd2:	230c      	movs	r3, #12
 8006cd4:	4638      	mov	r0, r7
 8006cd6:	603b      	str	r3, [r7, #0]
 8006cd8:	f000 fa4c 	bl	8007174 <__malloc_unlock>
 8006cdc:	e797      	b.n	8006c0e <_malloc_r+0x22>
 8006cde:	6025      	str	r5, [r4, #0]
 8006ce0:	e7dc      	b.n	8006c9c <_malloc_r+0xb0>
 8006ce2:	605b      	str	r3, [r3, #4]
 8006ce4:	deff      	udf	#255	; 0xff
 8006ce6:	bf00      	nop
 8006ce8:	2000022c 	.word	0x2000022c

08006cec <_printf_common>:
 8006cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cf0:	4616      	mov	r6, r2
 8006cf2:	4699      	mov	r9, r3
 8006cf4:	688a      	ldr	r2, [r1, #8]
 8006cf6:	4607      	mov	r7, r0
 8006cf8:	690b      	ldr	r3, [r1, #16]
 8006cfa:	460c      	mov	r4, r1
 8006cfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d00:	4293      	cmp	r3, r2
 8006d02:	bfb8      	it	lt
 8006d04:	4613      	movlt	r3, r2
 8006d06:	6033      	str	r3, [r6, #0]
 8006d08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d0c:	b10a      	cbz	r2, 8006d12 <_printf_common+0x26>
 8006d0e:	3301      	adds	r3, #1
 8006d10:	6033      	str	r3, [r6, #0]
 8006d12:	6823      	ldr	r3, [r4, #0]
 8006d14:	0699      	lsls	r1, r3, #26
 8006d16:	bf42      	ittt	mi
 8006d18:	6833      	ldrmi	r3, [r6, #0]
 8006d1a:	3302      	addmi	r3, #2
 8006d1c:	6033      	strmi	r3, [r6, #0]
 8006d1e:	6825      	ldr	r5, [r4, #0]
 8006d20:	f015 0506 	ands.w	r5, r5, #6
 8006d24:	d106      	bne.n	8006d34 <_printf_common+0x48>
 8006d26:	f104 0a19 	add.w	sl, r4, #25
 8006d2a:	68e3      	ldr	r3, [r4, #12]
 8006d2c:	6832      	ldr	r2, [r6, #0]
 8006d2e:	1a9b      	subs	r3, r3, r2
 8006d30:	42ab      	cmp	r3, r5
 8006d32:	dc2b      	bgt.n	8006d8c <_printf_common+0xa0>
 8006d34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d38:	1e13      	subs	r3, r2, #0
 8006d3a:	6822      	ldr	r2, [r4, #0]
 8006d3c:	bf18      	it	ne
 8006d3e:	2301      	movne	r3, #1
 8006d40:	0692      	lsls	r2, r2, #26
 8006d42:	d430      	bmi.n	8006da6 <_printf_common+0xba>
 8006d44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d48:	4649      	mov	r1, r9
 8006d4a:	4638      	mov	r0, r7
 8006d4c:	47c0      	blx	r8
 8006d4e:	3001      	adds	r0, #1
 8006d50:	d023      	beq.n	8006d9a <_printf_common+0xae>
 8006d52:	6823      	ldr	r3, [r4, #0]
 8006d54:	341a      	adds	r4, #26
 8006d56:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8006d5a:	f003 0306 	and.w	r3, r3, #6
 8006d5e:	2b04      	cmp	r3, #4
 8006d60:	bf0a      	itet	eq
 8006d62:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8006d66:	2500      	movne	r5, #0
 8006d68:	6833      	ldreq	r3, [r6, #0]
 8006d6a:	f04f 0600 	mov.w	r6, #0
 8006d6e:	bf08      	it	eq
 8006d70:	1aed      	subeq	r5, r5, r3
 8006d72:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006d76:	bf08      	it	eq
 8006d78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	bfc4      	itt	gt
 8006d80:	1a9b      	subgt	r3, r3, r2
 8006d82:	18ed      	addgt	r5, r5, r3
 8006d84:	42b5      	cmp	r5, r6
 8006d86:	d11a      	bne.n	8006dbe <_printf_common+0xd2>
 8006d88:	2000      	movs	r0, #0
 8006d8a:	e008      	b.n	8006d9e <_printf_common+0xb2>
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	4652      	mov	r2, sl
 8006d90:	4649      	mov	r1, r9
 8006d92:	4638      	mov	r0, r7
 8006d94:	47c0      	blx	r8
 8006d96:	3001      	adds	r0, #1
 8006d98:	d103      	bne.n	8006da2 <_printf_common+0xb6>
 8006d9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006da2:	3501      	adds	r5, #1
 8006da4:	e7c1      	b.n	8006d2a <_printf_common+0x3e>
 8006da6:	18e1      	adds	r1, r4, r3
 8006da8:	1c5a      	adds	r2, r3, #1
 8006daa:	2030      	movs	r0, #48	; 0x30
 8006dac:	3302      	adds	r3, #2
 8006dae:	4422      	add	r2, r4
 8006db0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006db4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006db8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006dbc:	e7c2      	b.n	8006d44 <_printf_common+0x58>
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	4622      	mov	r2, r4
 8006dc2:	4649      	mov	r1, r9
 8006dc4:	4638      	mov	r0, r7
 8006dc6:	47c0      	blx	r8
 8006dc8:	3001      	adds	r0, #1
 8006dca:	d0e6      	beq.n	8006d9a <_printf_common+0xae>
 8006dcc:	3601      	adds	r6, #1
 8006dce:	e7d9      	b.n	8006d84 <_printf_common+0x98>

08006dd0 <_printf_i>:
 8006dd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006dd4:	7e0f      	ldrb	r7, [r1, #24]
 8006dd6:	4691      	mov	r9, r2
 8006dd8:	4680      	mov	r8, r0
 8006dda:	460c      	mov	r4, r1
 8006ddc:	2f78      	cmp	r7, #120	; 0x78
 8006dde:	469a      	mov	sl, r3
 8006de0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006de2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006de6:	d807      	bhi.n	8006df8 <_printf_i+0x28>
 8006de8:	2f62      	cmp	r7, #98	; 0x62
 8006dea:	d80a      	bhi.n	8006e02 <_printf_i+0x32>
 8006dec:	2f00      	cmp	r7, #0
 8006dee:	f000 80d3 	beq.w	8006f98 <_printf_i+0x1c8>
 8006df2:	2f58      	cmp	r7, #88	; 0x58
 8006df4:	f000 80bf 	beq.w	8006f76 <_printf_i+0x1a6>
 8006df8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006dfc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e00:	e03a      	b.n	8006e78 <_printf_i+0xa8>
 8006e02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e06:	2b15      	cmp	r3, #21
 8006e08:	d8f6      	bhi.n	8006df8 <_printf_i+0x28>
 8006e0a:	a101      	add	r1, pc, #4	; (adr r1, 8006e10 <_printf_i+0x40>)
 8006e0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e10:	08006e69 	.word	0x08006e69
 8006e14:	08006e7d 	.word	0x08006e7d
 8006e18:	08006df9 	.word	0x08006df9
 8006e1c:	08006df9 	.word	0x08006df9
 8006e20:	08006df9 	.word	0x08006df9
 8006e24:	08006df9 	.word	0x08006df9
 8006e28:	08006e7d 	.word	0x08006e7d
 8006e2c:	08006df9 	.word	0x08006df9
 8006e30:	08006df9 	.word	0x08006df9
 8006e34:	08006df9 	.word	0x08006df9
 8006e38:	08006df9 	.word	0x08006df9
 8006e3c:	08006f7f 	.word	0x08006f7f
 8006e40:	08006ea9 	.word	0x08006ea9
 8006e44:	08006f3b 	.word	0x08006f3b
 8006e48:	08006df9 	.word	0x08006df9
 8006e4c:	08006df9 	.word	0x08006df9
 8006e50:	08006fa1 	.word	0x08006fa1
 8006e54:	08006df9 	.word	0x08006df9
 8006e58:	08006ea9 	.word	0x08006ea9
 8006e5c:	08006df9 	.word	0x08006df9
 8006e60:	08006df9 	.word	0x08006df9
 8006e64:	08006f43 	.word	0x08006f43
 8006e68:	682b      	ldr	r3, [r5, #0]
 8006e6a:	1d1a      	adds	r2, r3, #4
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	602a      	str	r2, [r5, #0]
 8006e70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e78:	2301      	movs	r3, #1
 8006e7a:	e09e      	b.n	8006fba <_printf_i+0x1ea>
 8006e7c:	6820      	ldr	r0, [r4, #0]
 8006e7e:	682b      	ldr	r3, [r5, #0]
 8006e80:	0607      	lsls	r7, r0, #24
 8006e82:	f103 0104 	add.w	r1, r3, #4
 8006e86:	6029      	str	r1, [r5, #0]
 8006e88:	d501      	bpl.n	8006e8e <_printf_i+0xbe>
 8006e8a:	681e      	ldr	r6, [r3, #0]
 8006e8c:	e003      	b.n	8006e96 <_printf_i+0xc6>
 8006e8e:	0646      	lsls	r6, r0, #25
 8006e90:	d5fb      	bpl.n	8006e8a <_printf_i+0xba>
 8006e92:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006e96:	2e00      	cmp	r6, #0
 8006e98:	da03      	bge.n	8006ea2 <_printf_i+0xd2>
 8006e9a:	232d      	movs	r3, #45	; 0x2d
 8006e9c:	4276      	negs	r6, r6
 8006e9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ea2:	4859      	ldr	r0, [pc, #356]	; (8007008 <_printf_i+0x238>)
 8006ea4:	230a      	movs	r3, #10
 8006ea6:	e012      	b.n	8006ece <_printf_i+0xfe>
 8006ea8:	682b      	ldr	r3, [r5, #0]
 8006eaa:	6820      	ldr	r0, [r4, #0]
 8006eac:	1d19      	adds	r1, r3, #4
 8006eae:	6029      	str	r1, [r5, #0]
 8006eb0:	0605      	lsls	r5, r0, #24
 8006eb2:	d501      	bpl.n	8006eb8 <_printf_i+0xe8>
 8006eb4:	681e      	ldr	r6, [r3, #0]
 8006eb6:	e002      	b.n	8006ebe <_printf_i+0xee>
 8006eb8:	0641      	lsls	r1, r0, #25
 8006eba:	d5fb      	bpl.n	8006eb4 <_printf_i+0xe4>
 8006ebc:	881e      	ldrh	r6, [r3, #0]
 8006ebe:	2f6f      	cmp	r7, #111	; 0x6f
 8006ec0:	4851      	ldr	r0, [pc, #324]	; (8007008 <_printf_i+0x238>)
 8006ec2:	bf0c      	ite	eq
 8006ec4:	2308      	moveq	r3, #8
 8006ec6:	230a      	movne	r3, #10
 8006ec8:	2100      	movs	r1, #0
 8006eca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ece:	6865      	ldr	r5, [r4, #4]
 8006ed0:	2d00      	cmp	r5, #0
 8006ed2:	60a5      	str	r5, [r4, #8]
 8006ed4:	bfa2      	ittt	ge
 8006ed6:	6821      	ldrge	r1, [r4, #0]
 8006ed8:	f021 0104 	bicge.w	r1, r1, #4
 8006edc:	6021      	strge	r1, [r4, #0]
 8006ede:	b90e      	cbnz	r6, 8006ee4 <_printf_i+0x114>
 8006ee0:	2d00      	cmp	r5, #0
 8006ee2:	d04a      	beq.n	8006f7a <_printf_i+0x1aa>
 8006ee4:	4615      	mov	r5, r2
 8006ee6:	fbb6 f1f3 	udiv	r1, r6, r3
 8006eea:	fb03 6711 	mls	r7, r3, r1, r6
 8006eee:	5dc7      	ldrb	r7, [r0, r7]
 8006ef0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006ef4:	4637      	mov	r7, r6
 8006ef6:	460e      	mov	r6, r1
 8006ef8:	42bb      	cmp	r3, r7
 8006efa:	d9f4      	bls.n	8006ee6 <_printf_i+0x116>
 8006efc:	2b08      	cmp	r3, #8
 8006efe:	d10b      	bne.n	8006f18 <_printf_i+0x148>
 8006f00:	6823      	ldr	r3, [r4, #0]
 8006f02:	07de      	lsls	r6, r3, #31
 8006f04:	d508      	bpl.n	8006f18 <_printf_i+0x148>
 8006f06:	6923      	ldr	r3, [r4, #16]
 8006f08:	6861      	ldr	r1, [r4, #4]
 8006f0a:	4299      	cmp	r1, r3
 8006f0c:	bfde      	ittt	le
 8006f0e:	2330      	movle	r3, #48	; 0x30
 8006f10:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006f14:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006f18:	1b52      	subs	r2, r2, r5
 8006f1a:	6122      	str	r2, [r4, #16]
 8006f1c:	464b      	mov	r3, r9
 8006f1e:	aa03      	add	r2, sp, #12
 8006f20:	4621      	mov	r1, r4
 8006f22:	4640      	mov	r0, r8
 8006f24:	f8cd a000 	str.w	sl, [sp]
 8006f28:	f7ff fee0 	bl	8006cec <_printf_common>
 8006f2c:	3001      	adds	r0, #1
 8006f2e:	d149      	bne.n	8006fc4 <_printf_i+0x1f4>
 8006f30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f34:	b004      	add	sp, #16
 8006f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f3a:	6823      	ldr	r3, [r4, #0]
 8006f3c:	f043 0320 	orr.w	r3, r3, #32
 8006f40:	6023      	str	r3, [r4, #0]
 8006f42:	2778      	movs	r7, #120	; 0x78
 8006f44:	4831      	ldr	r0, [pc, #196]	; (800700c <_printf_i+0x23c>)
 8006f46:	6823      	ldr	r3, [r4, #0]
 8006f48:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006f4c:	061f      	lsls	r7, r3, #24
 8006f4e:	6829      	ldr	r1, [r5, #0]
 8006f50:	f851 6b04 	ldr.w	r6, [r1], #4
 8006f54:	d402      	bmi.n	8006f5c <_printf_i+0x18c>
 8006f56:	065f      	lsls	r7, r3, #25
 8006f58:	bf48      	it	mi
 8006f5a:	b2b6      	uxthmi	r6, r6
 8006f5c:	07df      	lsls	r7, r3, #31
 8006f5e:	6029      	str	r1, [r5, #0]
 8006f60:	bf44      	itt	mi
 8006f62:	f043 0320 	orrmi.w	r3, r3, #32
 8006f66:	6023      	strmi	r3, [r4, #0]
 8006f68:	b91e      	cbnz	r6, 8006f72 <_printf_i+0x1a2>
 8006f6a:	6823      	ldr	r3, [r4, #0]
 8006f6c:	f023 0320 	bic.w	r3, r3, #32
 8006f70:	6023      	str	r3, [r4, #0]
 8006f72:	2310      	movs	r3, #16
 8006f74:	e7a8      	b.n	8006ec8 <_printf_i+0xf8>
 8006f76:	4824      	ldr	r0, [pc, #144]	; (8007008 <_printf_i+0x238>)
 8006f78:	e7e5      	b.n	8006f46 <_printf_i+0x176>
 8006f7a:	4615      	mov	r5, r2
 8006f7c:	e7be      	b.n	8006efc <_printf_i+0x12c>
 8006f7e:	682b      	ldr	r3, [r5, #0]
 8006f80:	6826      	ldr	r6, [r4, #0]
 8006f82:	1d18      	adds	r0, r3, #4
 8006f84:	6961      	ldr	r1, [r4, #20]
 8006f86:	6028      	str	r0, [r5, #0]
 8006f88:	0635      	lsls	r5, r6, #24
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	d501      	bpl.n	8006f92 <_printf_i+0x1c2>
 8006f8e:	6019      	str	r1, [r3, #0]
 8006f90:	e002      	b.n	8006f98 <_printf_i+0x1c8>
 8006f92:	0670      	lsls	r0, r6, #25
 8006f94:	d5fb      	bpl.n	8006f8e <_printf_i+0x1be>
 8006f96:	8019      	strh	r1, [r3, #0]
 8006f98:	2300      	movs	r3, #0
 8006f9a:	4615      	mov	r5, r2
 8006f9c:	6123      	str	r3, [r4, #16]
 8006f9e:	e7bd      	b.n	8006f1c <_printf_i+0x14c>
 8006fa0:	682b      	ldr	r3, [r5, #0]
 8006fa2:	2100      	movs	r1, #0
 8006fa4:	1d1a      	adds	r2, r3, #4
 8006fa6:	602a      	str	r2, [r5, #0]
 8006fa8:	681d      	ldr	r5, [r3, #0]
 8006faa:	6862      	ldr	r2, [r4, #4]
 8006fac:	4628      	mov	r0, r5
 8006fae:	f000 facd 	bl	800754c <memchr>
 8006fb2:	b108      	cbz	r0, 8006fb8 <_printf_i+0x1e8>
 8006fb4:	1b40      	subs	r0, r0, r5
 8006fb6:	6060      	str	r0, [r4, #4]
 8006fb8:	6863      	ldr	r3, [r4, #4]
 8006fba:	6123      	str	r3, [r4, #16]
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fc2:	e7ab      	b.n	8006f1c <_printf_i+0x14c>
 8006fc4:	6923      	ldr	r3, [r4, #16]
 8006fc6:	462a      	mov	r2, r5
 8006fc8:	4649      	mov	r1, r9
 8006fca:	4640      	mov	r0, r8
 8006fcc:	47d0      	blx	sl
 8006fce:	3001      	adds	r0, #1
 8006fd0:	d0ae      	beq.n	8006f30 <_printf_i+0x160>
 8006fd2:	6823      	ldr	r3, [r4, #0]
 8006fd4:	079b      	lsls	r3, r3, #30
 8006fd6:	d413      	bmi.n	8007000 <_printf_i+0x230>
 8006fd8:	68e0      	ldr	r0, [r4, #12]
 8006fda:	9b03      	ldr	r3, [sp, #12]
 8006fdc:	4298      	cmp	r0, r3
 8006fde:	bfb8      	it	lt
 8006fe0:	4618      	movlt	r0, r3
 8006fe2:	e7a7      	b.n	8006f34 <_printf_i+0x164>
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	4632      	mov	r2, r6
 8006fe8:	4649      	mov	r1, r9
 8006fea:	4640      	mov	r0, r8
 8006fec:	47d0      	blx	sl
 8006fee:	3001      	adds	r0, #1
 8006ff0:	d09e      	beq.n	8006f30 <_printf_i+0x160>
 8006ff2:	3501      	adds	r5, #1
 8006ff4:	68e3      	ldr	r3, [r4, #12]
 8006ff6:	9903      	ldr	r1, [sp, #12]
 8006ff8:	1a5b      	subs	r3, r3, r1
 8006ffa:	42ab      	cmp	r3, r5
 8006ffc:	dcf2      	bgt.n	8006fe4 <_printf_i+0x214>
 8006ffe:	e7eb      	b.n	8006fd8 <_printf_i+0x208>
 8007000:	2500      	movs	r5, #0
 8007002:	f104 0619 	add.w	r6, r4, #25
 8007006:	e7f5      	b.n	8006ff4 <_printf_i+0x224>
 8007008:	08007739 	.word	0x08007739
 800700c:	0800774a 	.word	0x0800774a

08007010 <__sflush_r>:
 8007010:	898a      	ldrh	r2, [r1, #12]
 8007012:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007016:	4605      	mov	r5, r0
 8007018:	0710      	lsls	r0, r2, #28
 800701a:	460c      	mov	r4, r1
 800701c:	d458      	bmi.n	80070d0 <__sflush_r+0xc0>
 800701e:	684b      	ldr	r3, [r1, #4]
 8007020:	2b00      	cmp	r3, #0
 8007022:	dc05      	bgt.n	8007030 <__sflush_r+0x20>
 8007024:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007026:	2b00      	cmp	r3, #0
 8007028:	dc02      	bgt.n	8007030 <__sflush_r+0x20>
 800702a:	2000      	movs	r0, #0
 800702c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007030:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007032:	2e00      	cmp	r6, #0
 8007034:	d0f9      	beq.n	800702a <__sflush_r+0x1a>
 8007036:	2300      	movs	r3, #0
 8007038:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800703c:	682f      	ldr	r7, [r5, #0]
 800703e:	6a21      	ldr	r1, [r4, #32]
 8007040:	602b      	str	r3, [r5, #0]
 8007042:	d032      	beq.n	80070aa <__sflush_r+0x9a>
 8007044:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007046:	89a3      	ldrh	r3, [r4, #12]
 8007048:	075a      	lsls	r2, r3, #29
 800704a:	d505      	bpl.n	8007058 <__sflush_r+0x48>
 800704c:	6863      	ldr	r3, [r4, #4]
 800704e:	1ac0      	subs	r0, r0, r3
 8007050:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007052:	b10b      	cbz	r3, 8007058 <__sflush_r+0x48>
 8007054:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007056:	1ac0      	subs	r0, r0, r3
 8007058:	2300      	movs	r3, #0
 800705a:	4602      	mov	r2, r0
 800705c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800705e:	4628      	mov	r0, r5
 8007060:	6a21      	ldr	r1, [r4, #32]
 8007062:	47b0      	blx	r6
 8007064:	1c43      	adds	r3, r0, #1
 8007066:	89a3      	ldrh	r3, [r4, #12]
 8007068:	d106      	bne.n	8007078 <__sflush_r+0x68>
 800706a:	6829      	ldr	r1, [r5, #0]
 800706c:	291d      	cmp	r1, #29
 800706e:	d82b      	bhi.n	80070c8 <__sflush_r+0xb8>
 8007070:	4a28      	ldr	r2, [pc, #160]	; (8007114 <__sflush_r+0x104>)
 8007072:	410a      	asrs	r2, r1
 8007074:	07d6      	lsls	r6, r2, #31
 8007076:	d427      	bmi.n	80070c8 <__sflush_r+0xb8>
 8007078:	2200      	movs	r2, #0
 800707a:	04d9      	lsls	r1, r3, #19
 800707c:	6062      	str	r2, [r4, #4]
 800707e:	6922      	ldr	r2, [r4, #16]
 8007080:	6022      	str	r2, [r4, #0]
 8007082:	d504      	bpl.n	800708e <__sflush_r+0x7e>
 8007084:	1c42      	adds	r2, r0, #1
 8007086:	d101      	bne.n	800708c <__sflush_r+0x7c>
 8007088:	682b      	ldr	r3, [r5, #0]
 800708a:	b903      	cbnz	r3, 800708e <__sflush_r+0x7e>
 800708c:	6560      	str	r0, [r4, #84]	; 0x54
 800708e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007090:	602f      	str	r7, [r5, #0]
 8007092:	2900      	cmp	r1, #0
 8007094:	d0c9      	beq.n	800702a <__sflush_r+0x1a>
 8007096:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800709a:	4299      	cmp	r1, r3
 800709c:	d002      	beq.n	80070a4 <__sflush_r+0x94>
 800709e:	4628      	mov	r0, r5
 80070a0:	f000 fa62 	bl	8007568 <_free_r>
 80070a4:	2000      	movs	r0, #0
 80070a6:	6360      	str	r0, [r4, #52]	; 0x34
 80070a8:	e7c0      	b.n	800702c <__sflush_r+0x1c>
 80070aa:	2301      	movs	r3, #1
 80070ac:	4628      	mov	r0, r5
 80070ae:	47b0      	blx	r6
 80070b0:	1c41      	adds	r1, r0, #1
 80070b2:	d1c8      	bne.n	8007046 <__sflush_r+0x36>
 80070b4:	682b      	ldr	r3, [r5, #0]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d0c5      	beq.n	8007046 <__sflush_r+0x36>
 80070ba:	2b1d      	cmp	r3, #29
 80070bc:	d001      	beq.n	80070c2 <__sflush_r+0xb2>
 80070be:	2b16      	cmp	r3, #22
 80070c0:	d101      	bne.n	80070c6 <__sflush_r+0xb6>
 80070c2:	602f      	str	r7, [r5, #0]
 80070c4:	e7b1      	b.n	800702a <__sflush_r+0x1a>
 80070c6:	89a3      	ldrh	r3, [r4, #12]
 80070c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070cc:	81a3      	strh	r3, [r4, #12]
 80070ce:	e7ad      	b.n	800702c <__sflush_r+0x1c>
 80070d0:	690f      	ldr	r7, [r1, #16]
 80070d2:	2f00      	cmp	r7, #0
 80070d4:	d0a9      	beq.n	800702a <__sflush_r+0x1a>
 80070d6:	0793      	lsls	r3, r2, #30
 80070d8:	680e      	ldr	r6, [r1, #0]
 80070da:	600f      	str	r7, [r1, #0]
 80070dc:	bf0c      	ite	eq
 80070de:	694b      	ldreq	r3, [r1, #20]
 80070e0:	2300      	movne	r3, #0
 80070e2:	eba6 0807 	sub.w	r8, r6, r7
 80070e6:	608b      	str	r3, [r1, #8]
 80070e8:	f1b8 0f00 	cmp.w	r8, #0
 80070ec:	dd9d      	ble.n	800702a <__sflush_r+0x1a>
 80070ee:	4643      	mov	r3, r8
 80070f0:	463a      	mov	r2, r7
 80070f2:	6a21      	ldr	r1, [r4, #32]
 80070f4:	4628      	mov	r0, r5
 80070f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80070f8:	47b0      	blx	r6
 80070fa:	2800      	cmp	r0, #0
 80070fc:	dc06      	bgt.n	800710c <__sflush_r+0xfc>
 80070fe:	89a3      	ldrh	r3, [r4, #12]
 8007100:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007104:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007108:	81a3      	strh	r3, [r4, #12]
 800710a:	e78f      	b.n	800702c <__sflush_r+0x1c>
 800710c:	4407      	add	r7, r0
 800710e:	eba8 0800 	sub.w	r8, r8, r0
 8007112:	e7e9      	b.n	80070e8 <__sflush_r+0xd8>
 8007114:	dfbffffe 	.word	0xdfbffffe

08007118 <_fflush_r>:
 8007118:	b538      	push	{r3, r4, r5, lr}
 800711a:	690b      	ldr	r3, [r1, #16]
 800711c:	4605      	mov	r5, r0
 800711e:	460c      	mov	r4, r1
 8007120:	b913      	cbnz	r3, 8007128 <_fflush_r+0x10>
 8007122:	2500      	movs	r5, #0
 8007124:	4628      	mov	r0, r5
 8007126:	bd38      	pop	{r3, r4, r5, pc}
 8007128:	b118      	cbz	r0, 8007132 <_fflush_r+0x1a>
 800712a:	6a03      	ldr	r3, [r0, #32]
 800712c:	b90b      	cbnz	r3, 8007132 <_fflush_r+0x1a>
 800712e:	f7ff fb75 	bl	800681c <__sinit>
 8007132:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d0f3      	beq.n	8007122 <_fflush_r+0xa>
 800713a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800713c:	07d0      	lsls	r0, r2, #31
 800713e:	d404      	bmi.n	800714a <_fflush_r+0x32>
 8007140:	0599      	lsls	r1, r3, #22
 8007142:	d402      	bmi.n	800714a <_fflush_r+0x32>
 8007144:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007146:	f7ff fbec 	bl	8006922 <__retarget_lock_acquire_recursive>
 800714a:	4628      	mov	r0, r5
 800714c:	4621      	mov	r1, r4
 800714e:	f7ff ff5f 	bl	8007010 <__sflush_r>
 8007152:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007154:	4605      	mov	r5, r0
 8007156:	07da      	lsls	r2, r3, #31
 8007158:	d4e4      	bmi.n	8007124 <_fflush_r+0xc>
 800715a:	89a3      	ldrh	r3, [r4, #12]
 800715c:	059b      	lsls	r3, r3, #22
 800715e:	d4e1      	bmi.n	8007124 <_fflush_r+0xc>
 8007160:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007162:	f7ff fbdf 	bl	8006924 <__retarget_lock_release_recursive>
 8007166:	e7dd      	b.n	8007124 <_fflush_r+0xc>

08007168 <__malloc_lock>:
 8007168:	4801      	ldr	r0, [pc, #4]	; (8007170 <__malloc_lock+0x8>)
 800716a:	f7ff bbda 	b.w	8006922 <__retarget_lock_acquire_recursive>
 800716e:	bf00      	nop
 8007170:	20000228 	.word	0x20000228

08007174 <__malloc_unlock>:
 8007174:	4801      	ldr	r0, [pc, #4]	; (800717c <__malloc_unlock+0x8>)
 8007176:	f7ff bbd5 	b.w	8006924 <__retarget_lock_release_recursive>
 800717a:	bf00      	nop
 800717c:	20000228 	.word	0x20000228

08007180 <__sread>:
 8007180:	b510      	push	{r4, lr}
 8007182:	460c      	mov	r4, r1
 8007184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007188:	f000 f9ac 	bl	80074e4 <_read_r>
 800718c:	2800      	cmp	r0, #0
 800718e:	bfab      	itete	ge
 8007190:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007192:	89a3      	ldrhlt	r3, [r4, #12]
 8007194:	181b      	addge	r3, r3, r0
 8007196:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800719a:	bfac      	ite	ge
 800719c:	6563      	strge	r3, [r4, #84]	; 0x54
 800719e:	81a3      	strhlt	r3, [r4, #12]
 80071a0:	bd10      	pop	{r4, pc}

080071a2 <__swrite>:
 80071a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071a6:	461f      	mov	r7, r3
 80071a8:	898b      	ldrh	r3, [r1, #12]
 80071aa:	4605      	mov	r5, r0
 80071ac:	460c      	mov	r4, r1
 80071ae:	05db      	lsls	r3, r3, #23
 80071b0:	4616      	mov	r6, r2
 80071b2:	d505      	bpl.n	80071c0 <__swrite+0x1e>
 80071b4:	2302      	movs	r3, #2
 80071b6:	2200      	movs	r2, #0
 80071b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071bc:	f000 f980 	bl	80074c0 <_lseek_r>
 80071c0:	89a3      	ldrh	r3, [r4, #12]
 80071c2:	4632      	mov	r2, r6
 80071c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071c8:	4628      	mov	r0, r5
 80071ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071ce:	81a3      	strh	r3, [r4, #12]
 80071d0:	463b      	mov	r3, r7
 80071d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071d6:	f000 b9a7 	b.w	8007528 <_write_r>

080071da <__sseek>:
 80071da:	b510      	push	{r4, lr}
 80071dc:	460c      	mov	r4, r1
 80071de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071e2:	f000 f96d 	bl	80074c0 <_lseek_r>
 80071e6:	1c43      	adds	r3, r0, #1
 80071e8:	89a3      	ldrh	r3, [r4, #12]
 80071ea:	bf15      	itete	ne
 80071ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80071ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80071f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80071f6:	81a3      	strheq	r3, [r4, #12]
 80071f8:	bf18      	it	ne
 80071fa:	81a3      	strhne	r3, [r4, #12]
 80071fc:	bd10      	pop	{r4, pc}

080071fe <__sclose>:
 80071fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007202:	f000 b92b 	b.w	800745c <_close_r>

08007206 <__swbuf_r>:
 8007206:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007208:	460e      	mov	r6, r1
 800720a:	4614      	mov	r4, r2
 800720c:	4605      	mov	r5, r0
 800720e:	b118      	cbz	r0, 8007218 <__swbuf_r+0x12>
 8007210:	6a03      	ldr	r3, [r0, #32]
 8007212:	b90b      	cbnz	r3, 8007218 <__swbuf_r+0x12>
 8007214:	f7ff fb02 	bl	800681c <__sinit>
 8007218:	69a3      	ldr	r3, [r4, #24]
 800721a:	60a3      	str	r3, [r4, #8]
 800721c:	89a3      	ldrh	r3, [r4, #12]
 800721e:	071a      	lsls	r2, r3, #28
 8007220:	d525      	bpl.n	800726e <__swbuf_r+0x68>
 8007222:	6923      	ldr	r3, [r4, #16]
 8007224:	b31b      	cbz	r3, 800726e <__swbuf_r+0x68>
 8007226:	6823      	ldr	r3, [r4, #0]
 8007228:	b2f6      	uxtb	r6, r6
 800722a:	6922      	ldr	r2, [r4, #16]
 800722c:	4637      	mov	r7, r6
 800722e:	1a98      	subs	r0, r3, r2
 8007230:	6963      	ldr	r3, [r4, #20]
 8007232:	4283      	cmp	r3, r0
 8007234:	dc04      	bgt.n	8007240 <__swbuf_r+0x3a>
 8007236:	4621      	mov	r1, r4
 8007238:	4628      	mov	r0, r5
 800723a:	f7ff ff6d 	bl	8007118 <_fflush_r>
 800723e:	b9e0      	cbnz	r0, 800727a <__swbuf_r+0x74>
 8007240:	68a3      	ldr	r3, [r4, #8]
 8007242:	3b01      	subs	r3, #1
 8007244:	60a3      	str	r3, [r4, #8]
 8007246:	6823      	ldr	r3, [r4, #0]
 8007248:	1c5a      	adds	r2, r3, #1
 800724a:	6022      	str	r2, [r4, #0]
 800724c:	701e      	strb	r6, [r3, #0]
 800724e:	1c43      	adds	r3, r0, #1
 8007250:	6962      	ldr	r2, [r4, #20]
 8007252:	429a      	cmp	r2, r3
 8007254:	d004      	beq.n	8007260 <__swbuf_r+0x5a>
 8007256:	89a3      	ldrh	r3, [r4, #12]
 8007258:	07db      	lsls	r3, r3, #31
 800725a:	d506      	bpl.n	800726a <__swbuf_r+0x64>
 800725c:	2e0a      	cmp	r6, #10
 800725e:	d104      	bne.n	800726a <__swbuf_r+0x64>
 8007260:	4621      	mov	r1, r4
 8007262:	4628      	mov	r0, r5
 8007264:	f7ff ff58 	bl	8007118 <_fflush_r>
 8007268:	b938      	cbnz	r0, 800727a <__swbuf_r+0x74>
 800726a:	4638      	mov	r0, r7
 800726c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800726e:	4621      	mov	r1, r4
 8007270:	4628      	mov	r0, r5
 8007272:	f000 f805 	bl	8007280 <__swsetup_r>
 8007276:	2800      	cmp	r0, #0
 8007278:	d0d5      	beq.n	8007226 <__swbuf_r+0x20>
 800727a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800727e:	e7f4      	b.n	800726a <__swbuf_r+0x64>

08007280 <__swsetup_r>:
 8007280:	b538      	push	{r3, r4, r5, lr}
 8007282:	4b2a      	ldr	r3, [pc, #168]	; (800732c <__swsetup_r+0xac>)
 8007284:	4605      	mov	r5, r0
 8007286:	460c      	mov	r4, r1
 8007288:	6818      	ldr	r0, [r3, #0]
 800728a:	b118      	cbz	r0, 8007294 <__swsetup_r+0x14>
 800728c:	6a03      	ldr	r3, [r0, #32]
 800728e:	b90b      	cbnz	r3, 8007294 <__swsetup_r+0x14>
 8007290:	f7ff fac4 	bl	800681c <__sinit>
 8007294:	89a3      	ldrh	r3, [r4, #12]
 8007296:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800729a:	0718      	lsls	r0, r3, #28
 800729c:	d422      	bmi.n	80072e4 <__swsetup_r+0x64>
 800729e:	06d9      	lsls	r1, r3, #27
 80072a0:	d407      	bmi.n	80072b2 <__swsetup_r+0x32>
 80072a2:	2309      	movs	r3, #9
 80072a4:	602b      	str	r3, [r5, #0]
 80072a6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80072aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072ae:	81a3      	strh	r3, [r4, #12]
 80072b0:	e034      	b.n	800731c <__swsetup_r+0x9c>
 80072b2:	0758      	lsls	r0, r3, #29
 80072b4:	d512      	bpl.n	80072dc <__swsetup_r+0x5c>
 80072b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80072b8:	b141      	cbz	r1, 80072cc <__swsetup_r+0x4c>
 80072ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80072be:	4299      	cmp	r1, r3
 80072c0:	d002      	beq.n	80072c8 <__swsetup_r+0x48>
 80072c2:	4628      	mov	r0, r5
 80072c4:	f000 f950 	bl	8007568 <_free_r>
 80072c8:	2300      	movs	r3, #0
 80072ca:	6363      	str	r3, [r4, #52]	; 0x34
 80072cc:	89a3      	ldrh	r3, [r4, #12]
 80072ce:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80072d2:	81a3      	strh	r3, [r4, #12]
 80072d4:	2300      	movs	r3, #0
 80072d6:	6063      	str	r3, [r4, #4]
 80072d8:	6923      	ldr	r3, [r4, #16]
 80072da:	6023      	str	r3, [r4, #0]
 80072dc:	89a3      	ldrh	r3, [r4, #12]
 80072de:	f043 0308 	orr.w	r3, r3, #8
 80072e2:	81a3      	strh	r3, [r4, #12]
 80072e4:	6923      	ldr	r3, [r4, #16]
 80072e6:	b94b      	cbnz	r3, 80072fc <__swsetup_r+0x7c>
 80072e8:	89a3      	ldrh	r3, [r4, #12]
 80072ea:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80072ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072f2:	d003      	beq.n	80072fc <__swsetup_r+0x7c>
 80072f4:	4621      	mov	r1, r4
 80072f6:	4628      	mov	r0, r5
 80072f8:	f000 f83f 	bl	800737a <__smakebuf_r>
 80072fc:	89a0      	ldrh	r0, [r4, #12]
 80072fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007302:	f010 0301 	ands.w	r3, r0, #1
 8007306:	d00a      	beq.n	800731e <__swsetup_r+0x9e>
 8007308:	2300      	movs	r3, #0
 800730a:	60a3      	str	r3, [r4, #8]
 800730c:	6963      	ldr	r3, [r4, #20]
 800730e:	425b      	negs	r3, r3
 8007310:	61a3      	str	r3, [r4, #24]
 8007312:	6923      	ldr	r3, [r4, #16]
 8007314:	b943      	cbnz	r3, 8007328 <__swsetup_r+0xa8>
 8007316:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800731a:	d1c4      	bne.n	80072a6 <__swsetup_r+0x26>
 800731c:	bd38      	pop	{r3, r4, r5, pc}
 800731e:	0781      	lsls	r1, r0, #30
 8007320:	bf58      	it	pl
 8007322:	6963      	ldrpl	r3, [r4, #20]
 8007324:	60a3      	str	r3, [r4, #8]
 8007326:	e7f4      	b.n	8007312 <__swsetup_r+0x92>
 8007328:	2000      	movs	r0, #0
 800732a:	e7f7      	b.n	800731c <__swsetup_r+0x9c>
 800732c:	200000c4 	.word	0x200000c4

08007330 <__swhatbuf_r>:
 8007330:	b570      	push	{r4, r5, r6, lr}
 8007332:	460c      	mov	r4, r1
 8007334:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007338:	b096      	sub	sp, #88	; 0x58
 800733a:	4615      	mov	r5, r2
 800733c:	2900      	cmp	r1, #0
 800733e:	461e      	mov	r6, r3
 8007340:	da0c      	bge.n	800735c <__swhatbuf_r+0x2c>
 8007342:	89a3      	ldrh	r3, [r4, #12]
 8007344:	2100      	movs	r1, #0
 8007346:	f013 0f80 	tst.w	r3, #128	; 0x80
 800734a:	bf0c      	ite	eq
 800734c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007350:	2340      	movne	r3, #64	; 0x40
 8007352:	2000      	movs	r0, #0
 8007354:	6031      	str	r1, [r6, #0]
 8007356:	602b      	str	r3, [r5, #0]
 8007358:	b016      	add	sp, #88	; 0x58
 800735a:	bd70      	pop	{r4, r5, r6, pc}
 800735c:	466a      	mov	r2, sp
 800735e:	f000 f88d 	bl	800747c <_fstat_r>
 8007362:	2800      	cmp	r0, #0
 8007364:	dbed      	blt.n	8007342 <__swhatbuf_r+0x12>
 8007366:	9901      	ldr	r1, [sp, #4]
 8007368:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800736c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007370:	4259      	negs	r1, r3
 8007372:	4159      	adcs	r1, r3
 8007374:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007378:	e7eb      	b.n	8007352 <__swhatbuf_r+0x22>

0800737a <__smakebuf_r>:
 800737a:	898b      	ldrh	r3, [r1, #12]
 800737c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800737e:	079d      	lsls	r5, r3, #30
 8007380:	4606      	mov	r6, r0
 8007382:	460c      	mov	r4, r1
 8007384:	d507      	bpl.n	8007396 <__smakebuf_r+0x1c>
 8007386:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800738a:	6023      	str	r3, [r4, #0]
 800738c:	6123      	str	r3, [r4, #16]
 800738e:	2301      	movs	r3, #1
 8007390:	6163      	str	r3, [r4, #20]
 8007392:	b002      	add	sp, #8
 8007394:	bd70      	pop	{r4, r5, r6, pc}
 8007396:	ab01      	add	r3, sp, #4
 8007398:	466a      	mov	r2, sp
 800739a:	f7ff ffc9 	bl	8007330 <__swhatbuf_r>
 800739e:	9900      	ldr	r1, [sp, #0]
 80073a0:	4605      	mov	r5, r0
 80073a2:	4630      	mov	r0, r6
 80073a4:	f7ff fc22 	bl	8006bec <_malloc_r>
 80073a8:	b948      	cbnz	r0, 80073be <__smakebuf_r+0x44>
 80073aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073ae:	059a      	lsls	r2, r3, #22
 80073b0:	d4ef      	bmi.n	8007392 <__smakebuf_r+0x18>
 80073b2:	f023 0303 	bic.w	r3, r3, #3
 80073b6:	f043 0302 	orr.w	r3, r3, #2
 80073ba:	81a3      	strh	r3, [r4, #12]
 80073bc:	e7e3      	b.n	8007386 <__smakebuf_r+0xc>
 80073be:	89a3      	ldrh	r3, [r4, #12]
 80073c0:	6020      	str	r0, [r4, #0]
 80073c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073c6:	6120      	str	r0, [r4, #16]
 80073c8:	81a3      	strh	r3, [r4, #12]
 80073ca:	9b00      	ldr	r3, [sp, #0]
 80073cc:	6163      	str	r3, [r4, #20]
 80073ce:	9b01      	ldr	r3, [sp, #4]
 80073d0:	b15b      	cbz	r3, 80073ea <__smakebuf_r+0x70>
 80073d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073d6:	4630      	mov	r0, r6
 80073d8:	f000 f862 	bl	80074a0 <_isatty_r>
 80073dc:	b128      	cbz	r0, 80073ea <__smakebuf_r+0x70>
 80073de:	89a3      	ldrh	r3, [r4, #12]
 80073e0:	f023 0303 	bic.w	r3, r3, #3
 80073e4:	f043 0301 	orr.w	r3, r3, #1
 80073e8:	81a3      	strh	r3, [r4, #12]
 80073ea:	89a3      	ldrh	r3, [r4, #12]
 80073ec:	431d      	orrs	r5, r3
 80073ee:	81a5      	strh	r5, [r4, #12]
 80073f0:	e7cf      	b.n	8007392 <__smakebuf_r+0x18>

080073f2 <_putc_r>:
 80073f2:	b570      	push	{r4, r5, r6, lr}
 80073f4:	460d      	mov	r5, r1
 80073f6:	4614      	mov	r4, r2
 80073f8:	4606      	mov	r6, r0
 80073fa:	b118      	cbz	r0, 8007404 <_putc_r+0x12>
 80073fc:	6a03      	ldr	r3, [r0, #32]
 80073fe:	b90b      	cbnz	r3, 8007404 <_putc_r+0x12>
 8007400:	f7ff fa0c 	bl	800681c <__sinit>
 8007404:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007406:	07d8      	lsls	r0, r3, #31
 8007408:	d405      	bmi.n	8007416 <_putc_r+0x24>
 800740a:	89a3      	ldrh	r3, [r4, #12]
 800740c:	0599      	lsls	r1, r3, #22
 800740e:	d402      	bmi.n	8007416 <_putc_r+0x24>
 8007410:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007412:	f7ff fa86 	bl	8006922 <__retarget_lock_acquire_recursive>
 8007416:	68a3      	ldr	r3, [r4, #8]
 8007418:	3b01      	subs	r3, #1
 800741a:	2b00      	cmp	r3, #0
 800741c:	60a3      	str	r3, [r4, #8]
 800741e:	da05      	bge.n	800742c <_putc_r+0x3a>
 8007420:	69a2      	ldr	r2, [r4, #24]
 8007422:	4293      	cmp	r3, r2
 8007424:	db12      	blt.n	800744c <_putc_r+0x5a>
 8007426:	b2eb      	uxtb	r3, r5
 8007428:	2b0a      	cmp	r3, #10
 800742a:	d00f      	beq.n	800744c <_putc_r+0x5a>
 800742c:	6823      	ldr	r3, [r4, #0]
 800742e:	1c5a      	adds	r2, r3, #1
 8007430:	6022      	str	r2, [r4, #0]
 8007432:	701d      	strb	r5, [r3, #0]
 8007434:	b2ed      	uxtb	r5, r5
 8007436:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007438:	07da      	lsls	r2, r3, #31
 800743a:	d405      	bmi.n	8007448 <_putc_r+0x56>
 800743c:	89a3      	ldrh	r3, [r4, #12]
 800743e:	059b      	lsls	r3, r3, #22
 8007440:	d402      	bmi.n	8007448 <_putc_r+0x56>
 8007442:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007444:	f7ff fa6e 	bl	8006924 <__retarget_lock_release_recursive>
 8007448:	4628      	mov	r0, r5
 800744a:	bd70      	pop	{r4, r5, r6, pc}
 800744c:	4629      	mov	r1, r5
 800744e:	4622      	mov	r2, r4
 8007450:	4630      	mov	r0, r6
 8007452:	f7ff fed8 	bl	8007206 <__swbuf_r>
 8007456:	4605      	mov	r5, r0
 8007458:	e7ed      	b.n	8007436 <_putc_r+0x44>
	...

0800745c <_close_r>:
 800745c:	b538      	push	{r3, r4, r5, lr}
 800745e:	2300      	movs	r3, #0
 8007460:	4d05      	ldr	r5, [pc, #20]	; (8007478 <_close_r+0x1c>)
 8007462:	4604      	mov	r4, r0
 8007464:	4608      	mov	r0, r1
 8007466:	602b      	str	r3, [r5, #0]
 8007468:	f7fd fcd1 	bl	8004e0e <_close>
 800746c:	1c43      	adds	r3, r0, #1
 800746e:	d102      	bne.n	8007476 <_close_r+0x1a>
 8007470:	682b      	ldr	r3, [r5, #0]
 8007472:	b103      	cbz	r3, 8007476 <_close_r+0x1a>
 8007474:	6023      	str	r3, [r4, #0]
 8007476:	bd38      	pop	{r3, r4, r5, pc}
 8007478:	20000234 	.word	0x20000234

0800747c <_fstat_r>:
 800747c:	b538      	push	{r3, r4, r5, lr}
 800747e:	2300      	movs	r3, #0
 8007480:	4d06      	ldr	r5, [pc, #24]	; (800749c <_fstat_r+0x20>)
 8007482:	4604      	mov	r4, r0
 8007484:	4608      	mov	r0, r1
 8007486:	4611      	mov	r1, r2
 8007488:	602b      	str	r3, [r5, #0]
 800748a:	f7fd fccc 	bl	8004e26 <_fstat>
 800748e:	1c43      	adds	r3, r0, #1
 8007490:	d102      	bne.n	8007498 <_fstat_r+0x1c>
 8007492:	682b      	ldr	r3, [r5, #0]
 8007494:	b103      	cbz	r3, 8007498 <_fstat_r+0x1c>
 8007496:	6023      	str	r3, [r4, #0]
 8007498:	bd38      	pop	{r3, r4, r5, pc}
 800749a:	bf00      	nop
 800749c:	20000234 	.word	0x20000234

080074a0 <_isatty_r>:
 80074a0:	b538      	push	{r3, r4, r5, lr}
 80074a2:	2300      	movs	r3, #0
 80074a4:	4d05      	ldr	r5, [pc, #20]	; (80074bc <_isatty_r+0x1c>)
 80074a6:	4604      	mov	r4, r0
 80074a8:	4608      	mov	r0, r1
 80074aa:	602b      	str	r3, [r5, #0]
 80074ac:	f7fd fccb 	bl	8004e46 <_isatty>
 80074b0:	1c43      	adds	r3, r0, #1
 80074b2:	d102      	bne.n	80074ba <_isatty_r+0x1a>
 80074b4:	682b      	ldr	r3, [r5, #0]
 80074b6:	b103      	cbz	r3, 80074ba <_isatty_r+0x1a>
 80074b8:	6023      	str	r3, [r4, #0]
 80074ba:	bd38      	pop	{r3, r4, r5, pc}
 80074bc:	20000234 	.word	0x20000234

080074c0 <_lseek_r>:
 80074c0:	b538      	push	{r3, r4, r5, lr}
 80074c2:	4604      	mov	r4, r0
 80074c4:	4d06      	ldr	r5, [pc, #24]	; (80074e0 <_lseek_r+0x20>)
 80074c6:	4608      	mov	r0, r1
 80074c8:	4611      	mov	r1, r2
 80074ca:	2200      	movs	r2, #0
 80074cc:	602a      	str	r2, [r5, #0]
 80074ce:	461a      	mov	r2, r3
 80074d0:	f7fd fcc4 	bl	8004e5c <_lseek>
 80074d4:	1c43      	adds	r3, r0, #1
 80074d6:	d102      	bne.n	80074de <_lseek_r+0x1e>
 80074d8:	682b      	ldr	r3, [r5, #0]
 80074da:	b103      	cbz	r3, 80074de <_lseek_r+0x1e>
 80074dc:	6023      	str	r3, [r4, #0]
 80074de:	bd38      	pop	{r3, r4, r5, pc}
 80074e0:	20000234 	.word	0x20000234

080074e4 <_read_r>:
 80074e4:	b538      	push	{r3, r4, r5, lr}
 80074e6:	4604      	mov	r4, r0
 80074e8:	4d06      	ldr	r5, [pc, #24]	; (8007504 <_read_r+0x20>)
 80074ea:	4608      	mov	r0, r1
 80074ec:	4611      	mov	r1, r2
 80074ee:	2200      	movs	r2, #0
 80074f0:	602a      	str	r2, [r5, #0]
 80074f2:	461a      	mov	r2, r3
 80074f4:	f7fd fc52 	bl	8004d9c <_read>
 80074f8:	1c43      	adds	r3, r0, #1
 80074fa:	d102      	bne.n	8007502 <_read_r+0x1e>
 80074fc:	682b      	ldr	r3, [r5, #0]
 80074fe:	b103      	cbz	r3, 8007502 <_read_r+0x1e>
 8007500:	6023      	str	r3, [r4, #0]
 8007502:	bd38      	pop	{r3, r4, r5, pc}
 8007504:	20000234 	.word	0x20000234

08007508 <_sbrk_r>:
 8007508:	b538      	push	{r3, r4, r5, lr}
 800750a:	2300      	movs	r3, #0
 800750c:	4d05      	ldr	r5, [pc, #20]	; (8007524 <_sbrk_r+0x1c>)
 800750e:	4604      	mov	r4, r0
 8007510:	4608      	mov	r0, r1
 8007512:	602b      	str	r3, [r5, #0]
 8007514:	f7fd fcb0 	bl	8004e78 <_sbrk>
 8007518:	1c43      	adds	r3, r0, #1
 800751a:	d102      	bne.n	8007522 <_sbrk_r+0x1a>
 800751c:	682b      	ldr	r3, [r5, #0]
 800751e:	b103      	cbz	r3, 8007522 <_sbrk_r+0x1a>
 8007520:	6023      	str	r3, [r4, #0]
 8007522:	bd38      	pop	{r3, r4, r5, pc}
 8007524:	20000234 	.word	0x20000234

08007528 <_write_r>:
 8007528:	b538      	push	{r3, r4, r5, lr}
 800752a:	4604      	mov	r4, r0
 800752c:	4d06      	ldr	r5, [pc, #24]	; (8007548 <_write_r+0x20>)
 800752e:	4608      	mov	r0, r1
 8007530:	4611      	mov	r1, r2
 8007532:	2200      	movs	r2, #0
 8007534:	602a      	str	r2, [r5, #0]
 8007536:	461a      	mov	r2, r3
 8007538:	f7fd fc4d 	bl	8004dd6 <_write>
 800753c:	1c43      	adds	r3, r0, #1
 800753e:	d102      	bne.n	8007546 <_write_r+0x1e>
 8007540:	682b      	ldr	r3, [r5, #0]
 8007542:	b103      	cbz	r3, 8007546 <_write_r+0x1e>
 8007544:	6023      	str	r3, [r4, #0]
 8007546:	bd38      	pop	{r3, r4, r5, pc}
 8007548:	20000234 	.word	0x20000234

0800754c <memchr>:
 800754c:	b2c9      	uxtb	r1, r1
 800754e:	4402      	add	r2, r0
 8007550:	b510      	push	{r4, lr}
 8007552:	4290      	cmp	r0, r2
 8007554:	4603      	mov	r3, r0
 8007556:	d101      	bne.n	800755c <memchr+0x10>
 8007558:	2300      	movs	r3, #0
 800755a:	e003      	b.n	8007564 <memchr+0x18>
 800755c:	781c      	ldrb	r4, [r3, #0]
 800755e:	3001      	adds	r0, #1
 8007560:	428c      	cmp	r4, r1
 8007562:	d1f6      	bne.n	8007552 <memchr+0x6>
 8007564:	4618      	mov	r0, r3
 8007566:	bd10      	pop	{r4, pc}

08007568 <_free_r>:
 8007568:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800756a:	2900      	cmp	r1, #0
 800756c:	d043      	beq.n	80075f6 <_free_r+0x8e>
 800756e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007572:	1f0c      	subs	r4, r1, #4
 8007574:	9001      	str	r0, [sp, #4]
 8007576:	2b00      	cmp	r3, #0
 8007578:	bfb8      	it	lt
 800757a:	18e4      	addlt	r4, r4, r3
 800757c:	f7ff fdf4 	bl	8007168 <__malloc_lock>
 8007580:	4a1e      	ldr	r2, [pc, #120]	; (80075fc <_free_r+0x94>)
 8007582:	9801      	ldr	r0, [sp, #4]
 8007584:	6813      	ldr	r3, [r2, #0]
 8007586:	b933      	cbnz	r3, 8007596 <_free_r+0x2e>
 8007588:	6063      	str	r3, [r4, #4]
 800758a:	6014      	str	r4, [r2, #0]
 800758c:	b003      	add	sp, #12
 800758e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007592:	f7ff bdef 	b.w	8007174 <__malloc_unlock>
 8007596:	42a3      	cmp	r3, r4
 8007598:	d908      	bls.n	80075ac <_free_r+0x44>
 800759a:	6825      	ldr	r5, [r4, #0]
 800759c:	1961      	adds	r1, r4, r5
 800759e:	428b      	cmp	r3, r1
 80075a0:	bf01      	itttt	eq
 80075a2:	6819      	ldreq	r1, [r3, #0]
 80075a4:	685b      	ldreq	r3, [r3, #4]
 80075a6:	1949      	addeq	r1, r1, r5
 80075a8:	6021      	streq	r1, [r4, #0]
 80075aa:	e7ed      	b.n	8007588 <_free_r+0x20>
 80075ac:	461a      	mov	r2, r3
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	b10b      	cbz	r3, 80075b6 <_free_r+0x4e>
 80075b2:	42a3      	cmp	r3, r4
 80075b4:	d9fa      	bls.n	80075ac <_free_r+0x44>
 80075b6:	6811      	ldr	r1, [r2, #0]
 80075b8:	1855      	adds	r5, r2, r1
 80075ba:	42a5      	cmp	r5, r4
 80075bc:	d10b      	bne.n	80075d6 <_free_r+0x6e>
 80075be:	6824      	ldr	r4, [r4, #0]
 80075c0:	4421      	add	r1, r4
 80075c2:	1854      	adds	r4, r2, r1
 80075c4:	6011      	str	r1, [r2, #0]
 80075c6:	42a3      	cmp	r3, r4
 80075c8:	d1e0      	bne.n	800758c <_free_r+0x24>
 80075ca:	681c      	ldr	r4, [r3, #0]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	440c      	add	r4, r1
 80075d0:	6053      	str	r3, [r2, #4]
 80075d2:	6014      	str	r4, [r2, #0]
 80075d4:	e7da      	b.n	800758c <_free_r+0x24>
 80075d6:	d902      	bls.n	80075de <_free_r+0x76>
 80075d8:	230c      	movs	r3, #12
 80075da:	6003      	str	r3, [r0, #0]
 80075dc:	e7d6      	b.n	800758c <_free_r+0x24>
 80075de:	6825      	ldr	r5, [r4, #0]
 80075e0:	1961      	adds	r1, r4, r5
 80075e2:	428b      	cmp	r3, r1
 80075e4:	bf02      	ittt	eq
 80075e6:	6819      	ldreq	r1, [r3, #0]
 80075e8:	685b      	ldreq	r3, [r3, #4]
 80075ea:	1949      	addeq	r1, r1, r5
 80075ec:	6063      	str	r3, [r4, #4]
 80075ee:	bf08      	it	eq
 80075f0:	6021      	streq	r1, [r4, #0]
 80075f2:	6054      	str	r4, [r2, #4]
 80075f4:	e7ca      	b.n	800758c <_free_r+0x24>
 80075f6:	b003      	add	sp, #12
 80075f8:	bd30      	pop	{r4, r5, pc}
 80075fa:	bf00      	nop
 80075fc:	2000022c 	.word	0x2000022c

08007600 <_init>:
 8007600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007602:	bf00      	nop
 8007604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007606:	bc08      	pop	{r3}
 8007608:	469e      	mov	lr, r3
 800760a:	4770      	bx	lr

0800760c <_fini>:
 800760c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800760e:	bf00      	nop
 8007610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007612:	bc08      	pop	{r3}
 8007614:	469e      	mov	lr, r3
 8007616:	4770      	bx	lr
