
second_present_Secure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  0c000000  0c000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a88  0c0001f4  0c0001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0c001c7c  0c001c7c  00011c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0c001cec  0c001cec  0002e020  2**0
                  CONTENTS
  4 .ARM          00000000  0c001cec  0c001cec  0002e020  2**0
                  CONTENTS
  5 .preinit_array 00000000  0c001cec  0c001cec  0002e020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0c001cec  0c001cec  00011cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0c001cf0  0c001cf0  00011cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  30000000  0c001cf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .gnu.sgstubs  00000020  0c03e000  0c03e000  0002e000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .bss          00000028  3000000c  3000000c  0003000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  30000034  30000034  0003000c  2**0
                  ALLOC
 12 .ARM.attributes 00000036  00000000  00000000  0002e020  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002e056  2**0
                  CONTENTS, READONLY
 14 .debug_info   000052fe  00000000  00000000  0002e099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001199  00000000  00000000  00033397  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000590  00000000  00000000  00034530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000416  00000000  00000000  00034ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000275a0  00000000  00000000  00034ed6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00006e36  00000000  00000000  0005c476  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fa27e  00000000  00000000  000632ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001530  00000000  00000000  0015d52c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  0015ea5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0c0001f4 <__do_global_dtors_aux>:
 c0001f4:	b510      	push	{r4, lr}
 c0001f6:	4c05      	ldr	r4, [pc, #20]	; (c00020c <__do_global_dtors_aux+0x18>)
 c0001f8:	7823      	ldrb	r3, [r4, #0]
 c0001fa:	b933      	cbnz	r3, c00020a <__do_global_dtors_aux+0x16>
 c0001fc:	4b04      	ldr	r3, [pc, #16]	; (c000210 <__do_global_dtors_aux+0x1c>)
 c0001fe:	b113      	cbz	r3, c000206 <__do_global_dtors_aux+0x12>
 c000200:	4804      	ldr	r0, [pc, #16]	; (c000214 <__do_global_dtors_aux+0x20>)
 c000202:	f3af 8000 	nop.w
 c000206:	2301      	movs	r3, #1
 c000208:	7023      	strb	r3, [r4, #0]
 c00020a:	bd10      	pop	{r4, pc}
 c00020c:	3000000c 	.word	0x3000000c
 c000210:	00000000 	.word	0x00000000
 c000214:	0c001c64 	.word	0x0c001c64

0c000218 <frame_dummy>:
 c000218:	b508      	push	{r3, lr}
 c00021a:	4b03      	ldr	r3, [pc, #12]	; (c000228 <frame_dummy+0x10>)
 c00021c:	b11b      	cbz	r3, c000226 <frame_dummy+0xe>
 c00021e:	4903      	ldr	r1, [pc, #12]	; (c00022c <frame_dummy+0x14>)
 c000220:	4803      	ldr	r0, [pc, #12]	; (c000230 <frame_dummy+0x18>)
 c000222:	f3af 8000 	nop.w
 c000226:	bd08      	pop	{r3, pc}
 c000228:	00000000 	.word	0x00000000
 c00022c:	30000010 	.word	0x30000010
 c000230:	0c001c64 	.word	0x0c001c64

0c000234 <__gnu_cmse_nonsecure_call>:
 c000234:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
 c000238:	4627      	mov	r7, r4
 c00023a:	46a0      	mov	r8, r4
 c00023c:	46a1      	mov	r9, r4
 c00023e:	46a2      	mov	sl, r4
 c000240:	46a3      	mov	fp, r4
 c000242:	46a4      	mov	ip, r4
 c000244:	ed2d 8b10 	vpush	{d8-d15}
 c000248:	f04f 0500 	mov.w	r5, #0
 c00024c:	ec45 5b18 	vmov	d8, r5, r5
 c000250:	ec45 5a19 	vmov	s18, s19, r5, r5
 c000254:	ec45 5a1a 	vmov	s20, s21, r5, r5
 c000258:	ec45 5a1b 	vmov	s22, s23, r5, r5
 c00025c:	ec45 5a1c 	vmov	s24, s25, r5, r5
 c000260:	ec45 5a1d 	vmov	s26, s27, r5, r5
 c000264:	ec45 5a1e 	vmov	s28, s29, r5, r5
 c000268:	ec45 5a1f 	vmov	s30, s31, r5, r5
 c00026c:	eef1 5a10 	vmrs	r5, fpscr
 c000270:	f64f 7660 	movw	r6, #65376	; 0xff60
 c000274:	f6c0 76ff 	movt	r6, #4095	; 0xfff
 c000278:	4035      	ands	r5, r6
 c00027a:	eee1 5a10 	vmsr	fpscr, r5
 c00027e:	f384 8800 	msr	CPSR_f, r4
 c000282:	4625      	mov	r5, r4
 c000284:	4626      	mov	r6, r4
 c000286:	47a4      	blxns	r4
 c000288:	ecbd 8b10 	vpop	{d8-d15}
 c00028c:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}

0c000290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 c000290:	b580      	push	{r7, lr}
 c000292:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 c000294:	f001 f909 	bl	c0014aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* GTZC initialisation */
  MX_GTZC_S_Init();
 c000298:	f000 f84a 	bl	c000330 <MX_GTZC_S_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 c00029c:	f000 f8c0 	bl	c000420 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /*************** Setup and jump to non-secure *******************************/

  NonSecure_Init();
 c0002a0:	f000 f802 	bl	c0002a8 <NonSecure_Init>

  /* Non-secure software does not return, this code is not executed */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 c0002a4:	e7fe      	b.n	c0002a4 <main+0x14>
	...

0c0002a8 <NonSecure_Init>:
  *         This function is responsible for Non-secure initialization and switch
  *         to non-secure state
  * @retval None
  */
static void NonSecure_Init(void)
{
 c0002a8:	b590      	push	{r4, r7, lr}
 c0002aa:	b083      	sub	sp, #12
 c0002ac:	af00      	add	r7, sp, #0
  funcptr_NS NonSecure_ResetHandler;

  SCB_NS->VTOR = VTOR_TABLE_NS_START_ADDR;
 c0002ae:	4b1d      	ldr	r3, [pc, #116]	; (c000324 <NonSecure_Init+0x7c>)
 c0002b0:	4a1d      	ldr	r2, [pc, #116]	; (c000328 <NonSecure_Init+0x80>)
 c0002b2:	609a      	str	r2, [r3, #8]

  /* Set non-secure main stack (MSP_NS) */
  __TZ_set_MSP_NS((*(uint32_t *)VTOR_TABLE_NS_START_ADDR));
 c0002b4:	4b1c      	ldr	r3, [pc, #112]	; (c000328 <NonSecure_Init+0x80>)
 c0002b6:	681b      	ldr	r3, [r3, #0]
 c0002b8:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 c0002ba:	683b      	ldr	r3, [r7, #0]
 c0002bc:	f383 8888 	msr	MSP_NS, r3
}
 c0002c0:	bf00      	nop

  /* Get non-secure reset handler */
  NonSecure_ResetHandler = (funcptr_NS)(*((uint32_t *)((VTOR_TABLE_NS_START_ADDR) + 4U)));
 c0002c2:	4b1a      	ldr	r3, [pc, #104]	; (c00032c <NonSecure_Init+0x84>)
 c0002c4:	681b      	ldr	r3, [r3, #0]
 c0002c6:	607b      	str	r3, [r7, #4]

  /* Start non-secure state software application */
  NonSecure_ResetHandler();
 c0002c8:	687b      	ldr	r3, [r7, #4]
 c0002ca:	461c      	mov	r4, r3
 c0002cc:	0864      	lsrs	r4, r4, #1
 c0002ce:	0064      	lsls	r4, r4, #1
 c0002d0:	4620      	mov	r0, r4
 c0002d2:	4621      	mov	r1, r4
 c0002d4:	4622      	mov	r2, r4
 c0002d6:	4623      	mov	r3, r4
 c0002d8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c0002dc:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c0002e0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c0002e4:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c0002e8:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c0002ec:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c0002f0:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c0002f4:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c0002f8:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c0002fc:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c000300:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c000304:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c000308:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c00030c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c000310:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c000314:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c000318:	f7ff ff8c 	bl	c000234 <__gnu_cmse_nonsecure_call>
}
 c00031c:	bf00      	nop
 c00031e:	370c      	adds	r7, #12
 c000320:	46bd      	mov	sp, r7
 c000322:	bd90      	pop	{r4, r7, pc}
 c000324:	e002ed00 	.word	0xe002ed00
 c000328:	08040000 	.word	0x08040000
 c00032c:	08040004 	.word	0x08040004

0c000330 <MX_GTZC_S_Init>:
  * @brief GTZC_S Initialization Function
  * @param None
  * @retval None
  */
static void MX_GTZC_S_Init(void)
{
 c000330:	b580      	push	{r7, lr}
 c000332:	b09c      	sub	sp, #112	; 0x70
 c000334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN GTZC_S_Init 0 */

  /* USER CODE END GTZC_S_Init 0 */

  MPCBB_ConfigTypeDef MPCBB_NonSecureArea_Desc = {0};
 c000336:	1d3b      	adds	r3, r7, #4
 c000338:	226c      	movs	r2, #108	; 0x6c
 c00033a:	2100      	movs	r1, #0
 c00033c:	4618      	mov	r0, r3
 c00033e:	f001 fc57 	bl	c001bf0 <memset>

  /* USER CODE BEGIN GTZC_S_Init 1 */

  /* USER CODE END GTZC_S_Init 1 */
  MPCBB_NonSecureArea_Desc.SecureRWIllegalMode = GTZC_MPCBB_SRWILADIS_ENABLE;
 c000342:	2300      	movs	r3, #0
 c000344:	607b      	str	r3, [r7, #4]
  MPCBB_NonSecureArea_Desc.InvertSecureState = GTZC_MPCBB_INVSECSTATE_NOT_INVERTED;
 c000346:	2300      	movs	r3, #0
 c000348:	60bb      	str	r3, [r7, #8]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[0] =   0xFFFFFFFF;
 c00034a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c00034e:	60fb      	str	r3, [r7, #12]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[1] =   0xFFFFFFFF;
 c000350:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c000354:	613b      	str	r3, [r7, #16]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[2] =   0xFFFFFFFF;
 c000356:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c00035a:	617b      	str	r3, [r7, #20]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[3] =   0xFFFFFFFF;
 c00035c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c000360:	61bb      	str	r3, [r7, #24]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[4] =   0xFFFFFFFF;
 c000362:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c000366:	61fb      	str	r3, [r7, #28]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0xFFFFFFFF;
 c000368:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c00036c:	623b      	str	r3, [r7, #32]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[6] =   0xFFFFFFFF;
 c00036e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c000372:	627b      	str	r3, [r7, #36]	; 0x24
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0xFFFFFFFF;
 c000374:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c000378:	62bb      	str	r3, [r7, #40]	; 0x28
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[8] =   0xFFFFFFFF;
 c00037a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c00037e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[9] =   0xFFFFFFFF;
 c000380:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c000384:	633b      	str	r3, [r7, #48]	; 0x30
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[10] =   0xFFFFFFFF;
 c000386:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c00038a:	637b      	str	r3, [r7, #52]	; 0x34
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[11] =   0xFFFFFFFF;
 c00038c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 c000390:	63bb      	str	r3, [r7, #56]	; 0x38
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[12] =   0x00000000;
 c000392:	2300      	movs	r3, #0
 c000394:	63fb      	str	r3, [r7, #60]	; 0x3c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[13] =   0x00000000;
 c000396:	2300      	movs	r3, #0
 c000398:	643b      	str	r3, [r7, #64]	; 0x40
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[14] =   0x00000000;
 c00039a:	2300      	movs	r3, #0
 c00039c:	647b      	str	r3, [r7, #68]	; 0x44
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[15] =   0x00000000;
 c00039e:	2300      	movs	r3, #0
 c0003a0:	64bb      	str	r3, [r7, #72]	; 0x48
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[16] =   0x00000000;
 c0003a2:	2300      	movs	r3, #0
 c0003a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[17] =   0x00000000;
 c0003a6:	2300      	movs	r3, #0
 c0003a8:	653b      	str	r3, [r7, #80]	; 0x50
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[18] =   0x00000000;
 c0003aa:	2300      	movs	r3, #0
 c0003ac:	657b      	str	r3, [r7, #84]	; 0x54
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[19] =   0x00000000;
 c0003ae:	2300      	movs	r3, #0
 c0003b0:	65bb      	str	r3, [r7, #88]	; 0x58
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[20] =   0x00000000;
 c0003b2:	2300      	movs	r3, #0
 c0003b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[21] =   0x00000000;
 c0003b6:	2300      	movs	r3, #0
 c0003b8:	663b      	str	r3, [r7, #96]	; 0x60
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[22] =   0x00000000;
 c0003ba:	2300      	movs	r3, #0
 c0003bc:	667b      	str	r3, [r7, #100]	; 0x64
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[23] =   0x00000000;
 c0003be:	2300      	movs	r3, #0
 c0003c0:	66bb      	str	r3, [r7, #104]	; 0x68
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c0003c2:	2300      	movs	r3, #0
 c0003c4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM1_BASE, &MPCBB_NonSecureArea_Desc) != HAL_OK)
 c0003c6:	1d3b      	adds	r3, r7, #4
 c0003c8:	4619      	mov	r1, r3
 c0003ca:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 c0003ce:	f001 fb8b 	bl	c001ae8 <HAL_GTZC_MPCBB_ConfigMem>
 c0003d2:	4603      	mov	r3, r0
 c0003d4:	2b00      	cmp	r3, #0
 c0003d6:	d001      	beq.n	c0003dc <MX_GTZC_S_Init+0xac>
  {
    Error_Handler();
 c0003d8:	f000 f87c 	bl	c0004d4 <Error_Handler>
  }
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[0] =   0x00000000;
 c0003dc:	2300      	movs	r3, #0
 c0003de:	60fb      	str	r3, [r7, #12]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[1] =   0x00000000;
 c0003e0:	2300      	movs	r3, #0
 c0003e2:	613b      	str	r3, [r7, #16]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[2] =   0x00000000;
 c0003e4:	2300      	movs	r3, #0
 c0003e6:	617b      	str	r3, [r7, #20]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[3] =   0x00000000;
 c0003e8:	2300      	movs	r3, #0
 c0003ea:	61bb      	str	r3, [r7, #24]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[4] =   0x00000000;
 c0003ec:	2300      	movs	r3, #0
 c0003ee:	61fb      	str	r3, [r7, #28]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0x00000000;
 c0003f0:	2300      	movs	r3, #0
 c0003f2:	623b      	str	r3, [r7, #32]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[6] =   0x00000000;
 c0003f4:	2300      	movs	r3, #0
 c0003f6:	627b      	str	r3, [r7, #36]	; 0x24
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0x00000000;
 c0003f8:	2300      	movs	r3, #0
 c0003fa:	62bb      	str	r3, [r7, #40]	; 0x28
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c0003fc:	2300      	movs	r3, #0
 c0003fe:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM2_BASE, &MPCBB_NonSecureArea_Desc) != HAL_OK)
 c000400:	1d3b      	adds	r3, r7, #4
 c000402:	4619      	mov	r1, r3
 c000404:	4805      	ldr	r0, [pc, #20]	; (c00041c <MX_GTZC_S_Init+0xec>)
 c000406:	f001 fb6f 	bl	c001ae8 <HAL_GTZC_MPCBB_ConfigMem>
 c00040a:	4603      	mov	r3, r0
 c00040c:	2b00      	cmp	r3, #0
 c00040e:	d001      	beq.n	c000414 <MX_GTZC_S_Init+0xe4>
  {
    Error_Handler();
 c000410:	f000 f860 	bl	c0004d4 <Error_Handler>
  }
  /* USER CODE BEGIN GTZC_S_Init 2 */

  /* USER CODE END GTZC_S_Init 2 */

}
 c000414:	bf00      	nop
 c000416:	3770      	adds	r7, #112	; 0x70
 c000418:	46bd      	mov	sp, r7
 c00041a:	bd80      	pop	{r7, pc}
 c00041c:	30030000 	.word	0x30030000

0c000420 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 c000420:	b580      	push	{r7, lr}
 c000422:	b088      	sub	sp, #32
 c000424:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 c000426:	f107 030c 	add.w	r3, r7, #12
 c00042a:	2200      	movs	r2, #0
 c00042c:	601a      	str	r2, [r3, #0]
 c00042e:	605a      	str	r2, [r3, #4]
 c000430:	609a      	str	r2, [r3, #8]
 c000432:	60da      	str	r2, [r3, #12]
 c000434:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 c000436:	4b23      	ldr	r3, [pc, #140]	; (c0004c4 <MX_GPIO_Init+0xa4>)
 c000438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c00043a:	4a22      	ldr	r2, [pc, #136]	; (c0004c4 <MX_GPIO_Init+0xa4>)
 c00043c:	f043 0304 	orr.w	r3, r3, #4
 c000440:	64d3      	str	r3, [r2, #76]	; 0x4c
 c000442:	4b20      	ldr	r3, [pc, #128]	; (c0004c4 <MX_GPIO_Init+0xa4>)
 c000444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000446:	f003 0304 	and.w	r3, r3, #4
 c00044a:	60bb      	str	r3, [r7, #8]
 c00044c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 c00044e:	4b1d      	ldr	r3, [pc, #116]	; (c0004c4 <MX_GPIO_Init+0xa4>)
 c000450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000452:	4a1c      	ldr	r2, [pc, #112]	; (c0004c4 <MX_GPIO_Init+0xa4>)
 c000454:	f043 0301 	orr.w	r3, r3, #1
 c000458:	64d3      	str	r3, [r2, #76]	; 0x4c
 c00045a:	4b1a      	ldr	r3, [pc, #104]	; (c0004c4 <MX_GPIO_Init+0xa4>)
 c00045c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c00045e:	f003 0301 	and.w	r3, r3, #1
 c000462:	607b      	str	r3, [r7, #4]
 c000464:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 c000466:	4b17      	ldr	r3, [pc, #92]	; (c0004c4 <MX_GPIO_Init+0xa4>)
 c000468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c00046a:	4a16      	ldr	r2, [pc, #88]	; (c0004c4 <MX_GPIO_Init+0xa4>)
 c00046c:	f043 0302 	orr.w	r3, r3, #2
 c000470:	64d3      	str	r3, [r2, #76]	; 0x4c
 c000472:	4b14      	ldr	r3, [pc, #80]	; (c0004c4 <MX_GPIO_Init+0xa4>)
 c000474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000476:	f003 0302 	and.w	r3, r3, #2
 c00047a:	603b      	str	r3, [r7, #0]
 c00047c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 c00047e:	2200      	movs	r2, #0
 c000480:	2180      	movs	r1, #128	; 0x80
 c000482:	4811      	ldr	r0, [pc, #68]	; (c0004c8 <MX_GPIO_Init+0xa8>)
 c000484:	f001 fae0 	bl	c001a48 <HAL_GPIO_WritePin>

  /*IO attributes management functions */
  HAL_GPIO_ConfigPinAttributes(GPIOC, GPIO_PIN_7, GPIO_PIN_NSEC);
 c000488:	2200      	movs	r2, #0
 c00048a:	2180      	movs	r1, #128	; 0x80
 c00048c:	480f      	ldr	r0, [pc, #60]	; (c0004cc <MX_GPIO_Init+0xac>)
 c00048e:	f001 faf3 	bl	c001a78 <HAL_GPIO_ConfigPinAttributes>

  /*IO attributes management functions */
  HAL_GPIO_ConfigPinAttributes(GPIOA, GPIO_PIN_9, GPIO_PIN_NSEC);
 c000492:	2200      	movs	r2, #0
 c000494:	f44f 7100 	mov.w	r1, #512	; 0x200
 c000498:	480d      	ldr	r0, [pc, #52]	; (c0004d0 <MX_GPIO_Init+0xb0>)
 c00049a:	f001 faed 	bl	c001a78 <HAL_GPIO_ConfigPinAttributes>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 c00049e:	2380      	movs	r3, #128	; 0x80
 c0004a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 c0004a2:	2301      	movs	r3, #1
 c0004a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 c0004a6:	2300      	movs	r3, #0
 c0004a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c0004aa:	2300      	movs	r3, #0
 c0004ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 c0004ae:	f107 030c 	add.w	r3, r7, #12
 c0004b2:	4619      	mov	r1, r3
 c0004b4:	4804      	ldr	r0, [pc, #16]	; (c0004c8 <MX_GPIO_Init+0xa8>)
 c0004b6:	f001 f947 	bl	c001748 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 c0004ba:	bf00      	nop
 c0004bc:	3720      	adds	r7, #32
 c0004be:	46bd      	mov	sp, r7
 c0004c0:	bd80      	pop	{r7, pc}
 c0004c2:	bf00      	nop
 c0004c4:	50021000 	.word	0x50021000
 c0004c8:	52020400 	.word	0x52020400
 c0004cc:	52020800 	.word	0x52020800
 c0004d0:	52020000 	.word	0x52020000

0c0004d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 c0004d4:	b480      	push	{r7}
 c0004d6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 c0004d8:	b672      	cpsid	i
}
 c0004da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 c0004dc:	e7fe      	b.n	c0004dc <Error_Handler+0x8>

0c0004de <present_encrypt>:
/* GLOBAL FUNCTION DEFINITIONS                                               */
/*****************************************************************************/

void
present_encrypt (uint8_t * p_text, uint8_t const * p_key)
{
 c0004de:	b590      	push	{r4, r7, lr}
 c0004e0:	b089      	sub	sp, #36	; 0x24
 c0004e2:	af00      	add	r7, sp, #0
 c0004e4:	6078      	str	r0, [r7, #4]
 c0004e6:	6039      	str	r1, [r7, #0]
    uint8_t subkey[PRESENT_KEY_SIZE];
    uint8_t round = 1u;
 c0004e8:	2301      	movs	r3, #1
 c0004ea:	77fb      	strb	r3, [r7, #31]

    /* 
     * Copy the key into a buffer to keep original value unchanged during
     * the encryption process.
     */
    memcpy(subkey, p_key, PRESENT_KEY_SIZE);
 c0004ec:	683b      	ldr	r3, [r7, #0]
 c0004ee:	f107 040c 	add.w	r4, r7, #12
 c0004f2:	6818      	ldr	r0, [r3, #0]
 c0004f4:	6859      	ldr	r1, [r3, #4]
 c0004f6:	689a      	ldr	r2, [r3, #8]
 c0004f8:	68db      	ldr	r3, [r3, #12]
 c0004fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}

    /*
     * Main loop of the PRESENT encryption algorithm.
     */
    while (round <= PRESENT_ROUND_COUNT)
 c0004fc:	e017      	b.n	c00052e <present_encrypt+0x50>
    {
        present_add_key(p_text, subkey);
 c0004fe:	f107 030c 	add.w	r3, r7, #12
 c000502:	4619      	mov	r1, r3
 c000504:	6878      	ldr	r0, [r7, #4]
 c000506:	f000 f85a 	bl	c0005be <present_add_key>
        present_substitution(p_text, PRESENT_OP_ENCRYPT);
 c00050a:	2100      	movs	r1, #0
 c00050c:	6878      	ldr	r0, [r7, #4]
 c00050e:	f000 f87d 	bl	c00060c <present_substitution>
        present_permutation(p_text, PRESENT_OP_ENCRYPT);
 c000512:	2100      	movs	r1, #0
 c000514:	6878      	ldr	r0, [r7, #4]
 c000516:	f000 f8c3 	bl	c0006a0 <present_permutation>

        present_update_key(subkey, round, PRESENT_OP_ENCRYPT);
 c00051a:	7ff9      	ldrb	r1, [r7, #31]
 c00051c:	f107 030c 	add.w	r3, r7, #12
 c000520:	2200      	movs	r2, #0
 c000522:	4618      	mov	r0, r3
 c000524:	f000 fa94 	bl	c000a50 <present_update_key>

        round++;
 c000528:	7ffb      	ldrb	r3, [r7, #31]
 c00052a:	3301      	adds	r3, #1
 c00052c:	77fb      	strb	r3, [r7, #31]
    while (round <= PRESENT_ROUND_COUNT)
 c00052e:	7ffb      	ldrb	r3, [r7, #31]
 c000530:	2b0a      	cmp	r3, #10
 c000532:	d9e4      	bls.n	c0004fe <present_encrypt+0x20>
    };

    /*
     * Add the last subkey to finish the process.
     */
    present_add_key(p_text, subkey);
 c000534:	f107 030c 	add.w	r3, r7, #12
 c000538:	4619      	mov	r1, r3
 c00053a:	6878      	ldr	r0, [r7, #4]
 c00053c:	f000 f83f 	bl	c0005be <present_add_key>
}  /* present_encrypt() */
 c000540:	bf00      	nop
 c000542:	3724      	adds	r7, #36	; 0x24
 c000544:	46bd      	mov	sp, r7
 c000546:	bd90      	pop	{r4, r7, pc}

0c000548 <present_decrypt>:

void
present_decrypt (uint8_t * p_text, uint8_t const * p_key)
{
 c000548:	b590      	push	{r4, r7, lr}
 c00054a:	b089      	sub	sp, #36	; 0x24
 c00054c:	af00      	add	r7, sp, #0
 c00054e:	6078      	str	r0, [r7, #4]
 c000550:	6039      	str	r1, [r7, #0]
    uint8_t subkey[PRESENT_KEY_SIZE];
    uint8_t round = PRESENT_ROUND_COUNT;
 c000552:	230a      	movs	r3, #10
 c000554:	77fb      	strb	r3, [r7, #31]

    /* 
     * Copy the key into a buffer to keep original value unchanged during
     * the decryption process.
     */
    memcpy(subkey, p_key, PRESENT_KEY_SIZE);
 c000556:	683b      	ldr	r3, [r7, #0]
 c000558:	f107 040c 	add.w	r4, r7, #12
 c00055c:	6818      	ldr	r0, [r3, #0]
 c00055e:	6859      	ldr	r1, [r3, #4]
 c000560:	689a      	ldr	r2, [r3, #8]
 c000562:	68db      	ldr	r3, [r3, #12]
 c000564:	c40f      	stmia	r4!, {r0, r1, r2, r3}

    /*
     * Generate decryption key from the encryption key.
     */
    present_generate_decrypt_key(subkey);
 c000566:	f107 030c 	add.w	r3, r7, #12
 c00056a:	4618      	mov	r0, r3
 c00056c:	f000 fb1a 	bl	c000ba4 <present_generate_decrypt_key>

    /*
     * Last step of the encryption process is the first step of
     * the decryption. Add generated decryption key first.
     */
    present_add_key(p_text, subkey);
 c000570:	f107 030c 	add.w	r3, r7, #12
 c000574:	4619      	mov	r1, r3
 c000576:	6878      	ldr	r0, [r7, #4]
 c000578:	f000 f821 	bl	c0005be <present_add_key>

    /*
     * Main loop of the PRESENT decryption algorithm.
     */
    while (round > 0u)
 c00057c:	e017      	b.n	c0005ae <present_decrypt+0x66>
    {
        present_permutation(p_text, PRESENT_OP_DECRYPT);
 c00057e:	2101      	movs	r1, #1
 c000580:	6878      	ldr	r0, [r7, #4]
 c000582:	f000 f88d 	bl	c0006a0 <present_permutation>
        present_substitution(p_text, PRESENT_OP_DECRYPT);
 c000586:	2101      	movs	r1, #1
 c000588:	6878      	ldr	r0, [r7, #4]
 c00058a:	f000 f83f 	bl	c00060c <present_substitution>

        present_update_key(subkey, round, PRESENT_OP_DECRYPT);
 c00058e:	7ff9      	ldrb	r1, [r7, #31]
 c000590:	f107 030c 	add.w	r3, r7, #12
 c000594:	2201      	movs	r2, #1
 c000596:	4618      	mov	r0, r3
 c000598:	f000 fa5a 	bl	c000a50 <present_update_key>
        present_add_key(p_text, subkey);
 c00059c:	f107 030c 	add.w	r3, r7, #12
 c0005a0:	4619      	mov	r1, r3
 c0005a2:	6878      	ldr	r0, [r7, #4]
 c0005a4:	f000 f80b 	bl	c0005be <present_add_key>

        round--;
 c0005a8:	7ffb      	ldrb	r3, [r7, #31]
 c0005aa:	3b01      	subs	r3, #1
 c0005ac:	77fb      	strb	r3, [r7, #31]
    while (round > 0u)
 c0005ae:	7ffb      	ldrb	r3, [r7, #31]
 c0005b0:	2b00      	cmp	r3, #0
 c0005b2:	d1e4      	bne.n	c00057e <present_decrypt+0x36>
    }
}  /* present_decrypt() */
 c0005b4:	bf00      	nop
 c0005b6:	bf00      	nop
 c0005b8:	3724      	adds	r7, #36	; 0x24
 c0005ba:	46bd      	mov	sp, r7
 c0005bc:	bd90      	pop	{r4, r7, pc}

0c0005be <present_add_key>:
/* STATIC FUNCTION DEFINITIONS                                               */
/*****************************************************************************/

static void
present_add_key (uint8_t * p_text, uint8_t const * p_key)
{
 c0005be:	b480      	push	{r7}
 c0005c0:	b085      	sub	sp, #20
 c0005c2:	af00      	add	r7, sp, #0
 c0005c4:	6078      	str	r0, [r7, #4]
 c0005c6:	6039      	str	r1, [r7, #0]

    /*
     * Move key pointer to the start byte of the key part that specified in
     * the article. For further information, see article's section 3.
     */
    p_key += PRESENT_KEY_OFFSET;
 c0005c8:	683b      	ldr	r3, [r7, #0]
 c0005ca:	3308      	adds	r3, #8
 c0005cc:	603b      	str	r3, [r7, #0]

    /*
     * Adding key is simply logic XOR operation.
     */
    for (byte = 0u; byte < PRESENT_CRYPT_SIZE; byte++)
 c0005ce:	2300      	movs	r3, #0
 c0005d0:	73fb      	strb	r3, [r7, #15]
 c0005d2:	e010      	b.n	c0005f6 <present_add_key+0x38>
    {
        p_text[byte] = p_text[byte] ^ p_key[byte];
 c0005d4:	7bfb      	ldrb	r3, [r7, #15]
 c0005d6:	687a      	ldr	r2, [r7, #4]
 c0005d8:	4413      	add	r3, r2
 c0005da:	7819      	ldrb	r1, [r3, #0]
 c0005dc:	7bfb      	ldrb	r3, [r7, #15]
 c0005de:	683a      	ldr	r2, [r7, #0]
 c0005e0:	4413      	add	r3, r2
 c0005e2:	781a      	ldrb	r2, [r3, #0]
 c0005e4:	7bfb      	ldrb	r3, [r7, #15]
 c0005e6:	6878      	ldr	r0, [r7, #4]
 c0005e8:	4403      	add	r3, r0
 c0005ea:	404a      	eors	r2, r1
 c0005ec:	b2d2      	uxtb	r2, r2
 c0005ee:	701a      	strb	r2, [r3, #0]
    for (byte = 0u; byte < PRESENT_CRYPT_SIZE; byte++)
 c0005f0:	7bfb      	ldrb	r3, [r7, #15]
 c0005f2:	3301      	adds	r3, #1
 c0005f4:	73fb      	strb	r3, [r7, #15]
 c0005f6:	7bfb      	ldrb	r3, [r7, #15]
 c0005f8:	2b07      	cmp	r3, #7
 c0005fa:	d9eb      	bls.n	c0005d4 <present_add_key+0x16>
    }
}  /* present_add_key() */
 c0005fc:	bf00      	nop
 c0005fe:	bf00      	nop
 c000600:	3714      	adds	r7, #20
 c000602:	46bd      	mov	sp, r7
 c000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000608:	4770      	bx	lr
	...

0c00060c <present_substitution>:

static void
present_substitution (uint8_t * p_text, present_op_t op)
{
 c00060c:	b480      	push	{r7}
 c00060e:	b085      	sub	sp, #20
 c000610:	af00      	add	r7, sp, #0
 c000612:	6078      	str	r0, [r7, #4]
 c000614:	460b      	mov	r3, r1
 c000616:	70fb      	strb	r3, [r7, #3]

    /*
     * If the operation is the encryption, use substitution box in further
     * steps. Otherwise, use the inverse substitution box.
     */
    switch (op)
 c000618:	78fb      	ldrb	r3, [r7, #3]
 c00061a:	2b00      	cmp	r3, #0
 c00061c:	d002      	beq.n	c000624 <present_substitution+0x18>
 c00061e:	2b01      	cmp	r3, #1
 c000620:	d003      	beq.n	c00062a <present_substitution+0x1e>
        default:
            /*
             * An undefined operation occurred. Use forced assertion.
             */
            ASSERT(0);
        break;
 c000622:	e005      	b.n	c000630 <present_substitution+0x24>
            p_sbox = g_sbox;
 c000624:	4b1c      	ldr	r3, [pc, #112]	; (c000698 <present_substitution+0x8c>)
 c000626:	60fb      	str	r3, [r7, #12]
        break;
 c000628:	e002      	b.n	c000630 <present_substitution+0x24>
            p_sbox = g_sbox_inv;
 c00062a:	4b1c      	ldr	r3, [pc, #112]	; (c00069c <present_substitution+0x90>)
 c00062c:	60fb      	str	r3, [r7, #12]
        break;
 c00062e:	bf00      	nop
    }

    /*
     * Replace all the bytes in the text block.
     */
    for (byte = 0u; byte < PRESENT_CRYPT_SIZE; byte++)
 c000630:	2300      	movs	r3, #0
 c000632:	72fb      	strb	r3, [r7, #11]
 c000634:	e025      	b.n	c000682 <present_substitution+0x76>
    {
        high_nibble = (p_text[byte] & 0xF0u) >> 4;
 c000636:	7afb      	ldrb	r3, [r7, #11]
 c000638:	687a      	ldr	r2, [r7, #4]
 c00063a:	4413      	add	r3, r2
 c00063c:	781b      	ldrb	r3, [r3, #0]
 c00063e:	091b      	lsrs	r3, r3, #4
 c000640:	72bb      	strb	r3, [r7, #10]
        high_nibble = p_sbox[high_nibble];
 c000642:	7abb      	ldrb	r3, [r7, #10]
 c000644:	68fa      	ldr	r2, [r7, #12]
 c000646:	4413      	add	r3, r2
 c000648:	781b      	ldrb	r3, [r3, #0]
 c00064a:	72bb      	strb	r3, [r7, #10]

        low_nibble = p_text[byte] & 0x0Fu;
 c00064c:	7afb      	ldrb	r3, [r7, #11]
 c00064e:	687a      	ldr	r2, [r7, #4]
 c000650:	4413      	add	r3, r2
 c000652:	781b      	ldrb	r3, [r3, #0]
 c000654:	f003 030f 	and.w	r3, r3, #15
 c000658:	727b      	strb	r3, [r7, #9]
        low_nibble = p_sbox[low_nibble];
 c00065a:	7a7b      	ldrb	r3, [r7, #9]
 c00065c:	68fa      	ldr	r2, [r7, #12]
 c00065e:	4413      	add	r3, r2
 c000660:	781b      	ldrb	r3, [r3, #0]
 c000662:	727b      	strb	r3, [r7, #9]

        p_text[byte] = (high_nibble << 4) | low_nibble;
 c000664:	7abb      	ldrb	r3, [r7, #10]
 c000666:	011b      	lsls	r3, r3, #4
 c000668:	b25a      	sxtb	r2, r3
 c00066a:	f997 3009 	ldrsb.w	r3, [r7, #9]
 c00066e:	4313      	orrs	r3, r2
 c000670:	b259      	sxtb	r1, r3
 c000672:	7afb      	ldrb	r3, [r7, #11]
 c000674:	687a      	ldr	r2, [r7, #4]
 c000676:	4413      	add	r3, r2
 c000678:	b2ca      	uxtb	r2, r1
 c00067a:	701a      	strb	r2, [r3, #0]
    for (byte = 0u; byte < PRESENT_CRYPT_SIZE; byte++)
 c00067c:	7afb      	ldrb	r3, [r7, #11]
 c00067e:	3301      	adds	r3, #1
 c000680:	72fb      	strb	r3, [r7, #11]
 c000682:	7afb      	ldrb	r3, [r7, #11]
 c000684:	2b07      	cmp	r3, #7
 c000686:	d9d6      	bls.n	c000636 <present_substitution+0x2a>
    }
}  /* present_substitution() */
 c000688:	bf00      	nop
 c00068a:	bf00      	nop
 c00068c:	3714      	adds	r7, #20
 c00068e:	46bd      	mov	sp, r7
 c000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000694:	4770      	bx	lr
 c000696:	bf00      	nop
 c000698:	0c001c7c 	.word	0x0c001c7c
 c00069c:	0c001c8c 	.word	0x0c001c8c

0c0006a0 <present_permutation>:

static void
present_permutation (uint8_t * p_text, present_op_t op)
{
 c0006a0:	b580      	push	{r7, lr}
 c0006a2:	b082      	sub	sp, #8
 c0006a4:	af00      	add	r7, sp, #0
 c0006a6:	6078      	str	r0, [r7, #4]
 c0006a8:	460b      	mov	r3, r1
 c0006aa:	70fb      	strb	r3, [r7, #3]
    ASSERT(NULL != p_text);

    switch (op) {
 c0006ac:	78fb      	ldrb	r3, [r7, #3]
 c0006ae:	2b00      	cmp	r3, #0
 c0006b0:	d002      	beq.n	c0006b8 <present_permutation+0x18>
 c0006b2:	2b01      	cmp	r3, #1
 c0006b4:	d004      	beq.n	c0006c0 <present_permutation+0x20>
            /*
             * An undefined operation occurred. Use forced assertion.
             */
            ASSERT(0);
    }
}  /* present_permutation() */
 c0006b6:	e007      	b.n	c0006c8 <present_permutation+0x28>
            present_encrypt_permutation(p_text);
 c0006b8:	6878      	ldr	r0, [r7, #4]
 c0006ba:	f000 f809 	bl	c0006d0 <present_encrypt_permutation>
        break;
 c0006be:	e003      	b.n	c0006c8 <present_permutation+0x28>
            present_decrypt_permutation(p_text);
 c0006c0:	6878      	ldr	r0, [r7, #4]
 c0006c2:	f000 f8ab 	bl	c00081c <present_decrypt_permutation>
        break;
 c0006c6:	bf00      	nop
}  /* present_permutation() */
 c0006c8:	bf00      	nop
 c0006ca:	3708      	adds	r7, #8
 c0006cc:	46bd      	mov	sp, r7
 c0006ce:	bd80      	pop	{r7, pc}

0c0006d0 <present_encrypt_permutation>:

static void
present_encrypt_permutation (uint8_t * p_text)
{
 c0006d0:	b580      	push	{r7, lr}
 c0006d2:	b086      	sub	sp, #24
 c0006d4:	af00      	add	r7, sp, #0
 c0006d6:	6078      	str	r0, [r7, #4]
    uint16_t buff[PRESENT_PERMUTATION_BUFF_SIZE] = {0u};
 c0006d8:	f107 030c 	add.w	r3, r7, #12
 c0006dc:	2200      	movs	r2, #0
 c0006de:	601a      	str	r2, [r3, #0]
 c0006e0:	605a      	str	r2, [r3, #4]
    uint8_t  bit                                 = 0u;
 c0006e2:	2300      	movs	r3, #0
 c0006e4:	75fb      	strb	r3, [r7, #23]
    uint8_t  byte                                = 0u;
 c0006e6:	2300      	movs	r3, #0
 c0006e8:	75bb      	strb	r3, [r7, #22]
     * Every new 16-bit block has two bits from every bytes of the old text
     * block. Even bits are from low and odd bits are from high nibbles.
     * In every step of the loop, bit values are picked from related bytes.
     * For detailed explanation of the bit positioning, see the article.
     */
    while (byte < PRESENT_CRYPT_SIZE)
 c0006ea:	e088      	b.n	c0007fe <present_encrypt_permutation+0x12e>
    {
        buff[0] |= BITVAL(p_text[byte], 0u) << (2 * bit);
 c0006ec:	89ba      	ldrh	r2, [r7, #12]
 c0006ee:	7dbb      	ldrb	r3, [r7, #22]
 c0006f0:	6879      	ldr	r1, [r7, #4]
 c0006f2:	440b      	add	r3, r1
 c0006f4:	781b      	ldrb	r3, [r3, #0]
 c0006f6:	f003 0101 	and.w	r1, r3, #1
 c0006fa:	7dfb      	ldrb	r3, [r7, #23]
 c0006fc:	005b      	lsls	r3, r3, #1
 c0006fe:	fa01 f303 	lsl.w	r3, r1, r3
 c000702:	b29b      	uxth	r3, r3
 c000704:	4313      	orrs	r3, r2
 c000706:	b29b      	uxth	r3, r3
 c000708:	81bb      	strh	r3, [r7, #12]
        buff[0] |= BITVAL(p_text[byte], 4u) << (2 * bit + 1);
 c00070a:	89ba      	ldrh	r2, [r7, #12]
 c00070c:	7dbb      	ldrb	r3, [r7, #22]
 c00070e:	6879      	ldr	r1, [r7, #4]
 c000710:	440b      	add	r3, r1
 c000712:	781b      	ldrb	r3, [r3, #0]
 c000714:	091b      	lsrs	r3, r3, #4
 c000716:	f003 0101 	and.w	r1, r3, #1
 c00071a:	7dfb      	ldrb	r3, [r7, #23]
 c00071c:	005b      	lsls	r3, r3, #1
 c00071e:	3301      	adds	r3, #1
 c000720:	fa01 f303 	lsl.w	r3, r1, r3
 c000724:	b29b      	uxth	r3, r3
 c000726:	4313      	orrs	r3, r2
 c000728:	b29b      	uxth	r3, r3
 c00072a:	81bb      	strh	r3, [r7, #12]

        buff[1] |= BITVAL(p_text[byte], 1u) << (2 * bit);
 c00072c:	89fa      	ldrh	r2, [r7, #14]
 c00072e:	7dbb      	ldrb	r3, [r7, #22]
 c000730:	6879      	ldr	r1, [r7, #4]
 c000732:	440b      	add	r3, r1
 c000734:	781b      	ldrb	r3, [r3, #0]
 c000736:	085b      	lsrs	r3, r3, #1
 c000738:	f003 0101 	and.w	r1, r3, #1
 c00073c:	7dfb      	ldrb	r3, [r7, #23]
 c00073e:	005b      	lsls	r3, r3, #1
 c000740:	fa01 f303 	lsl.w	r3, r1, r3
 c000744:	b29b      	uxth	r3, r3
 c000746:	4313      	orrs	r3, r2
 c000748:	b29b      	uxth	r3, r3
 c00074a:	81fb      	strh	r3, [r7, #14]
        buff[1] |= BITVAL(p_text[byte], 5u) << (2 * bit + 1);
 c00074c:	89fa      	ldrh	r2, [r7, #14]
 c00074e:	7dbb      	ldrb	r3, [r7, #22]
 c000750:	6879      	ldr	r1, [r7, #4]
 c000752:	440b      	add	r3, r1
 c000754:	781b      	ldrb	r3, [r3, #0]
 c000756:	095b      	lsrs	r3, r3, #5
 c000758:	f003 0101 	and.w	r1, r3, #1
 c00075c:	7dfb      	ldrb	r3, [r7, #23]
 c00075e:	005b      	lsls	r3, r3, #1
 c000760:	3301      	adds	r3, #1
 c000762:	fa01 f303 	lsl.w	r3, r1, r3
 c000766:	b29b      	uxth	r3, r3
 c000768:	4313      	orrs	r3, r2
 c00076a:	b29b      	uxth	r3, r3
 c00076c:	81fb      	strh	r3, [r7, #14]

        buff[2] |= BITVAL(p_text[byte], 2u) << (2 * bit);
 c00076e:	8a3a      	ldrh	r2, [r7, #16]
 c000770:	7dbb      	ldrb	r3, [r7, #22]
 c000772:	6879      	ldr	r1, [r7, #4]
 c000774:	440b      	add	r3, r1
 c000776:	781b      	ldrb	r3, [r3, #0]
 c000778:	089b      	lsrs	r3, r3, #2
 c00077a:	f003 0101 	and.w	r1, r3, #1
 c00077e:	7dfb      	ldrb	r3, [r7, #23]
 c000780:	005b      	lsls	r3, r3, #1
 c000782:	fa01 f303 	lsl.w	r3, r1, r3
 c000786:	b29b      	uxth	r3, r3
 c000788:	4313      	orrs	r3, r2
 c00078a:	b29b      	uxth	r3, r3
 c00078c:	823b      	strh	r3, [r7, #16]
        buff[2] |= BITVAL(p_text[byte], 6u) << (2 * bit + 1);
 c00078e:	8a3a      	ldrh	r2, [r7, #16]
 c000790:	7dbb      	ldrb	r3, [r7, #22]
 c000792:	6879      	ldr	r1, [r7, #4]
 c000794:	440b      	add	r3, r1
 c000796:	781b      	ldrb	r3, [r3, #0]
 c000798:	099b      	lsrs	r3, r3, #6
 c00079a:	f003 0101 	and.w	r1, r3, #1
 c00079e:	7dfb      	ldrb	r3, [r7, #23]
 c0007a0:	005b      	lsls	r3, r3, #1
 c0007a2:	3301      	adds	r3, #1
 c0007a4:	fa01 f303 	lsl.w	r3, r1, r3
 c0007a8:	b29b      	uxth	r3, r3
 c0007aa:	4313      	orrs	r3, r2
 c0007ac:	b29b      	uxth	r3, r3
 c0007ae:	823b      	strh	r3, [r7, #16]

        buff[3] |= BITVAL(p_text[byte], 3u) << (2 * bit);
 c0007b0:	8a7a      	ldrh	r2, [r7, #18]
 c0007b2:	7dbb      	ldrb	r3, [r7, #22]
 c0007b4:	6879      	ldr	r1, [r7, #4]
 c0007b6:	440b      	add	r3, r1
 c0007b8:	781b      	ldrb	r3, [r3, #0]
 c0007ba:	08db      	lsrs	r3, r3, #3
 c0007bc:	f003 0101 	and.w	r1, r3, #1
 c0007c0:	7dfb      	ldrb	r3, [r7, #23]
 c0007c2:	005b      	lsls	r3, r3, #1
 c0007c4:	fa01 f303 	lsl.w	r3, r1, r3
 c0007c8:	b29b      	uxth	r3, r3
 c0007ca:	4313      	orrs	r3, r2
 c0007cc:	b29b      	uxth	r3, r3
 c0007ce:	827b      	strh	r3, [r7, #18]
        buff[3] |= BITVAL(p_text[byte], 7u) << (2 * bit + 1);
 c0007d0:	8a7a      	ldrh	r2, [r7, #18]
 c0007d2:	7dbb      	ldrb	r3, [r7, #22]
 c0007d4:	6879      	ldr	r1, [r7, #4]
 c0007d6:	440b      	add	r3, r1
 c0007d8:	781b      	ldrb	r3, [r3, #0]
 c0007da:	09db      	lsrs	r3, r3, #7
 c0007dc:	b2db      	uxtb	r3, r3
 c0007de:	4619      	mov	r1, r3
 c0007e0:	7dfb      	ldrb	r3, [r7, #23]
 c0007e2:	005b      	lsls	r3, r3, #1
 c0007e4:	3301      	adds	r3, #1
 c0007e6:	fa01 f303 	lsl.w	r3, r1, r3
 c0007ea:	b29b      	uxth	r3, r3
 c0007ec:	4313      	orrs	r3, r2
 c0007ee:	b29b      	uxth	r3, r3
 c0007f0:	827b      	strh	r3, [r7, #18]

        bit++;
 c0007f2:	7dfb      	ldrb	r3, [r7, #23]
 c0007f4:	3301      	adds	r3, #1
 c0007f6:	75fb      	strb	r3, [r7, #23]
        byte++;
 c0007f8:	7dbb      	ldrb	r3, [r7, #22]
 c0007fa:	3301      	adds	r3, #1
 c0007fc:	75bb      	strb	r3, [r7, #22]
    while (byte < PRESENT_CRYPT_SIZE)
 c0007fe:	7dbb      	ldrb	r3, [r7, #22]
 c000800:	2b07      	cmp	r3, #7
 c000802:	f67f af73 	bls.w	c0006ec <present_encrypt_permutation+0x1c>
    }

    /*
     * Copy the new value to the cipher block.
     */
    memcpy(p_text, buff, PRESENT_CRYPT_SIZE);
 c000806:	f107 030c 	add.w	r3, r7, #12
 c00080a:	2208      	movs	r2, #8
 c00080c:	4619      	mov	r1, r3
 c00080e:	6878      	ldr	r0, [r7, #4]
 c000810:	f001 fa1a 	bl	c001c48 <memcpy>
}  /* present_encrypt_permutation() */
 c000814:	bf00      	nop
 c000816:	3718      	adds	r7, #24
 c000818:	46bd      	mov	sp, r7
 c00081a:	bd80      	pop	{r7, pc}

0c00081c <present_decrypt_permutation>:

static void
present_decrypt_permutation (uint8_t * p_text)
{
 c00081c:	b480      	push	{r7}
 c00081e:	b087      	sub	sp, #28
 c000820:	af00      	add	r7, sp, #0
 c000822:	6078      	str	r0, [r7, #4]
    uint8_t   buff[PRESENT_CRYPT_SIZE] = {0u};
 c000824:	2300      	movs	r3, #0
 c000826:	60bb      	str	r3, [r7, #8]
 c000828:	2300      	movs	r3, #0
 c00082a:	60fb      	str	r3, [r7, #12]
    uint16_t *p_block                  = (uint16_t *)p_text;
 c00082c:	687b      	ldr	r3, [r7, #4]
 c00082e:	613b      	str	r3, [r7, #16]
    uint8_t   bit                      = 0u;
 c000830:	2300      	movs	r3, #0
 c000832:	75fb      	strb	r3, [r7, #23]
    uint8_t   byte                     = 0u;
 c000834:	2300      	movs	r3, #0
 c000836:	75bb      	strb	r3, [r7, #22]
     * Every new byte has two bits from every 16-bit blocks of the old
     * permutated text. In every step of the loop, bit values are picked
     * from related bytes. For detailed explanation of the bit positioning,
     * see the article.
     */
    while (byte < PRESENT_CRYPT_SIZE)
 c000838:	e0f9      	b.n	c000a2e <present_decrypt_permutation+0x212>
    {
        buff[byte] |= BITVAL(p_block[0], (2 * bit))     << 0u;
 c00083a:	7dbb      	ldrb	r3, [r7, #22]
 c00083c:	3318      	adds	r3, #24
 c00083e:	443b      	add	r3, r7
 c000840:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 c000844:	693b      	ldr	r3, [r7, #16]
 c000846:	881b      	ldrh	r3, [r3, #0]
 c000848:	4618      	mov	r0, r3
 c00084a:	7dfb      	ldrb	r3, [r7, #23]
 c00084c:	005b      	lsls	r3, r3, #1
 c00084e:	2201      	movs	r2, #1
 c000850:	fa02 f303 	lsl.w	r3, r2, r3
 c000854:	ea00 0203 	and.w	r2, r0, r3
 c000858:	7dfb      	ldrb	r3, [r7, #23]
 c00085a:	005b      	lsls	r3, r3, #1
 c00085c:	fa22 f303 	lsr.w	r3, r2, r3
 c000860:	b2da      	uxtb	r2, r3
 c000862:	7dbb      	ldrb	r3, [r7, #22]
 c000864:	430a      	orrs	r2, r1
 c000866:	b2d2      	uxtb	r2, r2
 c000868:	3318      	adds	r3, #24
 c00086a:	443b      	add	r3, r7
 c00086c:	f803 2c10 	strb.w	r2, [r3, #-16]
        buff[byte] |= BITVAL(p_block[0], (2 * bit) + 1) << 4u;
 c000870:	7dbb      	ldrb	r3, [r7, #22]
 c000872:	3318      	adds	r3, #24
 c000874:	443b      	add	r3, r7
 c000876:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 c00087a:	693b      	ldr	r3, [r7, #16]
 c00087c:	881b      	ldrh	r3, [r3, #0]
 c00087e:	4618      	mov	r0, r3
 c000880:	7dfb      	ldrb	r3, [r7, #23]
 c000882:	005b      	lsls	r3, r3, #1
 c000884:	3301      	adds	r3, #1
 c000886:	2201      	movs	r2, #1
 c000888:	fa02 f303 	lsl.w	r3, r2, r3
 c00088c:	ea00 0203 	and.w	r2, r0, r3
 c000890:	7dfb      	ldrb	r3, [r7, #23]
 c000892:	005b      	lsls	r3, r3, #1
 c000894:	3301      	adds	r3, #1
 c000896:	fa22 f303 	lsr.w	r3, r2, r3
 c00089a:	b2db      	uxtb	r3, r3
 c00089c:	011b      	lsls	r3, r3, #4
 c00089e:	b2da      	uxtb	r2, r3
 c0008a0:	7dbb      	ldrb	r3, [r7, #22]
 c0008a2:	430a      	orrs	r2, r1
 c0008a4:	b2d2      	uxtb	r2, r2
 c0008a6:	3318      	adds	r3, #24
 c0008a8:	443b      	add	r3, r7
 c0008aa:	f803 2c10 	strb.w	r2, [r3, #-16]

        buff[byte] |= BITVAL(p_block[1], (2 * bit))     << 1u;
 c0008ae:	7dbb      	ldrb	r3, [r7, #22]
 c0008b0:	3318      	adds	r3, #24
 c0008b2:	443b      	add	r3, r7
 c0008b4:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 c0008b8:	693b      	ldr	r3, [r7, #16]
 c0008ba:	3302      	adds	r3, #2
 c0008bc:	881b      	ldrh	r3, [r3, #0]
 c0008be:	4618      	mov	r0, r3
 c0008c0:	7dfb      	ldrb	r3, [r7, #23]
 c0008c2:	005b      	lsls	r3, r3, #1
 c0008c4:	2201      	movs	r2, #1
 c0008c6:	fa02 f303 	lsl.w	r3, r2, r3
 c0008ca:	ea00 0203 	and.w	r2, r0, r3
 c0008ce:	7dfb      	ldrb	r3, [r7, #23]
 c0008d0:	005b      	lsls	r3, r3, #1
 c0008d2:	fa22 f303 	lsr.w	r3, r2, r3
 c0008d6:	b2db      	uxtb	r3, r3
 c0008d8:	005b      	lsls	r3, r3, #1
 c0008da:	b2da      	uxtb	r2, r3
 c0008dc:	7dbb      	ldrb	r3, [r7, #22]
 c0008de:	430a      	orrs	r2, r1
 c0008e0:	b2d2      	uxtb	r2, r2
 c0008e2:	3318      	adds	r3, #24
 c0008e4:	443b      	add	r3, r7
 c0008e6:	f803 2c10 	strb.w	r2, [r3, #-16]
        buff[byte] |= BITVAL(p_block[1], (2 * bit) + 1) << 5u;
 c0008ea:	7dbb      	ldrb	r3, [r7, #22]
 c0008ec:	3318      	adds	r3, #24
 c0008ee:	443b      	add	r3, r7
 c0008f0:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 c0008f4:	693b      	ldr	r3, [r7, #16]
 c0008f6:	3302      	adds	r3, #2
 c0008f8:	881b      	ldrh	r3, [r3, #0]
 c0008fa:	4618      	mov	r0, r3
 c0008fc:	7dfb      	ldrb	r3, [r7, #23]
 c0008fe:	005b      	lsls	r3, r3, #1
 c000900:	3301      	adds	r3, #1
 c000902:	2201      	movs	r2, #1
 c000904:	fa02 f303 	lsl.w	r3, r2, r3
 c000908:	ea00 0203 	and.w	r2, r0, r3
 c00090c:	7dfb      	ldrb	r3, [r7, #23]
 c00090e:	005b      	lsls	r3, r3, #1
 c000910:	3301      	adds	r3, #1
 c000912:	fa22 f303 	lsr.w	r3, r2, r3
 c000916:	b2db      	uxtb	r3, r3
 c000918:	015b      	lsls	r3, r3, #5
 c00091a:	b2da      	uxtb	r2, r3
 c00091c:	7dbb      	ldrb	r3, [r7, #22]
 c00091e:	430a      	orrs	r2, r1
 c000920:	b2d2      	uxtb	r2, r2
 c000922:	3318      	adds	r3, #24
 c000924:	443b      	add	r3, r7
 c000926:	f803 2c10 	strb.w	r2, [r3, #-16]

        buff[byte] |= BITVAL(p_block[2], (2 * bit))     << 2u;
 c00092a:	7dbb      	ldrb	r3, [r7, #22]
 c00092c:	3318      	adds	r3, #24
 c00092e:	443b      	add	r3, r7
 c000930:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 c000934:	693b      	ldr	r3, [r7, #16]
 c000936:	3304      	adds	r3, #4
 c000938:	881b      	ldrh	r3, [r3, #0]
 c00093a:	4618      	mov	r0, r3
 c00093c:	7dfb      	ldrb	r3, [r7, #23]
 c00093e:	005b      	lsls	r3, r3, #1
 c000940:	2201      	movs	r2, #1
 c000942:	fa02 f303 	lsl.w	r3, r2, r3
 c000946:	ea00 0203 	and.w	r2, r0, r3
 c00094a:	7dfb      	ldrb	r3, [r7, #23]
 c00094c:	005b      	lsls	r3, r3, #1
 c00094e:	fa22 f303 	lsr.w	r3, r2, r3
 c000952:	b2db      	uxtb	r3, r3
 c000954:	009b      	lsls	r3, r3, #2
 c000956:	b2da      	uxtb	r2, r3
 c000958:	7dbb      	ldrb	r3, [r7, #22]
 c00095a:	430a      	orrs	r2, r1
 c00095c:	b2d2      	uxtb	r2, r2
 c00095e:	3318      	adds	r3, #24
 c000960:	443b      	add	r3, r7
 c000962:	f803 2c10 	strb.w	r2, [r3, #-16]
        buff[byte] |= BITVAL(p_block[2], (2 * bit) + 1) << 6u;
 c000966:	7dbb      	ldrb	r3, [r7, #22]
 c000968:	3318      	adds	r3, #24
 c00096a:	443b      	add	r3, r7
 c00096c:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 c000970:	693b      	ldr	r3, [r7, #16]
 c000972:	3304      	adds	r3, #4
 c000974:	881b      	ldrh	r3, [r3, #0]
 c000976:	4618      	mov	r0, r3
 c000978:	7dfb      	ldrb	r3, [r7, #23]
 c00097a:	005b      	lsls	r3, r3, #1
 c00097c:	3301      	adds	r3, #1
 c00097e:	2201      	movs	r2, #1
 c000980:	fa02 f303 	lsl.w	r3, r2, r3
 c000984:	ea00 0203 	and.w	r2, r0, r3
 c000988:	7dfb      	ldrb	r3, [r7, #23]
 c00098a:	005b      	lsls	r3, r3, #1
 c00098c:	3301      	adds	r3, #1
 c00098e:	fa22 f303 	lsr.w	r3, r2, r3
 c000992:	b2db      	uxtb	r3, r3
 c000994:	019b      	lsls	r3, r3, #6
 c000996:	b2da      	uxtb	r2, r3
 c000998:	7dbb      	ldrb	r3, [r7, #22]
 c00099a:	430a      	orrs	r2, r1
 c00099c:	b2d2      	uxtb	r2, r2
 c00099e:	3318      	adds	r3, #24
 c0009a0:	443b      	add	r3, r7
 c0009a2:	f803 2c10 	strb.w	r2, [r3, #-16]

        buff[byte] |= BITVAL(p_block[3], (2 * bit))     << 3u;
 c0009a6:	7dbb      	ldrb	r3, [r7, #22]
 c0009a8:	3318      	adds	r3, #24
 c0009aa:	443b      	add	r3, r7
 c0009ac:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 c0009b0:	693b      	ldr	r3, [r7, #16]
 c0009b2:	3306      	adds	r3, #6
 c0009b4:	881b      	ldrh	r3, [r3, #0]
 c0009b6:	4618      	mov	r0, r3
 c0009b8:	7dfb      	ldrb	r3, [r7, #23]
 c0009ba:	005b      	lsls	r3, r3, #1
 c0009bc:	2201      	movs	r2, #1
 c0009be:	fa02 f303 	lsl.w	r3, r2, r3
 c0009c2:	ea00 0203 	and.w	r2, r0, r3
 c0009c6:	7dfb      	ldrb	r3, [r7, #23]
 c0009c8:	005b      	lsls	r3, r3, #1
 c0009ca:	fa22 f303 	lsr.w	r3, r2, r3
 c0009ce:	b2db      	uxtb	r3, r3
 c0009d0:	00db      	lsls	r3, r3, #3
 c0009d2:	b2da      	uxtb	r2, r3
 c0009d4:	7dbb      	ldrb	r3, [r7, #22]
 c0009d6:	430a      	orrs	r2, r1
 c0009d8:	b2d2      	uxtb	r2, r2
 c0009da:	3318      	adds	r3, #24
 c0009dc:	443b      	add	r3, r7
 c0009de:	f803 2c10 	strb.w	r2, [r3, #-16]
        buff[byte] |= BITVAL(p_block[3], (2 * bit) + 1) << 7u;
 c0009e2:	7dbb      	ldrb	r3, [r7, #22]
 c0009e4:	3318      	adds	r3, #24
 c0009e6:	443b      	add	r3, r7
 c0009e8:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 c0009ec:	693b      	ldr	r3, [r7, #16]
 c0009ee:	3306      	adds	r3, #6
 c0009f0:	881b      	ldrh	r3, [r3, #0]
 c0009f2:	4618      	mov	r0, r3
 c0009f4:	7dfb      	ldrb	r3, [r7, #23]
 c0009f6:	005b      	lsls	r3, r3, #1
 c0009f8:	3301      	adds	r3, #1
 c0009fa:	2201      	movs	r2, #1
 c0009fc:	fa02 f303 	lsl.w	r3, r2, r3
 c000a00:	ea00 0203 	and.w	r2, r0, r3
 c000a04:	7dfb      	ldrb	r3, [r7, #23]
 c000a06:	005b      	lsls	r3, r3, #1
 c000a08:	3301      	adds	r3, #1
 c000a0a:	fa22 f303 	lsr.w	r3, r2, r3
 c000a0e:	b2db      	uxtb	r3, r3
 c000a10:	01db      	lsls	r3, r3, #7
 c000a12:	b2da      	uxtb	r2, r3
 c000a14:	7dbb      	ldrb	r3, [r7, #22]
 c000a16:	430a      	orrs	r2, r1
 c000a18:	b2d2      	uxtb	r2, r2
 c000a1a:	3318      	adds	r3, #24
 c000a1c:	443b      	add	r3, r7
 c000a1e:	f803 2c10 	strb.w	r2, [r3, #-16]

        bit++;
 c000a22:	7dfb      	ldrb	r3, [r7, #23]
 c000a24:	3301      	adds	r3, #1
 c000a26:	75fb      	strb	r3, [r7, #23]
        byte++;
 c000a28:	7dbb      	ldrb	r3, [r7, #22]
 c000a2a:	3301      	adds	r3, #1
 c000a2c:	75bb      	strb	r3, [r7, #22]
    while (byte < PRESENT_CRYPT_SIZE)
 c000a2e:	7dbb      	ldrb	r3, [r7, #22]
 c000a30:	2b07      	cmp	r3, #7
 c000a32:	f67f af02 	bls.w	c00083a <present_decrypt_permutation+0x1e>
    }

    /*
     * Copy the new value to the decipher block.
     */
    memcpy(p_text, buff, PRESENT_CRYPT_SIZE);
 c000a36:	687b      	ldr	r3, [r7, #4]
 c000a38:	461a      	mov	r2, r3
 c000a3a:	f107 0308 	add.w	r3, r7, #8
 c000a3e:	cb03      	ldmia	r3!, {r0, r1}
 c000a40:	6010      	str	r0, [r2, #0]
 c000a42:	6051      	str	r1, [r2, #4]
}  /* present_decrypt_permutation() */
 c000a44:	bf00      	nop
 c000a46:	371c      	adds	r7, #28
 c000a48:	46bd      	mov	sp, r7
 c000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000a4e:	4770      	bx	lr

0c000a50 <present_update_key>:

static void
present_update_key (uint8_t * p_key, uint8_t round_counter, present_op_t op)
{
 c000a50:	b580      	push	{r7, lr}
 c000a52:	b082      	sub	sp, #8
 c000a54:	af00      	add	r7, sp, #0
 c000a56:	6078      	str	r0, [r7, #4]
 c000a58:	460b      	mov	r3, r1
 c000a5a:	70fb      	strb	r3, [r7, #3]
 c000a5c:	4613      	mov	r3, r2
 c000a5e:	70bb      	strb	r3, [r7, #2]
    ASSERT(NULL != p_key);
    ASSERT(round_counter >= PRESENT_ROUND_COUNT_MIN);
    ASSERT(round_counter <= PRESENT_ROUND_COUNT_MAX);

    switch (op)
 c000a60:	78bb      	ldrb	r3, [r7, #2]
 c000a62:	2b00      	cmp	r3, #0
 c000a64:	d002      	beq.n	c000a6c <present_update_key+0x1c>
 c000a66:	2b01      	cmp	r3, #1
 c000a68:	d006      	beq.n	c000a78 <present_update_key+0x28>
        default:
            /*
             * An undefined operation occurred. Use forced assertion.
             */
            ASSERT(0);
        break;
 c000a6a:	e00b      	b.n	c000a84 <present_update_key+0x34>
            present_update_encrypt_key(p_key, round_counter);
 c000a6c:	78fb      	ldrb	r3, [r7, #3]
 c000a6e:	4619      	mov	r1, r3
 c000a70:	6878      	ldr	r0, [r7, #4]
 c000a72:	f000 f80b 	bl	c000a8c <present_update_encrypt_key>
        break;
 c000a76:	e005      	b.n	c000a84 <present_update_key+0x34>
            present_update_decrypt_key(p_key, round_counter);
 c000a78:	78fb      	ldrb	r3, [r7, #3]
 c000a7a:	4619      	mov	r1, r3
 c000a7c:	6878      	ldr	r0, [r7, #4]
 c000a7e:	f000 f84b 	bl	c000b18 <present_update_decrypt_key>
        break;
 c000a82:	bf00      	nop
    }
}  /* present_update_key() */
 c000a84:	bf00      	nop
 c000a86:	3708      	adds	r7, #8
 c000a88:	46bd      	mov	sp, r7
 c000a8a:	bd80      	pop	{r7, pc}

0c000a8c <present_update_encrypt_key>:

static void
present_update_encrypt_key (uint8_t * p_key, uint8_t round_counter)
{
 c000a8c:	b580      	push	{r7, lr}
 c000a8e:	b084      	sub	sp, #16
 c000a90:	af00      	add	r7, sp, #0
 c000a92:	6078      	str	r0, [r7, #4]
 c000a94:	460b      	mov	r3, r1
 c000a96:	70fb      	strb	r3, [r7, #3]
    ASSERT(round_counter <= PRESENT_ROUND_COUNT_MAX);

    /*
     * Rotate the key to the left as first step of the key scheduling.
     */
    present_rotate_key_left(p_key);
 c000a98:	6878      	ldr	r0, [r7, #4]
 c000a9a:	f000 f89b 	bl	c000bd4 <present_rotate_key_left>

    /*
     * Substitute the MSB high nibble of the key.
     */
    high_nibble = (p_key[PRESENT_KEY_SIZE - 1] & 0xF0u) >> 4;
 c000a9e:	687b      	ldr	r3, [r7, #4]
 c000aa0:	330f      	adds	r3, #15
 c000aa2:	781b      	ldrb	r3, [r3, #0]
 c000aa4:	091b      	lsrs	r3, r3, #4
 c000aa6:	73fb      	strb	r3, [r7, #15]
    high_nibble = g_sbox[high_nibble];
 c000aa8:	7bfb      	ldrb	r3, [r7, #15]
 c000aaa:	4a1a      	ldr	r2, [pc, #104]	; (c000b14 <present_update_encrypt_key+0x88>)
 c000aac:	5cd3      	ldrb	r3, [r2, r3]
 c000aae:	73fb      	strb	r3, [r7, #15]

    low_nibble = p_key[PRESENT_KEY_SIZE - 1] & 0x0Fu;
 c000ab0:	687b      	ldr	r3, [r7, #4]
 c000ab2:	330f      	adds	r3, #15
 c000ab4:	781b      	ldrb	r3, [r3, #0]
 c000ab6:	f003 030f 	and.w	r3, r3, #15
 c000aba:	73bb      	strb	r3, [r7, #14]

#if PRESENT_USE_KEY128
    /*
     * Substitute the MSB low nibble if 128-bit key is used.
     */
    low_nibble = g_sbox[low_nibble];
 c000abc:	7bbb      	ldrb	r3, [r7, #14]
 c000abe:	4a15      	ldr	r2, [pc, #84]	; (c000b14 <present_update_encrypt_key+0x88>)
 c000ac0:	5cd3      	ldrb	r3, [r2, r3]
 c000ac2:	73bb      	strb	r3, [r7, #14]
#endif  /* PRESENT_USE_KEY128 */

    p_key[PRESENT_KEY_SIZE - 1] = (high_nibble << 4) | low_nibble;
 c000ac4:	7bfb      	ldrb	r3, [r7, #15]
 c000ac6:	011b      	lsls	r3, r3, #4
 c000ac8:	b25a      	sxtb	r2, r3
 c000aca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 c000ace:	4313      	orrs	r3, r2
 c000ad0:	b25a      	sxtb	r2, r3
 c000ad2:	687b      	ldr	r3, [r7, #4]
 c000ad4:	330f      	adds	r3, #15
 c000ad6:	b2d2      	uxtb	r2, r2
 c000ad8:	701a      	strb	r2, [r3, #0]
    p_key[1] ^= round_counter << 7;
#else  /* PRESENT_USE_KEY128 */
    /*
     * XOR the from 62th to 66th bits with the round counter.
     */
    p_key[8] ^= round_counter >> 2;
 c000ada:	687b      	ldr	r3, [r7, #4]
 c000adc:	3308      	adds	r3, #8
 c000ade:	7819      	ldrb	r1, [r3, #0]
 c000ae0:	78fb      	ldrb	r3, [r7, #3]
 c000ae2:	089b      	lsrs	r3, r3, #2
 c000ae4:	b2da      	uxtb	r2, r3
 c000ae6:	687b      	ldr	r3, [r7, #4]
 c000ae8:	3308      	adds	r3, #8
 c000aea:	404a      	eors	r2, r1
 c000aec:	b2d2      	uxtb	r2, r2
 c000aee:	701a      	strb	r2, [r3, #0]
    p_key[7] ^= round_counter << 6;
 c000af0:	687b      	ldr	r3, [r7, #4]
 c000af2:	3307      	adds	r3, #7
 c000af4:	781b      	ldrb	r3, [r3, #0]
 c000af6:	b25a      	sxtb	r2, r3
 c000af8:	78fb      	ldrb	r3, [r7, #3]
 c000afa:	019b      	lsls	r3, r3, #6
 c000afc:	b25b      	sxtb	r3, r3
 c000afe:	4053      	eors	r3, r2
 c000b00:	b25a      	sxtb	r2, r3
 c000b02:	687b      	ldr	r3, [r7, #4]
 c000b04:	3307      	adds	r3, #7
 c000b06:	b2d2      	uxtb	r2, r2
 c000b08:	701a      	strb	r2, [r3, #0]
#endif  /* PRESENT_USE_KEY128 */
}  /* present_update_encrypt_key() */
 c000b0a:	bf00      	nop
 c000b0c:	3710      	adds	r7, #16
 c000b0e:	46bd      	mov	sp, r7
 c000b10:	bd80      	pop	{r7, pc}
 c000b12:	bf00      	nop
 c000b14:	0c001c7c 	.word	0x0c001c7c

0c000b18 <present_update_decrypt_key>:

static void
present_update_decrypt_key (uint8_t * p_key, uint8_t round_counter)
{
 c000b18:	b580      	push	{r7, lr}
 c000b1a:	b084      	sub	sp, #16
 c000b1c:	af00      	add	r7, sp, #0
 c000b1e:	6078      	str	r0, [r7, #4]
 c000b20:	460b      	mov	r3, r1
 c000b22:	70fb      	strb	r3, [r7, #3]
    p_key[1] ^= round_counter << 7;
#else  /* PRESENT_USE_KEY128 */
    /*
     * XOR the from 62th to 66th bits with the round counter.
     */
    p_key[8] ^= round_counter >> 2;
 c000b24:	687b      	ldr	r3, [r7, #4]
 c000b26:	3308      	adds	r3, #8
 c000b28:	7819      	ldrb	r1, [r3, #0]
 c000b2a:	78fb      	ldrb	r3, [r7, #3]
 c000b2c:	089b      	lsrs	r3, r3, #2
 c000b2e:	b2da      	uxtb	r2, r3
 c000b30:	687b      	ldr	r3, [r7, #4]
 c000b32:	3308      	adds	r3, #8
 c000b34:	404a      	eors	r2, r1
 c000b36:	b2d2      	uxtb	r2, r2
 c000b38:	701a      	strb	r2, [r3, #0]
    p_key[7] ^= round_counter << 6;
 c000b3a:	687b      	ldr	r3, [r7, #4]
 c000b3c:	3307      	adds	r3, #7
 c000b3e:	781b      	ldrb	r3, [r3, #0]
 c000b40:	b25a      	sxtb	r2, r3
 c000b42:	78fb      	ldrb	r3, [r7, #3]
 c000b44:	019b      	lsls	r3, r3, #6
 c000b46:	b25b      	sxtb	r3, r3
 c000b48:	4053      	eors	r3, r2
 c000b4a:	b25a      	sxtb	r2, r3
 c000b4c:	687b      	ldr	r3, [r7, #4]
 c000b4e:	3307      	adds	r3, #7
 c000b50:	b2d2      	uxtb	r2, r2
 c000b52:	701a      	strb	r2, [r3, #0]
#endif  /* PRESENT_USE_KEY128 */

    /*
     * Substitute the MSB high nibble of the key.
     */
    high_nibble = (p_key[PRESENT_KEY_SIZE - 1] & 0xF0u) >> 4;
 c000b54:	687b      	ldr	r3, [r7, #4]
 c000b56:	330f      	adds	r3, #15
 c000b58:	781b      	ldrb	r3, [r3, #0]
 c000b5a:	091b      	lsrs	r3, r3, #4
 c000b5c:	73fb      	strb	r3, [r7, #15]
    high_nibble = g_sbox_inv[high_nibble];
 c000b5e:	7bfb      	ldrb	r3, [r7, #15]
 c000b60:	4a0f      	ldr	r2, [pc, #60]	; (c000ba0 <present_update_decrypt_key+0x88>)
 c000b62:	5cd3      	ldrb	r3, [r2, r3]
 c000b64:	73fb      	strb	r3, [r7, #15]

    low_nibble = p_key[PRESENT_KEY_SIZE - 1] & 0x0Fu;
 c000b66:	687b      	ldr	r3, [r7, #4]
 c000b68:	330f      	adds	r3, #15
 c000b6a:	781b      	ldrb	r3, [r3, #0]
 c000b6c:	f003 030f 	and.w	r3, r3, #15
 c000b70:	73bb      	strb	r3, [r7, #14]

#if PRESENT_USE_KEY128
    /*
     * Substitute the MSB low nibble if 128-bit key is used.
     */
    low_nibble = g_sbox_inv[low_nibble];
 c000b72:	7bbb      	ldrb	r3, [r7, #14]
 c000b74:	4a0a      	ldr	r2, [pc, #40]	; (c000ba0 <present_update_decrypt_key+0x88>)
 c000b76:	5cd3      	ldrb	r3, [r2, r3]
 c000b78:	73bb      	strb	r3, [r7, #14]
#endif  /* PRESENT_USE_KEY128 */

    p_key[PRESENT_KEY_SIZE - 1] = (high_nibble << 4) | low_nibble;
 c000b7a:	7bfb      	ldrb	r3, [r7, #15]
 c000b7c:	011b      	lsls	r3, r3, #4
 c000b7e:	b25a      	sxtb	r2, r3
 c000b80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 c000b84:	4313      	orrs	r3, r2
 c000b86:	b25a      	sxtb	r2, r3
 c000b88:	687b      	ldr	r3, [r7, #4]
 c000b8a:	330f      	adds	r3, #15
 c000b8c:	b2d2      	uxtb	r2, r2
 c000b8e:	701a      	strb	r2, [r3, #0]

    /*
     * Rotate the key to the right to end the reverse scheduling.
     */
    present_rotate_key_right(p_key);
 c000b90:	6878      	ldr	r0, [r7, #4]
 c000b92:	f000 f8a3 	bl	c000cdc <present_rotate_key_right>
}  /* present_update_decrypt_key() */
 c000b96:	bf00      	nop
 c000b98:	3710      	adds	r7, #16
 c000b9a:	46bd      	mov	sp, r7
 c000b9c:	bd80      	pop	{r7, pc}
 c000b9e:	bf00      	nop
 c000ba0:	0c001c8c 	.word	0x0c001c8c

0c000ba4 <present_generate_decrypt_key>:

static void
present_generate_decrypt_key (uint8_t * p_key)
{
 c000ba4:	b580      	push	{r7, lr}
 c000ba6:	b084      	sub	sp, #16
 c000ba8:	af00      	add	r7, sp, #0
 c000baa:	6078      	str	r0, [r7, #4]
    ASSERT(NULL != p_key);

    /*
     * Start the loop from the first round.
     */
    round = 1u;
 c000bac:	2301      	movs	r3, #1
 c000bae:	73fb      	strb	r3, [r7, #15]

    /*
     * Update the key until the last round.
     */
    while (round <= PRESENT_ROUND_COUNT)
 c000bb0:	e008      	b.n	c000bc4 <present_generate_decrypt_key+0x20>
    {
        present_update_key(p_key, round, PRESENT_OP_ENCRYPT);
 c000bb2:	7bfb      	ldrb	r3, [r7, #15]
 c000bb4:	2200      	movs	r2, #0
 c000bb6:	4619      	mov	r1, r3
 c000bb8:	6878      	ldr	r0, [r7, #4]
 c000bba:	f7ff ff49 	bl	c000a50 <present_update_key>
        round++;
 c000bbe:	7bfb      	ldrb	r3, [r7, #15]
 c000bc0:	3301      	adds	r3, #1
 c000bc2:	73fb      	strb	r3, [r7, #15]
    while (round <= PRESENT_ROUND_COUNT)
 c000bc4:	7bfb      	ldrb	r3, [r7, #15]
 c000bc6:	2b0a      	cmp	r3, #10
 c000bc8:	d9f3      	bls.n	c000bb2 <present_generate_decrypt_key+0xe>
    }
}  /* present_generate_decrypt_key() */
 c000bca:	bf00      	nop
 c000bcc:	bf00      	nop
 c000bce:	3710      	adds	r7, #16
 c000bd0:	46bd      	mov	sp, r7
 c000bd2:	bd80      	pop	{r7, pc}

0c000bd4 <present_rotate_key_left>:

static void
present_rotate_key_left (uint8_t * p_key)
{
 c000bd4:	b480      	push	{r7}
 c000bd6:	b089      	sub	sp, #36	; 0x24
 c000bd8:	af00      	add	r7, sp, #0
 c000bda:	6078      	str	r0, [r7, #4]
    uint16_t   buff[PRESENT_ROTATE_BUFF_SIZE_LEFT];
    uint16_t * p_block;
    uint8_t    block;

    uint8_t const rotation_point   = PRESENT_ROTATION_POINT_LEFT;
 c000bdc:	2303      	movs	r3, #3
 c000bde:	77bb      	strb	r3, [r7, #30]
    uint8_t const unrotated_blocks = PRESENT_UNROTATED_BLOCK_COUNT_LEFT;
 c000be0:	2304      	movs	r3, #4
 c000be2:	777b      	strb	r3, [r7, #29]
    uint8_t const lsb_offset       = PRESENT_ROTATION_LSB_OFFSET;
 c000be4:	2305      	movs	r3, #5
 c000be6:	773b      	strb	r3, [r7, #28]
    uint8_t const msb_offset       = PRESENT_ROTATION_MSB_OFFSET;
 c000be8:	2304      	movs	r3, #4
 c000bea:	76fb      	strb	r3, [r7, #27]

    ASSERT(NULL != p_key);

    p_block = (uint16_t *)p_key;
 c000bec:	687b      	ldr	r3, [r7, #4]
 c000bee:	617b      	str	r3, [r7, #20]

    /*
     * Fill the buffer with values that changes during the first loop.
     */
    for (block = 0u; block < PRESENT_ROTATE_BUFF_SIZE_LEFT; block++)
 c000bf0:	2300      	movs	r3, #0
 c000bf2:	77fb      	strb	r3, [r7, #31]
 c000bf4:	e00d      	b.n	c000c12 <present_rotate_key_left+0x3e>
    {
        buff[block] = p_block[block];
 c000bf6:	7ffb      	ldrb	r3, [r7, #31]
 c000bf8:	005b      	lsls	r3, r3, #1
 c000bfa:	697a      	ldr	r2, [r7, #20]
 c000bfc:	441a      	add	r2, r3
 c000bfe:	7ffb      	ldrb	r3, [r7, #31]
 c000c00:	8812      	ldrh	r2, [r2, #0]
 c000c02:	005b      	lsls	r3, r3, #1
 c000c04:	3320      	adds	r3, #32
 c000c06:	443b      	add	r3, r7
 c000c08:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (block = 0u; block < PRESENT_ROTATE_BUFF_SIZE_LEFT; block++)
 c000c0c:	7ffb      	ldrb	r3, [r7, #31]
 c000c0e:	3301      	adds	r3, #1
 c000c10:	77fb      	strb	r3, [r7, #31]
 c000c12:	7ffb      	ldrb	r3, [r7, #31]
 c000c14:	2b04      	cmp	r3, #4
 c000c16:	d9ee      	bls.n	c000bf6 <present_rotate_key_left+0x22>

    /*
     * Place the LSB 3-bit and the MSB 13-bit of the related blocks to the
     * new place index until the rotation point.
     */
    for (block = 0u; block < rotation_point; block++)
 c000c18:	2300      	movs	r3, #0
 c000c1a:	77fb      	strb	r3, [r7, #31]
 c000c1c:	e01d      	b.n	c000c5a <present_rotate_key_left+0x86>
    {
        p_block[block] = (p_block[block + lsb_offset] << 13) \
 c000c1e:	7ffa      	ldrb	r2, [r7, #31]
 c000c20:	7f3b      	ldrb	r3, [r7, #28]
 c000c22:	4413      	add	r3, r2
 c000c24:	005b      	lsls	r3, r3, #1
 c000c26:	697a      	ldr	r2, [r7, #20]
 c000c28:	4413      	add	r3, r2
 c000c2a:	881b      	ldrh	r3, [r3, #0]
 c000c2c:	035b      	lsls	r3, r3, #13
                         | (p_block[block + msb_offset] >> 3);
 c000c2e:	b21a      	sxth	r2, r3
 c000c30:	7ff9      	ldrb	r1, [r7, #31]
 c000c32:	7efb      	ldrb	r3, [r7, #27]
 c000c34:	440b      	add	r3, r1
 c000c36:	005b      	lsls	r3, r3, #1
 c000c38:	6979      	ldr	r1, [r7, #20]
 c000c3a:	440b      	add	r3, r1
 c000c3c:	881b      	ldrh	r3, [r3, #0]
 c000c3e:	08db      	lsrs	r3, r3, #3
 c000c40:	b29b      	uxth	r3, r3
 c000c42:	b21b      	sxth	r3, r3
 c000c44:	4313      	orrs	r3, r2
 c000c46:	b219      	sxth	r1, r3
        p_block[block] = (p_block[block + lsb_offset] << 13) \
 c000c48:	7ffb      	ldrb	r3, [r7, #31]
 c000c4a:	005b      	lsls	r3, r3, #1
 c000c4c:	697a      	ldr	r2, [r7, #20]
 c000c4e:	4413      	add	r3, r2
                         | (p_block[block + msb_offset] >> 3);
 c000c50:	b28a      	uxth	r2, r1
        p_block[block] = (p_block[block + lsb_offset] << 13) \
 c000c52:	801a      	strh	r2, [r3, #0]
    for (block = 0u; block < rotation_point; block++)
 c000c54:	7ffb      	ldrb	r3, [r7, #31]
 c000c56:	3301      	adds	r3, #1
 c000c58:	77fb      	strb	r3, [r7, #31]
 c000c5a:	7ffa      	ldrb	r2, [r7, #31]
 c000c5c:	7fbb      	ldrb	r3, [r7, #30]
 c000c5e:	429a      	cmp	r2, r3
 c000c60:	d3dd      	bcc.n	c000c1e <present_rotate_key_left+0x4a>

    /*
     * Place the rotation point value by hand. Since the first block of the
     * key has changed during the first loop, use the buffer value.
     */
    p_block[rotation_point] = (buff[0] << 13) \
 c000c62:	893b      	ldrh	r3, [r7, #8]
 c000c64:	035b      	lsls	r3, r3, #13
                              | (p_block[PRESENT_KEY_BLOCK_SIZE - 1] >> 3);
 c000c66:	b21a      	sxth	r2, r3
 c000c68:	697b      	ldr	r3, [r7, #20]
 c000c6a:	330e      	adds	r3, #14
 c000c6c:	881b      	ldrh	r3, [r3, #0]
 c000c6e:	08db      	lsrs	r3, r3, #3
 c000c70:	b29b      	uxth	r3, r3
 c000c72:	b21b      	sxth	r3, r3
 c000c74:	4313      	orrs	r3, r2
 c000c76:	b219      	sxth	r1, r3
    p_block[rotation_point] = (buff[0] << 13) \
 c000c78:	7fbb      	ldrb	r3, [r7, #30]
 c000c7a:	005b      	lsls	r3, r3, #1
 c000c7c:	697a      	ldr	r2, [r7, #20]
 c000c7e:	4413      	add	r3, r2
                              | (p_block[PRESENT_KEY_BLOCK_SIZE - 1] >> 3);
 c000c80:	b28a      	uxth	r2, r1
    p_block[rotation_point] = (buff[0] << 13) \
 c000c82:	801a      	strh	r2, [r3, #0]

    /*
     * Fill the remain blocks with buffer values.
     */
    for (block = 0u; block < unrotated_blocks; block++)
 c000c84:	2300      	movs	r3, #0
 c000c86:	77fb      	strb	r3, [r7, #31]
 c000c88:	e01d      	b.n	c000cc6 <present_rotate_key_left+0xf2>
    {
        p_block[block + 4] = (buff[block + 1] << 13) | (buff[block] >> 3);
 c000c8a:	7ffb      	ldrb	r3, [r7, #31]
 c000c8c:	3301      	adds	r3, #1
 c000c8e:	005b      	lsls	r3, r3, #1
 c000c90:	3320      	adds	r3, #32
 c000c92:	443b      	add	r3, r7
 c000c94:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 c000c98:	035b      	lsls	r3, r3, #13
 c000c9a:	b21a      	sxth	r2, r3
 c000c9c:	7ffb      	ldrb	r3, [r7, #31]
 c000c9e:	005b      	lsls	r3, r3, #1
 c000ca0:	3320      	adds	r3, #32
 c000ca2:	443b      	add	r3, r7
 c000ca4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 c000ca8:	08db      	lsrs	r3, r3, #3
 c000caa:	b29b      	uxth	r3, r3
 c000cac:	b21b      	sxth	r3, r3
 c000cae:	4313      	orrs	r3, r2
 c000cb0:	b219      	sxth	r1, r3
 c000cb2:	7ffb      	ldrb	r3, [r7, #31]
 c000cb4:	3304      	adds	r3, #4
 c000cb6:	005b      	lsls	r3, r3, #1
 c000cb8:	697a      	ldr	r2, [r7, #20]
 c000cba:	4413      	add	r3, r2
 c000cbc:	b28a      	uxth	r2, r1
 c000cbe:	801a      	strh	r2, [r3, #0]
    for (block = 0u; block < unrotated_blocks; block++)
 c000cc0:	7ffb      	ldrb	r3, [r7, #31]
 c000cc2:	3301      	adds	r3, #1
 c000cc4:	77fb      	strb	r3, [r7, #31]
 c000cc6:	7ffa      	ldrb	r2, [r7, #31]
 c000cc8:	7f7b      	ldrb	r3, [r7, #29]
 c000cca:	429a      	cmp	r2, r3
 c000ccc:	d3dd      	bcc.n	c000c8a <present_rotate_key_left+0xb6>
    }
}  /* present_rotate_key_left() */
 c000cce:	bf00      	nop
 c000cd0:	bf00      	nop
 c000cd2:	3724      	adds	r7, #36	; 0x24
 c000cd4:	46bd      	mov	sp, r7
 c000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000cda:	4770      	bx	lr

0c000cdc <present_rotate_key_right>:

static void
present_rotate_key_right (uint8_t * p_key)
{
 c000cdc:	b480      	push	{r7}
 c000cde:	b087      	sub	sp, #28
 c000ce0:	af00      	add	r7, sp, #0
 c000ce2:	6078      	str	r0, [r7, #4]
    uint16_t   buff[PRESENT_ROTATE_BUFF_SIZE_RIGHT];
    uint16_t * p_block;
    uint8_t    block;

    uint8_t const rotation_point   = PRESENT_ROTATION_POINT_RIGHT;
 c000ce4:	2304      	movs	r3, #4
 c000ce6:	75bb      	strb	r3, [r7, #22]
    uint8_t const unrotated_blocks = PRESENT_UNROTATED_BLOCK_COUNT_RIGHT;
 c000ce8:	2303      	movs	r3, #3
 c000cea:	757b      	strb	r3, [r7, #21]
    uint8_t const place_offset     = PRESENT_ROTATION_POINT_RIGHT + 1u;
 c000cec:	2305      	movs	r3, #5
 c000cee:	753b      	strb	r3, [r7, #20]

    ASSERT(NULL != p_key);

    p_block = (uint16_t *)p_key;
 c000cf0:	687b      	ldr	r3, [r7, #4]
 c000cf2:	613b      	str	r3, [r7, #16]

    /*
     * Fill the buffer with values that changes during the first loop.
     */
    for (block = 0u; block < PRESENT_ROTATE_BUFF_SIZE_RIGHT; block++)
 c000cf4:	2300      	movs	r3, #0
 c000cf6:	75fb      	strb	r3, [r7, #23]
 c000cf8:	e00d      	b.n	c000d16 <present_rotate_key_right+0x3a>
    {
        buff[block] = p_block[block];
 c000cfa:	7dfb      	ldrb	r3, [r7, #23]
 c000cfc:	005b      	lsls	r3, r3, #1
 c000cfe:	693a      	ldr	r2, [r7, #16]
 c000d00:	441a      	add	r2, r3
 c000d02:	7dfb      	ldrb	r3, [r7, #23]
 c000d04:	8812      	ldrh	r2, [r2, #0]
 c000d06:	005b      	lsls	r3, r3, #1
 c000d08:	3318      	adds	r3, #24
 c000d0a:	443b      	add	r3, r7
 c000d0c:	f823 2c10 	strh.w	r2, [r3, #-16]
    for (block = 0u; block < PRESENT_ROTATE_BUFF_SIZE_RIGHT; block++)
 c000d10:	7dfb      	ldrb	r3, [r7, #23]
 c000d12:	3301      	adds	r3, #1
 c000d14:	75fb      	strb	r3, [r7, #23]
 c000d16:	7dfb      	ldrb	r3, [r7, #23]
 c000d18:	2b03      	cmp	r3, #3
 c000d1a:	d9ee      	bls.n	c000cfa <present_rotate_key_right+0x1e>

    /*
     * Place the LSB 13-bit and the MSB 3-bit of the related blocks to the
     * new place index until the rotation point.
     */
    for (block = 0u; block < rotation_point; block++)
 c000d1c:	2300      	movs	r3, #0
 c000d1e:	75fb      	strb	r3, [r7, #23]
 c000d20:	e01b      	b.n	c000d5a <present_rotate_key_right+0x7e>
    {
        p_block[block] = (p_block[block + 4] << 3) | (p_block[block + 3] >> 13);
 c000d22:	7dfb      	ldrb	r3, [r7, #23]
 c000d24:	3304      	adds	r3, #4
 c000d26:	005b      	lsls	r3, r3, #1
 c000d28:	693a      	ldr	r2, [r7, #16]
 c000d2a:	4413      	add	r3, r2
 c000d2c:	881b      	ldrh	r3, [r3, #0]
 c000d2e:	00db      	lsls	r3, r3, #3
 c000d30:	b21a      	sxth	r2, r3
 c000d32:	7dfb      	ldrb	r3, [r7, #23]
 c000d34:	3303      	adds	r3, #3
 c000d36:	005b      	lsls	r3, r3, #1
 c000d38:	6939      	ldr	r1, [r7, #16]
 c000d3a:	440b      	add	r3, r1
 c000d3c:	881b      	ldrh	r3, [r3, #0]
 c000d3e:	0b5b      	lsrs	r3, r3, #13
 c000d40:	b29b      	uxth	r3, r3
 c000d42:	b21b      	sxth	r3, r3
 c000d44:	4313      	orrs	r3, r2
 c000d46:	b219      	sxth	r1, r3
 c000d48:	7dfb      	ldrb	r3, [r7, #23]
 c000d4a:	005b      	lsls	r3, r3, #1
 c000d4c:	693a      	ldr	r2, [r7, #16]
 c000d4e:	4413      	add	r3, r2
 c000d50:	b28a      	uxth	r2, r1
 c000d52:	801a      	strh	r2, [r3, #0]
    for (block = 0u; block < rotation_point; block++)
 c000d54:	7dfb      	ldrb	r3, [r7, #23]
 c000d56:	3301      	adds	r3, #1
 c000d58:	75fb      	strb	r3, [r7, #23]
 c000d5a:	7dfa      	ldrb	r2, [r7, #23]
 c000d5c:	7dbb      	ldrb	r3, [r7, #22]
 c000d5e:	429a      	cmp	r2, r3
 c000d60:	d3df      	bcc.n	c000d22 <present_rotate_key_right+0x46>

    /*
     * Place the rotation point value by hand. Since the first block of key
     * has changed during the first loop, use the buffer value.
     */
    p_block[rotation_point] = (buff[0] << 3) \
 c000d62:	893b      	ldrh	r3, [r7, #8]
 c000d64:	00db      	lsls	r3, r3, #3
                              | (p_block[PRESENT_KEY_BLOCK_SIZE - 1] >> 13);
 c000d66:	b21a      	sxth	r2, r3
 c000d68:	693b      	ldr	r3, [r7, #16]
 c000d6a:	330e      	adds	r3, #14
 c000d6c:	881b      	ldrh	r3, [r3, #0]
 c000d6e:	0b5b      	lsrs	r3, r3, #13
 c000d70:	b29b      	uxth	r3, r3
 c000d72:	b21b      	sxth	r3, r3
 c000d74:	4313      	orrs	r3, r2
 c000d76:	b219      	sxth	r1, r3
    p_block[rotation_point] = (buff[0] << 3) \
 c000d78:	7dbb      	ldrb	r3, [r7, #22]
 c000d7a:	005b      	lsls	r3, r3, #1
 c000d7c:	693a      	ldr	r2, [r7, #16]
 c000d7e:	4413      	add	r3, r2
                              | (p_block[PRESENT_KEY_BLOCK_SIZE - 1] >> 13);
 c000d80:	b28a      	uxth	r2, r1
    p_block[rotation_point] = (buff[0] << 3) \
 c000d82:	801a      	strh	r2, [r3, #0]

    /*
     * Fill the remain blocks with buffer values.
     */
    for (block = 0u; block < unrotated_blocks; block++)
 c000d84:	2300      	movs	r3, #0
 c000d86:	75fb      	strb	r3, [r7, #23]
 c000d88:	e01e      	b.n	c000dc8 <present_rotate_key_right+0xec>
    {
        p_block[block + place_offset] = (buff[block + 1] << 3) \
 c000d8a:	7dfb      	ldrb	r3, [r7, #23]
 c000d8c:	3301      	adds	r3, #1
 c000d8e:	005b      	lsls	r3, r3, #1
 c000d90:	3318      	adds	r3, #24
 c000d92:	443b      	add	r3, r7
 c000d94:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 c000d98:	00db      	lsls	r3, r3, #3
                                        | (buff[block] >> 13);
 c000d9a:	b21a      	sxth	r2, r3
 c000d9c:	7dfb      	ldrb	r3, [r7, #23]
 c000d9e:	005b      	lsls	r3, r3, #1
 c000da0:	3318      	adds	r3, #24
 c000da2:	443b      	add	r3, r7
 c000da4:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 c000da8:	0b5b      	lsrs	r3, r3, #13
 c000daa:	b29b      	uxth	r3, r3
 c000dac:	b21b      	sxth	r3, r3
 c000dae:	4313      	orrs	r3, r2
 c000db0:	b219      	sxth	r1, r3
        p_block[block + place_offset] = (buff[block + 1] << 3) \
 c000db2:	7dfa      	ldrb	r2, [r7, #23]
 c000db4:	7d3b      	ldrb	r3, [r7, #20]
 c000db6:	4413      	add	r3, r2
 c000db8:	005b      	lsls	r3, r3, #1
 c000dba:	693a      	ldr	r2, [r7, #16]
 c000dbc:	4413      	add	r3, r2
                                        | (buff[block] >> 13);
 c000dbe:	b28a      	uxth	r2, r1
        p_block[block + place_offset] = (buff[block + 1] << 3) \
 c000dc0:	801a      	strh	r2, [r3, #0]
    for (block = 0u; block < unrotated_blocks; block++)
 c000dc2:	7dfb      	ldrb	r3, [r7, #23]
 c000dc4:	3301      	adds	r3, #1
 c000dc6:	75fb      	strb	r3, [r7, #23]
 c000dc8:	7dfa      	ldrb	r2, [r7, #23]
 c000dca:	7d7b      	ldrb	r3, [r7, #21]
 c000dcc:	429a      	cmp	r2, r3
 c000dce:	d3dc      	bcc.n	c000d8a <present_rotate_key_right+0xae>
    }
}  /* present_rotate_key_right() */
 c000dd0:	bf00      	nop
 c000dd2:	bf00      	nop
 c000dd4:	371c      	adds	r7, #28
 c000dd6:	46bd      	mov	sp, r7
 c000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000ddc:	4770      	bx	lr
	...

0c000de0 <__acle_se_SECURE_RegisterCallback>:
  * @param  CallbackId  callback identifier
  * @param  func        pointer to non-secure function
  * @retval None
  */
CMSE_NS_ENTRY void SECURE_RegisterCallback(SECURE_CallbackIDTypeDef CallbackId, void *func)
{
 c000de0:	b480      	push	{r7}
 c000de2:	b083      	sub	sp, #12
 c000de4:	af00      	add	r7, sp, #0
 c000de6:	4603      	mov	r3, r0
 c000de8:	6039      	str	r1, [r7, #0]
 c000dea:	71fb      	strb	r3, [r7, #7]
  if(func != NULL)
 c000dec:	683b      	ldr	r3, [r7, #0]
 c000dee:	2b00      	cmp	r3, #0
 c000df0:	d00d      	beq.n	c000e0e <__acle_se_SECURE_RegisterCallback+0x2e>
  {
    switch(CallbackId)
 c000df2:	79fb      	ldrb	r3, [r7, #7]
 c000df4:	2b00      	cmp	r3, #0
 c000df6:	d002      	beq.n	c000dfe <__acle_se_SECURE_RegisterCallback+0x1e>
 c000df8:	2b01      	cmp	r3, #1
 c000dfa:	d004      	beq.n	c000e06 <__acle_se_SECURE_RegisterCallback+0x26>
      case GTZC_ERROR_CB_ID:             /* GTZC Interrupt occurred */
        pSecureErrorCallback = func;
        break;
      default:
        /* unknown */
        break;
 c000dfc:	e007      	b.n	c000e0e <__acle_se_SECURE_RegisterCallback+0x2e>
        pSecureFaultCallback = func;
 c000dfe:	4a20      	ldr	r2, [pc, #128]	; (c000e80 <__acle_se_SECURE_RegisterCallback+0xa0>)
 c000e00:	683b      	ldr	r3, [r7, #0]
 c000e02:	6013      	str	r3, [r2, #0]
        break;
 c000e04:	e003      	b.n	c000e0e <__acle_se_SECURE_RegisterCallback+0x2e>
        pSecureErrorCallback = func;
 c000e06:	4a1f      	ldr	r2, [pc, #124]	; (c000e84 <__acle_se_SECURE_RegisterCallback+0xa4>)
 c000e08:	683b      	ldr	r3, [r7, #0]
 c000e0a:	6013      	str	r3, [r2, #0]
        break;
 c000e0c:	bf00      	nop
    }
  }
}
 c000e0e:	bf00      	nop
 c000e10:	370c      	adds	r7, #12
 c000e12:	46bd      	mov	sp, r7
 c000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000e18:	4670      	mov	r0, lr
 c000e1a:	4671      	mov	r1, lr
 c000e1c:	4672      	mov	r2, lr
 c000e1e:	4673      	mov	r3, lr
 c000e20:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c000e24:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c000e28:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c000e2c:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c000e30:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c000e34:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c000e38:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c000e3c:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c000e40:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c000e44:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c000e48:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c000e4c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c000e50:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c000e54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c000e58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c000e5c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c000e60:	f38e 8c00 	msr	CPSR_fs, lr
 c000e64:	b410      	push	{r4}
 c000e66:	eef1 ca10 	vmrs	ip, fpscr
 c000e6a:	f64f 7460 	movw	r4, #65376	; 0xff60
 c000e6e:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c000e72:	ea0c 0c04 	and.w	ip, ip, r4
 c000e76:	eee1 ca10 	vmsr	fpscr, ip
 c000e7a:	bc10      	pop	{r4}
 c000e7c:	46f4      	mov	ip, lr
 c000e7e:	4774      	bxns	lr
 c000e80:	30000028 	.word	0x30000028
 c000e84:	3000002c 	.word	0x3000002c

0c000e88 <__acle_se_encrypt>:

//  STRING_LENGTH / 8
#define NUM_ENC 8

CMSE_NS_ENTRY void encrypt(uint8_t* plain, uint8_t* key){
 c000e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 c000e8a:	b099      	sub	sp, #100	; 0x64
 c000e8c:	af00      	add	r7, sp, #0
 c000e8e:	6078      	str	r0, [r7, #4]
 c000e90:	6039      	str	r1, [r7, #0]
	uint8_t plain_temp[STRING_LENGTH];
	uint8_t key_temp[16];
	memcpy(plain_temp, plain, STRING_LENGTH);
 c000e92:	687b      	ldr	r3, [r7, #4]
 c000e94:	461c      	mov	r4, r3
 c000e96:	f107 061c 	add.w	r6, r7, #28
 c000e9a:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 c000e9e:	4635      	mov	r5, r6
 c000ea0:	4623      	mov	r3, r4
 c000ea2:	6818      	ldr	r0, [r3, #0]
 c000ea4:	6859      	ldr	r1, [r3, #4]
 c000ea6:	689a      	ldr	r2, [r3, #8]
 c000ea8:	68db      	ldr	r3, [r3, #12]
 c000eaa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 c000eac:	3410      	adds	r4, #16
 c000eae:	3610      	adds	r6, #16
 c000eb0:	4564      	cmp	r4, ip
 c000eb2:	d1f4      	bne.n	c000e9e <__acle_se_encrypt+0x16>
	memcpy(key_temp, key, 16);
 c000eb4:	683b      	ldr	r3, [r7, #0]
 c000eb6:	f107 040c 	add.w	r4, r7, #12
 c000eba:	6818      	ldr	r0, [r3, #0]
 c000ebc:	6859      	ldr	r1, [r3, #4]
 c000ebe:	689a      	ldr	r2, [r3, #8]
 c000ec0:	68db      	ldr	r3, [r3, #12]
 c000ec2:	c40f      	stmia	r4!, {r0, r1, r2, r3}

	for (uint8_t i = 0; i < NUM_ENC; i++)
 c000ec4:	2300      	movs	r3, #0
 c000ec6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 c000eca:	e011      	b.n	c000ef0 <__acle_se_encrypt+0x68>
		present_encrypt((plain_temp + 8 * i), key_temp);
 c000ecc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 c000ed0:	00db      	lsls	r3, r3, #3
 c000ed2:	461a      	mov	r2, r3
 c000ed4:	f107 031c 	add.w	r3, r7, #28
 c000ed8:	4413      	add	r3, r2
 c000eda:	f107 020c 	add.w	r2, r7, #12
 c000ede:	4611      	mov	r1, r2
 c000ee0:	4618      	mov	r0, r3
 c000ee2:	f7ff fafc 	bl	c0004de <present_encrypt>
	for (uint8_t i = 0; i < NUM_ENC; i++)
 c000ee6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 c000eea:	3301      	adds	r3, #1
 c000eec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 c000ef0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 c000ef4:	2b07      	cmp	r3, #7
 c000ef6:	d9e9      	bls.n	c000ecc <__acle_se_encrypt+0x44>

	memcpy(plain, plain_temp, STRING_LENGTH);
 c000ef8:	687b      	ldr	r3, [r7, #4]
 c000efa:	f107 041c 	add.w	r4, r7, #28
 c000efe:	469c      	mov	ip, r3
 c000f00:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 c000f04:	4665      	mov	r5, ip
 c000f06:	4626      	mov	r6, r4
 c000f08:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 c000f0a:	6028      	str	r0, [r5, #0]
 c000f0c:	6069      	str	r1, [r5, #4]
 c000f0e:	60aa      	str	r2, [r5, #8]
 c000f10:	60eb      	str	r3, [r5, #12]
 c000f12:	3410      	adds	r4, #16
 c000f14:	f10c 0c10 	add.w	ip, ip, #16
 c000f18:	4574      	cmp	r4, lr
 c000f1a:	d1f3      	bne.n	c000f04 <__acle_se_encrypt+0x7c>
	return;
 c000f1c:	bf00      	nop
}
 c000f1e:	3764      	adds	r7, #100	; 0x64
 c000f20:	46bd      	mov	sp, r7
 c000f22:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 c000f26:	4670      	mov	r0, lr
 c000f28:	4671      	mov	r1, lr
 c000f2a:	4672      	mov	r2, lr
 c000f2c:	4673      	mov	r3, lr
 c000f2e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c000f32:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c000f36:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c000f3a:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c000f3e:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c000f42:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c000f46:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c000f4a:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c000f4e:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c000f52:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c000f56:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c000f5a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c000f5e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c000f62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c000f66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c000f6a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c000f6e:	f38e 8c00 	msr	CPSR_fs, lr
 c000f72:	b410      	push	{r4}
 c000f74:	eef1 ca10 	vmrs	ip, fpscr
 c000f78:	f64f 7460 	movw	r4, #65376	; 0xff60
 c000f7c:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c000f80:	ea0c 0c04 	and.w	ip, ip, r4
 c000f84:	eee1 ca10 	vmsr	fpscr, ip
 c000f88:	bc10      	pop	{r4}
 c000f8a:	46f4      	mov	ip, lr
 c000f8c:	4774      	bxns	lr

0c000f8e <__acle_se_decrypt>:

CMSE_NS_ENTRY void decrypt(uint8_t* plain, uint8_t* key){
 c000f8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 c000f90:	b099      	sub	sp, #100	; 0x64
 c000f92:	af00      	add	r7, sp, #0
 c000f94:	6078      	str	r0, [r7, #4]
 c000f96:	6039      	str	r1, [r7, #0]
	uint8_t plain_temp[STRING_LENGTH];
	uint8_t key_temp[16];
	memcpy(plain_temp, plain, STRING_LENGTH);
 c000f98:	687b      	ldr	r3, [r7, #4]
 c000f9a:	461c      	mov	r4, r3
 c000f9c:	f107 061c 	add.w	r6, r7, #28
 c000fa0:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 c000fa4:	4635      	mov	r5, r6
 c000fa6:	4623      	mov	r3, r4
 c000fa8:	6818      	ldr	r0, [r3, #0]
 c000faa:	6859      	ldr	r1, [r3, #4]
 c000fac:	689a      	ldr	r2, [r3, #8]
 c000fae:	68db      	ldr	r3, [r3, #12]
 c000fb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 c000fb2:	3410      	adds	r4, #16
 c000fb4:	3610      	adds	r6, #16
 c000fb6:	4564      	cmp	r4, ip
 c000fb8:	d1f4      	bne.n	c000fa4 <__acle_se_decrypt+0x16>
	memcpy(key_temp, key, 16);
 c000fba:	683b      	ldr	r3, [r7, #0]
 c000fbc:	f107 040c 	add.w	r4, r7, #12
 c000fc0:	6818      	ldr	r0, [r3, #0]
 c000fc2:	6859      	ldr	r1, [r3, #4]
 c000fc4:	689a      	ldr	r2, [r3, #8]
 c000fc6:	68db      	ldr	r3, [r3, #12]
 c000fc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}

	for (uint8_t i = 0; i < NUM_ENC; i++)
 c000fca:	2300      	movs	r3, #0
 c000fcc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 c000fd0:	e011      	b.n	c000ff6 <__acle_se_decrypt+0x68>
		present_decrypt((plain_temp + 8 * i), key_temp);
 c000fd2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 c000fd6:	00db      	lsls	r3, r3, #3
 c000fd8:	461a      	mov	r2, r3
 c000fda:	f107 031c 	add.w	r3, r7, #28
 c000fde:	4413      	add	r3, r2
 c000fe0:	f107 020c 	add.w	r2, r7, #12
 c000fe4:	4611      	mov	r1, r2
 c000fe6:	4618      	mov	r0, r3
 c000fe8:	f7ff faae 	bl	c000548 <present_decrypt>
	for (uint8_t i = 0; i < NUM_ENC; i++)
 c000fec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 c000ff0:	3301      	adds	r3, #1
 c000ff2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 c000ff6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 c000ffa:	2b07      	cmp	r3, #7
 c000ffc:	d9e9      	bls.n	c000fd2 <__acle_se_decrypt+0x44>
	memcpy(plain, plain_temp, STRING_LENGTH);
 c000ffe:	687b      	ldr	r3, [r7, #4]
 c001000:	f107 041c 	add.w	r4, r7, #28
 c001004:	469c      	mov	ip, r3
 c001006:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 c00100a:	4665      	mov	r5, ip
 c00100c:	4626      	mov	r6, r4
 c00100e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 c001010:	6028      	str	r0, [r5, #0]
 c001012:	6069      	str	r1, [r5, #4]
 c001014:	60aa      	str	r2, [r5, #8]
 c001016:	60eb      	str	r3, [r5, #12]
 c001018:	3410      	adds	r4, #16
 c00101a:	f10c 0c10 	add.w	ip, ip, #16
 c00101e:	4574      	cmp	r4, lr
 c001020:	d1f3      	bne.n	c00100a <__acle_se_decrypt+0x7c>
	return;
 c001022:	bf00      	nop
}
 c001024:	3764      	adds	r7, #100	; 0x64
 c001026:	46bd      	mov	sp, r7
 c001028:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 c00102c:	4670      	mov	r0, lr
 c00102e:	4671      	mov	r1, lr
 c001030:	4672      	mov	r2, lr
 c001032:	4673      	mov	r3, lr
 c001034:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c001038:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c00103c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c001040:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c001044:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c001048:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c00104c:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c001050:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c001054:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c001058:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c00105c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c001060:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c001064:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c001068:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c00106c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c001070:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c001074:	f38e 8c00 	msr	CPSR_fs, lr
 c001078:	b410      	push	{r4}
 c00107a:	eef1 ca10 	vmrs	ip, fpscr
 c00107e:	f64f 7460 	movw	r4, #65376	; 0xff60
 c001082:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c001086:	ea0c 0c04 	and.w	ip, ip, r4
 c00108a:	eee1 ca10 	vmsr	fpscr, ip
 c00108e:	bc10      	pop	{r4}
 c001090:	46f4      	mov	ip, lr
 c001092:	4774      	bxns	lr

0c001094 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 c001094:	b480      	push	{r7}
 c001096:	b085      	sub	sp, #20
 c001098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 c00109a:	4b15      	ldr	r3, [pc, #84]	; (c0010f0 <HAL_MspInit+0x5c>)
 c00109c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c00109e:	4a14      	ldr	r2, [pc, #80]	; (c0010f0 <HAL_MspInit+0x5c>)
 c0010a0:	f043 0301 	orr.w	r3, r3, #1
 c0010a4:	6613      	str	r3, [r2, #96]	; 0x60
 c0010a6:	4b12      	ldr	r3, [pc, #72]	; (c0010f0 <HAL_MspInit+0x5c>)
 c0010a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c0010aa:	f003 0301 	and.w	r3, r3, #1
 c0010ae:	60fb      	str	r3, [r7, #12]
 c0010b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 c0010b2:	4b0f      	ldr	r3, [pc, #60]	; (c0010f0 <HAL_MspInit+0x5c>)
 c0010b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0010b6:	4a0e      	ldr	r2, [pc, #56]	; (c0010f0 <HAL_MspInit+0x5c>)
 c0010b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c0010bc:	6593      	str	r3, [r2, #88]	; 0x58
 c0010be:	4b0c      	ldr	r3, [pc, #48]	; (c0010f0 <HAL_MspInit+0x5c>)
 c0010c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0010c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c0010c6:	60bb      	str	r3, [r7, #8]
 c0010c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GTZC_CLK_ENABLE();
 c0010ca:	4b09      	ldr	r3, [pc, #36]	; (c0010f0 <HAL_MspInit+0x5c>)
 c0010cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c0010ce:	4a08      	ldr	r2, [pc, #32]	; (c0010f0 <HAL_MspInit+0x5c>)
 c0010d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 c0010d4:	6493      	str	r3, [r2, #72]	; 0x48
 c0010d6:	4b06      	ldr	r3, [pc, #24]	; (c0010f0 <HAL_MspInit+0x5c>)
 c0010d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c0010da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 c0010de:	607b      	str	r3, [r7, #4]
 c0010e0:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 c0010e2:	bf00      	nop
 c0010e4:	3714      	adds	r7, #20
 c0010e6:	46bd      	mov	sp, r7
 c0010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0010ec:	4770      	bx	lr
 c0010ee:	bf00      	nop
 c0010f0:	50021000 	.word	0x50021000

0c0010f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 c0010f4:	b480      	push	{r7}
 c0010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 c0010f8:	e7fe      	b.n	c0010f8 <NMI_Handler+0x4>

0c0010fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 c0010fa:	b480      	push	{r7}
 c0010fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 c0010fe:	e7fe      	b.n	c0010fe <HardFault_Handler+0x4>

0c001100 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 c001100:	b480      	push	{r7}
 c001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 c001104:	e7fe      	b.n	c001104 <MemManage_Handler+0x4>

0c001106 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 c001106:	b480      	push	{r7}
 c001108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 c00110a:	e7fe      	b.n	c00110a <BusFault_Handler+0x4>

0c00110c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 c00110c:	b480      	push	{r7}
 c00110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 c001110:	e7fe      	b.n	c001110 <UsageFault_Handler+0x4>

0c001112 <SecureFault_Handler>:

/**
  * @brief This function handles Secure fault.
  */
void SecureFault_Handler(void)
{
 c001112:	b480      	push	{r7}
 c001114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SecureFault_IRQn 0 */

  /* USER CODE END SecureFault_IRQn 0 */
  while (1)
 c001116:	e7fe      	b.n	c001116 <SecureFault_Handler+0x4>

0c001118 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 c001118:	b480      	push	{r7}
 c00111a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 c00111c:	bf00      	nop
 c00111e:	46bd      	mov	sp, r7
 c001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001124:	4770      	bx	lr

0c001126 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 c001126:	b480      	push	{r7}
 c001128:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 c00112a:	bf00      	nop
 c00112c:	46bd      	mov	sp, r7
 c00112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001132:	4770      	bx	lr

0c001134 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 c001134:	b480      	push	{r7}
 c001136:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 c001138:	bf00      	nop
 c00113a:	46bd      	mov	sp, r7
 c00113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001140:	4770      	bx	lr

0c001142 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 c001142:	b580      	push	{r7, lr}
 c001144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 c001146:	f000 fa07 	bl	c001558 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 c00114a:	bf00      	nop
 c00114c:	bd80      	pop	{r7, pc}
	...

0c001150 <TZ_SAU_Setup>:
  \brief   Setup a SAU Region
  \details Writes the region information contained in SAU_Region to the
           registers SAU_RNR, SAU_RBAR, and SAU_RLAR
 */
__STATIC_INLINE void TZ_SAU_Setup (void)
{
 c001150:	b480      	push	{r7}
 c001152:	af00      	add	r7, sp, #0

#if defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U)

  #if defined (SAU_INIT_REGION0) && (SAU_INIT_REGION0 == 1U)
    SAU_INIT_REGION(0);
 c001154:	4b2f      	ldr	r3, [pc, #188]	; (c001214 <TZ_SAU_Setup+0xc4>)
 c001156:	2200      	movs	r2, #0
 c001158:	609a      	str	r2, [r3, #8]
 c00115a:	4b2e      	ldr	r3, [pc, #184]	; (c001214 <TZ_SAU_Setup+0xc4>)
 c00115c:	4a2e      	ldr	r2, [pc, #184]	; (c001218 <TZ_SAU_Setup+0xc8>)
 c00115e:	60da      	str	r2, [r3, #12]
 c001160:	4b2c      	ldr	r3, [pc, #176]	; (c001214 <TZ_SAU_Setup+0xc4>)
 c001162:	4a2e      	ldr	r2, [pc, #184]	; (c00121c <TZ_SAU_Setup+0xcc>)
 c001164:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION1) && (SAU_INIT_REGION1 == 1U)
    SAU_INIT_REGION(1);
 c001166:	4b2b      	ldr	r3, [pc, #172]	; (c001214 <TZ_SAU_Setup+0xc4>)
 c001168:	2201      	movs	r2, #1
 c00116a:	609a      	str	r2, [r3, #8]
 c00116c:	4b29      	ldr	r3, [pc, #164]	; (c001214 <TZ_SAU_Setup+0xc4>)
 c00116e:	4a2c      	ldr	r2, [pc, #176]	; (c001220 <TZ_SAU_Setup+0xd0>)
 c001170:	60da      	str	r2, [r3, #12]
 c001172:	4b28      	ldr	r3, [pc, #160]	; (c001214 <TZ_SAU_Setup+0xc4>)
 c001174:	4a2b      	ldr	r2, [pc, #172]	; (c001224 <TZ_SAU_Setup+0xd4>)
 c001176:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION2) && (SAU_INIT_REGION2 == 1U)
    SAU_INIT_REGION(2);
 c001178:	4b26      	ldr	r3, [pc, #152]	; (c001214 <TZ_SAU_Setup+0xc4>)
 c00117a:	2202      	movs	r2, #2
 c00117c:	609a      	str	r2, [r3, #8]
 c00117e:	4b25      	ldr	r3, [pc, #148]	; (c001214 <TZ_SAU_Setup+0xc4>)
 c001180:	4a29      	ldr	r2, [pc, #164]	; (c001228 <TZ_SAU_Setup+0xd8>)
 c001182:	60da      	str	r2, [r3, #12]
 c001184:	4b23      	ldr	r3, [pc, #140]	; (c001214 <TZ_SAU_Setup+0xc4>)
 c001186:	4a29      	ldr	r2, [pc, #164]	; (c00122c <TZ_SAU_Setup+0xdc>)
 c001188:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION3) && (SAU_INIT_REGION3 == 1U)
    SAU_INIT_REGION(3);
 c00118a:	4b22      	ldr	r3, [pc, #136]	; (c001214 <TZ_SAU_Setup+0xc4>)
 c00118c:	2203      	movs	r2, #3
 c00118e:	609a      	str	r2, [r3, #8]
 c001190:	4b20      	ldr	r3, [pc, #128]	; (c001214 <TZ_SAU_Setup+0xc4>)
 c001192:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 c001196:	60da      	str	r2, [r3, #12]
 c001198:	4b1e      	ldr	r3, [pc, #120]	; (c001214 <TZ_SAU_Setup+0xc4>)
 c00119a:	4a25      	ldr	r2, [pc, #148]	; (c001230 <TZ_SAU_Setup+0xe0>)
 c00119c:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION4) && (SAU_INIT_REGION4 == 1U)
    SAU_INIT_REGION(4);
 c00119e:	4b1d      	ldr	r3, [pc, #116]	; (c001214 <TZ_SAU_Setup+0xc4>)
 c0011a0:	2204      	movs	r2, #4
 c0011a2:	609a      	str	r2, [r3, #8]
 c0011a4:	4b1b      	ldr	r3, [pc, #108]	; (c001214 <TZ_SAU_Setup+0xc4>)
 c0011a6:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 c0011aa:	60da      	str	r2, [r3, #12]
 c0011ac:	4b19      	ldr	r3, [pc, #100]	; (c001214 <TZ_SAU_Setup+0xc4>)
 c0011ae:	4a21      	ldr	r2, [pc, #132]	; (c001234 <TZ_SAU_Setup+0xe4>)
 c0011b0:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION5) && (SAU_INIT_REGION5 == 1U)
    SAU_INIT_REGION(5);
 c0011b2:	4b18      	ldr	r3, [pc, #96]	; (c001214 <TZ_SAU_Setup+0xc4>)
 c0011b4:	2205      	movs	r2, #5
 c0011b6:	609a      	str	r2, [r3, #8]
 c0011b8:	4b16      	ldr	r3, [pc, #88]	; (c001214 <TZ_SAU_Setup+0xc4>)
 c0011ba:	4a1f      	ldr	r2, [pc, #124]	; (c001238 <TZ_SAU_Setup+0xe8>)
 c0011bc:	60da      	str	r2, [r3, #12]
 c0011be:	4b15      	ldr	r3, [pc, #84]	; (c001214 <TZ_SAU_Setup+0xc4>)
 c0011c0:	4a1e      	ldr	r2, [pc, #120]	; (c00123c <TZ_SAU_Setup+0xec>)
 c0011c2:	611a      	str	r2, [r3, #16]
  /* repeat this for all possible SAU regions */

#endif /* defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U) */

  #if defined (SAU_INIT_CTRL) && (SAU_INIT_CTRL == 1U)
    SAU->CTRL = ((SAU_INIT_CTRL_ENABLE << SAU_CTRL_ENABLE_Pos) & SAU_CTRL_ENABLE_Msk) |
 c0011c4:	4b13      	ldr	r3, [pc, #76]	; (c001214 <TZ_SAU_Setup+0xc4>)
 c0011c6:	2201      	movs	r2, #1
 c0011c8:	601a      	str	r2, [r3, #0]
  #endif /* defined (SCB_CSR_AIRCR_INIT) && (SCB_CSR_AIRCR_INIT == 1U) */

  #if defined (__FPU_USED) && (__FPU_USED == 1U) && \
      defined (TZ_FPU_NS_USAGE) && (TZ_FPU_NS_USAGE == 1U)

    SCB->NSACR = (SCB->NSACR & ~(SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk)) |
 c0011ca:	4b1d      	ldr	r3, [pc, #116]	; (c001240 <TZ_SAU_Setup+0xf0>)
 c0011cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c0011d0:	4a1b      	ldr	r2, [pc, #108]	; (c001240 <TZ_SAU_Setup+0xf0>)
 c0011d2:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 c0011d6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                   ((SCB_NSACR_CP10_11_VAL << SCB_NSACR_CP10_Pos) & (SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk));

    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c0011da:	4b1a      	ldr	r3, [pc, #104]	; (c001244 <TZ_SAU_Setup+0xf4>)
 c0011dc:	685b      	ldr	r3, [r3, #4]
                   ((FPU_FPCCR_TS_VAL        << FPU_FPCCR_TS_Pos       ) & FPU_FPCCR_TS_Msk       ) |
 c0011de:	f023 53e0 	bic.w	r3, r3, #469762048	; 0x1c000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c0011e2:	4a18      	ldr	r2, [pc, #96]	; (c001244 <TZ_SAU_Setup+0xf4>)
                   ((FPU_FPCCR_CLRONRETS_VAL << FPU_FPCCR_CLRONRETS_Pos) & FPU_FPCCR_CLRONRETS_Msk) |
 c0011e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c0011e8:	6053      	str	r3, [r2, #4]
                   ((FPU_FPCCR_CLRONRET_VAL  << FPU_FPCCR_CLRONRET_Pos ) & FPU_FPCCR_CLRONRET_Msk );
  #endif

  #if defined (NVIC_INIT_ITNS0) && (NVIC_INIT_ITNS0 == 1U)
    NVIC->ITNS[0] = NVIC_INIT_ITNS0_VAL;
 c0011ea:	4b17      	ldr	r3, [pc, #92]	; (c001248 <TZ_SAU_Setup+0xf8>)
 c0011ec:	2200      	movs	r2, #0
 c0011ee:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
  #endif

  #if defined (NVIC_INIT_ITNS1) && (NVIC_INIT_ITNS1 == 1U)
    NVIC->ITNS[1] = NVIC_INIT_ITNS1_VAL;
 c0011f2:	4b15      	ldr	r3, [pc, #84]	; (c001248 <TZ_SAU_Setup+0xf8>)
 c0011f4:	2200      	movs	r2, #0
 c0011f6:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
  #endif

  #if defined (NVIC_INIT_ITNS2) && (NVIC_INIT_ITNS2 == 1U)
    NVIC->ITNS[2] = NVIC_INIT_ITNS2_VAL;
 c0011fa:	4b13      	ldr	r3, [pc, #76]	; (c001248 <TZ_SAU_Setup+0xf8>)
 c0011fc:	2200      	movs	r2, #0
 c0011fe:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  #endif

  #if defined (NVIC_INIT_ITNS3) && (NVIC_INIT_ITNS3 == 1U)
    NVIC->ITNS[3] = NVIC_INIT_ITNS3_VAL;
 c001202:	4b11      	ldr	r3, [pc, #68]	; (c001248 <TZ_SAU_Setup+0xf8>)
 c001204:	2200      	movs	r2, #0
 c001206:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  #endif

}
 c00120a:	bf00      	nop
 c00120c:	46bd      	mov	sp, r7
 c00120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001212:	4770      	bx	lr
 c001214:	e000edd0 	.word	0xe000edd0
 c001218:	0c03e000 	.word	0x0c03e000
 c00121c:	0c03ffe3 	.word	0x0c03ffe3
 c001220:	08040000 	.word	0x08040000
 c001224:	0807ffe1 	.word	0x0807ffe1
 c001228:	20018000 	.word	0x20018000
 c00122c:	2003ffe1 	.word	0x2003ffe1
 c001230:	4fffffe1 	.word	0x4fffffe1
 c001234:	9fffffe1 	.word	0x9fffffe1
 c001238:	0bf90000 	.word	0x0bf90000
 c00123c:	0bfa8fe1 	.word	0x0bfa8fe1
 c001240:	e000ed00 	.word	0xe000ed00
 c001244:	e000ef30 	.word	0xe000ef30
 c001248:	e000e100 	.word	0xe000e100

0c00124c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 c00124c:	b580      	push	{r7, lr}
 c00124e:	af00      	add	r7, sp, #0
  /* SAU/IDAU, FPU and Interrupts secure/non-secure allocation settings */
  TZ_SAU_Setup();
 c001250:	f7ff ff7e 	bl	c001150 <TZ_SAU_Setup>
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c001254:	4b08      	ldr	r3, [pc, #32]	; (c001278 <SystemInit+0x2c>)
 c001256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00125a:	4a07      	ldr	r2, [pc, #28]	; (c001278 <SystemInit+0x2c>)
 c00125c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 c001260:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c001264:	4b05      	ldr	r3, [pc, #20]	; (c00127c <SystemInit+0x30>)
 c001266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00126a:	4a04      	ldr	r2, [pc, #16]	; (c00127c <SystemInit+0x30>)
 c00126c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 c001270:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 c001274:	bf00      	nop
 c001276:	bd80      	pop	{r7, pc}
 c001278:	e000ed00 	.word	0xe000ed00
 c00127c:	e002ed00 	.word	0xe002ed00

0c001280 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 c001280:	b480      	push	{r7}
 c001282:	b087      	sub	sp, #28
 c001284:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 c001286:	4b4f      	ldr	r3, [pc, #316]	; (c0013c4 <SystemCoreClockUpdate+0x144>)
 c001288:	681b      	ldr	r3, [r3, #0]
 c00128a:	f003 0308 	and.w	r3, r3, #8
 c00128e:	2b00      	cmp	r3, #0
 c001290:	d107      	bne.n	c0012a2 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 c001292:	4b4c      	ldr	r3, [pc, #304]	; (c0013c4 <SystemCoreClockUpdate+0x144>)
 c001294:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c001298:	0a1b      	lsrs	r3, r3, #8
 c00129a:	f003 030f 	and.w	r3, r3, #15
 c00129e:	617b      	str	r3, [r7, #20]
 c0012a0:	e005      	b.n	c0012ae <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 c0012a2:	4b48      	ldr	r3, [pc, #288]	; (c0013c4 <SystemCoreClockUpdate+0x144>)
 c0012a4:	681b      	ldr	r3, [r3, #0]
 c0012a6:	091b      	lsrs	r3, r3, #4
 c0012a8:	f003 030f 	and.w	r3, r3, #15
 c0012ac:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 c0012ae:	4a46      	ldr	r2, [pc, #280]	; (c0013c8 <SystemCoreClockUpdate+0x148>)
 c0012b0:	697b      	ldr	r3, [r7, #20]
 c0012b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c0012b6:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 c0012b8:	4b42      	ldr	r3, [pc, #264]	; (c0013c4 <SystemCoreClockUpdate+0x144>)
 c0012ba:	689b      	ldr	r3, [r3, #8]
 c0012bc:	f003 030c 	and.w	r3, r3, #12
 c0012c0:	2b0c      	cmp	r3, #12
 c0012c2:	d866      	bhi.n	c001392 <SystemCoreClockUpdate+0x112>
 c0012c4:	a201      	add	r2, pc, #4	; (adr r2, c0012cc <SystemCoreClockUpdate+0x4c>)
 c0012c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c0012ca:	bf00      	nop
 c0012cc:	0c001301 	.word	0x0c001301
 c0012d0:	0c001393 	.word	0x0c001393
 c0012d4:	0c001393 	.word	0x0c001393
 c0012d8:	0c001393 	.word	0x0c001393
 c0012dc:	0c001309 	.word	0x0c001309
 c0012e0:	0c001393 	.word	0x0c001393
 c0012e4:	0c001393 	.word	0x0c001393
 c0012e8:	0c001393 	.word	0x0c001393
 c0012ec:	0c001311 	.word	0x0c001311
 c0012f0:	0c001393 	.word	0x0c001393
 c0012f4:	0c001393 	.word	0x0c001393
 c0012f8:	0c001393 	.word	0x0c001393
 c0012fc:	0c001319 	.word	0x0c001319
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 c001300:	4a32      	ldr	r2, [pc, #200]	; (c0013cc <SystemCoreClockUpdate+0x14c>)
 c001302:	697b      	ldr	r3, [r7, #20]
 c001304:	6013      	str	r3, [r2, #0]
      break;
 c001306:	e048      	b.n	c00139a <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 c001308:	4b30      	ldr	r3, [pc, #192]	; (c0013cc <SystemCoreClockUpdate+0x14c>)
 c00130a:	4a31      	ldr	r2, [pc, #196]	; (c0013d0 <SystemCoreClockUpdate+0x150>)
 c00130c:	601a      	str	r2, [r3, #0]
      break;
 c00130e:	e044      	b.n	c00139a <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 c001310:	4b2e      	ldr	r3, [pc, #184]	; (c0013cc <SystemCoreClockUpdate+0x14c>)
 c001312:	4a2f      	ldr	r2, [pc, #188]	; (c0013d0 <SystemCoreClockUpdate+0x150>)
 c001314:	601a      	str	r2, [r3, #0]
      break;
 c001316:	e040      	b.n	c00139a <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c001318:	4b2a      	ldr	r3, [pc, #168]	; (c0013c4 <SystemCoreClockUpdate+0x144>)
 c00131a:	68db      	ldr	r3, [r3, #12]
 c00131c:	f003 0303 	and.w	r3, r3, #3
 c001320:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 c001322:	4b28      	ldr	r3, [pc, #160]	; (c0013c4 <SystemCoreClockUpdate+0x144>)
 c001324:	68db      	ldr	r3, [r3, #12]
 c001326:	091b      	lsrs	r3, r3, #4
 c001328:	f003 030f 	and.w	r3, r3, #15
 c00132c:	3301      	adds	r3, #1
 c00132e:	60bb      	str	r3, [r7, #8]
 c001330:	68fb      	ldr	r3, [r7, #12]
 c001332:	2b02      	cmp	r3, #2
 c001334:	d003      	beq.n	c00133e <SystemCoreClockUpdate+0xbe>
 c001336:	68fb      	ldr	r3, [r7, #12]
 c001338:	2b03      	cmp	r3, #3
 c00133a:	d006      	beq.n	c00134a <SystemCoreClockUpdate+0xca>
 c00133c:	e00b      	b.n	c001356 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 c00133e:	4a24      	ldr	r2, [pc, #144]	; (c0013d0 <SystemCoreClockUpdate+0x150>)
 c001340:	68bb      	ldr	r3, [r7, #8]
 c001342:	fbb2 f3f3 	udiv	r3, r2, r3
 c001346:	613b      	str	r3, [r7, #16]
          break;
 c001348:	e00b      	b.n	c001362 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 c00134a:	4a21      	ldr	r2, [pc, #132]	; (c0013d0 <SystemCoreClockUpdate+0x150>)
 c00134c:	68bb      	ldr	r3, [r7, #8]
 c00134e:	fbb2 f3f3 	udiv	r3, r2, r3
 c001352:	613b      	str	r3, [r7, #16]
          break;
 c001354:	e005      	b.n	c001362 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 c001356:	697a      	ldr	r2, [r7, #20]
 c001358:	68bb      	ldr	r3, [r7, #8]
 c00135a:	fbb2 f3f3 	udiv	r3, r2, r3
 c00135e:	613b      	str	r3, [r7, #16]
          break;
 c001360:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 c001362:	4b18      	ldr	r3, [pc, #96]	; (c0013c4 <SystemCoreClockUpdate+0x144>)
 c001364:	68db      	ldr	r3, [r3, #12]
 c001366:	0a1b      	lsrs	r3, r3, #8
 c001368:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 c00136c:	693b      	ldr	r3, [r7, #16]
 c00136e:	fb02 f303 	mul.w	r3, r2, r3
 c001372:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 c001374:	4b13      	ldr	r3, [pc, #76]	; (c0013c4 <SystemCoreClockUpdate+0x144>)
 c001376:	68db      	ldr	r3, [r3, #12]
 c001378:	0e5b      	lsrs	r3, r3, #25
 c00137a:	f003 0303 	and.w	r3, r3, #3
 c00137e:	3301      	adds	r3, #1
 c001380:	005b      	lsls	r3, r3, #1
 c001382:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 c001384:	693a      	ldr	r2, [r7, #16]
 c001386:	687b      	ldr	r3, [r7, #4]
 c001388:	fbb2 f3f3 	udiv	r3, r2, r3
 c00138c:	4a0f      	ldr	r2, [pc, #60]	; (c0013cc <SystemCoreClockUpdate+0x14c>)
 c00138e:	6013      	str	r3, [r2, #0]
      break;
 c001390:	e003      	b.n	c00139a <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 c001392:	4a0e      	ldr	r2, [pc, #56]	; (c0013cc <SystemCoreClockUpdate+0x14c>)
 c001394:	697b      	ldr	r3, [r7, #20]
 c001396:	6013      	str	r3, [r2, #0]
      break;
 c001398:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 c00139a:	4b0a      	ldr	r3, [pc, #40]	; (c0013c4 <SystemCoreClockUpdate+0x144>)
 c00139c:	689b      	ldr	r3, [r3, #8]
 c00139e:	091b      	lsrs	r3, r3, #4
 c0013a0:	f003 030f 	and.w	r3, r3, #15
 c0013a4:	4a0b      	ldr	r2, [pc, #44]	; (c0013d4 <SystemCoreClockUpdate+0x154>)
 c0013a6:	5cd3      	ldrb	r3, [r2, r3]
 c0013a8:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 c0013aa:	4b08      	ldr	r3, [pc, #32]	; (c0013cc <SystemCoreClockUpdate+0x14c>)
 c0013ac:	681a      	ldr	r2, [r3, #0]
 c0013ae:	683b      	ldr	r3, [r7, #0]
 c0013b0:	fa22 f303 	lsr.w	r3, r2, r3
 c0013b4:	4a05      	ldr	r2, [pc, #20]	; (c0013cc <SystemCoreClockUpdate+0x14c>)
 c0013b6:	6013      	str	r3, [r2, #0]
}
 c0013b8:	bf00      	nop
 c0013ba:	371c      	adds	r7, #28
 c0013bc:	46bd      	mov	sp, r7
 c0013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0013c2:	4770      	bx	lr
 c0013c4:	50021000 	.word	0x50021000
 c0013c8:	0c001cac 	.word	0x0c001cac
 c0013cc:	30000000 	.word	0x30000000
 c0013d0:	00f42400 	.word	0x00f42400
 c0013d4:	0c001c9c 	.word	0x0c001c9c

0c0013d8 <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value (HCLK)
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
 c0013d8:	b580      	push	{r7, lr}
 c0013da:	af00      	add	r7, sp, #0
  SystemCoreClockUpdate();
 c0013dc:	f7ff ff50 	bl	c001280 <SystemCoreClockUpdate>
  
  return SystemCoreClock;
 c0013e0:	4b1c      	ldr	r3, [pc, #112]	; (c001454 <__acle_se_SECURE_SystemCoreClockUpdate+0x7c>)
 c0013e2:	681b      	ldr	r3, [r3, #0]
}
 c0013e4:	4618      	mov	r0, r3
 c0013e6:	46bd      	mov	sp, r7
 c0013e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c0013ec:	4671      	mov	r1, lr
 c0013ee:	4672      	mov	r2, lr
 c0013f0:	4673      	mov	r3, lr
 c0013f2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c0013f6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c0013fa:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c0013fe:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c001402:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c001406:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c00140a:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c00140e:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c001412:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c001416:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c00141a:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c00141e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c001422:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c001426:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c00142a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c00142e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c001432:	f38e 8c00 	msr	CPSR_fs, lr
 c001436:	b410      	push	{r4}
 c001438:	eef1 ca10 	vmrs	ip, fpscr
 c00143c:	f64f 7460 	movw	r4, #65376	; 0xff60
 c001440:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c001444:	ea0c 0c04 	and.w	ip, ip, r4
 c001448:	eee1 ca10 	vmsr	fpscr, ip
 c00144c:	bc10      	pop	{r4}
 c00144e:	46f4      	mov	ip, lr
 c001450:	4774      	bxns	lr
 c001452:	bf00      	nop
 c001454:	30000000 	.word	0x30000000

0c001458 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 c001458:	f8df d034 	ldr.w	sp, [pc, #52]	; c001490 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 c00145c:	f7ff fef6 	bl	c00124c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 c001460:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 c001462:	e003      	b.n	c00146c <LoopCopyDataInit>

0c001464 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 c001464:	4b0b      	ldr	r3, [pc, #44]	; (c001494 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 c001466:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 c001468:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 c00146a:	3104      	adds	r1, #4

0c00146c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 c00146c:	480a      	ldr	r0, [pc, #40]	; (c001498 <LoopForever+0xa>)
	ldr	r3, =_edata
 c00146e:	4b0b      	ldr	r3, [pc, #44]	; (c00149c <LoopForever+0xe>)
	adds	r2, r0, r1
 c001470:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 c001472:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 c001474:	d3f6      	bcc.n	c001464 <CopyDataInit>
	ldr	r2, =_sbss
 c001476:	4a0a      	ldr	r2, [pc, #40]	; (c0014a0 <LoopForever+0x12>)
	b	LoopFillZerobss
 c001478:	e002      	b.n	c001480 <LoopFillZerobss>

0c00147a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 c00147a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 c00147c:	f842 3b04 	str.w	r3, [r2], #4

0c001480 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 c001480:	4b08      	ldr	r3, [pc, #32]	; (c0014a4 <LoopForever+0x16>)
	cmp	r2, r3
 c001482:	429a      	cmp	r2, r3
	bcc	FillZerobss
 c001484:	d3f9      	bcc.n	c00147a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 c001486:	f000 fbbb 	bl	c001c00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 c00148a:	f7fe ff01 	bl	c000290 <main>

0c00148e <LoopForever>:

LoopForever:
    b LoopForever
 c00148e:	e7fe      	b.n	c00148e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 c001490:	30018000 	.word	0x30018000
	ldr	r3, =_sidata
 c001494:	0c001cf4 	.word	0x0c001cf4
	ldr	r0, =_sdata
 c001498:	30000000 	.word	0x30000000
	ldr	r3, =_edata
 c00149c:	3000000c 	.word	0x3000000c
	ldr	r2, =_sbss
 c0014a0:	3000000c 	.word	0x3000000c
	ldr	r3, = _ebss
 c0014a4:	30000034 	.word	0x30000034

0c0014a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 c0014a8:	e7fe      	b.n	c0014a8 <ADC1_2_IRQHandler>

0c0014aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 c0014aa:	b580      	push	{r7, lr}
 c0014ac:	b082      	sub	sp, #8
 c0014ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 c0014b0:	2300      	movs	r3, #0
 c0014b2:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 c0014b4:	2004      	movs	r0, #4
 c0014b6:	f000 f915 	bl	c0016e4 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 c0014ba:	f7ff fee1 	bl	c001280 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 c0014be:	2007      	movs	r0, #7
 c0014c0:	f000 f80e 	bl	c0014e0 <HAL_InitTick>
 c0014c4:	4603      	mov	r3, r0
 c0014c6:	2b00      	cmp	r3, #0
 c0014c8:	d002      	beq.n	c0014d0 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 c0014ca:	2301      	movs	r3, #1
 c0014cc:	71fb      	strb	r3, [r7, #7]
 c0014ce:	e001      	b.n	c0014d4 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 c0014d0:	f7ff fde0 	bl	c001094 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 c0014d4:	79fb      	ldrb	r3, [r7, #7]
}
 c0014d6:	4618      	mov	r0, r3
 c0014d8:	3708      	adds	r7, #8
 c0014da:	46bd      	mov	sp, r7
 c0014dc:	bd80      	pop	{r7, pc}
	...

0c0014e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 c0014e0:	b580      	push	{r7, lr}
 c0014e2:	b084      	sub	sp, #16
 c0014e4:	af00      	add	r7, sp, #0
 c0014e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 c0014e8:	2300      	movs	r3, #0
 c0014ea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 c0014ec:	4b17      	ldr	r3, [pc, #92]	; (c00154c <HAL_InitTick+0x6c>)
 c0014ee:	781b      	ldrb	r3, [r3, #0]
 c0014f0:	2b00      	cmp	r3, #0
 c0014f2:	d023      	beq.n	c00153c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 c0014f4:	4b16      	ldr	r3, [pc, #88]	; (c001550 <HAL_InitTick+0x70>)
 c0014f6:	681a      	ldr	r2, [r3, #0]
 c0014f8:	4b14      	ldr	r3, [pc, #80]	; (c00154c <HAL_InitTick+0x6c>)
 c0014fa:	781b      	ldrb	r3, [r3, #0]
 c0014fc:	4619      	mov	r1, r3
 c0014fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 c001502:	fbb3 f3f1 	udiv	r3, r3, r1
 c001506:	fbb2 f3f3 	udiv	r3, r2, r3
 c00150a:	4618      	mov	r0, r3
 c00150c:	f000 f90f 	bl	c00172e <HAL_SYSTICK_Config>
 c001510:	4603      	mov	r3, r0
 c001512:	2b00      	cmp	r3, #0
 c001514:	d10f      	bne.n	c001536 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 c001516:	687b      	ldr	r3, [r7, #4]
 c001518:	2b07      	cmp	r3, #7
 c00151a:	d809      	bhi.n	c001530 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 c00151c:	2200      	movs	r2, #0
 c00151e:	6879      	ldr	r1, [r7, #4]
 c001520:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 c001524:	f000 f8e9 	bl	c0016fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 c001528:	4a0a      	ldr	r2, [pc, #40]	; (c001554 <HAL_InitTick+0x74>)
 c00152a:	687b      	ldr	r3, [r7, #4]
 c00152c:	6013      	str	r3, [r2, #0]
 c00152e:	e007      	b.n	c001540 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 c001530:	2301      	movs	r3, #1
 c001532:	73fb      	strb	r3, [r7, #15]
 c001534:	e004      	b.n	c001540 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 c001536:	2301      	movs	r3, #1
 c001538:	73fb      	strb	r3, [r7, #15]
 c00153a:	e001      	b.n	c001540 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 c00153c:	2301      	movs	r3, #1
 c00153e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 c001540:	7bfb      	ldrb	r3, [r7, #15]
}
 c001542:	4618      	mov	r0, r3
 c001544:	3710      	adds	r7, #16
 c001546:	46bd      	mov	sp, r7
 c001548:	bd80      	pop	{r7, pc}
 c00154a:	bf00      	nop
 c00154c:	30000008 	.word	0x30000008
 c001550:	30000000 	.word	0x30000000
 c001554:	30000004 	.word	0x30000004

0c001558 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 c001558:	b480      	push	{r7}
 c00155a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 c00155c:	4b06      	ldr	r3, [pc, #24]	; (c001578 <HAL_IncTick+0x20>)
 c00155e:	781b      	ldrb	r3, [r3, #0]
 c001560:	461a      	mov	r2, r3
 c001562:	4b06      	ldr	r3, [pc, #24]	; (c00157c <HAL_IncTick+0x24>)
 c001564:	681b      	ldr	r3, [r3, #0]
 c001566:	4413      	add	r3, r2
 c001568:	4a04      	ldr	r2, [pc, #16]	; (c00157c <HAL_IncTick+0x24>)
 c00156a:	6013      	str	r3, [r2, #0]
}
 c00156c:	bf00      	nop
 c00156e:	46bd      	mov	sp, r7
 c001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001574:	4770      	bx	lr
 c001576:	bf00      	nop
 c001578:	30000008 	.word	0x30000008
 c00157c:	30000030 	.word	0x30000030

0c001580 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c001580:	b480      	push	{r7}
 c001582:	b085      	sub	sp, #20
 c001584:	af00      	add	r7, sp, #0
 c001586:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 c001588:	687b      	ldr	r3, [r7, #4]
 c00158a:	f003 0307 	and.w	r3, r3, #7
 c00158e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 c001590:	4b0c      	ldr	r3, [pc, #48]	; (c0015c4 <__NVIC_SetPriorityGrouping+0x44>)
 c001592:	68db      	ldr	r3, [r3, #12]
 c001594:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 c001596:	68ba      	ldr	r2, [r7, #8]
 c001598:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 c00159c:	4013      	ands	r3, r2
 c00159e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 c0015a0:	68fb      	ldr	r3, [r7, #12]
 c0015a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 c0015a4:	68bb      	ldr	r3, [r7, #8]
 c0015a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 c0015a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 c0015ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 c0015b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 c0015b2:	4a04      	ldr	r2, [pc, #16]	; (c0015c4 <__NVIC_SetPriorityGrouping+0x44>)
 c0015b4:	68bb      	ldr	r3, [r7, #8]
 c0015b6:	60d3      	str	r3, [r2, #12]
}
 c0015b8:	bf00      	nop
 c0015ba:	3714      	adds	r7, #20
 c0015bc:	46bd      	mov	sp, r7
 c0015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0015c2:	4770      	bx	lr
 c0015c4:	e000ed00 	.word	0xe000ed00

0c0015c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 c0015c8:	b480      	push	{r7}
 c0015ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 c0015cc:	4b04      	ldr	r3, [pc, #16]	; (c0015e0 <__NVIC_GetPriorityGrouping+0x18>)
 c0015ce:	68db      	ldr	r3, [r3, #12]
 c0015d0:	0a1b      	lsrs	r3, r3, #8
 c0015d2:	f003 0307 	and.w	r3, r3, #7
}
 c0015d6:	4618      	mov	r0, r3
 c0015d8:	46bd      	mov	sp, r7
 c0015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0015de:	4770      	bx	lr
 c0015e0:	e000ed00 	.word	0xe000ed00

0c0015e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 c0015e4:	b480      	push	{r7}
 c0015e6:	b083      	sub	sp, #12
 c0015e8:	af00      	add	r7, sp, #0
 c0015ea:	4603      	mov	r3, r0
 c0015ec:	6039      	str	r1, [r7, #0]
 c0015ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 c0015f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c0015f4:	2b00      	cmp	r3, #0
 c0015f6:	db0a      	blt.n	c00160e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c0015f8:	683b      	ldr	r3, [r7, #0]
 c0015fa:	b2da      	uxtb	r2, r3
 c0015fc:	490c      	ldr	r1, [pc, #48]	; (c001630 <__NVIC_SetPriority+0x4c>)
 c0015fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c001602:	0152      	lsls	r2, r2, #5
 c001604:	b2d2      	uxtb	r2, r2
 c001606:	440b      	add	r3, r1
 c001608:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 c00160c:	e00a      	b.n	c001624 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c00160e:	683b      	ldr	r3, [r7, #0]
 c001610:	b2da      	uxtb	r2, r3
 c001612:	4908      	ldr	r1, [pc, #32]	; (c001634 <__NVIC_SetPriority+0x50>)
 c001614:	79fb      	ldrb	r3, [r7, #7]
 c001616:	f003 030f 	and.w	r3, r3, #15
 c00161a:	3b04      	subs	r3, #4
 c00161c:	0152      	lsls	r2, r2, #5
 c00161e:	b2d2      	uxtb	r2, r2
 c001620:	440b      	add	r3, r1
 c001622:	761a      	strb	r2, [r3, #24]
}
 c001624:	bf00      	nop
 c001626:	370c      	adds	r7, #12
 c001628:	46bd      	mov	sp, r7
 c00162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00162e:	4770      	bx	lr
 c001630:	e000e100 	.word	0xe000e100
 c001634:	e000ed00 	.word	0xe000ed00

0c001638 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c001638:	b480      	push	{r7}
 c00163a:	b089      	sub	sp, #36	; 0x24
 c00163c:	af00      	add	r7, sp, #0
 c00163e:	60f8      	str	r0, [r7, #12]
 c001640:	60b9      	str	r1, [r7, #8]
 c001642:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 c001644:	68fb      	ldr	r3, [r7, #12]
 c001646:	f003 0307 	and.w	r3, r3, #7
 c00164a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 c00164c:	69fb      	ldr	r3, [r7, #28]
 c00164e:	f1c3 0307 	rsb	r3, r3, #7
 c001652:	2b03      	cmp	r3, #3
 c001654:	bf28      	it	cs
 c001656:	2303      	movcs	r3, #3
 c001658:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 c00165a:	69fb      	ldr	r3, [r7, #28]
 c00165c:	3303      	adds	r3, #3
 c00165e:	2b06      	cmp	r3, #6
 c001660:	d902      	bls.n	c001668 <NVIC_EncodePriority+0x30>
 c001662:	69fb      	ldr	r3, [r7, #28]
 c001664:	3b04      	subs	r3, #4
 c001666:	e000      	b.n	c00166a <NVIC_EncodePriority+0x32>
 c001668:	2300      	movs	r3, #0
 c00166a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c00166c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 c001670:	69bb      	ldr	r3, [r7, #24]
 c001672:	fa02 f303 	lsl.w	r3, r2, r3
 c001676:	43da      	mvns	r2, r3
 c001678:	68bb      	ldr	r3, [r7, #8]
 c00167a:	401a      	ands	r2, r3
 c00167c:	697b      	ldr	r3, [r7, #20]
 c00167e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 c001680:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 c001684:	697b      	ldr	r3, [r7, #20]
 c001686:	fa01 f303 	lsl.w	r3, r1, r3
 c00168a:	43d9      	mvns	r1, r3
 c00168c:	687b      	ldr	r3, [r7, #4]
 c00168e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c001690:	4313      	orrs	r3, r2
         );
}
 c001692:	4618      	mov	r0, r3
 c001694:	3724      	adds	r7, #36	; 0x24
 c001696:	46bd      	mov	sp, r7
 c001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00169c:	4770      	bx	lr
	...

0c0016a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 c0016a0:	b580      	push	{r7, lr}
 c0016a2:	b082      	sub	sp, #8
 c0016a4:	af00      	add	r7, sp, #0
 c0016a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 c0016a8:	687b      	ldr	r3, [r7, #4]
 c0016aa:	3b01      	subs	r3, #1
 c0016ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 c0016b0:	d301      	bcc.n	c0016b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 c0016b2:	2301      	movs	r3, #1
 c0016b4:	e00f      	b.n	c0016d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 c0016b6:	4a0a      	ldr	r2, [pc, #40]	; (c0016e0 <SysTick_Config+0x40>)
 c0016b8:	687b      	ldr	r3, [r7, #4]
 c0016ba:	3b01      	subs	r3, #1
 c0016bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 c0016be:	2107      	movs	r1, #7
 c0016c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 c0016c4:	f7ff ff8e 	bl	c0015e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 c0016c8:	4b05      	ldr	r3, [pc, #20]	; (c0016e0 <SysTick_Config+0x40>)
 c0016ca:	2200      	movs	r2, #0
 c0016cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 c0016ce:	4b04      	ldr	r3, [pc, #16]	; (c0016e0 <SysTick_Config+0x40>)
 c0016d0:	2207      	movs	r2, #7
 c0016d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 c0016d4:	2300      	movs	r3, #0
}
 c0016d6:	4618      	mov	r0, r3
 c0016d8:	3708      	adds	r7, #8
 c0016da:	46bd      	mov	sp, r7
 c0016dc:	bd80      	pop	{r7, pc}
 c0016de:	bf00      	nop
 c0016e0:	e000e010 	.word	0xe000e010

0c0016e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c0016e4:	b580      	push	{r7, lr}
 c0016e6:	b082      	sub	sp, #8
 c0016e8:	af00      	add	r7, sp, #0
 c0016ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 c0016ec:	6878      	ldr	r0, [r7, #4]
 c0016ee:	f7ff ff47 	bl	c001580 <__NVIC_SetPriorityGrouping>
}
 c0016f2:	bf00      	nop
 c0016f4:	3708      	adds	r7, #8
 c0016f6:	46bd      	mov	sp, r7
 c0016f8:	bd80      	pop	{r7, pc}

0c0016fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c0016fa:	b580      	push	{r7, lr}
 c0016fc:	b086      	sub	sp, #24
 c0016fe:	af00      	add	r7, sp, #0
 c001700:	4603      	mov	r3, r0
 c001702:	60b9      	str	r1, [r7, #8]
 c001704:	607a      	str	r2, [r7, #4]
 c001706:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 c001708:	f7ff ff5e 	bl	c0015c8 <__NVIC_GetPriorityGrouping>
 c00170c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 c00170e:	687a      	ldr	r2, [r7, #4]
 c001710:	68b9      	ldr	r1, [r7, #8]
 c001712:	6978      	ldr	r0, [r7, #20]
 c001714:	f7ff ff90 	bl	c001638 <NVIC_EncodePriority>
 c001718:	4602      	mov	r2, r0
 c00171a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 c00171e:	4611      	mov	r1, r2
 c001720:	4618      	mov	r0, r3
 c001722:	f7ff ff5f 	bl	c0015e4 <__NVIC_SetPriority>
}
 c001726:	bf00      	nop
 c001728:	3718      	adds	r7, #24
 c00172a:	46bd      	mov	sp, r7
 c00172c:	bd80      	pop	{r7, pc}

0c00172e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 c00172e:	b580      	push	{r7, lr}
 c001730:	b082      	sub	sp, #8
 c001732:	af00      	add	r7, sp, #0
 c001734:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 c001736:	6878      	ldr	r0, [r7, #4]
 c001738:	f7ff ffb2 	bl	c0016a0 <SysTick_Config>
 c00173c:	4603      	mov	r3, r0
}
 c00173e:	4618      	mov	r0, r3
 c001740:	3708      	adds	r7, #8
 c001742:	46bd      	mov	sp, r7
 c001744:	bd80      	pop	{r7, pc}
	...

0c001748 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 c001748:	b480      	push	{r7}
 c00174a:	b087      	sub	sp, #28
 c00174c:	af00      	add	r7, sp, #0
 c00174e:	6078      	str	r0, [r7, #4]
 c001750:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 c001752:	2300      	movs	r3, #0
 c001754:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 c001756:	e158      	b.n	c001a0a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 c001758:	683b      	ldr	r3, [r7, #0]
 c00175a:	681a      	ldr	r2, [r3, #0]
 c00175c:	2101      	movs	r1, #1
 c00175e:	697b      	ldr	r3, [r7, #20]
 c001760:	fa01 f303 	lsl.w	r3, r1, r3
 c001764:	4013      	ands	r3, r2
 c001766:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 c001768:	68fb      	ldr	r3, [r7, #12]
 c00176a:	2b00      	cmp	r3, #0
 c00176c:	f000 814a 	beq.w	c001a04 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 c001770:	683b      	ldr	r3, [r7, #0]
 c001772:	685b      	ldr	r3, [r3, #4]
 c001774:	f003 0303 	and.w	r3, r3, #3
 c001778:	2b01      	cmp	r3, #1
 c00177a:	d005      	beq.n	c001788 <HAL_GPIO_Init+0x40>
 c00177c:	683b      	ldr	r3, [r7, #0]
 c00177e:	685b      	ldr	r3, [r3, #4]
 c001780:	f003 0303 	and.w	r3, r3, #3
 c001784:	2b02      	cmp	r3, #2
 c001786:	d130      	bne.n	c0017ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 c001788:	687b      	ldr	r3, [r7, #4]
 c00178a:	689b      	ldr	r3, [r3, #8]
 c00178c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 c00178e:	697b      	ldr	r3, [r7, #20]
 c001790:	005b      	lsls	r3, r3, #1
 c001792:	2203      	movs	r2, #3
 c001794:	fa02 f303 	lsl.w	r3, r2, r3
 c001798:	43db      	mvns	r3, r3
 c00179a:	693a      	ldr	r2, [r7, #16]
 c00179c:	4013      	ands	r3, r2
 c00179e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 c0017a0:	683b      	ldr	r3, [r7, #0]
 c0017a2:	68da      	ldr	r2, [r3, #12]
 c0017a4:	697b      	ldr	r3, [r7, #20]
 c0017a6:	005b      	lsls	r3, r3, #1
 c0017a8:	fa02 f303 	lsl.w	r3, r2, r3
 c0017ac:	693a      	ldr	r2, [r7, #16]
 c0017ae:	4313      	orrs	r3, r2
 c0017b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 c0017b2:	687b      	ldr	r3, [r7, #4]
 c0017b4:	693a      	ldr	r2, [r7, #16]
 c0017b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 c0017b8:	687b      	ldr	r3, [r7, #4]
 c0017ba:	685b      	ldr	r3, [r3, #4]
 c0017bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 c0017be:	2201      	movs	r2, #1
 c0017c0:	697b      	ldr	r3, [r7, #20]
 c0017c2:	fa02 f303 	lsl.w	r3, r2, r3
 c0017c6:	43db      	mvns	r3, r3
 c0017c8:	693a      	ldr	r2, [r7, #16]
 c0017ca:	4013      	ands	r3, r2
 c0017cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 c0017ce:	683b      	ldr	r3, [r7, #0]
 c0017d0:	685b      	ldr	r3, [r3, #4]
 c0017d2:	091b      	lsrs	r3, r3, #4
 c0017d4:	f003 0201 	and.w	r2, r3, #1
 c0017d8:	697b      	ldr	r3, [r7, #20]
 c0017da:	fa02 f303 	lsl.w	r3, r2, r3
 c0017de:	693a      	ldr	r2, [r7, #16]
 c0017e0:	4313      	orrs	r3, r2
 c0017e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 c0017e4:	687b      	ldr	r3, [r7, #4]
 c0017e6:	693a      	ldr	r2, [r7, #16]
 c0017e8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 c0017ea:	683b      	ldr	r3, [r7, #0]
 c0017ec:	685b      	ldr	r3, [r3, #4]
 c0017ee:	f003 0303 	and.w	r3, r3, #3
 c0017f2:	2b03      	cmp	r3, #3
 c0017f4:	d017      	beq.n	c001826 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 c0017f6:	687b      	ldr	r3, [r7, #4]
 c0017f8:	68db      	ldr	r3, [r3, #12]
 c0017fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 c0017fc:	697b      	ldr	r3, [r7, #20]
 c0017fe:	005b      	lsls	r3, r3, #1
 c001800:	2203      	movs	r2, #3
 c001802:	fa02 f303 	lsl.w	r3, r2, r3
 c001806:	43db      	mvns	r3, r3
 c001808:	693a      	ldr	r2, [r7, #16]
 c00180a:	4013      	ands	r3, r2
 c00180c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 c00180e:	683b      	ldr	r3, [r7, #0]
 c001810:	689a      	ldr	r2, [r3, #8]
 c001812:	697b      	ldr	r3, [r7, #20]
 c001814:	005b      	lsls	r3, r3, #1
 c001816:	fa02 f303 	lsl.w	r3, r2, r3
 c00181a:	693a      	ldr	r2, [r7, #16]
 c00181c:	4313      	orrs	r3, r2
 c00181e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 c001820:	687b      	ldr	r3, [r7, #4]
 c001822:	693a      	ldr	r2, [r7, #16]
 c001824:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 c001826:	683b      	ldr	r3, [r7, #0]
 c001828:	685b      	ldr	r3, [r3, #4]
 c00182a:	f003 0303 	and.w	r3, r3, #3
 c00182e:	2b02      	cmp	r3, #2
 c001830:	d123      	bne.n	c00187a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 c001832:	697b      	ldr	r3, [r7, #20]
 c001834:	08da      	lsrs	r2, r3, #3
 c001836:	687b      	ldr	r3, [r7, #4]
 c001838:	3208      	adds	r2, #8
 c00183a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 c00183e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 c001840:	697b      	ldr	r3, [r7, #20]
 c001842:	f003 0307 	and.w	r3, r3, #7
 c001846:	009b      	lsls	r3, r3, #2
 c001848:	220f      	movs	r2, #15
 c00184a:	fa02 f303 	lsl.w	r3, r2, r3
 c00184e:	43db      	mvns	r3, r3
 c001850:	693a      	ldr	r2, [r7, #16]
 c001852:	4013      	ands	r3, r2
 c001854:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 c001856:	683b      	ldr	r3, [r7, #0]
 c001858:	691a      	ldr	r2, [r3, #16]
 c00185a:	697b      	ldr	r3, [r7, #20]
 c00185c:	f003 0307 	and.w	r3, r3, #7
 c001860:	009b      	lsls	r3, r3, #2
 c001862:	fa02 f303 	lsl.w	r3, r2, r3
 c001866:	693a      	ldr	r2, [r7, #16]
 c001868:	4313      	orrs	r3, r2
 c00186a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 c00186c:	697b      	ldr	r3, [r7, #20]
 c00186e:	08da      	lsrs	r2, r3, #3
 c001870:	687b      	ldr	r3, [r7, #4]
 c001872:	3208      	adds	r2, #8
 c001874:	6939      	ldr	r1, [r7, #16]
 c001876:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 c00187a:	687b      	ldr	r3, [r7, #4]
 c00187c:	681b      	ldr	r3, [r3, #0]
 c00187e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 c001880:	697b      	ldr	r3, [r7, #20]
 c001882:	005b      	lsls	r3, r3, #1
 c001884:	2203      	movs	r2, #3
 c001886:	fa02 f303 	lsl.w	r3, r2, r3
 c00188a:	43db      	mvns	r3, r3
 c00188c:	693a      	ldr	r2, [r7, #16]
 c00188e:	4013      	ands	r3, r2
 c001890:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 c001892:	683b      	ldr	r3, [r7, #0]
 c001894:	685b      	ldr	r3, [r3, #4]
 c001896:	f003 0203 	and.w	r2, r3, #3
 c00189a:	697b      	ldr	r3, [r7, #20]
 c00189c:	005b      	lsls	r3, r3, #1
 c00189e:	fa02 f303 	lsl.w	r3, r2, r3
 c0018a2:	693a      	ldr	r2, [r7, #16]
 c0018a4:	4313      	orrs	r3, r2
 c0018a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 c0018a8:	687b      	ldr	r3, [r7, #4]
 c0018aa:	693a      	ldr	r2, [r7, #16]
 c0018ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 c0018ae:	683b      	ldr	r3, [r7, #0]
 c0018b0:	685b      	ldr	r3, [r3, #4]
 c0018b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 c0018b6:	2b00      	cmp	r3, #0
 c0018b8:	f000 80a4 	beq.w	c001a04 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 c0018bc:	4a5a      	ldr	r2, [pc, #360]	; (c001a28 <HAL_GPIO_Init+0x2e0>)
 c0018be:	697b      	ldr	r3, [r7, #20]
 c0018c0:	089b      	lsrs	r3, r3, #2
 c0018c2:	3318      	adds	r3, #24
 c0018c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c0018c8:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 c0018ca:	697b      	ldr	r3, [r7, #20]
 c0018cc:	f003 0303 	and.w	r3, r3, #3
 c0018d0:	00db      	lsls	r3, r3, #3
 c0018d2:	220f      	movs	r2, #15
 c0018d4:	fa02 f303 	lsl.w	r3, r2, r3
 c0018d8:	43db      	mvns	r3, r3
 c0018da:	693a      	ldr	r2, [r7, #16]
 c0018dc:	4013      	ands	r3, r2
 c0018de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 c0018e0:	687b      	ldr	r3, [r7, #4]
 c0018e2:	4a52      	ldr	r2, [pc, #328]	; (c001a2c <HAL_GPIO_Init+0x2e4>)
 c0018e4:	4293      	cmp	r3, r2
 c0018e6:	d025      	beq.n	c001934 <HAL_GPIO_Init+0x1ec>
 c0018e8:	687b      	ldr	r3, [r7, #4]
 c0018ea:	4a51      	ldr	r2, [pc, #324]	; (c001a30 <HAL_GPIO_Init+0x2e8>)
 c0018ec:	4293      	cmp	r3, r2
 c0018ee:	d01f      	beq.n	c001930 <HAL_GPIO_Init+0x1e8>
 c0018f0:	687b      	ldr	r3, [r7, #4]
 c0018f2:	4a50      	ldr	r2, [pc, #320]	; (c001a34 <HAL_GPIO_Init+0x2ec>)
 c0018f4:	4293      	cmp	r3, r2
 c0018f6:	d019      	beq.n	c00192c <HAL_GPIO_Init+0x1e4>
 c0018f8:	687b      	ldr	r3, [r7, #4]
 c0018fa:	4a4f      	ldr	r2, [pc, #316]	; (c001a38 <HAL_GPIO_Init+0x2f0>)
 c0018fc:	4293      	cmp	r3, r2
 c0018fe:	d013      	beq.n	c001928 <HAL_GPIO_Init+0x1e0>
 c001900:	687b      	ldr	r3, [r7, #4]
 c001902:	4a4e      	ldr	r2, [pc, #312]	; (c001a3c <HAL_GPIO_Init+0x2f4>)
 c001904:	4293      	cmp	r3, r2
 c001906:	d00d      	beq.n	c001924 <HAL_GPIO_Init+0x1dc>
 c001908:	687b      	ldr	r3, [r7, #4]
 c00190a:	4a4d      	ldr	r2, [pc, #308]	; (c001a40 <HAL_GPIO_Init+0x2f8>)
 c00190c:	4293      	cmp	r3, r2
 c00190e:	d007      	beq.n	c001920 <HAL_GPIO_Init+0x1d8>
 c001910:	687b      	ldr	r3, [r7, #4]
 c001912:	4a4c      	ldr	r2, [pc, #304]	; (c001a44 <HAL_GPIO_Init+0x2fc>)
 c001914:	4293      	cmp	r3, r2
 c001916:	d101      	bne.n	c00191c <HAL_GPIO_Init+0x1d4>
 c001918:	2306      	movs	r3, #6
 c00191a:	e00c      	b.n	c001936 <HAL_GPIO_Init+0x1ee>
 c00191c:	2307      	movs	r3, #7
 c00191e:	e00a      	b.n	c001936 <HAL_GPIO_Init+0x1ee>
 c001920:	2305      	movs	r3, #5
 c001922:	e008      	b.n	c001936 <HAL_GPIO_Init+0x1ee>
 c001924:	2304      	movs	r3, #4
 c001926:	e006      	b.n	c001936 <HAL_GPIO_Init+0x1ee>
 c001928:	2303      	movs	r3, #3
 c00192a:	e004      	b.n	c001936 <HAL_GPIO_Init+0x1ee>
 c00192c:	2302      	movs	r3, #2
 c00192e:	e002      	b.n	c001936 <HAL_GPIO_Init+0x1ee>
 c001930:	2301      	movs	r3, #1
 c001932:	e000      	b.n	c001936 <HAL_GPIO_Init+0x1ee>
 c001934:	2300      	movs	r3, #0
 c001936:	697a      	ldr	r2, [r7, #20]
 c001938:	f002 0203 	and.w	r2, r2, #3
 c00193c:	00d2      	lsls	r2, r2, #3
 c00193e:	4093      	lsls	r3, r2
 c001940:	693a      	ldr	r2, [r7, #16]
 c001942:	4313      	orrs	r3, r2
 c001944:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 c001946:	4938      	ldr	r1, [pc, #224]	; (c001a28 <HAL_GPIO_Init+0x2e0>)
 c001948:	697b      	ldr	r3, [r7, #20]
 c00194a:	089b      	lsrs	r3, r3, #2
 c00194c:	3318      	adds	r3, #24
 c00194e:	693a      	ldr	r2, [r7, #16]
 c001950:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 c001954:	4b34      	ldr	r3, [pc, #208]	; (c001a28 <HAL_GPIO_Init+0x2e0>)
 c001956:	681b      	ldr	r3, [r3, #0]
 c001958:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c00195a:	68fb      	ldr	r3, [r7, #12]
 c00195c:	43db      	mvns	r3, r3
 c00195e:	693a      	ldr	r2, [r7, #16]
 c001960:	4013      	ands	r3, r2
 c001962:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 c001964:	683b      	ldr	r3, [r7, #0]
 c001966:	685b      	ldr	r3, [r3, #4]
 c001968:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 c00196c:	2b00      	cmp	r3, #0
 c00196e:	d003      	beq.n	c001978 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 c001970:	693a      	ldr	r2, [r7, #16]
 c001972:	68fb      	ldr	r3, [r7, #12]
 c001974:	4313      	orrs	r3, r2
 c001976:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 c001978:	4a2b      	ldr	r2, [pc, #172]	; (c001a28 <HAL_GPIO_Init+0x2e0>)
 c00197a:	693b      	ldr	r3, [r7, #16]
 c00197c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 c00197e:	4b2a      	ldr	r3, [pc, #168]	; (c001a28 <HAL_GPIO_Init+0x2e0>)
 c001980:	685b      	ldr	r3, [r3, #4]
 c001982:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c001984:	68fb      	ldr	r3, [r7, #12]
 c001986:	43db      	mvns	r3, r3
 c001988:	693a      	ldr	r2, [r7, #16]
 c00198a:	4013      	ands	r3, r2
 c00198c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 c00198e:	683b      	ldr	r3, [r7, #0]
 c001990:	685b      	ldr	r3, [r3, #4]
 c001992:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 c001996:	2b00      	cmp	r3, #0
 c001998:	d003      	beq.n	c0019a2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 c00199a:	693a      	ldr	r2, [r7, #16]
 c00199c:	68fb      	ldr	r3, [r7, #12]
 c00199e:	4313      	orrs	r3, r2
 c0019a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 c0019a2:	4a21      	ldr	r2, [pc, #132]	; (c001a28 <HAL_GPIO_Init+0x2e0>)
 c0019a4:	693b      	ldr	r3, [r7, #16]
 c0019a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 c0019a8:	4b1f      	ldr	r3, [pc, #124]	; (c001a28 <HAL_GPIO_Init+0x2e0>)
 c0019aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 c0019ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c0019b0:	68fb      	ldr	r3, [r7, #12]
 c0019b2:	43db      	mvns	r3, r3
 c0019b4:	693a      	ldr	r2, [r7, #16]
 c0019b6:	4013      	ands	r3, r2
 c0019b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 c0019ba:	683b      	ldr	r3, [r7, #0]
 c0019bc:	685b      	ldr	r3, [r3, #4]
 c0019be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c0019c2:	2b00      	cmp	r3, #0
 c0019c4:	d003      	beq.n	c0019ce <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 c0019c6:	693a      	ldr	r2, [r7, #16]
 c0019c8:	68fb      	ldr	r3, [r7, #12]
 c0019ca:	4313      	orrs	r3, r2
 c0019cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 c0019ce:	4a16      	ldr	r2, [pc, #88]	; (c001a28 <HAL_GPIO_Init+0x2e0>)
 c0019d0:	693b      	ldr	r3, [r7, #16]
 c0019d2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 c0019d6:	4b14      	ldr	r3, [pc, #80]	; (c001a28 <HAL_GPIO_Init+0x2e0>)
 c0019d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c0019dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c0019de:	68fb      	ldr	r3, [r7, #12]
 c0019e0:	43db      	mvns	r3, r3
 c0019e2:	693a      	ldr	r2, [r7, #16]
 c0019e4:	4013      	ands	r3, r2
 c0019e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 c0019e8:	683b      	ldr	r3, [r7, #0]
 c0019ea:	685b      	ldr	r3, [r3, #4]
 c0019ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c0019f0:	2b00      	cmp	r3, #0
 c0019f2:	d003      	beq.n	c0019fc <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 c0019f4:	693a      	ldr	r2, [r7, #16]
 c0019f6:	68fb      	ldr	r3, [r7, #12]
 c0019f8:	4313      	orrs	r3, r2
 c0019fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 c0019fc:	4a0a      	ldr	r2, [pc, #40]	; (c001a28 <HAL_GPIO_Init+0x2e0>)
 c0019fe:	693b      	ldr	r3, [r7, #16]
 c001a00:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 c001a04:	697b      	ldr	r3, [r7, #20]
 c001a06:	3301      	adds	r3, #1
 c001a08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 c001a0a:	683b      	ldr	r3, [r7, #0]
 c001a0c:	681a      	ldr	r2, [r3, #0]
 c001a0e:	697b      	ldr	r3, [r7, #20]
 c001a10:	fa22 f303 	lsr.w	r3, r2, r3
 c001a14:	2b00      	cmp	r3, #0
 c001a16:	f47f ae9f 	bne.w	c001758 <HAL_GPIO_Init+0x10>
  }
}
 c001a1a:	bf00      	nop
 c001a1c:	bf00      	nop
 c001a1e:	371c      	adds	r7, #28
 c001a20:	46bd      	mov	sp, r7
 c001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001a26:	4770      	bx	lr
 c001a28:	5002f400 	.word	0x5002f400
 c001a2c:	52020000 	.word	0x52020000
 c001a30:	52020400 	.word	0x52020400
 c001a34:	52020800 	.word	0x52020800
 c001a38:	52020c00 	.word	0x52020c00
 c001a3c:	52021000 	.word	0x52021000
 c001a40:	52021400 	.word	0x52021400
 c001a44:	52021800 	.word	0x52021800

0c001a48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 c001a48:	b480      	push	{r7}
 c001a4a:	b083      	sub	sp, #12
 c001a4c:	af00      	add	r7, sp, #0
 c001a4e:	6078      	str	r0, [r7, #4]
 c001a50:	460b      	mov	r3, r1
 c001a52:	807b      	strh	r3, [r7, #2]
 c001a54:	4613      	mov	r3, r2
 c001a56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 c001a58:	787b      	ldrb	r3, [r7, #1]
 c001a5a:	2b00      	cmp	r3, #0
 c001a5c:	d003      	beq.n	c001a66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 c001a5e:	887a      	ldrh	r2, [r7, #2]
 c001a60:	687b      	ldr	r3, [r7, #4]
 c001a62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 c001a64:	e002      	b.n	c001a6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 c001a66:	887a      	ldrh	r2, [r7, #2]
 c001a68:	687b      	ldr	r3, [r7, #4]
 c001a6a:	629a      	str	r2, [r3, #40]	; 0x28
}
 c001a6c:	bf00      	nop
 c001a6e:	370c      	adds	r7, #12
 c001a70:	46bd      	mov	sp, r7
 c001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001a76:	4770      	bx	lr

0c001a78 <HAL_GPIO_ConfigPinAttributes>:
  * @param  GPIO_Pin specifies the pin(s) to configure the secure attribute
  * @param  PinAttributes specifies the pin(s) to be set in secure mode, other being set non secured.
  * @retval None
  */
void HAL_GPIO_ConfigPinAttributes(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint32_t PinAttributes)
{
 c001a78:	b480      	push	{r7}
 c001a7a:	b089      	sub	sp, #36	; 0x24
 c001a7c:	af00      	add	r7, sp, #0
 c001a7e:	60f8      	str	r0, [r7, #12]
 c001a80:	460b      	mov	r3, r1
 c001a82:	607a      	str	r2, [r7, #4]
 c001a84:	817b      	strh	r3, [r7, #10]
  uint32_t position = 0U;
 c001a86:	2300      	movs	r3, #0
 c001a88:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ATTRIBUTES(PinAttributes));

  temp = GPIOx->SECCFGR;
 c001a8a:	68fb      	ldr	r3, [r7, #12]
 c001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c001a8e:	61bb      	str	r3, [r7, #24]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 c001a90:	e01b      	b.n	c001aca <HAL_GPIO_ConfigPinAttributes+0x52>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position);
 c001a92:	897a      	ldrh	r2, [r7, #10]
 c001a94:	2101      	movs	r1, #1
 c001a96:	69fb      	ldr	r3, [r7, #28]
 c001a98:	fa01 f303 	lsl.w	r3, r1, r3
 c001a9c:	4013      	ands	r3, r2
 c001a9e:	617b      	str	r3, [r7, #20]

    if (iocurrent != 0U)
 c001aa0:	697b      	ldr	r3, [r7, #20]
 c001aa2:	2b00      	cmp	r3, #0
 c001aa4:	d00e      	beq.n	c001ac4 <HAL_GPIO_ConfigPinAttributes+0x4c>
    {
      /* Configure the IO secure attribute */
      temp &= ~(GPIO_SECCFGR_SEC0 << position) ;
 c001aa6:	2201      	movs	r2, #1
 c001aa8:	69fb      	ldr	r3, [r7, #28]
 c001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 c001aae:	43db      	mvns	r3, r3
 c001ab0:	69ba      	ldr	r2, [r7, #24]
 c001ab2:	4013      	ands	r3, r2
 c001ab4:	61bb      	str	r3, [r7, #24]
      temp |= (PinAttributes << position);
 c001ab6:	687a      	ldr	r2, [r7, #4]
 c001ab8:	69fb      	ldr	r3, [r7, #28]
 c001aba:	fa02 f303 	lsl.w	r3, r2, r3
 c001abe:	69ba      	ldr	r2, [r7, #24]
 c001ac0:	4313      	orrs	r3, r2
 c001ac2:	61bb      	str	r3, [r7, #24]
    }
    position++;
 c001ac4:	69fb      	ldr	r3, [r7, #28]
 c001ac6:	3301      	adds	r3, #1
 c001ac8:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0U)
 c001aca:	897a      	ldrh	r2, [r7, #10]
 c001acc:	69fb      	ldr	r3, [r7, #28]
 c001ace:	fa42 f303 	asr.w	r3, r2, r3
 c001ad2:	2b00      	cmp	r3, #0
 c001ad4:	d1dd      	bne.n	c001a92 <HAL_GPIO_ConfigPinAttributes+0x1a>
  }

  /* Set secure attributes */
  GPIOx->SECCFGR = temp;
 c001ad6:	68fb      	ldr	r3, [r7, #12]
 c001ad8:	69ba      	ldr	r2, [r7, #24]
 c001ada:	631a      	str	r2, [r3, #48]	; 0x30
}
 c001adc:	bf00      	nop
 c001ade:	3724      	adds	r7, #36	; 0x24
 c001ae0:	46bd      	mov	sp, r7
 c001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001ae6:	4770      	bx	lr

0c001ae8 <HAL_GTZC_MPCBB_ConfigMem>:
  *         The structure description is available in @ref GTZC_Exported_Types.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_MPCBB_ConfigMem(uint32_t MemBaseAddress,
                                           const MPCBB_ConfigTypeDef *pMPCBB_desc)
{
 c001ae8:	b480      	push	{r7}
 c001aea:	b089      	sub	sp, #36	; 0x24
 c001aec:	af00      	add	r7, sp, #0
 c001aee:	6078      	str	r0, [r7, #4]
 c001af0:	6039      	str	r1, [r7, #0]
  uint32_t size_mask;
  uint32_t size_in_superblocks;
  uint32_t i;

  /* check entry parameters */
  if ((!(IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c001af2:	687b      	ldr	r3, [r7, #4]
 c001af4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c001af8:	d00b      	beq.n	c001b12 <HAL_GTZC_MPCBB_ConfigMem+0x2a>
 c001afa:	687b      	ldr	r3, [r7, #4]
 c001afc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c001b00:	d007      	beq.n	c001b12 <HAL_GTZC_MPCBB_ConfigMem+0x2a>
       &&  !(IS_GTZC_BASE_ADDRESS(SRAM2, MemBaseAddress)))
 c001b02:	687b      	ldr	r3, [r7, #4]
 c001b04:	4a36      	ldr	r2, [pc, #216]	; (c001be0 <HAL_GTZC_MPCBB_ConfigMem+0xf8>)
 c001b06:	4293      	cmp	r3, r2
 c001b08:	d003      	beq.n	c001b12 <HAL_GTZC_MPCBB_ConfigMem+0x2a>
 c001b0a:	687b      	ldr	r3, [r7, #4]
 c001b0c:	4a35      	ldr	r2, [pc, #212]	; (c001be4 <HAL_GTZC_MPCBB_ConfigMem+0xfc>)
 c001b0e:	4293      	cmp	r3, r2
 c001b10:	d111      	bne.n	c001b36 <HAL_GTZC_MPCBB_ConfigMem+0x4e>
      || ((pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_ENABLE)
 c001b12:	683b      	ldr	r3, [r7, #0]
 c001b14:	681b      	ldr	r3, [r3, #0]
 c001b16:	2b00      	cmp	r3, #0
 c001b18:	d004      	beq.n	c001b24 <HAL_GTZC_MPCBB_ConfigMem+0x3c>
          && (pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_DISABLE))
 c001b1a:	683b      	ldr	r3, [r7, #0]
 c001b1c:	681b      	ldr	r3, [r3, #0]
 c001b1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 c001b22:	d108      	bne.n	c001b36 <HAL_GTZC_MPCBB_ConfigMem+0x4e>
      || ((pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_NOT_INVERTED)
 c001b24:	683b      	ldr	r3, [r7, #0]
 c001b26:	685b      	ldr	r3, [r3, #4]
 c001b28:	2b00      	cmp	r3, #0
 c001b2a:	d006      	beq.n	c001b3a <HAL_GTZC_MPCBB_ConfigMem+0x52>
          && (pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_INVERTED)))
 c001b2c:	683b      	ldr	r3, [r7, #0]
 c001b2e:	685b      	ldr	r3, [r3, #4]
 c001b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 c001b34:	d001      	beq.n	c001b3a <HAL_GTZC_MPCBB_ConfigMem+0x52>
  {
    return HAL_ERROR;
 c001b36:	2301      	movs	r3, #1
 c001b38:	e04b      	b.n	c001bd2 <HAL_GTZC_MPCBB_ConfigMem+0xea>
  }

  /* write InvertSecureState and SecureRWIllegalMode properties */
  /* assume their Position/Mask is identical for all sub-blocks */
  reg_value = pMPCBB_desc->InvertSecureState;
 c001b3a:	683b      	ldr	r3, [r7, #0]
 c001b3c:	685b      	ldr	r3, [r3, #4]
 c001b3e:	613b      	str	r3, [r7, #16]
  reg_value |= pMPCBB_desc->SecureRWIllegalMode;
 c001b40:	683b      	ldr	r3, [r7, #0]
 c001b42:	681b      	ldr	r3, [r3, #0]
 c001b44:	693a      	ldr	r2, [r7, #16]
 c001b46:	4313      	orrs	r3, r2
 c001b48:	613b      	str	r3, [r7, #16]
  if (IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c001b4a:	687b      	ldr	r3, [r7, #4]
 c001b4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c001b50:	d003      	beq.n	c001b5a <HAL_GTZC_MPCBB_ConfigMem+0x72>
 c001b52:	687b      	ldr	r3, [r7, #4]
 c001b54:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c001b58:	d105      	bne.n	c001b66 <HAL_GTZC_MPCBB_ConfigMem+0x7e>
  {
    mpcbb_ptr = GTZC_MPCBB1_S;
 c001b5a:	4b23      	ldr	r3, [pc, #140]	; (c001be8 <HAL_GTZC_MPCBB_ConfigMem+0x100>)
 c001b5c:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM1);
 c001b5e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 c001b62:	61bb      	str	r3, [r7, #24]
 c001b64:	e004      	b.n	c001b70 <HAL_GTZC_MPCBB_ConfigMem+0x88>
  }
  else
  {
    /* Here MemBaseAddress is inside SRAM2 (already tested) */
    mpcbb_ptr = GTZC_MPCBB2_S;
 c001b66:	4b21      	ldr	r3, [pc, #132]	; (c001bec <HAL_GTZC_MPCBB_ConfigMem+0x104>)
 c001b68:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM2);
 c001b6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 c001b6e:	61bb      	str	r3, [r7, #24]
  }

  /* write vector register information */
  size_in_superblocks = (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE);
 c001b70:	69bb      	ldr	r3, [r7, #24]
 c001b72:	0b5b      	lsrs	r3, r3, #13
 c001b74:	60fb      	str	r3, [r7, #12]
  for (i = 0U; i < size_in_superblocks; i++)
 c001b76:	2300      	movs	r3, #0
 c001b78:	617b      	str	r3, [r7, #20]
 c001b7a:	e00c      	b.n	c001b96 <HAL_GTZC_MPCBB_ConfigMem+0xae>
  {
    WRITE_REG(mpcbb_ptr->VCTR[i],
 c001b7c:	683b      	ldr	r3, [r7, #0]
 c001b7e:	697a      	ldr	r2, [r7, #20]
 c001b80:	3202      	adds	r2, #2
 c001b82:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 c001b86:	69fb      	ldr	r3, [r7, #28]
 c001b88:	697a      	ldr	r2, [r7, #20]
 c001b8a:	3240      	adds	r2, #64	; 0x40
 c001b8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < size_in_superblocks; i++)
 c001b90:	697b      	ldr	r3, [r7, #20]
 c001b92:	3301      	adds	r3, #1
 c001b94:	617b      	str	r3, [r7, #20]
 c001b96:	697a      	ldr	r2, [r7, #20]
 c001b98:	68fb      	ldr	r3, [r7, #12]
 c001b9a:	429a      	cmp	r2, r3
 c001b9c:	d3ee      	bcc.n	c001b7c <HAL_GTZC_MPCBB_ConfigMem+0x94>
              pMPCBB_desc->AttributeConfig.MPCBB_SecConfig_array[i]);
  }

  /* write configuration and lock register information */
  MODIFY_REG(mpcbb_ptr->CR,
 c001b9e:	69fb      	ldr	r3, [r7, #28]
 c001ba0:	681b      	ldr	r3, [r3, #0]
 c001ba2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 c001ba6:	693b      	ldr	r3, [r7, #16]
 c001ba8:	431a      	orrs	r2, r3
 c001baa:	69fb      	ldr	r3, [r7, #28]
 c001bac:	601a      	str	r2, [r3, #0]
             GTZC_MPCBB_CR_INVSECSTATE_Msk | GTZC_MPCBB_CR_SRWILADIS_Msk, reg_value);

  size_mask = (1UL << (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE)) - 1U;
 c001bae:	69bb      	ldr	r3, [r7, #24]
 c001bb0:	0b5b      	lsrs	r3, r3, #13
 c001bb2:	2201      	movs	r2, #1
 c001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 c001bb8:	3b01      	subs	r3, #1
 c001bba:	60bb      	str	r3, [r7, #8]
  /* limitation: code not portable with memory > 256K */
  MODIFY_REG(mpcbb_ptr->LCKVTR1, size_mask, pMPCBB_desc->AttributeConfig.MPCBB_LockConfig_array[0]);
 c001bbc:	69fb      	ldr	r3, [r7, #28]
 c001bbe:	691a      	ldr	r2, [r3, #16]
 c001bc0:	68bb      	ldr	r3, [r7, #8]
 c001bc2:	43db      	mvns	r3, r3
 c001bc4:	401a      	ands	r2, r3
 c001bc6:	683b      	ldr	r3, [r7, #0]
 c001bc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c001bca:	431a      	orrs	r2, r3
 c001bcc:	69fb      	ldr	r3, [r7, #28]
 c001bce:	611a      	str	r2, [r3, #16]

  return HAL_OK;
 c001bd0:	2300      	movs	r3, #0
}
 c001bd2:	4618      	mov	r0, r3
 c001bd4:	3724      	adds	r7, #36	; 0x24
 c001bd6:	46bd      	mov	sp, r7
 c001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001bdc:	4770      	bx	lr
 c001bde:	bf00      	nop
 c001be0:	20030000 	.word	0x20030000
 c001be4:	30030000 	.word	0x30030000
 c001be8:	50032c00 	.word	0x50032c00
 c001bec:	50033000 	.word	0x50033000

0c001bf0 <memset>:
 c001bf0:	4402      	add	r2, r0
 c001bf2:	4603      	mov	r3, r0
 c001bf4:	4293      	cmp	r3, r2
 c001bf6:	d100      	bne.n	c001bfa <memset+0xa>
 c001bf8:	4770      	bx	lr
 c001bfa:	f803 1b01 	strb.w	r1, [r3], #1
 c001bfe:	e7f9      	b.n	c001bf4 <memset+0x4>

0c001c00 <__libc_init_array>:
 c001c00:	b570      	push	{r4, r5, r6, lr}
 c001c02:	4d0d      	ldr	r5, [pc, #52]	; (c001c38 <__libc_init_array+0x38>)
 c001c04:	2600      	movs	r6, #0
 c001c06:	4c0d      	ldr	r4, [pc, #52]	; (c001c3c <__libc_init_array+0x3c>)
 c001c08:	1b64      	subs	r4, r4, r5
 c001c0a:	10a4      	asrs	r4, r4, #2
 c001c0c:	42a6      	cmp	r6, r4
 c001c0e:	d109      	bne.n	c001c24 <__libc_init_array+0x24>
 c001c10:	4d0b      	ldr	r5, [pc, #44]	; (c001c40 <__libc_init_array+0x40>)
 c001c12:	2600      	movs	r6, #0
 c001c14:	4c0b      	ldr	r4, [pc, #44]	; (c001c44 <__libc_init_array+0x44>)
 c001c16:	f000 f825 	bl	c001c64 <_init>
 c001c1a:	1b64      	subs	r4, r4, r5
 c001c1c:	10a4      	asrs	r4, r4, #2
 c001c1e:	42a6      	cmp	r6, r4
 c001c20:	d105      	bne.n	c001c2e <__libc_init_array+0x2e>
 c001c22:	bd70      	pop	{r4, r5, r6, pc}
 c001c24:	f855 3b04 	ldr.w	r3, [r5], #4
 c001c28:	3601      	adds	r6, #1
 c001c2a:	4798      	blx	r3
 c001c2c:	e7ee      	b.n	c001c0c <__libc_init_array+0xc>
 c001c2e:	f855 3b04 	ldr.w	r3, [r5], #4
 c001c32:	3601      	adds	r6, #1
 c001c34:	4798      	blx	r3
 c001c36:	e7f2      	b.n	c001c1e <__libc_init_array+0x1e>
 c001c38:	0c001cec 	.word	0x0c001cec
 c001c3c:	0c001cec 	.word	0x0c001cec
 c001c40:	0c001cec 	.word	0x0c001cec
 c001c44:	0c001cf0 	.word	0x0c001cf0

0c001c48 <memcpy>:
 c001c48:	440a      	add	r2, r1
 c001c4a:	1e43      	subs	r3, r0, #1
 c001c4c:	4291      	cmp	r1, r2
 c001c4e:	d100      	bne.n	c001c52 <memcpy+0xa>
 c001c50:	4770      	bx	lr
 c001c52:	b510      	push	{r4, lr}
 c001c54:	f811 4b01 	ldrb.w	r4, [r1], #1
 c001c58:	4291      	cmp	r1, r2
 c001c5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 c001c5e:	d1f9      	bne.n	c001c54 <memcpy+0xc>
 c001c60:	bd10      	pop	{r4, pc}
	...

0c001c64 <_init>:
 c001c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c001c66:	bf00      	nop
 c001c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c001c6a:	bc08      	pop	{r3}
 c001c6c:	469e      	mov	lr, r3
 c001c6e:	4770      	bx	lr

0c001c70 <_fini>:
 c001c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c001c72:	bf00      	nop
 c001c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c001c76:	bc08      	pop	{r3}
 c001c78:	469e      	mov	lr, r3
 c001c7a:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

0c03e000 <decrypt>:
 c03e000:	e97f e97f 	sg
 c03e004:	f7c2 bfc3 	b.w	c000f8e <__acle_se_decrypt>

0c03e008 <SECURE_SystemCoreClockUpdate>:
 c03e008:	e97f e97f 	sg
 c03e00c:	f7c3 b9e4 	b.w	c0013d8 <__acle_se_SECURE_SystemCoreClockUpdate>

0c03e010 <encrypt>:
 c03e010:	e97f e97f 	sg
 c03e014:	f7c2 bf38 	b.w	c000e88 <__acle_se_encrypt>

0c03e018 <SECURE_RegisterCallback>:
 c03e018:	e97f e97f 	sg
 c03e01c:	f7c2 bee0 	b.w	c000de0 <__acle_se_SECURE_RegisterCallback>
