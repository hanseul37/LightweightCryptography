
second_trivium_NonSecure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08040000  08040000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ae8  080401f8  080401f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08042ce0  08042ce0  00012ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08042e24  08042e24  000180c8  2**0
                  CONTENTS
  4 .ARM          00000000  08042e24  08042e24  000180c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08042e24  08042e24  000180c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08042e24  08042e24  00012e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08042e28  08042e28  00012e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20018000  08042e2c  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  200180c8  08042ef4  000180c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20018238  08042ef4  00018238  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  000180c8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000180fe  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005f25  00000000  00000000  00018141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000014ee  00000000  00000000  0001e066  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006e8  00000000  00000000  0001f558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000506  00000000  00000000  0001fc40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027a88  00000000  00000000  00020146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000072fd  00000000  00000000  00047bce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f89e3  00000000  00000000  0004eecb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002220  00000000  00000000  001478b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00149ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080401f8 <__do_global_dtors_aux>:
 80401f8:	b510      	push	{r4, lr}
 80401fa:	4c05      	ldr	r4, [pc, #20]	; (8040210 <__do_global_dtors_aux+0x18>)
 80401fc:	7823      	ldrb	r3, [r4, #0]
 80401fe:	b933      	cbnz	r3, 804020e <__do_global_dtors_aux+0x16>
 8040200:	4b04      	ldr	r3, [pc, #16]	; (8040214 <__do_global_dtors_aux+0x1c>)
 8040202:	b113      	cbz	r3, 804020a <__do_global_dtors_aux+0x12>
 8040204:	4804      	ldr	r0, [pc, #16]	; (8040218 <__do_global_dtors_aux+0x20>)
 8040206:	f3af 8000 	nop.w
 804020a:	2301      	movs	r3, #1
 804020c:	7023      	strb	r3, [r4, #0]
 804020e:	bd10      	pop	{r4, pc}
 8040210:	200180c8 	.word	0x200180c8
 8040214:	00000000 	.word	0x00000000
 8040218:	08042cac 	.word	0x08042cac

0804021c <frame_dummy>:
 804021c:	b508      	push	{r3, lr}
 804021e:	4b03      	ldr	r3, [pc, #12]	; (804022c <frame_dummy+0x10>)
 8040220:	b11b      	cbz	r3, 804022a <frame_dummy+0xe>
 8040222:	4903      	ldr	r1, [pc, #12]	; (8040230 <frame_dummy+0x14>)
 8040224:	4803      	ldr	r0, [pc, #12]	; (8040234 <frame_dummy+0x18>)
 8040226:	f3af 8000 	nop.w
 804022a:	bd08      	pop	{r3, pc}
 804022c:	00000000 	.word	0x00000000
 8040230:	200180cc 	.word	0x200180cc
 8040234:	08042cac 	.word	0x08042cac

08040238 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8040238:	b480      	push	{r7}
 804023a:	b083      	sub	sp, #12
 804023c:	af00      	add	r7, sp, #0
 804023e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8040240:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8040244:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8040248:	f003 0301 	and.w	r3, r3, #1
 804024c:	2b00      	cmp	r3, #0
 804024e:	d013      	beq.n	8040278 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8040250:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8040254:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8040258:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 804025c:	2b00      	cmp	r3, #0
 804025e:	d00b      	beq.n	8040278 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8040260:	e000      	b.n	8040264 <ITM_SendChar+0x2c>
    {
      __NOP();
 8040262:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8040264:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8040268:	681b      	ldr	r3, [r3, #0]
 804026a:	2b00      	cmp	r3, #0
 804026c:	d0f9      	beq.n	8040262 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 804026e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8040272:	687a      	ldr	r2, [r7, #4]
 8040274:	b2d2      	uxtb	r2, r2
 8040276:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8040278:	687b      	ldr	r3, [r7, #4]
}
 804027a:	4618      	mov	r0, r3
 804027c:	370c      	adds	r7, #12
 804027e:	46bd      	mov	sp, r7
 8040280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040284:	4770      	bx	lr
	...

08040288 <print_hex>:
#ifndef _UTIL_H
#define _UTIL_H

static void print_hex(const unsigned char* hex, int len)
{
 8040288:	b580      	push	{r7, lr}
 804028a:	b084      	sub	sp, #16
 804028c:	af00      	add	r7, sp, #0
 804028e:	6078      	str	r0, [r7, #4]
 8040290:	6039      	str	r1, [r7, #0]
	for (const unsigned char* p = hex; p - hex < len; p++)
 8040292:	687b      	ldr	r3, [r7, #4]
 8040294:	60fb      	str	r3, [r7, #12]
 8040296:	e008      	b.n	80402aa <print_hex+0x22>
		printf("%02X ", *p);
 8040298:	68fb      	ldr	r3, [r7, #12]
 804029a:	781b      	ldrb	r3, [r3, #0]
 804029c:	4619      	mov	r1, r3
 804029e:	4809      	ldr	r0, [pc, #36]	; (80402c4 <print_hex+0x3c>)
 80402a0:	f001 fe48 	bl	8041f34 <iprintf>
	for (const unsigned char* p = hex; p - hex < len; p++)
 80402a4:	68fb      	ldr	r3, [r7, #12]
 80402a6:	3301      	adds	r3, #1
 80402a8:	60fb      	str	r3, [r7, #12]
 80402aa:	68fa      	ldr	r2, [r7, #12]
 80402ac:	687b      	ldr	r3, [r7, #4]
 80402ae:	1ad3      	subs	r3, r2, r3
 80402b0:	683a      	ldr	r2, [r7, #0]
 80402b2:	429a      	cmp	r2, r3
 80402b4:	dcf0      	bgt.n	8040298 <print_hex+0x10>
	printf("\n");
 80402b6:	200a      	movs	r0, #10
 80402b8:	f001 fe4e 	bl	8041f58 <putchar>
}
 80402bc:	bf00      	nop
 80402be:	3710      	adds	r7, #16
 80402c0:	46bd      	mov	sp, r7
 80402c2:	bd80      	pop	{r7, pc}
 80402c4:	08042ce0 	.word	0x08042ce0

080402c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80402c8:	b580      	push	{r7, lr}
 80402ca:	b088      	sub	sp, #32
 80402cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80402ce:	4b3f      	ldr	r3, [pc, #252]	; (80403cc <main+0x104>)
 80402d0:	68db      	ldr	r3, [r3, #12]
 80402d2:	4a3e      	ldr	r2, [pc, #248]	; (80403cc <main+0x104>)
 80402d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80402d8:	60d3      	str	r3, [r2, #12]
	  DWT->CYCCNT = 0;
 80402da:	4b3d      	ldr	r3, [pc, #244]	; (80403d0 <main+0x108>)
 80402dc:	2200      	movs	r2, #0
 80402de:	605a      	str	r2, [r3, #4]
	  DWT->CTRL  |= 1;
 80402e0:	4b3b      	ldr	r3, [pc, #236]	; (80403d0 <main+0x108>)
 80402e2:	681b      	ldr	r3, [r3, #0]
 80402e4:	4a3a      	ldr	r2, [pc, #232]	; (80403d0 <main+0x108>)
 80402e6:	f043 0301 	orr.w	r3, r3, #1
 80402ea:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80402ec:	f000 fa37 	bl	804075e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80402f0:	f000 f88c 	bl	804040c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80402f4:	f000 f8d0 	bl	8040498 <MX_GPIO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 80402f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80402fc:	4835      	ldr	r0, [pc, #212]	; (80403d4 <main+0x10c>)
 80402fe:	f000 fd21 	bl	8040d44 <HAL_GPIO_TogglePin>

		print_hex(plain, STRING_LENGTH);
 8040302:	2140      	movs	r1, #64	; 0x40
 8040304:	4834      	ldr	r0, [pc, #208]	; (80403d8 <main+0x110>)
 8040306:	f7ff ffbf 	bl	8040288 <print_hex>

		uint32_t key_cycle_count = DWT->CYCCNT;
 804030a:	4b31      	ldr	r3, [pc, #196]	; (80403d0 <main+0x108>)
 804030c:	685b      	ldr	r3, [r3, #4]
 804030e:	61fb      	str	r3, [r7, #28]

		key_stream(key, iv);
 8040310:	4932      	ldr	r1, [pc, #200]	; (80403dc <main+0x114>)
 8040312:	4833      	ldr	r0, [pc, #204]	; (80403e0 <main+0x118>)
 8040314:	f002 fce0 	bl	8042cd8 <__key_stream_veneer>

		uint32_t enc_start_cycle_count = DWT->CYCCNT;
 8040318:	4b2d      	ldr	r3, [pc, #180]	; (80403d0 <main+0x108>)
 804031a:	685b      	ldr	r3, [r3, #4]
 804031c:	61bb      	str	r3, [r7, #24]

		encrypt_decrypt(plain);
 804031e:	482e      	ldr	r0, [pc, #184]	; (80403d8 <main+0x110>)
 8040320:	f002 fcd2 	bl	8042cc8 <__encrypt_decrypt_veneer>

		uint32_t enc_end_cycle_count = DWT->CYCCNT;
 8040324:	4b2a      	ldr	r3, [pc, #168]	; (80403d0 <main+0x108>)
 8040326:	685b      	ldr	r3, [r3, #4]
 8040328:	617b      	str	r3, [r7, #20]

		print_hex(plain, STRING_LENGTH);
 804032a:	2140      	movs	r1, #64	; 0x40
 804032c:	482a      	ldr	r0, [pc, #168]	; (80403d8 <main+0x110>)
 804032e:	f7ff ffab 	bl	8040288 <print_hex>

		uint32_t dec_start_cycle_count = DWT->CYCCNT;
 8040332:	4b27      	ldr	r3, [pc, #156]	; (80403d0 <main+0x108>)
 8040334:	685b      	ldr	r3, [r3, #4]
 8040336:	613b      	str	r3, [r7, #16]

		encrypt_decrypt(plain);
 8040338:	4827      	ldr	r0, [pc, #156]	; (80403d8 <main+0x110>)
 804033a:	f002 fcc5 	bl	8042cc8 <__encrypt_decrypt_veneer>

		uint32_t dec_end_cycle_count = DWT->CYCCNT;
 804033e:	4b24      	ldr	r3, [pc, #144]	; (80403d0 <main+0x108>)
 8040340:	685b      	ldr	r3, [r3, #4]
 8040342:	60fb      	str	r3, [r7, #12]

		print_hex(plain, STRING_LENGTH);
 8040344:	2140      	movs	r1, #64	; 0x40
 8040346:	4824      	ldr	r0, [pc, #144]	; (80403d8 <main+0x110>)
 8040348:	f7ff ff9e 	bl	8040288 <print_hex>

		uint32_t key_cycles = enc_start_cycle_count - key_cycle_count;
 804034c:	69ba      	ldr	r2, [r7, #24]
 804034e:	69fb      	ldr	r3, [r7, #28]
 8040350:	1ad3      	subs	r3, r2, r3
 8040352:	60bb      	str	r3, [r7, #8]
	    uint32_t enc_total_cycles = enc_end_cycle_count - enc_start_cycle_count;
 8040354:	697a      	ldr	r2, [r7, #20]
 8040356:	69bb      	ldr	r3, [r7, #24]
 8040358:	1ad3      	subs	r3, r2, r3
 804035a:	607b      	str	r3, [r7, #4]
	    uint32_t dec_total_cycles = dec_end_cycle_count - dec_start_cycle_count;
 804035c:	68fa      	ldr	r2, [r7, #12]
 804035e:	693b      	ldr	r3, [r7, #16]
 8040360:	1ad3      	subs	r3, r2, r3
 8040362:	603b      	str	r3, [r7, #0]

	    printf("Key cycles: %u\n", key_cycles);
 8040364:	68b9      	ldr	r1, [r7, #8]
 8040366:	481f      	ldr	r0, [pc, #124]	; (80403e4 <main+0x11c>)
 8040368:	f001 fde4 	bl	8041f34 <iprintf>
	    printf("\nEnc start cycles: %u\n", enc_start_cycle_count);
 804036c:	69b9      	ldr	r1, [r7, #24]
 804036e:	481e      	ldr	r0, [pc, #120]	; (80403e8 <main+0x120>)
 8040370:	f001 fde0 	bl	8041f34 <iprintf>
	    printf("Enc end cycles: %u\n", enc_end_cycle_count);
 8040374:	6979      	ldr	r1, [r7, #20]
 8040376:	481d      	ldr	r0, [pc, #116]	; (80403ec <main+0x124>)
 8040378:	f001 fddc 	bl	8041f34 <iprintf>
	    printf("Enc total cycles: %u\n", enc_total_cycles);
 804037c:	6879      	ldr	r1, [r7, #4]
 804037e:	481c      	ldr	r0, [pc, #112]	; (80403f0 <main+0x128>)
 8040380:	f001 fdd8 	bl	8041f34 <iprintf>
	    printf("\nDec start cycles: %u\n", dec_start_cycle_count);
 8040384:	6939      	ldr	r1, [r7, #16]
 8040386:	481b      	ldr	r0, [pc, #108]	; (80403f4 <main+0x12c>)
 8040388:	f001 fdd4 	bl	8041f34 <iprintf>
	    printf("Dec end cycles: %u\n", dec_end_cycle_count);
 804038c:	68f9      	ldr	r1, [r7, #12]
 804038e:	481a      	ldr	r0, [pc, #104]	; (80403f8 <main+0x130>)
 8040390:	f001 fdd0 	bl	8041f34 <iprintf>
	    printf("Dec total cycles: %u\n", dec_total_cycles);
 8040394:	6839      	ldr	r1, [r7, #0]
 8040396:	4819      	ldr	r0, [pc, #100]	; (80403fc <main+0x134>)
 8040398:	f001 fdcc 	bl	8041f34 <iprintf>
	    printf("\nKey + Enc: %u\n", key_cycles + enc_total_cycles);
 804039c:	68ba      	ldr	r2, [r7, #8]
 804039e:	687b      	ldr	r3, [r7, #4]
 80403a0:	4413      	add	r3, r2
 80403a2:	4619      	mov	r1, r3
 80403a4:	4816      	ldr	r0, [pc, #88]	; (8040400 <main+0x138>)
 80403a6:	f001 fdc5 	bl	8041f34 <iprintf>
	    printf("Key + Dec: %u\n", key_cycles + dec_total_cycles);
 80403aa:	68ba      	ldr	r2, [r7, #8]
 80403ac:	683b      	ldr	r3, [r7, #0]
 80403ae:	4413      	add	r3, r2
 80403b0:	4619      	mov	r1, r3
 80403b2:	4814      	ldr	r0, [pc, #80]	; (8040404 <main+0x13c>)
 80403b4:	f001 fdbe 	bl	8041f34 <iprintf>

	    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 80403b8:	2180      	movs	r1, #128	; 0x80
 80403ba:	4813      	ldr	r0, [pc, #76]	; (8040408 <main+0x140>)
 80403bc:	f000 fcc2 	bl	8040d44 <HAL_GPIO_TogglePin>

	    break;
 80403c0:	bf00      	nop
 80403c2:	2300      	movs	r3, #0
  }
  /* USER CODE END 3 */
}
 80403c4:	4618      	mov	r0, r3
 80403c6:	3720      	adds	r7, #32
 80403c8:	46bd      	mov	sp, r7
 80403ca:	bd80      	pop	{r7, pc}
 80403cc:	e000edf0 	.word	0xe000edf0
 80403d0:	e0001000 	.word	0xe0001000
 80403d4:	42020000 	.word	0x42020000
 80403d8:	20018000 	.word	0x20018000
 80403dc:	20018050 	.word	0x20018050
 80403e0:	20018040 	.word	0x20018040
 80403e4:	08042ce8 	.word	0x08042ce8
 80403e8:	08042cf8 	.word	0x08042cf8
 80403ec:	08042d10 	.word	0x08042d10
 80403f0:	08042d24 	.word	0x08042d24
 80403f4:	08042d3c 	.word	0x08042d3c
 80403f8:	08042d54 	.word	0x08042d54
 80403fc:	08042d68 	.word	0x08042d68
 8040400:	08042d80 	.word	0x08042d80
 8040404:	08042d90 	.word	0x08042d90
 8040408:	42020800 	.word	0x42020800

0804040c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 804040c:	b580      	push	{r7, lr}
 804040e:	b098      	sub	sp, #96	; 0x60
 8040410:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8040412:	f107 0318 	add.w	r3, r7, #24
 8040416:	2248      	movs	r2, #72	; 0x48
 8040418:	2100      	movs	r1, #0
 804041a:	4618      	mov	r0, r3
 804041c:	f001 fda4 	bl	8041f68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8040420:	1d3b      	adds	r3, r7, #4
 8040422:	2200      	movs	r2, #0
 8040424:	601a      	str	r2, [r3, #0]
 8040426:	605a      	str	r2, [r3, #4]
 8040428:	609a      	str	r2, [r3, #8]
 804042a:	60da      	str	r2, [r3, #12]
 804042c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 804042e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8040432:	f000 fcaf 	bl	8040d94 <HAL_PWREx_ControlVoltageScaling>
 8040436:	4603      	mov	r3, r0
 8040438:	2b00      	cmp	r3, #0
 804043a:	d001      	beq.n	8040440 <SystemClock_Config+0x34>
  {
    Error_Handler();
 804043c:	f000 f86b 	bl	8040516 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8040440:	2310      	movs	r3, #16
 8040442:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8040444:	2301      	movs	r3, #1
 8040446:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8040448:	2300      	movs	r3, #0
 804044a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 804044c:	2360      	movs	r3, #96	; 0x60
 804044e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8040450:	2300      	movs	r3, #0
 8040452:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8040454:	f107 0318 	add.w	r3, r7, #24
 8040458:	4618      	mov	r0, r3
 804045a:	f000 fd1b 	bl	8040e94 <HAL_RCC_OscConfig>
 804045e:	4603      	mov	r3, r0
 8040460:	2b00      	cmp	r3, #0
 8040462:	d001      	beq.n	8040468 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8040464:	f000 f857 	bl	8040516 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8040468:	230f      	movs	r3, #15
 804046a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 804046c:	2300      	movs	r3, #0
 804046e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8040470:	2300      	movs	r3, #0
 8040472:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8040474:	2300      	movs	r3, #0
 8040476:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8040478:	2300      	movs	r3, #0
 804047a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 804047c:	1d3b      	adds	r3, r7, #4
 804047e:	2100      	movs	r1, #0
 8040480:	4618      	mov	r0, r3
 8040482:	f001 f9dd 	bl	8041840 <HAL_RCC_ClockConfig>
 8040486:	4603      	mov	r3, r0
 8040488:	2b00      	cmp	r3, #0
 804048a:	d001      	beq.n	8040490 <SystemClock_Config+0x84>
  {
    Error_Handler();
 804048c:	f000 f843 	bl	8040516 <Error_Handler>
  }
}
 8040490:	bf00      	nop
 8040492:	3760      	adds	r7, #96	; 0x60
 8040494:	46bd      	mov	sp, r7
 8040496:	bd80      	pop	{r7, pc}

08040498 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8040498:	b580      	push	{r7, lr}
 804049a:	b086      	sub	sp, #24
 804049c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 804049e:	1d3b      	adds	r3, r7, #4
 80404a0:	2200      	movs	r2, #0
 80404a2:	601a      	str	r2, [r3, #0]
 80404a4:	605a      	str	r2, [r3, #4]
 80404a6:	609a      	str	r2, [r3, #8]
 80404a8:	60da      	str	r2, [r3, #12]
 80404aa:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80404ac:	4b11      	ldr	r3, [pc, #68]	; (80404f4 <MX_GPIO_Init+0x5c>)
 80404ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80404b0:	4a10      	ldr	r2, [pc, #64]	; (80404f4 <MX_GPIO_Init+0x5c>)
 80404b2:	f043 0301 	orr.w	r3, r3, #1
 80404b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80404b8:	4b0e      	ldr	r3, [pc, #56]	; (80404f4 <MX_GPIO_Init+0x5c>)
 80404ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80404bc:	f003 0301 	and.w	r3, r3, #1
 80404c0:	603b      	str	r3, [r7, #0]
 80404c2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80404c4:	2200      	movs	r2, #0
 80404c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80404ca:	480b      	ldr	r0, [pc, #44]	; (80404f8 <MX_GPIO_Init+0x60>)
 80404cc:	f000 fc22 	bl	8040d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80404d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80404d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80404d6:	2301      	movs	r3, #1
 80404d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80404da:	2300      	movs	r3, #0
 80404dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80404de:	2300      	movs	r3, #0
 80404e0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80404e2:	1d3b      	adds	r3, r7, #4
 80404e4:	4619      	mov	r1, r3
 80404e6:	4804      	ldr	r0, [pc, #16]	; (80404f8 <MX_GPIO_Init+0x60>)
 80404e8:	f000 fa94 	bl	8040a14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80404ec:	bf00      	nop
 80404ee:	3718      	adds	r7, #24
 80404f0:	46bd      	mov	sp, r7
 80404f2:	bd80      	pop	{r7, pc}
 80404f4:	40021000 	.word	0x40021000
 80404f8:	42020000 	.word	0x42020000

080404fc <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 80404fc:	b580      	push	{r7, lr}
 80404fe:	b082      	sub	sp, #8
 8040500:	af00      	add	r7, sp, #0
 8040502:	6078      	str	r0, [r7, #4]
	return ITM_SendChar(ch);
 8040504:	687b      	ldr	r3, [r7, #4]
 8040506:	4618      	mov	r0, r3
 8040508:	f7ff fe96 	bl	8040238 <ITM_SendChar>
 804050c:	4603      	mov	r3, r0
}
 804050e:	4618      	mov	r0, r3
 8040510:	3708      	adds	r7, #8
 8040512:	46bd      	mov	sp, r7
 8040514:	bd80      	pop	{r7, pc}

08040516 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8040516:	b480      	push	{r7}
 8040518:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 804051a:	b672      	cpsid	i
}
 804051c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 804051e:	e7fe      	b.n	804051e <Error_Handler+0x8>

08040520 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8040520:	b480      	push	{r7}
 8040522:	b083      	sub	sp, #12
 8040524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8040526:	4b0f      	ldr	r3, [pc, #60]	; (8040564 <HAL_MspInit+0x44>)
 8040528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 804052a:	4a0e      	ldr	r2, [pc, #56]	; (8040564 <HAL_MspInit+0x44>)
 804052c:	f043 0301 	orr.w	r3, r3, #1
 8040530:	6613      	str	r3, [r2, #96]	; 0x60
 8040532:	4b0c      	ldr	r3, [pc, #48]	; (8040564 <HAL_MspInit+0x44>)
 8040534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8040536:	f003 0301 	and.w	r3, r3, #1
 804053a:	607b      	str	r3, [r7, #4]
 804053c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 804053e:	4b09      	ldr	r3, [pc, #36]	; (8040564 <HAL_MspInit+0x44>)
 8040540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8040542:	4a08      	ldr	r2, [pc, #32]	; (8040564 <HAL_MspInit+0x44>)
 8040544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8040548:	6593      	str	r3, [r2, #88]	; 0x58
 804054a:	4b06      	ldr	r3, [pc, #24]	; (8040564 <HAL_MspInit+0x44>)
 804054c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804054e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8040552:	603b      	str	r3, [r7, #0]
 8040554:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8040556:	bf00      	nop
 8040558:	370c      	adds	r7, #12
 804055a:	46bd      	mov	sp, r7
 804055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040560:	4770      	bx	lr
 8040562:	bf00      	nop
 8040564:	40021000 	.word	0x40021000

08040568 <MemManage_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8040568:	b480      	push	{r7}
 804056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 804056c:	e7fe      	b.n	804056c <MemManage_Handler+0x4>

0804056e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 804056e:	b480      	push	{r7}
 8040570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8040572:	e7fe      	b.n	8040572 <UsageFault_Handler+0x4>

08040574 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8040574:	b480      	push	{r7}
 8040576:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8040578:	bf00      	nop
 804057a:	46bd      	mov	sp, r7
 804057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040580:	4770      	bx	lr

08040582 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8040582:	b480      	push	{r7}
 8040584:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8040586:	bf00      	nop
 8040588:	46bd      	mov	sp, r7
 804058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804058e:	4770      	bx	lr

08040590 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8040590:	b580      	push	{r7, lr}
 8040592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8040594:	f000 f93a 	bl	804080c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8040598:	bf00      	nop
 804059a:	bd80      	pop	{r7, pc}

0804059c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 804059c:	b580      	push	{r7, lr}
 804059e:	b086      	sub	sp, #24
 80405a0:	af00      	add	r7, sp, #0
 80405a2:	60f8      	str	r0, [r7, #12]
 80405a4:	60b9      	str	r1, [r7, #8]
 80405a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80405a8:	2300      	movs	r3, #0
 80405aa:	617b      	str	r3, [r7, #20]
 80405ac:	e00a      	b.n	80405c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80405ae:	f3af 8000 	nop.w
 80405b2:	4601      	mov	r1, r0
 80405b4:	68bb      	ldr	r3, [r7, #8]
 80405b6:	1c5a      	adds	r2, r3, #1
 80405b8:	60ba      	str	r2, [r7, #8]
 80405ba:	b2ca      	uxtb	r2, r1
 80405bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80405be:	697b      	ldr	r3, [r7, #20]
 80405c0:	3301      	adds	r3, #1
 80405c2:	617b      	str	r3, [r7, #20]
 80405c4:	697a      	ldr	r2, [r7, #20]
 80405c6:	687b      	ldr	r3, [r7, #4]
 80405c8:	429a      	cmp	r2, r3
 80405ca:	dbf0      	blt.n	80405ae <_read+0x12>
  }

  return len;
 80405cc:	687b      	ldr	r3, [r7, #4]
}
 80405ce:	4618      	mov	r0, r3
 80405d0:	3718      	adds	r7, #24
 80405d2:	46bd      	mov	sp, r7
 80405d4:	bd80      	pop	{r7, pc}

080405d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80405d6:	b580      	push	{r7, lr}
 80405d8:	b086      	sub	sp, #24
 80405da:	af00      	add	r7, sp, #0
 80405dc:	60f8      	str	r0, [r7, #12]
 80405de:	60b9      	str	r1, [r7, #8]
 80405e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80405e2:	2300      	movs	r3, #0
 80405e4:	617b      	str	r3, [r7, #20]
 80405e6:	e009      	b.n	80405fc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80405e8:	68bb      	ldr	r3, [r7, #8]
 80405ea:	1c5a      	adds	r2, r3, #1
 80405ec:	60ba      	str	r2, [r7, #8]
 80405ee:	781b      	ldrb	r3, [r3, #0]
 80405f0:	4618      	mov	r0, r3
 80405f2:	f7ff ff83 	bl	80404fc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80405f6:	697b      	ldr	r3, [r7, #20]
 80405f8:	3301      	adds	r3, #1
 80405fa:	617b      	str	r3, [r7, #20]
 80405fc:	697a      	ldr	r2, [r7, #20]
 80405fe:	687b      	ldr	r3, [r7, #4]
 8040600:	429a      	cmp	r2, r3
 8040602:	dbf1      	blt.n	80405e8 <_write+0x12>
  }
  return len;
 8040604:	687b      	ldr	r3, [r7, #4]
}
 8040606:	4618      	mov	r0, r3
 8040608:	3718      	adds	r7, #24
 804060a:	46bd      	mov	sp, r7
 804060c:	bd80      	pop	{r7, pc}

0804060e <_close>:

int _close(int file)
{
 804060e:	b480      	push	{r7}
 8040610:	b083      	sub	sp, #12
 8040612:	af00      	add	r7, sp, #0
 8040614:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8040616:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 804061a:	4618      	mov	r0, r3
 804061c:	370c      	adds	r7, #12
 804061e:	46bd      	mov	sp, r7
 8040620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040624:	4770      	bx	lr

08040626 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8040626:	b480      	push	{r7}
 8040628:	b083      	sub	sp, #12
 804062a:	af00      	add	r7, sp, #0
 804062c:	6078      	str	r0, [r7, #4]
 804062e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8040630:	683b      	ldr	r3, [r7, #0]
 8040632:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8040636:	605a      	str	r2, [r3, #4]
  return 0;
 8040638:	2300      	movs	r3, #0
}
 804063a:	4618      	mov	r0, r3
 804063c:	370c      	adds	r7, #12
 804063e:	46bd      	mov	sp, r7
 8040640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040644:	4770      	bx	lr

08040646 <_isatty>:

int _isatty(int file)
{
 8040646:	b480      	push	{r7}
 8040648:	b083      	sub	sp, #12
 804064a:	af00      	add	r7, sp, #0
 804064c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 804064e:	2301      	movs	r3, #1
}
 8040650:	4618      	mov	r0, r3
 8040652:	370c      	adds	r7, #12
 8040654:	46bd      	mov	sp, r7
 8040656:	f85d 7b04 	ldr.w	r7, [sp], #4
 804065a:	4770      	bx	lr

0804065c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 804065c:	b480      	push	{r7}
 804065e:	b085      	sub	sp, #20
 8040660:	af00      	add	r7, sp, #0
 8040662:	60f8      	str	r0, [r7, #12]
 8040664:	60b9      	str	r1, [r7, #8]
 8040666:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8040668:	2300      	movs	r3, #0
}
 804066a:	4618      	mov	r0, r3
 804066c:	3714      	adds	r7, #20
 804066e:	46bd      	mov	sp, r7
 8040670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040674:	4770      	bx	lr
	...

08040678 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8040678:	b580      	push	{r7, lr}
 804067a:	b086      	sub	sp, #24
 804067c:	af00      	add	r7, sp, #0
 804067e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8040680:	4a14      	ldr	r2, [pc, #80]	; (80406d4 <_sbrk+0x5c>)
 8040682:	4b15      	ldr	r3, [pc, #84]	; (80406d8 <_sbrk+0x60>)
 8040684:	1ad3      	subs	r3, r2, r3
 8040686:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8040688:	697b      	ldr	r3, [r7, #20]
 804068a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 804068c:	4b13      	ldr	r3, [pc, #76]	; (80406dc <_sbrk+0x64>)
 804068e:	681b      	ldr	r3, [r3, #0]
 8040690:	2b00      	cmp	r3, #0
 8040692:	d102      	bne.n	804069a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8040694:	4b11      	ldr	r3, [pc, #68]	; (80406dc <_sbrk+0x64>)
 8040696:	4a12      	ldr	r2, [pc, #72]	; (80406e0 <_sbrk+0x68>)
 8040698:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 804069a:	4b10      	ldr	r3, [pc, #64]	; (80406dc <_sbrk+0x64>)
 804069c:	681a      	ldr	r2, [r3, #0]
 804069e:	687b      	ldr	r3, [r7, #4]
 80406a0:	4413      	add	r3, r2
 80406a2:	693a      	ldr	r2, [r7, #16]
 80406a4:	429a      	cmp	r2, r3
 80406a6:	d207      	bcs.n	80406b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80406a8:	f001 fc66 	bl	8041f78 <__errno>
 80406ac:	4603      	mov	r3, r0
 80406ae:	220c      	movs	r2, #12
 80406b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80406b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80406b6:	e009      	b.n	80406cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80406b8:	4b08      	ldr	r3, [pc, #32]	; (80406dc <_sbrk+0x64>)
 80406ba:	681b      	ldr	r3, [r3, #0]
 80406bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80406be:	4b07      	ldr	r3, [pc, #28]	; (80406dc <_sbrk+0x64>)
 80406c0:	681a      	ldr	r2, [r3, #0]
 80406c2:	687b      	ldr	r3, [r7, #4]
 80406c4:	4413      	add	r3, r2
 80406c6:	4a05      	ldr	r2, [pc, #20]	; (80406dc <_sbrk+0x64>)
 80406c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80406ca:	68fb      	ldr	r3, [r7, #12]
}
 80406cc:	4618      	mov	r0, r3
 80406ce:	3718      	adds	r7, #24
 80406d0:	46bd      	mov	sp, r7
 80406d2:	bd80      	pop	{r7, pc}
 80406d4:	20030000 	.word	0x20030000
 80406d8:	00000400 	.word	0x00000400
 80406dc:	200180e4 	.word	0x200180e4
 80406e0:	20018238 	.word	0x20018238

080406e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80406e4:	b480      	push	{r7}
 80406e6:	af00      	add	r7, sp, #0
#endif

  /* Non-secure main application shall call SystemCoreClockUpdate() to update */
  /* the SystemCoreClock variable to insure non-secure application relies on  */
  /* the initial clock reference set by secure application.                   */
}
 80406e8:	bf00      	nop
 80406ea:	46bd      	mov	sp, r7
 80406ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80406f0:	4770      	bx	lr
	...

080406f4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80406f4:	b580      	push	{r7, lr}
 80406f6:	af00      	add	r7, sp, #0
  /* Get the SystemCoreClock value from the secure domain */
  SystemCoreClock = SECURE_SystemCoreClockUpdate();
 80406f8:	f002 faea 	bl	8042cd0 <__SECURE_SystemCoreClockUpdate_veneer>
 80406fc:	4603      	mov	r3, r0
 80406fe:	4a02      	ldr	r2, [pc, #8]	; (8040708 <SystemCoreClockUpdate+0x14>)
 8040700:	6013      	str	r3, [r2, #0]
}
 8040702:	bf00      	nop
 8040704:	bd80      	pop	{r7, pc}
 8040706:	bf00      	nop
 8040708:	20018060 	.word	0x20018060

0804070c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 804070c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8040744 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8040710:	f7ff ffe8 	bl	80406e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8040714:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8040716:	e003      	b.n	8040720 <LoopCopyDataInit>

08040718 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8040718:	4b0b      	ldr	r3, [pc, #44]	; (8040748 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 804071a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 804071c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 804071e:	3104      	adds	r1, #4

08040720 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8040720:	480a      	ldr	r0, [pc, #40]	; (804074c <LoopForever+0xa>)
	ldr	r3, =_edata
 8040722:	4b0b      	ldr	r3, [pc, #44]	; (8040750 <LoopForever+0xe>)
	adds	r2, r0, r1
 8040724:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8040726:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8040728:	d3f6      	bcc.n	8040718 <CopyDataInit>
	ldr	r2, =_sbss
 804072a:	4a0a      	ldr	r2, [pc, #40]	; (8040754 <LoopForever+0x12>)
	b	LoopFillZerobss
 804072c:	e002      	b.n	8040734 <LoopFillZerobss>

0804072e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 804072e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8040730:	f842 3b04 	str.w	r3, [r2], #4

08040734 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8040734:	4b08      	ldr	r3, [pc, #32]	; (8040758 <LoopForever+0x16>)
	cmp	r2, r3
 8040736:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8040738:	d3f9      	bcc.n	804072e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 804073a:	f001 fc23 	bl	8041f84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 804073e:	f7ff fdc3 	bl	80402c8 <main>

08040742 <LoopForever>:

LoopForever:
    b LoopForever
 8040742:	e7fe      	b.n	8040742 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8040744:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8040748:	08042e2c 	.word	0x08042e2c
	ldr	r0, =_sdata
 804074c:	20018000 	.word	0x20018000
	ldr	r3, =_edata
 8040750:	200180c8 	.word	0x200180c8
	ldr	r2, =_sbss
 8040754:	200180c8 	.word	0x200180c8
	ldr	r3, = _ebss
 8040758:	20018238 	.word	0x20018238

0804075c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 804075c:	e7fe      	b.n	804075c <ADC1_2_IRQHandler>

0804075e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 804075e:	b580      	push	{r7, lr}
 8040760:	b082      	sub	sp, #8
 8040762:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8040764:	2300      	movs	r3, #0
 8040766:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8040768:	2004      	movs	r0, #4
 804076a:	f000 f921 	bl	80409b0 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 804076e:	f7ff ffc1 	bl	80406f4 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8040772:	2007      	movs	r0, #7
 8040774:	f000 f80e 	bl	8040794 <HAL_InitTick>
 8040778:	4603      	mov	r3, r0
 804077a:	2b00      	cmp	r3, #0
 804077c:	d002      	beq.n	8040784 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 804077e:	2301      	movs	r3, #1
 8040780:	71fb      	strb	r3, [r7, #7]
 8040782:	e001      	b.n	8040788 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8040784:	f7ff fecc 	bl	8040520 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8040788:	79fb      	ldrb	r3, [r7, #7]
}
 804078a:	4618      	mov	r0, r3
 804078c:	3708      	adds	r7, #8
 804078e:	46bd      	mov	sp, r7
 8040790:	bd80      	pop	{r7, pc}
	...

08040794 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8040794:	b580      	push	{r7, lr}
 8040796:	b084      	sub	sp, #16
 8040798:	af00      	add	r7, sp, #0
 804079a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 804079c:	2300      	movs	r3, #0
 804079e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80407a0:	4b17      	ldr	r3, [pc, #92]	; (8040800 <HAL_InitTick+0x6c>)
 80407a2:	781b      	ldrb	r3, [r3, #0]
 80407a4:	2b00      	cmp	r3, #0
 80407a6:	d023      	beq.n	80407f0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80407a8:	4b16      	ldr	r3, [pc, #88]	; (8040804 <HAL_InitTick+0x70>)
 80407aa:	681a      	ldr	r2, [r3, #0]
 80407ac:	4b14      	ldr	r3, [pc, #80]	; (8040800 <HAL_InitTick+0x6c>)
 80407ae:	781b      	ldrb	r3, [r3, #0]
 80407b0:	4619      	mov	r1, r3
 80407b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80407b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80407ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80407be:	4618      	mov	r0, r3
 80407c0:	f000 f91b 	bl	80409fa <HAL_SYSTICK_Config>
 80407c4:	4603      	mov	r3, r0
 80407c6:	2b00      	cmp	r3, #0
 80407c8:	d10f      	bne.n	80407ea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80407ca:	687b      	ldr	r3, [r7, #4]
 80407cc:	2b07      	cmp	r3, #7
 80407ce:	d809      	bhi.n	80407e4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80407d0:	2200      	movs	r2, #0
 80407d2:	6879      	ldr	r1, [r7, #4]
 80407d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80407d8:	f000 f8f5 	bl	80409c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80407dc:	4a0a      	ldr	r2, [pc, #40]	; (8040808 <HAL_InitTick+0x74>)
 80407de:	687b      	ldr	r3, [r7, #4]
 80407e0:	6013      	str	r3, [r2, #0]
 80407e2:	e007      	b.n	80407f4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80407e4:	2301      	movs	r3, #1
 80407e6:	73fb      	strb	r3, [r7, #15]
 80407e8:	e004      	b.n	80407f4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80407ea:	2301      	movs	r3, #1
 80407ec:	73fb      	strb	r3, [r7, #15]
 80407ee:	e001      	b.n	80407f4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80407f0:	2301      	movs	r3, #1
 80407f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80407f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80407f6:	4618      	mov	r0, r3
 80407f8:	3710      	adds	r7, #16
 80407fa:	46bd      	mov	sp, r7
 80407fc:	bd80      	pop	{r7, pc}
 80407fe:	bf00      	nop
 8040800:	20018068 	.word	0x20018068
 8040804:	20018060 	.word	0x20018060
 8040808:	20018064 	.word	0x20018064

0804080c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 804080c:	b480      	push	{r7}
 804080e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8040810:	4b06      	ldr	r3, [pc, #24]	; (804082c <HAL_IncTick+0x20>)
 8040812:	781b      	ldrb	r3, [r3, #0]
 8040814:	461a      	mov	r2, r3
 8040816:	4b06      	ldr	r3, [pc, #24]	; (8040830 <HAL_IncTick+0x24>)
 8040818:	681b      	ldr	r3, [r3, #0]
 804081a:	4413      	add	r3, r2
 804081c:	4a04      	ldr	r2, [pc, #16]	; (8040830 <HAL_IncTick+0x24>)
 804081e:	6013      	str	r3, [r2, #0]
}
 8040820:	bf00      	nop
 8040822:	46bd      	mov	sp, r7
 8040824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040828:	4770      	bx	lr
 804082a:	bf00      	nop
 804082c:	20018068 	.word	0x20018068
 8040830:	200180e8 	.word	0x200180e8

08040834 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8040834:	b480      	push	{r7}
 8040836:	af00      	add	r7, sp, #0
  return uwTick;
 8040838:	4b03      	ldr	r3, [pc, #12]	; (8040848 <HAL_GetTick+0x14>)
 804083a:	681b      	ldr	r3, [r3, #0]
}
 804083c:	4618      	mov	r0, r3
 804083e:	46bd      	mov	sp, r7
 8040840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040844:	4770      	bx	lr
 8040846:	bf00      	nop
 8040848:	200180e8 	.word	0x200180e8

0804084c <__NVIC_SetPriorityGrouping>:
{
 804084c:	b480      	push	{r7}
 804084e:	b085      	sub	sp, #20
 8040850:	af00      	add	r7, sp, #0
 8040852:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8040854:	687b      	ldr	r3, [r7, #4]
 8040856:	f003 0307 	and.w	r3, r3, #7
 804085a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 804085c:	4b0c      	ldr	r3, [pc, #48]	; (8040890 <__NVIC_SetPriorityGrouping+0x44>)
 804085e:	68db      	ldr	r3, [r3, #12]
 8040860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8040862:	68ba      	ldr	r2, [r7, #8]
 8040864:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8040868:	4013      	ands	r3, r2
 804086a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 804086c:	68fb      	ldr	r3, [r7, #12]
 804086e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8040870:	68bb      	ldr	r3, [r7, #8]
 8040872:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8040874:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8040878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 804087c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 804087e:	4a04      	ldr	r2, [pc, #16]	; (8040890 <__NVIC_SetPriorityGrouping+0x44>)
 8040880:	68bb      	ldr	r3, [r7, #8]
 8040882:	60d3      	str	r3, [r2, #12]
}
 8040884:	bf00      	nop
 8040886:	3714      	adds	r7, #20
 8040888:	46bd      	mov	sp, r7
 804088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804088e:	4770      	bx	lr
 8040890:	e000ed00 	.word	0xe000ed00

08040894 <__NVIC_GetPriorityGrouping>:
{
 8040894:	b480      	push	{r7}
 8040896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8040898:	4b04      	ldr	r3, [pc, #16]	; (80408ac <__NVIC_GetPriorityGrouping+0x18>)
 804089a:	68db      	ldr	r3, [r3, #12]
 804089c:	0a1b      	lsrs	r3, r3, #8
 804089e:	f003 0307 	and.w	r3, r3, #7
}
 80408a2:	4618      	mov	r0, r3
 80408a4:	46bd      	mov	sp, r7
 80408a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80408aa:	4770      	bx	lr
 80408ac:	e000ed00 	.word	0xe000ed00

080408b0 <__NVIC_SetPriority>:
{
 80408b0:	b480      	push	{r7}
 80408b2:	b083      	sub	sp, #12
 80408b4:	af00      	add	r7, sp, #0
 80408b6:	4603      	mov	r3, r0
 80408b8:	6039      	str	r1, [r7, #0]
 80408ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80408bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80408c0:	2b00      	cmp	r3, #0
 80408c2:	db0a      	blt.n	80408da <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80408c4:	683b      	ldr	r3, [r7, #0]
 80408c6:	b2da      	uxtb	r2, r3
 80408c8:	490c      	ldr	r1, [pc, #48]	; (80408fc <__NVIC_SetPriority+0x4c>)
 80408ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80408ce:	0152      	lsls	r2, r2, #5
 80408d0:	b2d2      	uxtb	r2, r2
 80408d2:	440b      	add	r3, r1
 80408d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80408d8:	e00a      	b.n	80408f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80408da:	683b      	ldr	r3, [r7, #0]
 80408dc:	b2da      	uxtb	r2, r3
 80408de:	4908      	ldr	r1, [pc, #32]	; (8040900 <__NVIC_SetPriority+0x50>)
 80408e0:	79fb      	ldrb	r3, [r7, #7]
 80408e2:	f003 030f 	and.w	r3, r3, #15
 80408e6:	3b04      	subs	r3, #4
 80408e8:	0152      	lsls	r2, r2, #5
 80408ea:	b2d2      	uxtb	r2, r2
 80408ec:	440b      	add	r3, r1
 80408ee:	761a      	strb	r2, [r3, #24]
}
 80408f0:	bf00      	nop
 80408f2:	370c      	adds	r7, #12
 80408f4:	46bd      	mov	sp, r7
 80408f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80408fa:	4770      	bx	lr
 80408fc:	e000e100 	.word	0xe000e100
 8040900:	e000ed00 	.word	0xe000ed00

08040904 <NVIC_EncodePriority>:
{
 8040904:	b480      	push	{r7}
 8040906:	b089      	sub	sp, #36	; 0x24
 8040908:	af00      	add	r7, sp, #0
 804090a:	60f8      	str	r0, [r7, #12]
 804090c:	60b9      	str	r1, [r7, #8]
 804090e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8040910:	68fb      	ldr	r3, [r7, #12]
 8040912:	f003 0307 	and.w	r3, r3, #7
 8040916:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8040918:	69fb      	ldr	r3, [r7, #28]
 804091a:	f1c3 0307 	rsb	r3, r3, #7
 804091e:	2b03      	cmp	r3, #3
 8040920:	bf28      	it	cs
 8040922:	2303      	movcs	r3, #3
 8040924:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8040926:	69fb      	ldr	r3, [r7, #28]
 8040928:	3303      	adds	r3, #3
 804092a:	2b06      	cmp	r3, #6
 804092c:	d902      	bls.n	8040934 <NVIC_EncodePriority+0x30>
 804092e:	69fb      	ldr	r3, [r7, #28]
 8040930:	3b04      	subs	r3, #4
 8040932:	e000      	b.n	8040936 <NVIC_EncodePriority+0x32>
 8040934:	2300      	movs	r3, #0
 8040936:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040938:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 804093c:	69bb      	ldr	r3, [r7, #24]
 804093e:	fa02 f303 	lsl.w	r3, r2, r3
 8040942:	43da      	mvns	r2, r3
 8040944:	68bb      	ldr	r3, [r7, #8]
 8040946:	401a      	ands	r2, r3
 8040948:	697b      	ldr	r3, [r7, #20]
 804094a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 804094c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8040950:	697b      	ldr	r3, [r7, #20]
 8040952:	fa01 f303 	lsl.w	r3, r1, r3
 8040956:	43d9      	mvns	r1, r3
 8040958:	687b      	ldr	r3, [r7, #4]
 804095a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 804095c:	4313      	orrs	r3, r2
}
 804095e:	4618      	mov	r0, r3
 8040960:	3724      	adds	r7, #36	; 0x24
 8040962:	46bd      	mov	sp, r7
 8040964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040968:	4770      	bx	lr
	...

0804096c <SysTick_Config>:
{
 804096c:	b580      	push	{r7, lr}
 804096e:	b082      	sub	sp, #8
 8040970:	af00      	add	r7, sp, #0
 8040972:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8040974:	687b      	ldr	r3, [r7, #4]
 8040976:	3b01      	subs	r3, #1
 8040978:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 804097c:	d301      	bcc.n	8040982 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 804097e:	2301      	movs	r3, #1
 8040980:	e00f      	b.n	80409a2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8040982:	4a0a      	ldr	r2, [pc, #40]	; (80409ac <SysTick_Config+0x40>)
 8040984:	687b      	ldr	r3, [r7, #4]
 8040986:	3b01      	subs	r3, #1
 8040988:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 804098a:	2107      	movs	r1, #7
 804098c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8040990:	f7ff ff8e 	bl	80408b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8040994:	4b05      	ldr	r3, [pc, #20]	; (80409ac <SysTick_Config+0x40>)
 8040996:	2200      	movs	r2, #0
 8040998:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 804099a:	4b04      	ldr	r3, [pc, #16]	; (80409ac <SysTick_Config+0x40>)
 804099c:	2207      	movs	r2, #7
 804099e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80409a0:	2300      	movs	r3, #0
}
 80409a2:	4618      	mov	r0, r3
 80409a4:	3708      	adds	r7, #8
 80409a6:	46bd      	mov	sp, r7
 80409a8:	bd80      	pop	{r7, pc}
 80409aa:	bf00      	nop
 80409ac:	e000e010 	.word	0xe000e010

080409b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80409b0:	b580      	push	{r7, lr}
 80409b2:	b082      	sub	sp, #8
 80409b4:	af00      	add	r7, sp, #0
 80409b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80409b8:	6878      	ldr	r0, [r7, #4]
 80409ba:	f7ff ff47 	bl	804084c <__NVIC_SetPriorityGrouping>
}
 80409be:	bf00      	nop
 80409c0:	3708      	adds	r7, #8
 80409c2:	46bd      	mov	sp, r7
 80409c4:	bd80      	pop	{r7, pc}

080409c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80409c6:	b580      	push	{r7, lr}
 80409c8:	b086      	sub	sp, #24
 80409ca:	af00      	add	r7, sp, #0
 80409cc:	4603      	mov	r3, r0
 80409ce:	60b9      	str	r1, [r7, #8]
 80409d0:	607a      	str	r2, [r7, #4]
 80409d2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80409d4:	f7ff ff5e 	bl	8040894 <__NVIC_GetPriorityGrouping>
 80409d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80409da:	687a      	ldr	r2, [r7, #4]
 80409dc:	68b9      	ldr	r1, [r7, #8]
 80409de:	6978      	ldr	r0, [r7, #20]
 80409e0:	f7ff ff90 	bl	8040904 <NVIC_EncodePriority>
 80409e4:	4602      	mov	r2, r0
 80409e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80409ea:	4611      	mov	r1, r2
 80409ec:	4618      	mov	r0, r3
 80409ee:	f7ff ff5f 	bl	80408b0 <__NVIC_SetPriority>
}
 80409f2:	bf00      	nop
 80409f4:	3718      	adds	r7, #24
 80409f6:	46bd      	mov	sp, r7
 80409f8:	bd80      	pop	{r7, pc}

080409fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80409fa:	b580      	push	{r7, lr}
 80409fc:	b082      	sub	sp, #8
 80409fe:	af00      	add	r7, sp, #0
 8040a00:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8040a02:	6878      	ldr	r0, [r7, #4]
 8040a04:	f7ff ffb2 	bl	804096c <SysTick_Config>
 8040a08:	4603      	mov	r3, r0
}
 8040a0a:	4618      	mov	r0, r3
 8040a0c:	3708      	adds	r7, #8
 8040a0e:	46bd      	mov	sp, r7
 8040a10:	bd80      	pop	{r7, pc}
	...

08040a14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8040a14:	b480      	push	{r7}
 8040a16:	b087      	sub	sp, #28
 8040a18:	af00      	add	r7, sp, #0
 8040a1a:	6078      	str	r0, [r7, #4]
 8040a1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8040a1e:	2300      	movs	r3, #0
 8040a20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8040a22:	e158      	b.n	8040cd6 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8040a24:	683b      	ldr	r3, [r7, #0]
 8040a26:	681a      	ldr	r2, [r3, #0]
 8040a28:	2101      	movs	r1, #1
 8040a2a:	697b      	ldr	r3, [r7, #20]
 8040a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8040a30:	4013      	ands	r3, r2
 8040a32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8040a34:	68fb      	ldr	r3, [r7, #12]
 8040a36:	2b00      	cmp	r3, #0
 8040a38:	f000 814a 	beq.w	8040cd0 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8040a3c:	683b      	ldr	r3, [r7, #0]
 8040a3e:	685b      	ldr	r3, [r3, #4]
 8040a40:	f003 0303 	and.w	r3, r3, #3
 8040a44:	2b01      	cmp	r3, #1
 8040a46:	d005      	beq.n	8040a54 <HAL_GPIO_Init+0x40>
 8040a48:	683b      	ldr	r3, [r7, #0]
 8040a4a:	685b      	ldr	r3, [r3, #4]
 8040a4c:	f003 0303 	and.w	r3, r3, #3
 8040a50:	2b02      	cmp	r3, #2
 8040a52:	d130      	bne.n	8040ab6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8040a54:	687b      	ldr	r3, [r7, #4]
 8040a56:	689b      	ldr	r3, [r3, #8]
 8040a58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8040a5a:	697b      	ldr	r3, [r7, #20]
 8040a5c:	005b      	lsls	r3, r3, #1
 8040a5e:	2203      	movs	r2, #3
 8040a60:	fa02 f303 	lsl.w	r3, r2, r3
 8040a64:	43db      	mvns	r3, r3
 8040a66:	693a      	ldr	r2, [r7, #16]
 8040a68:	4013      	ands	r3, r2
 8040a6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8040a6c:	683b      	ldr	r3, [r7, #0]
 8040a6e:	68da      	ldr	r2, [r3, #12]
 8040a70:	697b      	ldr	r3, [r7, #20]
 8040a72:	005b      	lsls	r3, r3, #1
 8040a74:	fa02 f303 	lsl.w	r3, r2, r3
 8040a78:	693a      	ldr	r2, [r7, #16]
 8040a7a:	4313      	orrs	r3, r2
 8040a7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8040a7e:	687b      	ldr	r3, [r7, #4]
 8040a80:	693a      	ldr	r2, [r7, #16]
 8040a82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8040a84:	687b      	ldr	r3, [r7, #4]
 8040a86:	685b      	ldr	r3, [r3, #4]
 8040a88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8040a8a:	2201      	movs	r2, #1
 8040a8c:	697b      	ldr	r3, [r7, #20]
 8040a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8040a92:	43db      	mvns	r3, r3
 8040a94:	693a      	ldr	r2, [r7, #16]
 8040a96:	4013      	ands	r3, r2
 8040a98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8040a9a:	683b      	ldr	r3, [r7, #0]
 8040a9c:	685b      	ldr	r3, [r3, #4]
 8040a9e:	091b      	lsrs	r3, r3, #4
 8040aa0:	f003 0201 	and.w	r2, r3, #1
 8040aa4:	697b      	ldr	r3, [r7, #20]
 8040aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8040aaa:	693a      	ldr	r2, [r7, #16]
 8040aac:	4313      	orrs	r3, r2
 8040aae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8040ab0:	687b      	ldr	r3, [r7, #4]
 8040ab2:	693a      	ldr	r2, [r7, #16]
 8040ab4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8040ab6:	683b      	ldr	r3, [r7, #0]
 8040ab8:	685b      	ldr	r3, [r3, #4]
 8040aba:	f003 0303 	and.w	r3, r3, #3
 8040abe:	2b03      	cmp	r3, #3
 8040ac0:	d017      	beq.n	8040af2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8040ac2:	687b      	ldr	r3, [r7, #4]
 8040ac4:	68db      	ldr	r3, [r3, #12]
 8040ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8040ac8:	697b      	ldr	r3, [r7, #20]
 8040aca:	005b      	lsls	r3, r3, #1
 8040acc:	2203      	movs	r2, #3
 8040ace:	fa02 f303 	lsl.w	r3, r2, r3
 8040ad2:	43db      	mvns	r3, r3
 8040ad4:	693a      	ldr	r2, [r7, #16]
 8040ad6:	4013      	ands	r3, r2
 8040ad8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8040ada:	683b      	ldr	r3, [r7, #0]
 8040adc:	689a      	ldr	r2, [r3, #8]
 8040ade:	697b      	ldr	r3, [r7, #20]
 8040ae0:	005b      	lsls	r3, r3, #1
 8040ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8040ae6:	693a      	ldr	r2, [r7, #16]
 8040ae8:	4313      	orrs	r3, r2
 8040aea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8040aec:	687b      	ldr	r3, [r7, #4]
 8040aee:	693a      	ldr	r2, [r7, #16]
 8040af0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8040af2:	683b      	ldr	r3, [r7, #0]
 8040af4:	685b      	ldr	r3, [r3, #4]
 8040af6:	f003 0303 	and.w	r3, r3, #3
 8040afa:	2b02      	cmp	r3, #2
 8040afc:	d123      	bne.n	8040b46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8040afe:	697b      	ldr	r3, [r7, #20]
 8040b00:	08da      	lsrs	r2, r3, #3
 8040b02:	687b      	ldr	r3, [r7, #4]
 8040b04:	3208      	adds	r2, #8
 8040b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8040b0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8040b0c:	697b      	ldr	r3, [r7, #20]
 8040b0e:	f003 0307 	and.w	r3, r3, #7
 8040b12:	009b      	lsls	r3, r3, #2
 8040b14:	220f      	movs	r2, #15
 8040b16:	fa02 f303 	lsl.w	r3, r2, r3
 8040b1a:	43db      	mvns	r3, r3
 8040b1c:	693a      	ldr	r2, [r7, #16]
 8040b1e:	4013      	ands	r3, r2
 8040b20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8040b22:	683b      	ldr	r3, [r7, #0]
 8040b24:	691a      	ldr	r2, [r3, #16]
 8040b26:	697b      	ldr	r3, [r7, #20]
 8040b28:	f003 0307 	and.w	r3, r3, #7
 8040b2c:	009b      	lsls	r3, r3, #2
 8040b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8040b32:	693a      	ldr	r2, [r7, #16]
 8040b34:	4313      	orrs	r3, r2
 8040b36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8040b38:	697b      	ldr	r3, [r7, #20]
 8040b3a:	08da      	lsrs	r2, r3, #3
 8040b3c:	687b      	ldr	r3, [r7, #4]
 8040b3e:	3208      	adds	r2, #8
 8040b40:	6939      	ldr	r1, [r7, #16]
 8040b42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8040b46:	687b      	ldr	r3, [r7, #4]
 8040b48:	681b      	ldr	r3, [r3, #0]
 8040b4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8040b4c:	697b      	ldr	r3, [r7, #20]
 8040b4e:	005b      	lsls	r3, r3, #1
 8040b50:	2203      	movs	r2, #3
 8040b52:	fa02 f303 	lsl.w	r3, r2, r3
 8040b56:	43db      	mvns	r3, r3
 8040b58:	693a      	ldr	r2, [r7, #16]
 8040b5a:	4013      	ands	r3, r2
 8040b5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8040b5e:	683b      	ldr	r3, [r7, #0]
 8040b60:	685b      	ldr	r3, [r3, #4]
 8040b62:	f003 0203 	and.w	r2, r3, #3
 8040b66:	697b      	ldr	r3, [r7, #20]
 8040b68:	005b      	lsls	r3, r3, #1
 8040b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8040b6e:	693a      	ldr	r2, [r7, #16]
 8040b70:	4313      	orrs	r3, r2
 8040b72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8040b74:	687b      	ldr	r3, [r7, #4]
 8040b76:	693a      	ldr	r2, [r7, #16]
 8040b78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8040b7a:	683b      	ldr	r3, [r7, #0]
 8040b7c:	685b      	ldr	r3, [r3, #4]
 8040b7e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8040b82:	2b00      	cmp	r3, #0
 8040b84:	f000 80a4 	beq.w	8040cd0 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8040b88:	4a5a      	ldr	r2, [pc, #360]	; (8040cf4 <HAL_GPIO_Init+0x2e0>)
 8040b8a:	697b      	ldr	r3, [r7, #20]
 8040b8c:	089b      	lsrs	r3, r3, #2
 8040b8e:	3318      	adds	r3, #24
 8040b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8040b94:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8040b96:	697b      	ldr	r3, [r7, #20]
 8040b98:	f003 0303 	and.w	r3, r3, #3
 8040b9c:	00db      	lsls	r3, r3, #3
 8040b9e:	220f      	movs	r2, #15
 8040ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8040ba4:	43db      	mvns	r3, r3
 8040ba6:	693a      	ldr	r2, [r7, #16]
 8040ba8:	4013      	ands	r3, r2
 8040baa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8040bac:	687b      	ldr	r3, [r7, #4]
 8040bae:	4a52      	ldr	r2, [pc, #328]	; (8040cf8 <HAL_GPIO_Init+0x2e4>)
 8040bb0:	4293      	cmp	r3, r2
 8040bb2:	d025      	beq.n	8040c00 <HAL_GPIO_Init+0x1ec>
 8040bb4:	687b      	ldr	r3, [r7, #4]
 8040bb6:	4a51      	ldr	r2, [pc, #324]	; (8040cfc <HAL_GPIO_Init+0x2e8>)
 8040bb8:	4293      	cmp	r3, r2
 8040bba:	d01f      	beq.n	8040bfc <HAL_GPIO_Init+0x1e8>
 8040bbc:	687b      	ldr	r3, [r7, #4]
 8040bbe:	4a50      	ldr	r2, [pc, #320]	; (8040d00 <HAL_GPIO_Init+0x2ec>)
 8040bc0:	4293      	cmp	r3, r2
 8040bc2:	d019      	beq.n	8040bf8 <HAL_GPIO_Init+0x1e4>
 8040bc4:	687b      	ldr	r3, [r7, #4]
 8040bc6:	4a4f      	ldr	r2, [pc, #316]	; (8040d04 <HAL_GPIO_Init+0x2f0>)
 8040bc8:	4293      	cmp	r3, r2
 8040bca:	d013      	beq.n	8040bf4 <HAL_GPIO_Init+0x1e0>
 8040bcc:	687b      	ldr	r3, [r7, #4]
 8040bce:	4a4e      	ldr	r2, [pc, #312]	; (8040d08 <HAL_GPIO_Init+0x2f4>)
 8040bd0:	4293      	cmp	r3, r2
 8040bd2:	d00d      	beq.n	8040bf0 <HAL_GPIO_Init+0x1dc>
 8040bd4:	687b      	ldr	r3, [r7, #4]
 8040bd6:	4a4d      	ldr	r2, [pc, #308]	; (8040d0c <HAL_GPIO_Init+0x2f8>)
 8040bd8:	4293      	cmp	r3, r2
 8040bda:	d007      	beq.n	8040bec <HAL_GPIO_Init+0x1d8>
 8040bdc:	687b      	ldr	r3, [r7, #4]
 8040bde:	4a4c      	ldr	r2, [pc, #304]	; (8040d10 <HAL_GPIO_Init+0x2fc>)
 8040be0:	4293      	cmp	r3, r2
 8040be2:	d101      	bne.n	8040be8 <HAL_GPIO_Init+0x1d4>
 8040be4:	2306      	movs	r3, #6
 8040be6:	e00c      	b.n	8040c02 <HAL_GPIO_Init+0x1ee>
 8040be8:	2307      	movs	r3, #7
 8040bea:	e00a      	b.n	8040c02 <HAL_GPIO_Init+0x1ee>
 8040bec:	2305      	movs	r3, #5
 8040bee:	e008      	b.n	8040c02 <HAL_GPIO_Init+0x1ee>
 8040bf0:	2304      	movs	r3, #4
 8040bf2:	e006      	b.n	8040c02 <HAL_GPIO_Init+0x1ee>
 8040bf4:	2303      	movs	r3, #3
 8040bf6:	e004      	b.n	8040c02 <HAL_GPIO_Init+0x1ee>
 8040bf8:	2302      	movs	r3, #2
 8040bfa:	e002      	b.n	8040c02 <HAL_GPIO_Init+0x1ee>
 8040bfc:	2301      	movs	r3, #1
 8040bfe:	e000      	b.n	8040c02 <HAL_GPIO_Init+0x1ee>
 8040c00:	2300      	movs	r3, #0
 8040c02:	697a      	ldr	r2, [r7, #20]
 8040c04:	f002 0203 	and.w	r2, r2, #3
 8040c08:	00d2      	lsls	r2, r2, #3
 8040c0a:	4093      	lsls	r3, r2
 8040c0c:	693a      	ldr	r2, [r7, #16]
 8040c0e:	4313      	orrs	r3, r2
 8040c10:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8040c12:	4938      	ldr	r1, [pc, #224]	; (8040cf4 <HAL_GPIO_Init+0x2e0>)
 8040c14:	697b      	ldr	r3, [r7, #20]
 8040c16:	089b      	lsrs	r3, r3, #2
 8040c18:	3318      	adds	r3, #24
 8040c1a:	693a      	ldr	r2, [r7, #16]
 8040c1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8040c20:	4b34      	ldr	r3, [pc, #208]	; (8040cf4 <HAL_GPIO_Init+0x2e0>)
 8040c22:	681b      	ldr	r3, [r3, #0]
 8040c24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8040c26:	68fb      	ldr	r3, [r7, #12]
 8040c28:	43db      	mvns	r3, r3
 8040c2a:	693a      	ldr	r2, [r7, #16]
 8040c2c:	4013      	ands	r3, r2
 8040c2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8040c30:	683b      	ldr	r3, [r7, #0]
 8040c32:	685b      	ldr	r3, [r3, #4]
 8040c34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8040c38:	2b00      	cmp	r3, #0
 8040c3a:	d003      	beq.n	8040c44 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8040c3c:	693a      	ldr	r2, [r7, #16]
 8040c3e:	68fb      	ldr	r3, [r7, #12]
 8040c40:	4313      	orrs	r3, r2
 8040c42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8040c44:	4a2b      	ldr	r2, [pc, #172]	; (8040cf4 <HAL_GPIO_Init+0x2e0>)
 8040c46:	693b      	ldr	r3, [r7, #16]
 8040c48:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8040c4a:	4b2a      	ldr	r3, [pc, #168]	; (8040cf4 <HAL_GPIO_Init+0x2e0>)
 8040c4c:	685b      	ldr	r3, [r3, #4]
 8040c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8040c50:	68fb      	ldr	r3, [r7, #12]
 8040c52:	43db      	mvns	r3, r3
 8040c54:	693a      	ldr	r2, [r7, #16]
 8040c56:	4013      	ands	r3, r2
 8040c58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8040c5a:	683b      	ldr	r3, [r7, #0]
 8040c5c:	685b      	ldr	r3, [r3, #4]
 8040c5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8040c62:	2b00      	cmp	r3, #0
 8040c64:	d003      	beq.n	8040c6e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8040c66:	693a      	ldr	r2, [r7, #16]
 8040c68:	68fb      	ldr	r3, [r7, #12]
 8040c6a:	4313      	orrs	r3, r2
 8040c6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8040c6e:	4a21      	ldr	r2, [pc, #132]	; (8040cf4 <HAL_GPIO_Init+0x2e0>)
 8040c70:	693b      	ldr	r3, [r7, #16]
 8040c72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8040c74:	4b1f      	ldr	r3, [pc, #124]	; (8040cf4 <HAL_GPIO_Init+0x2e0>)
 8040c76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8040c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8040c7c:	68fb      	ldr	r3, [r7, #12]
 8040c7e:	43db      	mvns	r3, r3
 8040c80:	693a      	ldr	r2, [r7, #16]
 8040c82:	4013      	ands	r3, r2
 8040c84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8040c86:	683b      	ldr	r3, [r7, #0]
 8040c88:	685b      	ldr	r3, [r3, #4]
 8040c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8040c8e:	2b00      	cmp	r3, #0
 8040c90:	d003      	beq.n	8040c9a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8040c92:	693a      	ldr	r2, [r7, #16]
 8040c94:	68fb      	ldr	r3, [r7, #12]
 8040c96:	4313      	orrs	r3, r2
 8040c98:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8040c9a:	4a16      	ldr	r2, [pc, #88]	; (8040cf4 <HAL_GPIO_Init+0x2e0>)
 8040c9c:	693b      	ldr	r3, [r7, #16]
 8040c9e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 8040ca2:	4b14      	ldr	r3, [pc, #80]	; (8040cf4 <HAL_GPIO_Init+0x2e0>)
 8040ca4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8040ca8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8040caa:	68fb      	ldr	r3, [r7, #12]
 8040cac:	43db      	mvns	r3, r3
 8040cae:	693a      	ldr	r2, [r7, #16]
 8040cb0:	4013      	ands	r3, r2
 8040cb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8040cb4:	683b      	ldr	r3, [r7, #0]
 8040cb6:	685b      	ldr	r3, [r3, #4]
 8040cb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8040cbc:	2b00      	cmp	r3, #0
 8040cbe:	d003      	beq.n	8040cc8 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8040cc0:	693a      	ldr	r2, [r7, #16]
 8040cc2:	68fb      	ldr	r3, [r7, #12]
 8040cc4:	4313      	orrs	r3, r2
 8040cc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8040cc8:	4a0a      	ldr	r2, [pc, #40]	; (8040cf4 <HAL_GPIO_Init+0x2e0>)
 8040cca:	693b      	ldr	r3, [r7, #16]
 8040ccc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8040cd0:	697b      	ldr	r3, [r7, #20]
 8040cd2:	3301      	adds	r3, #1
 8040cd4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8040cd6:	683b      	ldr	r3, [r7, #0]
 8040cd8:	681a      	ldr	r2, [r3, #0]
 8040cda:	697b      	ldr	r3, [r7, #20]
 8040cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8040ce0:	2b00      	cmp	r3, #0
 8040ce2:	f47f ae9f 	bne.w	8040a24 <HAL_GPIO_Init+0x10>
  }
}
 8040ce6:	bf00      	nop
 8040ce8:	bf00      	nop
 8040cea:	371c      	adds	r7, #28
 8040cec:	46bd      	mov	sp, r7
 8040cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040cf2:	4770      	bx	lr
 8040cf4:	4002f400 	.word	0x4002f400
 8040cf8:	42020000 	.word	0x42020000
 8040cfc:	42020400 	.word	0x42020400
 8040d00:	42020800 	.word	0x42020800
 8040d04:	42020c00 	.word	0x42020c00
 8040d08:	42021000 	.word	0x42021000
 8040d0c:	42021400 	.word	0x42021400
 8040d10:	42021800 	.word	0x42021800

08040d14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8040d14:	b480      	push	{r7}
 8040d16:	b083      	sub	sp, #12
 8040d18:	af00      	add	r7, sp, #0
 8040d1a:	6078      	str	r0, [r7, #4]
 8040d1c:	460b      	mov	r3, r1
 8040d1e:	807b      	strh	r3, [r7, #2]
 8040d20:	4613      	mov	r3, r2
 8040d22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8040d24:	787b      	ldrb	r3, [r7, #1]
 8040d26:	2b00      	cmp	r3, #0
 8040d28:	d003      	beq.n	8040d32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8040d2a:	887a      	ldrh	r2, [r7, #2]
 8040d2c:	687b      	ldr	r3, [r7, #4]
 8040d2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8040d30:	e002      	b.n	8040d38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8040d32:	887a      	ldrh	r2, [r7, #2]
 8040d34:	687b      	ldr	r3, [r7, #4]
 8040d36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8040d38:	bf00      	nop
 8040d3a:	370c      	adds	r7, #12
 8040d3c:	46bd      	mov	sp, r7
 8040d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040d42:	4770      	bx	lr

08040d44 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8040d44:	b480      	push	{r7}
 8040d46:	b085      	sub	sp, #20
 8040d48:	af00      	add	r7, sp, #0
 8040d4a:	6078      	str	r0, [r7, #4]
 8040d4c:	460b      	mov	r3, r1
 8040d4e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8040d50:	687b      	ldr	r3, [r7, #4]
 8040d52:	695b      	ldr	r3, [r3, #20]
 8040d54:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8040d56:	887a      	ldrh	r2, [r7, #2]
 8040d58:	68fb      	ldr	r3, [r7, #12]
 8040d5a:	4013      	ands	r3, r2
 8040d5c:	041a      	lsls	r2, r3, #16
 8040d5e:	68fb      	ldr	r3, [r7, #12]
 8040d60:	43d9      	mvns	r1, r3
 8040d62:	887b      	ldrh	r3, [r7, #2]
 8040d64:	400b      	ands	r3, r1
 8040d66:	431a      	orrs	r2, r3
 8040d68:	687b      	ldr	r3, [r7, #4]
 8040d6a:	619a      	str	r2, [r3, #24]
}
 8040d6c:	bf00      	nop
 8040d6e:	3714      	adds	r7, #20
 8040d70:	46bd      	mov	sp, r7
 8040d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040d76:	4770      	bx	lr

08040d78 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8040d78:	b480      	push	{r7}
 8040d7a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8040d7c:	4b04      	ldr	r3, [pc, #16]	; (8040d90 <HAL_PWREx_GetVoltageRange+0x18>)
 8040d7e:	681b      	ldr	r3, [r3, #0]
 8040d80:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8040d84:	4618      	mov	r0, r3
 8040d86:	46bd      	mov	sp, r7
 8040d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040d8c:	4770      	bx	lr
 8040d8e:	bf00      	nop
 8040d90:	40007000 	.word	0x40007000

08040d94 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8040d94:	b580      	push	{r7, lr}
 8040d96:	b084      	sub	sp, #16
 8040d98:	af00      	add	r7, sp, #0
 8040d9a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8040d9c:	4b27      	ldr	r3, [pc, #156]	; (8040e3c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8040d9e:	681b      	ldr	r3, [r3, #0]
 8040da0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8040da4:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8040da6:	f000 f851 	bl	8040e4c <HAL_PWREx_SMPS_GetEffectiveMode>
 8040daa:	4603      	mov	r3, r0
 8040dac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8040db0:	d101      	bne.n	8040db6 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8040db2:	2301      	movs	r3, #1
 8040db4:	e03e      	b.n	8040e34 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8040db6:	4b21      	ldr	r3, [pc, #132]	; (8040e3c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8040db8:	68db      	ldr	r3, [r3, #12]
 8040dba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8040dbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8040dc2:	d101      	bne.n	8040dc8 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8040dc4:	2301      	movs	r3, #1
 8040dc6:	e035      	b.n	8040e34 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8040dc8:	68ba      	ldr	r2, [r7, #8]
 8040dca:	687b      	ldr	r3, [r7, #4]
 8040dcc:	429a      	cmp	r2, r3
 8040dce:	d101      	bne.n	8040dd4 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8040dd0:	2300      	movs	r3, #0
 8040dd2:	e02f      	b.n	8040e34 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8040dd4:	4b19      	ldr	r3, [pc, #100]	; (8040e3c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8040dd6:	681b      	ldr	r3, [r3, #0]
 8040dd8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8040ddc:	4917      	ldr	r1, [pc, #92]	; (8040e3c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8040dde:	687b      	ldr	r3, [r7, #4]
 8040de0:	4313      	orrs	r3, r2
 8040de2:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8040de4:	4b16      	ldr	r3, [pc, #88]	; (8040e40 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8040de6:	681b      	ldr	r3, [r3, #0]
 8040de8:	095b      	lsrs	r3, r3, #5
 8040dea:	4a16      	ldr	r2, [pc, #88]	; (8040e44 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8040dec:	fba2 2303 	umull	r2, r3, r2, r3
 8040df0:	09db      	lsrs	r3, r3, #7
 8040df2:	2232      	movs	r2, #50	; 0x32
 8040df4:	fb02 f303 	mul.w	r3, r2, r3
 8040df8:	4a13      	ldr	r2, [pc, #76]	; (8040e48 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8040dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8040dfe:	08db      	lsrs	r3, r3, #3
 8040e00:	3301      	adds	r3, #1
 8040e02:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8040e04:	e002      	b.n	8040e0c <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8040e06:	68fb      	ldr	r3, [r7, #12]
 8040e08:	3b01      	subs	r3, #1
 8040e0a:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8040e0c:	4b0b      	ldr	r3, [pc, #44]	; (8040e3c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8040e0e:	695b      	ldr	r3, [r3, #20]
 8040e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8040e14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8040e18:	d102      	bne.n	8040e20 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8040e1a:	68fb      	ldr	r3, [r7, #12]
 8040e1c:	2b00      	cmp	r3, #0
 8040e1e:	d1f2      	bne.n	8040e06 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8040e20:	4b06      	ldr	r3, [pc, #24]	; (8040e3c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8040e22:	695b      	ldr	r3, [r3, #20]
 8040e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8040e28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8040e2c:	d101      	bne.n	8040e32 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8040e2e:	2303      	movs	r3, #3
 8040e30:	e000      	b.n	8040e34 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8040e32:	2300      	movs	r3, #0
}
 8040e34:	4618      	mov	r0, r3
 8040e36:	3710      	adds	r7, #16
 8040e38:	46bd      	mov	sp, r7
 8040e3a:	bd80      	pop	{r7, pc}
 8040e3c:	40007000 	.word	0x40007000
 8040e40:	20018060 	.word	0x20018060
 8040e44:	0a7c5ac5 	.word	0x0a7c5ac5
 8040e48:	cccccccd 	.word	0xcccccccd

08040e4c <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8040e4c:	b480      	push	{r7}
 8040e4e:	b083      	sub	sp, #12
 8040e50:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8040e52:	4b0f      	ldr	r3, [pc, #60]	; (8040e90 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8040e54:	691b      	ldr	r3, [r3, #16]
 8040e56:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8040e58:	683b      	ldr	r3, [r7, #0]
 8040e5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8040e5e:	2b00      	cmp	r3, #0
 8040e60:	d003      	beq.n	8040e6a <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8040e62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8040e66:	607b      	str	r3, [r7, #4]
 8040e68:	e00a      	b.n	8040e80 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8040e6a:	683b      	ldr	r3, [r7, #0]
 8040e6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8040e70:	2b00      	cmp	r3, #0
 8040e72:	d103      	bne.n	8040e7c <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8040e74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8040e78:	607b      	str	r3, [r7, #4]
 8040e7a:	e001      	b.n	8040e80 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8040e7c:	2300      	movs	r3, #0
 8040e7e:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8040e80:	687b      	ldr	r3, [r7, #4]
}
 8040e82:	4618      	mov	r0, r3
 8040e84:	370c      	adds	r7, #12
 8040e86:	46bd      	mov	sp, r7
 8040e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040e8c:	4770      	bx	lr
 8040e8e:	bf00      	nop
 8040e90:	40007000 	.word	0x40007000

08040e94 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8040e94:	b580      	push	{r7, lr}
 8040e96:	b088      	sub	sp, #32
 8040e98:	af00      	add	r7, sp, #0
 8040e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8040e9c:	687b      	ldr	r3, [r7, #4]
 8040e9e:	2b00      	cmp	r3, #0
 8040ea0:	d102      	bne.n	8040ea8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8040ea2:	2301      	movs	r3, #1
 8040ea4:	f000 bcc2 	b.w	804182c <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8040ea8:	4b99      	ldr	r3, [pc, #612]	; (8041110 <HAL_RCC_OscConfig+0x27c>)
 8040eaa:	689b      	ldr	r3, [r3, #8]
 8040eac:	f003 030c 	and.w	r3, r3, #12
 8040eb0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8040eb2:	4b97      	ldr	r3, [pc, #604]	; (8041110 <HAL_RCC_OscConfig+0x27c>)
 8040eb4:	68db      	ldr	r3, [r3, #12]
 8040eb6:	f003 0303 	and.w	r3, r3, #3
 8040eba:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8040ebc:	687b      	ldr	r3, [r7, #4]
 8040ebe:	681b      	ldr	r3, [r3, #0]
 8040ec0:	f003 0310 	and.w	r3, r3, #16
 8040ec4:	2b00      	cmp	r3, #0
 8040ec6:	f000 80e9 	beq.w	804109c <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8040eca:	69bb      	ldr	r3, [r7, #24]
 8040ecc:	2b00      	cmp	r3, #0
 8040ece:	d006      	beq.n	8040ede <HAL_RCC_OscConfig+0x4a>
 8040ed0:	69bb      	ldr	r3, [r7, #24]
 8040ed2:	2b0c      	cmp	r3, #12
 8040ed4:	f040 8083 	bne.w	8040fde <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8040ed8:	697b      	ldr	r3, [r7, #20]
 8040eda:	2b01      	cmp	r3, #1
 8040edc:	d17f      	bne.n	8040fde <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8040ede:	4b8c      	ldr	r3, [pc, #560]	; (8041110 <HAL_RCC_OscConfig+0x27c>)
 8040ee0:	681b      	ldr	r3, [r3, #0]
 8040ee2:	f003 0302 	and.w	r3, r3, #2
 8040ee6:	2b00      	cmp	r3, #0
 8040ee8:	d006      	beq.n	8040ef8 <HAL_RCC_OscConfig+0x64>
 8040eea:	687b      	ldr	r3, [r7, #4]
 8040eec:	69db      	ldr	r3, [r3, #28]
 8040eee:	2b00      	cmp	r3, #0
 8040ef0:	d102      	bne.n	8040ef8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8040ef2:	2301      	movs	r3, #1
 8040ef4:	f000 bc9a 	b.w	804182c <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8040ef8:	687b      	ldr	r3, [r7, #4]
 8040efa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8040efc:	4b84      	ldr	r3, [pc, #528]	; (8041110 <HAL_RCC_OscConfig+0x27c>)
 8040efe:	681b      	ldr	r3, [r3, #0]
 8040f00:	f003 0308 	and.w	r3, r3, #8
 8040f04:	2b00      	cmp	r3, #0
 8040f06:	d004      	beq.n	8040f12 <HAL_RCC_OscConfig+0x7e>
 8040f08:	4b81      	ldr	r3, [pc, #516]	; (8041110 <HAL_RCC_OscConfig+0x27c>)
 8040f0a:	681b      	ldr	r3, [r3, #0]
 8040f0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8040f10:	e005      	b.n	8040f1e <HAL_RCC_OscConfig+0x8a>
 8040f12:	4b7f      	ldr	r3, [pc, #508]	; (8041110 <HAL_RCC_OscConfig+0x27c>)
 8040f14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8040f18:	091b      	lsrs	r3, r3, #4
 8040f1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8040f1e:	4293      	cmp	r3, r2
 8040f20:	d224      	bcs.n	8040f6c <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8040f22:	687b      	ldr	r3, [r7, #4]
 8040f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8040f26:	4618      	mov	r0, r3
 8040f28:	f000 fe72 	bl	8041c10 <RCC_SetFlashLatencyFromMSIRange>
 8040f2c:	4603      	mov	r3, r0
 8040f2e:	2b00      	cmp	r3, #0
 8040f30:	d002      	beq.n	8040f38 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8040f32:	2301      	movs	r3, #1
 8040f34:	f000 bc7a 	b.w	804182c <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8040f38:	4b75      	ldr	r3, [pc, #468]	; (8041110 <HAL_RCC_OscConfig+0x27c>)
 8040f3a:	681b      	ldr	r3, [r3, #0]
 8040f3c:	4a74      	ldr	r2, [pc, #464]	; (8041110 <HAL_RCC_OscConfig+0x27c>)
 8040f3e:	f043 0308 	orr.w	r3, r3, #8
 8040f42:	6013      	str	r3, [r2, #0]
 8040f44:	4b72      	ldr	r3, [pc, #456]	; (8041110 <HAL_RCC_OscConfig+0x27c>)
 8040f46:	681b      	ldr	r3, [r3, #0]
 8040f48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8040f4c:	687b      	ldr	r3, [r7, #4]
 8040f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8040f50:	496f      	ldr	r1, [pc, #444]	; (8041110 <HAL_RCC_OscConfig+0x27c>)
 8040f52:	4313      	orrs	r3, r2
 8040f54:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8040f56:	4b6e      	ldr	r3, [pc, #440]	; (8041110 <HAL_RCC_OscConfig+0x27c>)
 8040f58:	685b      	ldr	r3, [r3, #4]
 8040f5a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8040f5e:	687b      	ldr	r3, [r7, #4]
 8040f60:	6a1b      	ldr	r3, [r3, #32]
 8040f62:	021b      	lsls	r3, r3, #8
 8040f64:	496a      	ldr	r1, [pc, #424]	; (8041110 <HAL_RCC_OscConfig+0x27c>)
 8040f66:	4313      	orrs	r3, r2
 8040f68:	604b      	str	r3, [r1, #4]
 8040f6a:	e026      	b.n	8040fba <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8040f6c:	4b68      	ldr	r3, [pc, #416]	; (8041110 <HAL_RCC_OscConfig+0x27c>)
 8040f6e:	681b      	ldr	r3, [r3, #0]
 8040f70:	4a67      	ldr	r2, [pc, #412]	; (8041110 <HAL_RCC_OscConfig+0x27c>)
 8040f72:	f043 0308 	orr.w	r3, r3, #8
 8040f76:	6013      	str	r3, [r2, #0]
 8040f78:	4b65      	ldr	r3, [pc, #404]	; (8041110 <HAL_RCC_OscConfig+0x27c>)
 8040f7a:	681b      	ldr	r3, [r3, #0]
 8040f7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8040f80:	687b      	ldr	r3, [r7, #4]
 8040f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8040f84:	4962      	ldr	r1, [pc, #392]	; (8041110 <HAL_RCC_OscConfig+0x27c>)
 8040f86:	4313      	orrs	r3, r2
 8040f88:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8040f8a:	4b61      	ldr	r3, [pc, #388]	; (8041110 <HAL_RCC_OscConfig+0x27c>)
 8040f8c:	685b      	ldr	r3, [r3, #4]
 8040f8e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8040f92:	687b      	ldr	r3, [r7, #4]
 8040f94:	6a1b      	ldr	r3, [r3, #32]
 8040f96:	021b      	lsls	r3, r3, #8
 8040f98:	495d      	ldr	r1, [pc, #372]	; (8041110 <HAL_RCC_OscConfig+0x27c>)
 8040f9a:	4313      	orrs	r3, r2
 8040f9c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8040f9e:	69bb      	ldr	r3, [r7, #24]
 8040fa0:	2b00      	cmp	r3, #0
 8040fa2:	d10a      	bne.n	8040fba <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8040fa4:	687b      	ldr	r3, [r7, #4]
 8040fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8040fa8:	4618      	mov	r0, r3
 8040faa:	f000 fe31 	bl	8041c10 <RCC_SetFlashLatencyFromMSIRange>
 8040fae:	4603      	mov	r3, r0
 8040fb0:	2b00      	cmp	r3, #0
 8040fb2:	d002      	beq.n	8040fba <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8040fb4:	2301      	movs	r3, #1
 8040fb6:	f000 bc39 	b.w	804182c <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8040fba:	f000 fe15 	bl	8041be8 <HAL_RCC_GetHCLKFreq>
 8040fbe:	4603      	mov	r3, r0
 8040fc0:	4a54      	ldr	r2, [pc, #336]	; (8041114 <HAL_RCC_OscConfig+0x280>)
 8040fc2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8040fc4:	4b54      	ldr	r3, [pc, #336]	; (8041118 <HAL_RCC_OscConfig+0x284>)
 8040fc6:	681b      	ldr	r3, [r3, #0]
 8040fc8:	4618      	mov	r0, r3
 8040fca:	f7ff fbe3 	bl	8040794 <HAL_InitTick>
 8040fce:	4603      	mov	r3, r0
 8040fd0:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8040fd2:	7bfb      	ldrb	r3, [r7, #15]
 8040fd4:	2b00      	cmp	r3, #0
 8040fd6:	d060      	beq.n	804109a <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8040fd8:	7bfb      	ldrb	r3, [r7, #15]
 8040fda:	f000 bc27 	b.w	804182c <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8040fde:	687b      	ldr	r3, [r7, #4]
 8040fe0:	69db      	ldr	r3, [r3, #28]
 8040fe2:	2b00      	cmp	r3, #0
 8040fe4:	d039      	beq.n	804105a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8040fe6:	4b4a      	ldr	r3, [pc, #296]	; (8041110 <HAL_RCC_OscConfig+0x27c>)
 8040fe8:	681b      	ldr	r3, [r3, #0]
 8040fea:	4a49      	ldr	r2, [pc, #292]	; (8041110 <HAL_RCC_OscConfig+0x27c>)
 8040fec:	f043 0301 	orr.w	r3, r3, #1
 8040ff0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8040ff2:	f7ff fc1f 	bl	8040834 <HAL_GetTick>
 8040ff6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8040ff8:	e00f      	b.n	804101a <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8040ffa:	f7ff fc1b 	bl	8040834 <HAL_GetTick>
 8040ffe:	4602      	mov	r2, r0
 8041000:	693b      	ldr	r3, [r7, #16]
 8041002:	1ad3      	subs	r3, r2, r3
 8041004:	2b02      	cmp	r3, #2
 8041006:	d908      	bls.n	804101a <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8041008:	4b41      	ldr	r3, [pc, #260]	; (8041110 <HAL_RCC_OscConfig+0x27c>)
 804100a:	681b      	ldr	r3, [r3, #0]
 804100c:	f003 0302 	and.w	r3, r3, #2
 8041010:	2b00      	cmp	r3, #0
 8041012:	d102      	bne.n	804101a <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8041014:	2303      	movs	r3, #3
 8041016:	f000 bc09 	b.w	804182c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 804101a:	4b3d      	ldr	r3, [pc, #244]	; (8041110 <HAL_RCC_OscConfig+0x27c>)
 804101c:	681b      	ldr	r3, [r3, #0]
 804101e:	f003 0302 	and.w	r3, r3, #2
 8041022:	2b00      	cmp	r3, #0
 8041024:	d0e9      	beq.n	8040ffa <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8041026:	4b3a      	ldr	r3, [pc, #232]	; (8041110 <HAL_RCC_OscConfig+0x27c>)
 8041028:	681b      	ldr	r3, [r3, #0]
 804102a:	4a39      	ldr	r2, [pc, #228]	; (8041110 <HAL_RCC_OscConfig+0x27c>)
 804102c:	f043 0308 	orr.w	r3, r3, #8
 8041030:	6013      	str	r3, [r2, #0]
 8041032:	4b37      	ldr	r3, [pc, #220]	; (8041110 <HAL_RCC_OscConfig+0x27c>)
 8041034:	681b      	ldr	r3, [r3, #0]
 8041036:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 804103a:	687b      	ldr	r3, [r7, #4]
 804103c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804103e:	4934      	ldr	r1, [pc, #208]	; (8041110 <HAL_RCC_OscConfig+0x27c>)
 8041040:	4313      	orrs	r3, r2
 8041042:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8041044:	4b32      	ldr	r3, [pc, #200]	; (8041110 <HAL_RCC_OscConfig+0x27c>)
 8041046:	685b      	ldr	r3, [r3, #4]
 8041048:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 804104c:	687b      	ldr	r3, [r7, #4]
 804104e:	6a1b      	ldr	r3, [r3, #32]
 8041050:	021b      	lsls	r3, r3, #8
 8041052:	492f      	ldr	r1, [pc, #188]	; (8041110 <HAL_RCC_OscConfig+0x27c>)
 8041054:	4313      	orrs	r3, r2
 8041056:	604b      	str	r3, [r1, #4]
 8041058:	e020      	b.n	804109c <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 804105a:	4b2d      	ldr	r3, [pc, #180]	; (8041110 <HAL_RCC_OscConfig+0x27c>)
 804105c:	681b      	ldr	r3, [r3, #0]
 804105e:	4a2c      	ldr	r2, [pc, #176]	; (8041110 <HAL_RCC_OscConfig+0x27c>)
 8041060:	f023 0301 	bic.w	r3, r3, #1
 8041064:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8041066:	f7ff fbe5 	bl	8040834 <HAL_GetTick>
 804106a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 804106c:	e00e      	b.n	804108c <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 804106e:	f7ff fbe1 	bl	8040834 <HAL_GetTick>
 8041072:	4602      	mov	r2, r0
 8041074:	693b      	ldr	r3, [r7, #16]
 8041076:	1ad3      	subs	r3, r2, r3
 8041078:	2b02      	cmp	r3, #2
 804107a:	d907      	bls.n	804108c <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 804107c:	4b24      	ldr	r3, [pc, #144]	; (8041110 <HAL_RCC_OscConfig+0x27c>)
 804107e:	681b      	ldr	r3, [r3, #0]
 8041080:	f003 0302 	and.w	r3, r3, #2
 8041084:	2b00      	cmp	r3, #0
 8041086:	d001      	beq.n	804108c <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8041088:	2303      	movs	r3, #3
 804108a:	e3cf      	b.n	804182c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 804108c:	4b20      	ldr	r3, [pc, #128]	; (8041110 <HAL_RCC_OscConfig+0x27c>)
 804108e:	681b      	ldr	r3, [r3, #0]
 8041090:	f003 0302 	and.w	r3, r3, #2
 8041094:	2b00      	cmp	r3, #0
 8041096:	d1ea      	bne.n	804106e <HAL_RCC_OscConfig+0x1da>
 8041098:	e000      	b.n	804109c <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 804109a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 804109c:	687b      	ldr	r3, [r7, #4]
 804109e:	681b      	ldr	r3, [r3, #0]
 80410a0:	f003 0301 	and.w	r3, r3, #1
 80410a4:	2b00      	cmp	r3, #0
 80410a6:	d07e      	beq.n	80411a6 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80410a8:	69bb      	ldr	r3, [r7, #24]
 80410aa:	2b08      	cmp	r3, #8
 80410ac:	d005      	beq.n	80410ba <HAL_RCC_OscConfig+0x226>
 80410ae:	69bb      	ldr	r3, [r7, #24]
 80410b0:	2b0c      	cmp	r3, #12
 80410b2:	d10e      	bne.n	80410d2 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80410b4:	697b      	ldr	r3, [r7, #20]
 80410b6:	2b03      	cmp	r3, #3
 80410b8:	d10b      	bne.n	80410d2 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80410ba:	4b15      	ldr	r3, [pc, #84]	; (8041110 <HAL_RCC_OscConfig+0x27c>)
 80410bc:	681b      	ldr	r3, [r3, #0]
 80410be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80410c2:	2b00      	cmp	r3, #0
 80410c4:	d06e      	beq.n	80411a4 <HAL_RCC_OscConfig+0x310>
 80410c6:	687b      	ldr	r3, [r7, #4]
 80410c8:	685b      	ldr	r3, [r3, #4]
 80410ca:	2b00      	cmp	r3, #0
 80410cc:	d16a      	bne.n	80411a4 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 80410ce:	2301      	movs	r3, #1
 80410d0:	e3ac      	b.n	804182c <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80410d2:	687b      	ldr	r3, [r7, #4]
 80410d4:	685b      	ldr	r3, [r3, #4]
 80410d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80410da:	d106      	bne.n	80410ea <HAL_RCC_OscConfig+0x256>
 80410dc:	4b0c      	ldr	r3, [pc, #48]	; (8041110 <HAL_RCC_OscConfig+0x27c>)
 80410de:	681b      	ldr	r3, [r3, #0]
 80410e0:	4a0b      	ldr	r2, [pc, #44]	; (8041110 <HAL_RCC_OscConfig+0x27c>)
 80410e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80410e6:	6013      	str	r3, [r2, #0]
 80410e8:	e024      	b.n	8041134 <HAL_RCC_OscConfig+0x2a0>
 80410ea:	687b      	ldr	r3, [r7, #4]
 80410ec:	685b      	ldr	r3, [r3, #4]
 80410ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80410f2:	d113      	bne.n	804111c <HAL_RCC_OscConfig+0x288>
 80410f4:	4b06      	ldr	r3, [pc, #24]	; (8041110 <HAL_RCC_OscConfig+0x27c>)
 80410f6:	681b      	ldr	r3, [r3, #0]
 80410f8:	4a05      	ldr	r2, [pc, #20]	; (8041110 <HAL_RCC_OscConfig+0x27c>)
 80410fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80410fe:	6013      	str	r3, [r2, #0]
 8041100:	4b03      	ldr	r3, [pc, #12]	; (8041110 <HAL_RCC_OscConfig+0x27c>)
 8041102:	681b      	ldr	r3, [r3, #0]
 8041104:	4a02      	ldr	r2, [pc, #8]	; (8041110 <HAL_RCC_OscConfig+0x27c>)
 8041106:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 804110a:	6013      	str	r3, [r2, #0]
 804110c:	e012      	b.n	8041134 <HAL_RCC_OscConfig+0x2a0>
 804110e:	bf00      	nop
 8041110:	40021000 	.word	0x40021000
 8041114:	20018060 	.word	0x20018060
 8041118:	20018064 	.word	0x20018064
 804111c:	4b8b      	ldr	r3, [pc, #556]	; (804134c <HAL_RCC_OscConfig+0x4b8>)
 804111e:	681b      	ldr	r3, [r3, #0]
 8041120:	4a8a      	ldr	r2, [pc, #552]	; (804134c <HAL_RCC_OscConfig+0x4b8>)
 8041122:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8041126:	6013      	str	r3, [r2, #0]
 8041128:	4b88      	ldr	r3, [pc, #544]	; (804134c <HAL_RCC_OscConfig+0x4b8>)
 804112a:	681b      	ldr	r3, [r3, #0]
 804112c:	4a87      	ldr	r2, [pc, #540]	; (804134c <HAL_RCC_OscConfig+0x4b8>)
 804112e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8041132:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8041134:	687b      	ldr	r3, [r7, #4]
 8041136:	685b      	ldr	r3, [r3, #4]
 8041138:	2b00      	cmp	r3, #0
 804113a:	d019      	beq.n	8041170 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 804113c:	f7ff fb7a 	bl	8040834 <HAL_GetTick>
 8041140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8041142:	e00e      	b.n	8041162 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8041144:	f7ff fb76 	bl	8040834 <HAL_GetTick>
 8041148:	4602      	mov	r2, r0
 804114a:	693b      	ldr	r3, [r7, #16]
 804114c:	1ad3      	subs	r3, r2, r3
 804114e:	2b64      	cmp	r3, #100	; 0x64
 8041150:	d907      	bls.n	8041162 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8041152:	4b7e      	ldr	r3, [pc, #504]	; (804134c <HAL_RCC_OscConfig+0x4b8>)
 8041154:	681b      	ldr	r3, [r3, #0]
 8041156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 804115a:	2b00      	cmp	r3, #0
 804115c:	d101      	bne.n	8041162 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 804115e:	2303      	movs	r3, #3
 8041160:	e364      	b.n	804182c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8041162:	4b7a      	ldr	r3, [pc, #488]	; (804134c <HAL_RCC_OscConfig+0x4b8>)
 8041164:	681b      	ldr	r3, [r3, #0]
 8041166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 804116a:	2b00      	cmp	r3, #0
 804116c:	d0ea      	beq.n	8041144 <HAL_RCC_OscConfig+0x2b0>
 804116e:	e01a      	b.n	80411a6 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041170:	f7ff fb60 	bl	8040834 <HAL_GetTick>
 8041174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8041176:	e00e      	b.n	8041196 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8041178:	f7ff fb5c 	bl	8040834 <HAL_GetTick>
 804117c:	4602      	mov	r2, r0
 804117e:	693b      	ldr	r3, [r7, #16]
 8041180:	1ad3      	subs	r3, r2, r3
 8041182:	2b64      	cmp	r3, #100	; 0x64
 8041184:	d907      	bls.n	8041196 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8041186:	4b71      	ldr	r3, [pc, #452]	; (804134c <HAL_RCC_OscConfig+0x4b8>)
 8041188:	681b      	ldr	r3, [r3, #0]
 804118a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 804118e:	2b00      	cmp	r3, #0
 8041190:	d001      	beq.n	8041196 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8041192:	2303      	movs	r3, #3
 8041194:	e34a      	b.n	804182c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8041196:	4b6d      	ldr	r3, [pc, #436]	; (804134c <HAL_RCC_OscConfig+0x4b8>)
 8041198:	681b      	ldr	r3, [r3, #0]
 804119a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 804119e:	2b00      	cmp	r3, #0
 80411a0:	d1ea      	bne.n	8041178 <HAL_RCC_OscConfig+0x2e4>
 80411a2:	e000      	b.n	80411a6 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80411a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80411a6:	687b      	ldr	r3, [r7, #4]
 80411a8:	681b      	ldr	r3, [r3, #0]
 80411aa:	f003 0302 	and.w	r3, r3, #2
 80411ae:	2b00      	cmp	r3, #0
 80411b0:	d06c      	beq.n	804128c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80411b2:	69bb      	ldr	r3, [r7, #24]
 80411b4:	2b04      	cmp	r3, #4
 80411b6:	d005      	beq.n	80411c4 <HAL_RCC_OscConfig+0x330>
 80411b8:	69bb      	ldr	r3, [r7, #24]
 80411ba:	2b0c      	cmp	r3, #12
 80411bc:	d119      	bne.n	80411f2 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80411be:	697b      	ldr	r3, [r7, #20]
 80411c0:	2b02      	cmp	r3, #2
 80411c2:	d116      	bne.n	80411f2 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80411c4:	4b61      	ldr	r3, [pc, #388]	; (804134c <HAL_RCC_OscConfig+0x4b8>)
 80411c6:	681b      	ldr	r3, [r3, #0]
 80411c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80411cc:	2b00      	cmp	r3, #0
 80411ce:	d005      	beq.n	80411dc <HAL_RCC_OscConfig+0x348>
 80411d0:	687b      	ldr	r3, [r7, #4]
 80411d2:	68db      	ldr	r3, [r3, #12]
 80411d4:	2b00      	cmp	r3, #0
 80411d6:	d101      	bne.n	80411dc <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 80411d8:	2301      	movs	r3, #1
 80411da:	e327      	b.n	804182c <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80411dc:	4b5b      	ldr	r3, [pc, #364]	; (804134c <HAL_RCC_OscConfig+0x4b8>)
 80411de:	685b      	ldr	r3, [r3, #4]
 80411e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80411e4:	687b      	ldr	r3, [r7, #4]
 80411e6:	691b      	ldr	r3, [r3, #16]
 80411e8:	061b      	lsls	r3, r3, #24
 80411ea:	4958      	ldr	r1, [pc, #352]	; (804134c <HAL_RCC_OscConfig+0x4b8>)
 80411ec:	4313      	orrs	r3, r2
 80411ee:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80411f0:	e04c      	b.n	804128c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80411f2:	687b      	ldr	r3, [r7, #4]
 80411f4:	68db      	ldr	r3, [r3, #12]
 80411f6:	2b00      	cmp	r3, #0
 80411f8:	d029      	beq.n	804124e <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80411fa:	4b54      	ldr	r3, [pc, #336]	; (804134c <HAL_RCC_OscConfig+0x4b8>)
 80411fc:	681b      	ldr	r3, [r3, #0]
 80411fe:	4a53      	ldr	r2, [pc, #332]	; (804134c <HAL_RCC_OscConfig+0x4b8>)
 8041200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8041204:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041206:	f7ff fb15 	bl	8040834 <HAL_GetTick>
 804120a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 804120c:	e00e      	b.n	804122c <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 804120e:	f7ff fb11 	bl	8040834 <HAL_GetTick>
 8041212:	4602      	mov	r2, r0
 8041214:	693b      	ldr	r3, [r7, #16]
 8041216:	1ad3      	subs	r3, r2, r3
 8041218:	2b02      	cmp	r3, #2
 804121a:	d907      	bls.n	804122c <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 804121c:	4b4b      	ldr	r3, [pc, #300]	; (804134c <HAL_RCC_OscConfig+0x4b8>)
 804121e:	681b      	ldr	r3, [r3, #0]
 8041220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8041224:	2b00      	cmp	r3, #0
 8041226:	d101      	bne.n	804122c <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8041228:	2303      	movs	r3, #3
 804122a:	e2ff      	b.n	804182c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 804122c:	4b47      	ldr	r3, [pc, #284]	; (804134c <HAL_RCC_OscConfig+0x4b8>)
 804122e:	681b      	ldr	r3, [r3, #0]
 8041230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8041234:	2b00      	cmp	r3, #0
 8041236:	d0ea      	beq.n	804120e <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8041238:	4b44      	ldr	r3, [pc, #272]	; (804134c <HAL_RCC_OscConfig+0x4b8>)
 804123a:	685b      	ldr	r3, [r3, #4]
 804123c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8041240:	687b      	ldr	r3, [r7, #4]
 8041242:	691b      	ldr	r3, [r3, #16]
 8041244:	061b      	lsls	r3, r3, #24
 8041246:	4941      	ldr	r1, [pc, #260]	; (804134c <HAL_RCC_OscConfig+0x4b8>)
 8041248:	4313      	orrs	r3, r2
 804124a:	604b      	str	r3, [r1, #4]
 804124c:	e01e      	b.n	804128c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 804124e:	4b3f      	ldr	r3, [pc, #252]	; (804134c <HAL_RCC_OscConfig+0x4b8>)
 8041250:	681b      	ldr	r3, [r3, #0]
 8041252:	4a3e      	ldr	r2, [pc, #248]	; (804134c <HAL_RCC_OscConfig+0x4b8>)
 8041254:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8041258:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 804125a:	f7ff faeb 	bl	8040834 <HAL_GetTick>
 804125e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8041260:	e00e      	b.n	8041280 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8041262:	f7ff fae7 	bl	8040834 <HAL_GetTick>
 8041266:	4602      	mov	r2, r0
 8041268:	693b      	ldr	r3, [r7, #16]
 804126a:	1ad3      	subs	r3, r2, r3
 804126c:	2b02      	cmp	r3, #2
 804126e:	d907      	bls.n	8041280 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8041270:	4b36      	ldr	r3, [pc, #216]	; (804134c <HAL_RCC_OscConfig+0x4b8>)
 8041272:	681b      	ldr	r3, [r3, #0]
 8041274:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8041278:	2b00      	cmp	r3, #0
 804127a:	d001      	beq.n	8041280 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 804127c:	2303      	movs	r3, #3
 804127e:	e2d5      	b.n	804182c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8041280:	4b32      	ldr	r3, [pc, #200]	; (804134c <HAL_RCC_OscConfig+0x4b8>)
 8041282:	681b      	ldr	r3, [r3, #0]
 8041284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8041288:	2b00      	cmp	r3, #0
 804128a:	d1ea      	bne.n	8041262 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 804128c:	687b      	ldr	r3, [r7, #4]
 804128e:	681b      	ldr	r3, [r3, #0]
 8041290:	f003 0308 	and.w	r3, r3, #8
 8041294:	2b00      	cmp	r3, #0
 8041296:	d062      	beq.n	804135e <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8041298:	687b      	ldr	r3, [r7, #4]
 804129a:	695b      	ldr	r3, [r3, #20]
 804129c:	2b00      	cmp	r3, #0
 804129e:	d038      	beq.n	8041312 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 80412a0:	687b      	ldr	r3, [r7, #4]
 80412a2:	699b      	ldr	r3, [r3, #24]
 80412a4:	2b00      	cmp	r3, #0
 80412a6:	d108      	bne.n	80412ba <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80412a8:	4b28      	ldr	r3, [pc, #160]	; (804134c <HAL_RCC_OscConfig+0x4b8>)
 80412aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80412ae:	4a27      	ldr	r2, [pc, #156]	; (804134c <HAL_RCC_OscConfig+0x4b8>)
 80412b0:	f023 0310 	bic.w	r3, r3, #16
 80412b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80412b8:	e007      	b.n	80412ca <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80412ba:	4b24      	ldr	r3, [pc, #144]	; (804134c <HAL_RCC_OscConfig+0x4b8>)
 80412bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80412c0:	4a22      	ldr	r2, [pc, #136]	; (804134c <HAL_RCC_OscConfig+0x4b8>)
 80412c2:	f043 0310 	orr.w	r3, r3, #16
 80412c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80412ca:	4b20      	ldr	r3, [pc, #128]	; (804134c <HAL_RCC_OscConfig+0x4b8>)
 80412cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80412d0:	4a1e      	ldr	r2, [pc, #120]	; (804134c <HAL_RCC_OscConfig+0x4b8>)
 80412d2:	f043 0301 	orr.w	r3, r3, #1
 80412d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80412da:	f7ff faab 	bl	8040834 <HAL_GetTick>
 80412de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80412e0:	e00f      	b.n	8041302 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80412e2:	f7ff faa7 	bl	8040834 <HAL_GetTick>
 80412e6:	4602      	mov	r2, r0
 80412e8:	693b      	ldr	r3, [r7, #16]
 80412ea:	1ad3      	subs	r3, r2, r3
 80412ec:	2b07      	cmp	r3, #7
 80412ee:	d908      	bls.n	8041302 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80412f0:	4b16      	ldr	r3, [pc, #88]	; (804134c <HAL_RCC_OscConfig+0x4b8>)
 80412f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80412f6:	f003 0302 	and.w	r3, r3, #2
 80412fa:	2b00      	cmp	r3, #0
 80412fc:	d101      	bne.n	8041302 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 80412fe:	2303      	movs	r3, #3
 8041300:	e294      	b.n	804182c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8041302:	4b12      	ldr	r3, [pc, #72]	; (804134c <HAL_RCC_OscConfig+0x4b8>)
 8041304:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8041308:	f003 0302 	and.w	r3, r3, #2
 804130c:	2b00      	cmp	r3, #0
 804130e:	d0e8      	beq.n	80412e2 <HAL_RCC_OscConfig+0x44e>
 8041310:	e025      	b.n	804135e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8041312:	4b0e      	ldr	r3, [pc, #56]	; (804134c <HAL_RCC_OscConfig+0x4b8>)
 8041314:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8041318:	4a0c      	ldr	r2, [pc, #48]	; (804134c <HAL_RCC_OscConfig+0x4b8>)
 804131a:	f023 0301 	bic.w	r3, r3, #1
 804131e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041322:	f7ff fa87 	bl	8040834 <HAL_GetTick>
 8041326:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8041328:	e012      	b.n	8041350 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 804132a:	f7ff fa83 	bl	8040834 <HAL_GetTick>
 804132e:	4602      	mov	r2, r0
 8041330:	693b      	ldr	r3, [r7, #16]
 8041332:	1ad3      	subs	r3, r2, r3
 8041334:	2b07      	cmp	r3, #7
 8041336:	d90b      	bls.n	8041350 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8041338:	4b04      	ldr	r3, [pc, #16]	; (804134c <HAL_RCC_OscConfig+0x4b8>)
 804133a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 804133e:	f003 0302 	and.w	r3, r3, #2
 8041342:	2b00      	cmp	r3, #0
 8041344:	d004      	beq.n	8041350 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8041346:	2303      	movs	r3, #3
 8041348:	e270      	b.n	804182c <HAL_RCC_OscConfig+0x998>
 804134a:	bf00      	nop
 804134c:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8041350:	4ba8      	ldr	r3, [pc, #672]	; (80415f4 <HAL_RCC_OscConfig+0x760>)
 8041352:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8041356:	f003 0302 	and.w	r3, r3, #2
 804135a:	2b00      	cmp	r3, #0
 804135c:	d1e5      	bne.n	804132a <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 804135e:	687b      	ldr	r3, [r7, #4]
 8041360:	681b      	ldr	r3, [r3, #0]
 8041362:	f003 0304 	and.w	r3, r3, #4
 8041366:	2b00      	cmp	r3, #0
 8041368:	f000 812d 	beq.w	80415c6 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 804136c:	2300      	movs	r3, #0
 804136e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8041370:	4ba0      	ldr	r3, [pc, #640]	; (80415f4 <HAL_RCC_OscConfig+0x760>)
 8041372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041374:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8041378:	2b00      	cmp	r3, #0
 804137a:	d10d      	bne.n	8041398 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 804137c:	4b9d      	ldr	r3, [pc, #628]	; (80415f4 <HAL_RCC_OscConfig+0x760>)
 804137e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041380:	4a9c      	ldr	r2, [pc, #624]	; (80415f4 <HAL_RCC_OscConfig+0x760>)
 8041382:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8041386:	6593      	str	r3, [r2, #88]	; 0x58
 8041388:	4b9a      	ldr	r3, [pc, #616]	; (80415f4 <HAL_RCC_OscConfig+0x760>)
 804138a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804138c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8041390:	60bb      	str	r3, [r7, #8]
 8041392:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8041394:	2301      	movs	r3, #1
 8041396:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8041398:	4b97      	ldr	r3, [pc, #604]	; (80415f8 <HAL_RCC_OscConfig+0x764>)
 804139a:	681b      	ldr	r3, [r3, #0]
 804139c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80413a0:	2b00      	cmp	r3, #0
 80413a2:	d11e      	bne.n	80413e2 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80413a4:	4b94      	ldr	r3, [pc, #592]	; (80415f8 <HAL_RCC_OscConfig+0x764>)
 80413a6:	681b      	ldr	r3, [r3, #0]
 80413a8:	4a93      	ldr	r2, [pc, #588]	; (80415f8 <HAL_RCC_OscConfig+0x764>)
 80413aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80413ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80413b0:	f7ff fa40 	bl	8040834 <HAL_GetTick>
 80413b4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80413b6:	e00e      	b.n	80413d6 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80413b8:	f7ff fa3c 	bl	8040834 <HAL_GetTick>
 80413bc:	4602      	mov	r2, r0
 80413be:	693b      	ldr	r3, [r7, #16]
 80413c0:	1ad3      	subs	r3, r2, r3
 80413c2:	2b02      	cmp	r3, #2
 80413c4:	d907      	bls.n	80413d6 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80413c6:	4b8c      	ldr	r3, [pc, #560]	; (80415f8 <HAL_RCC_OscConfig+0x764>)
 80413c8:	681b      	ldr	r3, [r3, #0]
 80413ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80413ce:	2b00      	cmp	r3, #0
 80413d0:	d101      	bne.n	80413d6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80413d2:	2303      	movs	r3, #3
 80413d4:	e22a      	b.n	804182c <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80413d6:	4b88      	ldr	r3, [pc, #544]	; (80415f8 <HAL_RCC_OscConfig+0x764>)
 80413d8:	681b      	ldr	r3, [r3, #0]
 80413da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80413de:	2b00      	cmp	r3, #0
 80413e0:	d0ea      	beq.n	80413b8 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80413e2:	687b      	ldr	r3, [r7, #4]
 80413e4:	689b      	ldr	r3, [r3, #8]
 80413e6:	f003 0301 	and.w	r3, r3, #1
 80413ea:	2b00      	cmp	r3, #0
 80413ec:	d01f      	beq.n	804142e <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80413ee:	687b      	ldr	r3, [r7, #4]
 80413f0:	689b      	ldr	r3, [r3, #8]
 80413f2:	f003 0304 	and.w	r3, r3, #4
 80413f6:	2b00      	cmp	r3, #0
 80413f8:	d010      	beq.n	804141c <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80413fa:	4b7e      	ldr	r3, [pc, #504]	; (80415f4 <HAL_RCC_OscConfig+0x760>)
 80413fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041400:	4a7c      	ldr	r2, [pc, #496]	; (80415f4 <HAL_RCC_OscConfig+0x760>)
 8041402:	f043 0304 	orr.w	r3, r3, #4
 8041406:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 804140a:	4b7a      	ldr	r3, [pc, #488]	; (80415f4 <HAL_RCC_OscConfig+0x760>)
 804140c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041410:	4a78      	ldr	r2, [pc, #480]	; (80415f4 <HAL_RCC_OscConfig+0x760>)
 8041412:	f043 0301 	orr.w	r3, r3, #1
 8041416:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 804141a:	e018      	b.n	804144e <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 804141c:	4b75      	ldr	r3, [pc, #468]	; (80415f4 <HAL_RCC_OscConfig+0x760>)
 804141e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041422:	4a74      	ldr	r2, [pc, #464]	; (80415f4 <HAL_RCC_OscConfig+0x760>)
 8041424:	f043 0301 	orr.w	r3, r3, #1
 8041428:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 804142c:	e00f      	b.n	804144e <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 804142e:	4b71      	ldr	r3, [pc, #452]	; (80415f4 <HAL_RCC_OscConfig+0x760>)
 8041430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041434:	4a6f      	ldr	r2, [pc, #444]	; (80415f4 <HAL_RCC_OscConfig+0x760>)
 8041436:	f023 0301 	bic.w	r3, r3, #1
 804143a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 804143e:	4b6d      	ldr	r3, [pc, #436]	; (80415f4 <HAL_RCC_OscConfig+0x760>)
 8041440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041444:	4a6b      	ldr	r2, [pc, #428]	; (80415f4 <HAL_RCC_OscConfig+0x760>)
 8041446:	f023 0304 	bic.w	r3, r3, #4
 804144a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 804144e:	687b      	ldr	r3, [r7, #4]
 8041450:	689b      	ldr	r3, [r3, #8]
 8041452:	2b00      	cmp	r3, #0
 8041454:	d068      	beq.n	8041528 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041456:	f7ff f9ed 	bl	8040834 <HAL_GetTick>
 804145a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 804145c:	e011      	b.n	8041482 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 804145e:	f7ff f9e9 	bl	8040834 <HAL_GetTick>
 8041462:	4602      	mov	r2, r0
 8041464:	693b      	ldr	r3, [r7, #16]
 8041466:	1ad3      	subs	r3, r2, r3
 8041468:	f241 3288 	movw	r2, #5000	; 0x1388
 804146c:	4293      	cmp	r3, r2
 804146e:	d908      	bls.n	8041482 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8041470:	4b60      	ldr	r3, [pc, #384]	; (80415f4 <HAL_RCC_OscConfig+0x760>)
 8041472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041476:	f003 0302 	and.w	r3, r3, #2
 804147a:	2b00      	cmp	r3, #0
 804147c:	d101      	bne.n	8041482 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 804147e:	2303      	movs	r3, #3
 8041480:	e1d4      	b.n	804182c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8041482:	4b5c      	ldr	r3, [pc, #368]	; (80415f4 <HAL_RCC_OscConfig+0x760>)
 8041484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041488:	f003 0302 	and.w	r3, r3, #2
 804148c:	2b00      	cmp	r3, #0
 804148e:	d0e6      	beq.n	804145e <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8041490:	687b      	ldr	r3, [r7, #4]
 8041492:	689b      	ldr	r3, [r3, #8]
 8041494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8041498:	2b00      	cmp	r3, #0
 804149a:	d022      	beq.n	80414e2 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 804149c:	4b55      	ldr	r3, [pc, #340]	; (80415f4 <HAL_RCC_OscConfig+0x760>)
 804149e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80414a2:	4a54      	ldr	r2, [pc, #336]	; (80415f4 <HAL_RCC_OscConfig+0x760>)
 80414a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80414a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80414ac:	e011      	b.n	80414d2 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80414ae:	f7ff f9c1 	bl	8040834 <HAL_GetTick>
 80414b2:	4602      	mov	r2, r0
 80414b4:	693b      	ldr	r3, [r7, #16]
 80414b6:	1ad3      	subs	r3, r2, r3
 80414b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80414bc:	4293      	cmp	r3, r2
 80414be:	d908      	bls.n	80414d2 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80414c0:	4b4c      	ldr	r3, [pc, #304]	; (80415f4 <HAL_RCC_OscConfig+0x760>)
 80414c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80414c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80414ca:	2b00      	cmp	r3, #0
 80414cc:	d101      	bne.n	80414d2 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 80414ce:	2303      	movs	r3, #3
 80414d0:	e1ac      	b.n	804182c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80414d2:	4b48      	ldr	r3, [pc, #288]	; (80415f4 <HAL_RCC_OscConfig+0x760>)
 80414d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80414d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80414dc:	2b00      	cmp	r3, #0
 80414de:	d0e6      	beq.n	80414ae <HAL_RCC_OscConfig+0x61a>
 80414e0:	e068      	b.n	80415b4 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80414e2:	4b44      	ldr	r3, [pc, #272]	; (80415f4 <HAL_RCC_OscConfig+0x760>)
 80414e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80414e8:	4a42      	ldr	r2, [pc, #264]	; (80415f4 <HAL_RCC_OscConfig+0x760>)
 80414ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80414ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80414f2:	e011      	b.n	8041518 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80414f4:	f7ff f99e 	bl	8040834 <HAL_GetTick>
 80414f8:	4602      	mov	r2, r0
 80414fa:	693b      	ldr	r3, [r7, #16]
 80414fc:	1ad3      	subs	r3, r2, r3
 80414fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8041502:	4293      	cmp	r3, r2
 8041504:	d908      	bls.n	8041518 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8041506:	4b3b      	ldr	r3, [pc, #236]	; (80415f4 <HAL_RCC_OscConfig+0x760>)
 8041508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804150c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8041510:	2b00      	cmp	r3, #0
 8041512:	d001      	beq.n	8041518 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8041514:	2303      	movs	r3, #3
 8041516:	e189      	b.n	804182c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8041518:	4b36      	ldr	r3, [pc, #216]	; (80415f4 <HAL_RCC_OscConfig+0x760>)
 804151a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804151e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8041522:	2b00      	cmp	r3, #0
 8041524:	d1e6      	bne.n	80414f4 <HAL_RCC_OscConfig+0x660>
 8041526:	e045      	b.n	80415b4 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041528:	f7ff f984 	bl	8040834 <HAL_GetTick>
 804152c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 804152e:	e011      	b.n	8041554 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8041530:	f7ff f980 	bl	8040834 <HAL_GetTick>
 8041534:	4602      	mov	r2, r0
 8041536:	693b      	ldr	r3, [r7, #16]
 8041538:	1ad3      	subs	r3, r2, r3
 804153a:	f241 3288 	movw	r2, #5000	; 0x1388
 804153e:	4293      	cmp	r3, r2
 8041540:	d908      	bls.n	8041554 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8041542:	4b2c      	ldr	r3, [pc, #176]	; (80415f4 <HAL_RCC_OscConfig+0x760>)
 8041544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041548:	f003 0302 	and.w	r3, r3, #2
 804154c:	2b00      	cmp	r3, #0
 804154e:	d001      	beq.n	8041554 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8041550:	2303      	movs	r3, #3
 8041552:	e16b      	b.n	804182c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8041554:	4b27      	ldr	r3, [pc, #156]	; (80415f4 <HAL_RCC_OscConfig+0x760>)
 8041556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804155a:	f003 0302 	and.w	r3, r3, #2
 804155e:	2b00      	cmp	r3, #0
 8041560:	d1e6      	bne.n	8041530 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8041562:	4b24      	ldr	r3, [pc, #144]	; (80415f4 <HAL_RCC_OscConfig+0x760>)
 8041564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804156c:	2b00      	cmp	r3, #0
 804156e:	d021      	beq.n	80415b4 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8041570:	4b20      	ldr	r3, [pc, #128]	; (80415f4 <HAL_RCC_OscConfig+0x760>)
 8041572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041576:	4a1f      	ldr	r2, [pc, #124]	; (80415f4 <HAL_RCC_OscConfig+0x760>)
 8041578:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 804157c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8041580:	e011      	b.n	80415a6 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8041582:	f7ff f957 	bl	8040834 <HAL_GetTick>
 8041586:	4602      	mov	r2, r0
 8041588:	693b      	ldr	r3, [r7, #16]
 804158a:	1ad3      	subs	r3, r2, r3
 804158c:	f241 3288 	movw	r2, #5000	; 0x1388
 8041590:	4293      	cmp	r3, r2
 8041592:	d908      	bls.n	80415a6 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8041594:	4b17      	ldr	r3, [pc, #92]	; (80415f4 <HAL_RCC_OscConfig+0x760>)
 8041596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804159a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 804159e:	2b00      	cmp	r3, #0
 80415a0:	d001      	beq.n	80415a6 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 80415a2:	2303      	movs	r3, #3
 80415a4:	e142      	b.n	804182c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80415a6:	4b13      	ldr	r3, [pc, #76]	; (80415f4 <HAL_RCC_OscConfig+0x760>)
 80415a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80415ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80415b0:	2b00      	cmp	r3, #0
 80415b2:	d1e6      	bne.n	8041582 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80415b4:	7ffb      	ldrb	r3, [r7, #31]
 80415b6:	2b01      	cmp	r3, #1
 80415b8:	d105      	bne.n	80415c6 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80415ba:	4b0e      	ldr	r3, [pc, #56]	; (80415f4 <HAL_RCC_OscConfig+0x760>)
 80415bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80415be:	4a0d      	ldr	r2, [pc, #52]	; (80415f4 <HAL_RCC_OscConfig+0x760>)
 80415c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80415c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80415c6:	687b      	ldr	r3, [r7, #4]
 80415c8:	681b      	ldr	r3, [r3, #0]
 80415ca:	f003 0320 	and.w	r3, r3, #32
 80415ce:	2b00      	cmp	r3, #0
 80415d0:	d04f      	beq.n	8041672 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80415d2:	687b      	ldr	r3, [r7, #4]
 80415d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80415d6:	2b00      	cmp	r3, #0
 80415d8:	d028      	beq.n	804162c <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80415da:	4b06      	ldr	r3, [pc, #24]	; (80415f4 <HAL_RCC_OscConfig+0x760>)
 80415dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80415e0:	4a04      	ldr	r2, [pc, #16]	; (80415f4 <HAL_RCC_OscConfig+0x760>)
 80415e2:	f043 0301 	orr.w	r3, r3, #1
 80415e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80415ea:	f7ff f923 	bl	8040834 <HAL_GetTick>
 80415ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80415f0:	e014      	b.n	804161c <HAL_RCC_OscConfig+0x788>
 80415f2:	bf00      	nop
 80415f4:	40021000 	.word	0x40021000
 80415f8:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80415fc:	f7ff f91a 	bl	8040834 <HAL_GetTick>
 8041600:	4602      	mov	r2, r0
 8041602:	693b      	ldr	r3, [r7, #16]
 8041604:	1ad3      	subs	r3, r2, r3
 8041606:	2b02      	cmp	r3, #2
 8041608:	d908      	bls.n	804161c <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 804160a:	4b8a      	ldr	r3, [pc, #552]	; (8041834 <HAL_RCC_OscConfig+0x9a0>)
 804160c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8041610:	f003 0302 	and.w	r3, r3, #2
 8041614:	2b00      	cmp	r3, #0
 8041616:	d101      	bne.n	804161c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8041618:	2303      	movs	r3, #3
 804161a:	e107      	b.n	804182c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 804161c:	4b85      	ldr	r3, [pc, #532]	; (8041834 <HAL_RCC_OscConfig+0x9a0>)
 804161e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8041622:	f003 0302 	and.w	r3, r3, #2
 8041626:	2b00      	cmp	r3, #0
 8041628:	d0e8      	beq.n	80415fc <HAL_RCC_OscConfig+0x768>
 804162a:	e022      	b.n	8041672 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 804162c:	4b81      	ldr	r3, [pc, #516]	; (8041834 <HAL_RCC_OscConfig+0x9a0>)
 804162e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8041632:	4a80      	ldr	r2, [pc, #512]	; (8041834 <HAL_RCC_OscConfig+0x9a0>)
 8041634:	f023 0301 	bic.w	r3, r3, #1
 8041638:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 804163c:	f7ff f8fa 	bl	8040834 <HAL_GetTick>
 8041640:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8041642:	e00f      	b.n	8041664 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8041644:	f7ff f8f6 	bl	8040834 <HAL_GetTick>
 8041648:	4602      	mov	r2, r0
 804164a:	693b      	ldr	r3, [r7, #16]
 804164c:	1ad3      	subs	r3, r2, r3
 804164e:	2b02      	cmp	r3, #2
 8041650:	d908      	bls.n	8041664 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8041652:	4b78      	ldr	r3, [pc, #480]	; (8041834 <HAL_RCC_OscConfig+0x9a0>)
 8041654:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8041658:	f003 0302 	and.w	r3, r3, #2
 804165c:	2b00      	cmp	r3, #0
 804165e:	d001      	beq.n	8041664 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8041660:	2303      	movs	r3, #3
 8041662:	e0e3      	b.n	804182c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8041664:	4b73      	ldr	r3, [pc, #460]	; (8041834 <HAL_RCC_OscConfig+0x9a0>)
 8041666:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 804166a:	f003 0302 	and.w	r3, r3, #2
 804166e:	2b00      	cmp	r3, #0
 8041670:	d1e8      	bne.n	8041644 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8041672:	687b      	ldr	r3, [r7, #4]
 8041674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8041676:	2b00      	cmp	r3, #0
 8041678:	f000 80d7 	beq.w	804182a <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 804167c:	4b6d      	ldr	r3, [pc, #436]	; (8041834 <HAL_RCC_OscConfig+0x9a0>)
 804167e:	689b      	ldr	r3, [r3, #8]
 8041680:	f003 030c 	and.w	r3, r3, #12
 8041684:	2b0c      	cmp	r3, #12
 8041686:	f000 8091 	beq.w	80417ac <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 804168a:	687b      	ldr	r3, [r7, #4]
 804168c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804168e:	2b02      	cmp	r3, #2
 8041690:	d166      	bne.n	8041760 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8041692:	4b68      	ldr	r3, [pc, #416]	; (8041834 <HAL_RCC_OscConfig+0x9a0>)
 8041694:	681b      	ldr	r3, [r3, #0]
 8041696:	4a67      	ldr	r2, [pc, #412]	; (8041834 <HAL_RCC_OscConfig+0x9a0>)
 8041698:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 804169c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 804169e:	f7ff f8c9 	bl	8040834 <HAL_GetTick>
 80416a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80416a4:	e00e      	b.n	80416c4 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80416a6:	f7ff f8c5 	bl	8040834 <HAL_GetTick>
 80416aa:	4602      	mov	r2, r0
 80416ac:	693b      	ldr	r3, [r7, #16]
 80416ae:	1ad3      	subs	r3, r2, r3
 80416b0:	2b02      	cmp	r3, #2
 80416b2:	d907      	bls.n	80416c4 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80416b4:	4b5f      	ldr	r3, [pc, #380]	; (8041834 <HAL_RCC_OscConfig+0x9a0>)
 80416b6:	681b      	ldr	r3, [r3, #0]
 80416b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80416bc:	2b00      	cmp	r3, #0
 80416be:	d001      	beq.n	80416c4 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 80416c0:	2303      	movs	r3, #3
 80416c2:	e0b3      	b.n	804182c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80416c4:	4b5b      	ldr	r3, [pc, #364]	; (8041834 <HAL_RCC_OscConfig+0x9a0>)
 80416c6:	681b      	ldr	r3, [r3, #0]
 80416c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80416cc:	2b00      	cmp	r3, #0
 80416ce:	d1ea      	bne.n	80416a6 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80416d0:	4b58      	ldr	r3, [pc, #352]	; (8041834 <HAL_RCC_OscConfig+0x9a0>)
 80416d2:	68da      	ldr	r2, [r3, #12]
 80416d4:	4b58      	ldr	r3, [pc, #352]	; (8041838 <HAL_RCC_OscConfig+0x9a4>)
 80416d6:	4013      	ands	r3, r2
 80416d8:	687a      	ldr	r2, [r7, #4]
 80416da:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80416dc:	687a      	ldr	r2, [r7, #4]
 80416de:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80416e0:	3a01      	subs	r2, #1
 80416e2:	0112      	lsls	r2, r2, #4
 80416e4:	4311      	orrs	r1, r2
 80416e6:	687a      	ldr	r2, [r7, #4]
 80416e8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80416ea:	0212      	lsls	r2, r2, #8
 80416ec:	4311      	orrs	r1, r2
 80416ee:	687a      	ldr	r2, [r7, #4]
 80416f0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80416f2:	0852      	lsrs	r2, r2, #1
 80416f4:	3a01      	subs	r2, #1
 80416f6:	0552      	lsls	r2, r2, #21
 80416f8:	4311      	orrs	r1, r2
 80416fa:	687a      	ldr	r2, [r7, #4]
 80416fc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80416fe:	0852      	lsrs	r2, r2, #1
 8041700:	3a01      	subs	r2, #1
 8041702:	0652      	lsls	r2, r2, #25
 8041704:	4311      	orrs	r1, r2
 8041706:	687a      	ldr	r2, [r7, #4]
 8041708:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 804170a:	06d2      	lsls	r2, r2, #27
 804170c:	430a      	orrs	r2, r1
 804170e:	4949      	ldr	r1, [pc, #292]	; (8041834 <HAL_RCC_OscConfig+0x9a0>)
 8041710:	4313      	orrs	r3, r2
 8041712:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8041714:	4b47      	ldr	r3, [pc, #284]	; (8041834 <HAL_RCC_OscConfig+0x9a0>)
 8041716:	681b      	ldr	r3, [r3, #0]
 8041718:	4a46      	ldr	r2, [pc, #280]	; (8041834 <HAL_RCC_OscConfig+0x9a0>)
 804171a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 804171e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8041720:	4b44      	ldr	r3, [pc, #272]	; (8041834 <HAL_RCC_OscConfig+0x9a0>)
 8041722:	68db      	ldr	r3, [r3, #12]
 8041724:	4a43      	ldr	r2, [pc, #268]	; (8041834 <HAL_RCC_OscConfig+0x9a0>)
 8041726:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 804172a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 804172c:	f7ff f882 	bl	8040834 <HAL_GetTick>
 8041730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8041732:	e00e      	b.n	8041752 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8041734:	f7ff f87e 	bl	8040834 <HAL_GetTick>
 8041738:	4602      	mov	r2, r0
 804173a:	693b      	ldr	r3, [r7, #16]
 804173c:	1ad3      	subs	r3, r2, r3
 804173e:	2b02      	cmp	r3, #2
 8041740:	d907      	bls.n	8041752 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8041742:	4b3c      	ldr	r3, [pc, #240]	; (8041834 <HAL_RCC_OscConfig+0x9a0>)
 8041744:	681b      	ldr	r3, [r3, #0]
 8041746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 804174a:	2b00      	cmp	r3, #0
 804174c:	d101      	bne.n	8041752 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 804174e:	2303      	movs	r3, #3
 8041750:	e06c      	b.n	804182c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8041752:	4b38      	ldr	r3, [pc, #224]	; (8041834 <HAL_RCC_OscConfig+0x9a0>)
 8041754:	681b      	ldr	r3, [r3, #0]
 8041756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 804175a:	2b00      	cmp	r3, #0
 804175c:	d0ea      	beq.n	8041734 <HAL_RCC_OscConfig+0x8a0>
 804175e:	e064      	b.n	804182a <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8041760:	4b34      	ldr	r3, [pc, #208]	; (8041834 <HAL_RCC_OscConfig+0x9a0>)
 8041762:	681b      	ldr	r3, [r3, #0]
 8041764:	4a33      	ldr	r2, [pc, #204]	; (8041834 <HAL_RCC_OscConfig+0x9a0>)
 8041766:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 804176a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 804176c:	f7ff f862 	bl	8040834 <HAL_GetTick>
 8041770:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8041772:	e00e      	b.n	8041792 <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8041774:	f7ff f85e 	bl	8040834 <HAL_GetTick>
 8041778:	4602      	mov	r2, r0
 804177a:	693b      	ldr	r3, [r7, #16]
 804177c:	1ad3      	subs	r3, r2, r3
 804177e:	2b02      	cmp	r3, #2
 8041780:	d907      	bls.n	8041792 <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8041782:	4b2c      	ldr	r3, [pc, #176]	; (8041834 <HAL_RCC_OscConfig+0x9a0>)
 8041784:	681b      	ldr	r3, [r3, #0]
 8041786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 804178a:	2b00      	cmp	r3, #0
 804178c:	d001      	beq.n	8041792 <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 804178e:	2303      	movs	r3, #3
 8041790:	e04c      	b.n	804182c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8041792:	4b28      	ldr	r3, [pc, #160]	; (8041834 <HAL_RCC_OscConfig+0x9a0>)
 8041794:	681b      	ldr	r3, [r3, #0]
 8041796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 804179a:	2b00      	cmp	r3, #0
 804179c:	d1ea      	bne.n	8041774 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 804179e:	4b25      	ldr	r3, [pc, #148]	; (8041834 <HAL_RCC_OscConfig+0x9a0>)
 80417a0:	68da      	ldr	r2, [r3, #12]
 80417a2:	4924      	ldr	r1, [pc, #144]	; (8041834 <HAL_RCC_OscConfig+0x9a0>)
 80417a4:	4b25      	ldr	r3, [pc, #148]	; (804183c <HAL_RCC_OscConfig+0x9a8>)
 80417a6:	4013      	ands	r3, r2
 80417a8:	60cb      	str	r3, [r1, #12]
 80417aa:	e03e      	b.n	804182a <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 80417ac:	687b      	ldr	r3, [r7, #4]
 80417ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80417b0:	2b01      	cmp	r3, #1
 80417b2:	d101      	bne.n	80417b8 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 80417b4:	2301      	movs	r3, #1
 80417b6:	e039      	b.n	804182c <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80417b8:	4b1e      	ldr	r3, [pc, #120]	; (8041834 <HAL_RCC_OscConfig+0x9a0>)
 80417ba:	68db      	ldr	r3, [r3, #12]
 80417bc:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80417be:	697b      	ldr	r3, [r7, #20]
 80417c0:	f003 0203 	and.w	r2, r3, #3
 80417c4:	687b      	ldr	r3, [r7, #4]
 80417c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80417c8:	429a      	cmp	r2, r3
 80417ca:	d12c      	bne.n	8041826 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80417cc:	697b      	ldr	r3, [r7, #20]
 80417ce:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80417d2:	687b      	ldr	r3, [r7, #4]
 80417d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80417d6:	3b01      	subs	r3, #1
 80417d8:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80417da:	429a      	cmp	r2, r3
 80417dc:	d123      	bne.n	8041826 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80417de:	697b      	ldr	r3, [r7, #20]
 80417e0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80417e4:	687b      	ldr	r3, [r7, #4]
 80417e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80417e8:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80417ea:	429a      	cmp	r2, r3
 80417ec:	d11b      	bne.n	8041826 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80417ee:	697b      	ldr	r3, [r7, #20]
 80417f0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80417f4:	687b      	ldr	r3, [r7, #4]
 80417f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80417f8:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80417fa:	429a      	cmp	r2, r3
 80417fc:	d113      	bne.n	8041826 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80417fe:	697b      	ldr	r3, [r7, #20]
 8041800:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8041804:	687b      	ldr	r3, [r7, #4]
 8041806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041808:	085b      	lsrs	r3, r3, #1
 804180a:	3b01      	subs	r3, #1
 804180c:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 804180e:	429a      	cmp	r2, r3
 8041810:	d109      	bne.n	8041826 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8041812:	697b      	ldr	r3, [r7, #20]
 8041814:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8041818:	687b      	ldr	r3, [r7, #4]
 804181a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804181c:	085b      	lsrs	r3, r3, #1
 804181e:	3b01      	subs	r3, #1
 8041820:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8041822:	429a      	cmp	r2, r3
 8041824:	d001      	beq.n	804182a <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8041826:	2301      	movs	r3, #1
 8041828:	e000      	b.n	804182c <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 804182a:	2300      	movs	r3, #0
}
 804182c:	4618      	mov	r0, r3
 804182e:	3720      	adds	r7, #32
 8041830:	46bd      	mov	sp, r7
 8041832:	bd80      	pop	{r7, pc}
 8041834:	40021000 	.word	0x40021000
 8041838:	019f800c 	.word	0x019f800c
 804183c:	feeefffc 	.word	0xfeeefffc

08041840 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8041840:	b580      	push	{r7, lr}
 8041842:	b086      	sub	sp, #24
 8041844:	af00      	add	r7, sp, #0
 8041846:	6078      	str	r0, [r7, #4]
 8041848:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 804184a:	2300      	movs	r3, #0
 804184c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 804184e:	687b      	ldr	r3, [r7, #4]
 8041850:	2b00      	cmp	r3, #0
 8041852:	d101      	bne.n	8041858 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8041854:	2301      	movs	r3, #1
 8041856:	e11c      	b.n	8041a92 <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8041858:	4b90      	ldr	r3, [pc, #576]	; (8041a9c <HAL_RCC_ClockConfig+0x25c>)
 804185a:	681b      	ldr	r3, [r3, #0]
 804185c:	f003 030f 	and.w	r3, r3, #15
 8041860:	683a      	ldr	r2, [r7, #0]
 8041862:	429a      	cmp	r2, r3
 8041864:	d910      	bls.n	8041888 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8041866:	4b8d      	ldr	r3, [pc, #564]	; (8041a9c <HAL_RCC_ClockConfig+0x25c>)
 8041868:	681b      	ldr	r3, [r3, #0]
 804186a:	f023 020f 	bic.w	r2, r3, #15
 804186e:	498b      	ldr	r1, [pc, #556]	; (8041a9c <HAL_RCC_ClockConfig+0x25c>)
 8041870:	683b      	ldr	r3, [r7, #0]
 8041872:	4313      	orrs	r3, r2
 8041874:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8041876:	4b89      	ldr	r3, [pc, #548]	; (8041a9c <HAL_RCC_ClockConfig+0x25c>)
 8041878:	681b      	ldr	r3, [r3, #0]
 804187a:	f003 030f 	and.w	r3, r3, #15
 804187e:	683a      	ldr	r2, [r7, #0]
 8041880:	429a      	cmp	r2, r3
 8041882:	d001      	beq.n	8041888 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8041884:	2301      	movs	r3, #1
 8041886:	e104      	b.n	8041a92 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8041888:	687b      	ldr	r3, [r7, #4]
 804188a:	681b      	ldr	r3, [r3, #0]
 804188c:	f003 0302 	and.w	r3, r3, #2
 8041890:	2b00      	cmp	r3, #0
 8041892:	d010      	beq.n	80418b6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8041894:	687b      	ldr	r3, [r7, #4]
 8041896:	689a      	ldr	r2, [r3, #8]
 8041898:	4b81      	ldr	r3, [pc, #516]	; (8041aa0 <HAL_RCC_ClockConfig+0x260>)
 804189a:	689b      	ldr	r3, [r3, #8]
 804189c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80418a0:	429a      	cmp	r2, r3
 80418a2:	d908      	bls.n	80418b6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80418a4:	4b7e      	ldr	r3, [pc, #504]	; (8041aa0 <HAL_RCC_ClockConfig+0x260>)
 80418a6:	689b      	ldr	r3, [r3, #8]
 80418a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80418ac:	687b      	ldr	r3, [r7, #4]
 80418ae:	689b      	ldr	r3, [r3, #8]
 80418b0:	497b      	ldr	r1, [pc, #492]	; (8041aa0 <HAL_RCC_ClockConfig+0x260>)
 80418b2:	4313      	orrs	r3, r2
 80418b4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80418b6:	687b      	ldr	r3, [r7, #4]
 80418b8:	681b      	ldr	r3, [r3, #0]
 80418ba:	f003 0301 	and.w	r3, r3, #1
 80418be:	2b00      	cmp	r3, #0
 80418c0:	f000 8085 	beq.w	80419ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80418c4:	687b      	ldr	r3, [r7, #4]
 80418c6:	685b      	ldr	r3, [r3, #4]
 80418c8:	2b03      	cmp	r3, #3
 80418ca:	d11f      	bne.n	804190c <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80418cc:	4b74      	ldr	r3, [pc, #464]	; (8041aa0 <HAL_RCC_ClockConfig+0x260>)
 80418ce:	681b      	ldr	r3, [r3, #0]
 80418d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80418d4:	2b00      	cmp	r3, #0
 80418d6:	d101      	bne.n	80418dc <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 80418d8:	2301      	movs	r3, #1
 80418da:	e0da      	b.n	8041a92 <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80418dc:	f000 f9fc 	bl	8041cd8 <RCC_GetSysClockFreqFromPLLSource>
 80418e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 80418e2:	693b      	ldr	r3, [r7, #16]
 80418e4:	4a6f      	ldr	r2, [pc, #444]	; (8041aa4 <HAL_RCC_ClockConfig+0x264>)
 80418e6:	4293      	cmp	r3, r2
 80418e8:	d947      	bls.n	804197a <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80418ea:	4b6d      	ldr	r3, [pc, #436]	; (8041aa0 <HAL_RCC_ClockConfig+0x260>)
 80418ec:	689b      	ldr	r3, [r3, #8]
 80418ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80418f2:	2b00      	cmp	r3, #0
 80418f4:	d141      	bne.n	804197a <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80418f6:	4b6a      	ldr	r3, [pc, #424]	; (8041aa0 <HAL_RCC_ClockConfig+0x260>)
 80418f8:	689b      	ldr	r3, [r3, #8]
 80418fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80418fe:	4a68      	ldr	r2, [pc, #416]	; (8041aa0 <HAL_RCC_ClockConfig+0x260>)
 8041900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8041904:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8041906:	2380      	movs	r3, #128	; 0x80
 8041908:	617b      	str	r3, [r7, #20]
 804190a:	e036      	b.n	804197a <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 804190c:	687b      	ldr	r3, [r7, #4]
 804190e:	685b      	ldr	r3, [r3, #4]
 8041910:	2b02      	cmp	r3, #2
 8041912:	d107      	bne.n	8041924 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8041914:	4b62      	ldr	r3, [pc, #392]	; (8041aa0 <HAL_RCC_ClockConfig+0x260>)
 8041916:	681b      	ldr	r3, [r3, #0]
 8041918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 804191c:	2b00      	cmp	r3, #0
 804191e:	d115      	bne.n	804194c <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8041920:	2301      	movs	r3, #1
 8041922:	e0b6      	b.n	8041a92 <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8041924:	687b      	ldr	r3, [r7, #4]
 8041926:	685b      	ldr	r3, [r3, #4]
 8041928:	2b00      	cmp	r3, #0
 804192a:	d107      	bne.n	804193c <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 804192c:	4b5c      	ldr	r3, [pc, #368]	; (8041aa0 <HAL_RCC_ClockConfig+0x260>)
 804192e:	681b      	ldr	r3, [r3, #0]
 8041930:	f003 0302 	and.w	r3, r3, #2
 8041934:	2b00      	cmp	r3, #0
 8041936:	d109      	bne.n	804194c <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8041938:	2301      	movs	r3, #1
 804193a:	e0aa      	b.n	8041a92 <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 804193c:	4b58      	ldr	r3, [pc, #352]	; (8041aa0 <HAL_RCC_ClockConfig+0x260>)
 804193e:	681b      	ldr	r3, [r3, #0]
 8041940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8041944:	2b00      	cmp	r3, #0
 8041946:	d101      	bne.n	804194c <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8041948:	2301      	movs	r3, #1
 804194a:	e0a2      	b.n	8041a92 <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 804194c:	f000 f8b0 	bl	8041ab0 <HAL_RCC_GetSysClockFreq>
 8041950:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8041952:	693b      	ldr	r3, [r7, #16]
 8041954:	4a53      	ldr	r2, [pc, #332]	; (8041aa4 <HAL_RCC_ClockConfig+0x264>)
 8041956:	4293      	cmp	r3, r2
 8041958:	d90f      	bls.n	804197a <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 804195a:	4b51      	ldr	r3, [pc, #324]	; (8041aa0 <HAL_RCC_ClockConfig+0x260>)
 804195c:	689b      	ldr	r3, [r3, #8]
 804195e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8041962:	2b00      	cmp	r3, #0
 8041964:	d109      	bne.n	804197a <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8041966:	4b4e      	ldr	r3, [pc, #312]	; (8041aa0 <HAL_RCC_ClockConfig+0x260>)
 8041968:	689b      	ldr	r3, [r3, #8]
 804196a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 804196e:	4a4c      	ldr	r2, [pc, #304]	; (8041aa0 <HAL_RCC_ClockConfig+0x260>)
 8041970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8041974:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8041976:	2380      	movs	r3, #128	; 0x80
 8041978:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 804197a:	4b49      	ldr	r3, [pc, #292]	; (8041aa0 <HAL_RCC_ClockConfig+0x260>)
 804197c:	689b      	ldr	r3, [r3, #8]
 804197e:	f023 0203 	bic.w	r2, r3, #3
 8041982:	687b      	ldr	r3, [r7, #4]
 8041984:	685b      	ldr	r3, [r3, #4]
 8041986:	4946      	ldr	r1, [pc, #280]	; (8041aa0 <HAL_RCC_ClockConfig+0x260>)
 8041988:	4313      	orrs	r3, r2
 804198a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 804198c:	f7fe ff52 	bl	8040834 <HAL_GetTick>
 8041990:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8041992:	e013      	b.n	80419bc <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8041994:	f7fe ff4e 	bl	8040834 <HAL_GetTick>
 8041998:	4602      	mov	r2, r0
 804199a:	68fb      	ldr	r3, [r7, #12]
 804199c:	1ad3      	subs	r3, r2, r3
 804199e:	f241 3288 	movw	r2, #5000	; 0x1388
 80419a2:	4293      	cmp	r3, r2
 80419a4:	d90a      	bls.n	80419bc <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80419a6:	4b3e      	ldr	r3, [pc, #248]	; (8041aa0 <HAL_RCC_ClockConfig+0x260>)
 80419a8:	689b      	ldr	r3, [r3, #8]
 80419aa:	f003 020c 	and.w	r2, r3, #12
 80419ae:	687b      	ldr	r3, [r7, #4]
 80419b0:	685b      	ldr	r3, [r3, #4]
 80419b2:	009b      	lsls	r3, r3, #2
 80419b4:	429a      	cmp	r2, r3
 80419b6:	d001      	beq.n	80419bc <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 80419b8:	2303      	movs	r3, #3
 80419ba:	e06a      	b.n	8041a92 <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80419bc:	4b38      	ldr	r3, [pc, #224]	; (8041aa0 <HAL_RCC_ClockConfig+0x260>)
 80419be:	689b      	ldr	r3, [r3, #8]
 80419c0:	f003 020c 	and.w	r2, r3, #12
 80419c4:	687b      	ldr	r3, [r7, #4]
 80419c6:	685b      	ldr	r3, [r3, #4]
 80419c8:	009b      	lsls	r3, r3, #2
 80419ca:	429a      	cmp	r2, r3
 80419cc:	d1e2      	bne.n	8041994 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80419ce:	697b      	ldr	r3, [r7, #20]
 80419d0:	2b80      	cmp	r3, #128	; 0x80
 80419d2:	d105      	bne.n	80419e0 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80419d4:	4b32      	ldr	r3, [pc, #200]	; (8041aa0 <HAL_RCC_ClockConfig+0x260>)
 80419d6:	689b      	ldr	r3, [r3, #8]
 80419d8:	4a31      	ldr	r2, [pc, #196]	; (8041aa0 <HAL_RCC_ClockConfig+0x260>)
 80419da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80419de:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80419e0:	687b      	ldr	r3, [r7, #4]
 80419e2:	681b      	ldr	r3, [r3, #0]
 80419e4:	f003 0302 	and.w	r3, r3, #2
 80419e8:	2b00      	cmp	r3, #0
 80419ea:	d010      	beq.n	8041a0e <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80419ec:	687b      	ldr	r3, [r7, #4]
 80419ee:	689a      	ldr	r2, [r3, #8]
 80419f0:	4b2b      	ldr	r3, [pc, #172]	; (8041aa0 <HAL_RCC_ClockConfig+0x260>)
 80419f2:	689b      	ldr	r3, [r3, #8]
 80419f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80419f8:	429a      	cmp	r2, r3
 80419fa:	d208      	bcs.n	8041a0e <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80419fc:	4b28      	ldr	r3, [pc, #160]	; (8041aa0 <HAL_RCC_ClockConfig+0x260>)
 80419fe:	689b      	ldr	r3, [r3, #8]
 8041a00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8041a04:	687b      	ldr	r3, [r7, #4]
 8041a06:	689b      	ldr	r3, [r3, #8]
 8041a08:	4925      	ldr	r1, [pc, #148]	; (8041aa0 <HAL_RCC_ClockConfig+0x260>)
 8041a0a:	4313      	orrs	r3, r2
 8041a0c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8041a0e:	4b23      	ldr	r3, [pc, #140]	; (8041a9c <HAL_RCC_ClockConfig+0x25c>)
 8041a10:	681b      	ldr	r3, [r3, #0]
 8041a12:	f003 030f 	and.w	r3, r3, #15
 8041a16:	683a      	ldr	r2, [r7, #0]
 8041a18:	429a      	cmp	r2, r3
 8041a1a:	d210      	bcs.n	8041a3e <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8041a1c:	4b1f      	ldr	r3, [pc, #124]	; (8041a9c <HAL_RCC_ClockConfig+0x25c>)
 8041a1e:	681b      	ldr	r3, [r3, #0]
 8041a20:	f023 020f 	bic.w	r2, r3, #15
 8041a24:	491d      	ldr	r1, [pc, #116]	; (8041a9c <HAL_RCC_ClockConfig+0x25c>)
 8041a26:	683b      	ldr	r3, [r7, #0]
 8041a28:	4313      	orrs	r3, r2
 8041a2a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8041a2c:	4b1b      	ldr	r3, [pc, #108]	; (8041a9c <HAL_RCC_ClockConfig+0x25c>)
 8041a2e:	681b      	ldr	r3, [r3, #0]
 8041a30:	f003 030f 	and.w	r3, r3, #15
 8041a34:	683a      	ldr	r2, [r7, #0]
 8041a36:	429a      	cmp	r2, r3
 8041a38:	d001      	beq.n	8041a3e <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8041a3a:	2301      	movs	r3, #1
 8041a3c:	e029      	b.n	8041a92 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8041a3e:	687b      	ldr	r3, [r7, #4]
 8041a40:	681b      	ldr	r3, [r3, #0]
 8041a42:	f003 0304 	and.w	r3, r3, #4
 8041a46:	2b00      	cmp	r3, #0
 8041a48:	d008      	beq.n	8041a5c <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8041a4a:	4b15      	ldr	r3, [pc, #84]	; (8041aa0 <HAL_RCC_ClockConfig+0x260>)
 8041a4c:	689b      	ldr	r3, [r3, #8]
 8041a4e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8041a52:	687b      	ldr	r3, [r7, #4]
 8041a54:	68db      	ldr	r3, [r3, #12]
 8041a56:	4912      	ldr	r1, [pc, #72]	; (8041aa0 <HAL_RCC_ClockConfig+0x260>)
 8041a58:	4313      	orrs	r3, r2
 8041a5a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8041a5c:	687b      	ldr	r3, [r7, #4]
 8041a5e:	681b      	ldr	r3, [r3, #0]
 8041a60:	f003 0308 	and.w	r3, r3, #8
 8041a64:	2b00      	cmp	r3, #0
 8041a66:	d009      	beq.n	8041a7c <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8041a68:	4b0d      	ldr	r3, [pc, #52]	; (8041aa0 <HAL_RCC_ClockConfig+0x260>)
 8041a6a:	689b      	ldr	r3, [r3, #8]
 8041a6c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8041a70:	687b      	ldr	r3, [r7, #4]
 8041a72:	691b      	ldr	r3, [r3, #16]
 8041a74:	00db      	lsls	r3, r3, #3
 8041a76:	490a      	ldr	r1, [pc, #40]	; (8041aa0 <HAL_RCC_ClockConfig+0x260>)
 8041a78:	4313      	orrs	r3, r2
 8041a7a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8041a7c:	f000 f8b4 	bl	8041be8 <HAL_RCC_GetHCLKFreq>
 8041a80:	4603      	mov	r3, r0
 8041a82:	4a09      	ldr	r2, [pc, #36]	; (8041aa8 <HAL_RCC_ClockConfig+0x268>)
 8041a84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8041a86:	4b09      	ldr	r3, [pc, #36]	; (8041aac <HAL_RCC_ClockConfig+0x26c>)
 8041a88:	681b      	ldr	r3, [r3, #0]
 8041a8a:	4618      	mov	r0, r3
 8041a8c:	f7fe fe82 	bl	8040794 <HAL_InitTick>
 8041a90:	4603      	mov	r3, r0
}
 8041a92:	4618      	mov	r0, r3
 8041a94:	3718      	adds	r7, #24
 8041a96:	46bd      	mov	sp, r7
 8041a98:	bd80      	pop	{r7, pc}
 8041a9a:	bf00      	nop
 8041a9c:	40022000 	.word	0x40022000
 8041aa0:	40021000 	.word	0x40021000
 8041aa4:	04c4b400 	.word	0x04c4b400
 8041aa8:	20018060 	.word	0x20018060
 8041aac:	20018064 	.word	0x20018064

08041ab0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8041ab0:	b480      	push	{r7}
 8041ab2:	b089      	sub	sp, #36	; 0x24
 8041ab4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8041ab6:	2300      	movs	r3, #0
 8041ab8:	61fb      	str	r3, [r7, #28]
 8041aba:	2300      	movs	r3, #0
 8041abc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8041abe:	4b47      	ldr	r3, [pc, #284]	; (8041bdc <HAL_RCC_GetSysClockFreq+0x12c>)
 8041ac0:	689b      	ldr	r3, [r3, #8]
 8041ac2:	f003 030c 	and.w	r3, r3, #12
 8041ac6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8041ac8:	4b44      	ldr	r3, [pc, #272]	; (8041bdc <HAL_RCC_GetSysClockFreq+0x12c>)
 8041aca:	68db      	ldr	r3, [r3, #12]
 8041acc:	f003 0303 	and.w	r3, r3, #3
 8041ad0:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8041ad2:	693b      	ldr	r3, [r7, #16]
 8041ad4:	2b00      	cmp	r3, #0
 8041ad6:	d005      	beq.n	8041ae4 <HAL_RCC_GetSysClockFreq+0x34>
 8041ad8:	693b      	ldr	r3, [r7, #16]
 8041ada:	2b0c      	cmp	r3, #12
 8041adc:	d121      	bne.n	8041b22 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8041ade:	68fb      	ldr	r3, [r7, #12]
 8041ae0:	2b01      	cmp	r3, #1
 8041ae2:	d11e      	bne.n	8041b22 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8041ae4:	4b3d      	ldr	r3, [pc, #244]	; (8041bdc <HAL_RCC_GetSysClockFreq+0x12c>)
 8041ae6:	681b      	ldr	r3, [r3, #0]
 8041ae8:	f003 0308 	and.w	r3, r3, #8
 8041aec:	2b00      	cmp	r3, #0
 8041aee:	d107      	bne.n	8041b00 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8041af0:	4b3a      	ldr	r3, [pc, #232]	; (8041bdc <HAL_RCC_GetSysClockFreq+0x12c>)
 8041af2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8041af6:	0a1b      	lsrs	r3, r3, #8
 8041af8:	f003 030f 	and.w	r3, r3, #15
 8041afc:	61fb      	str	r3, [r7, #28]
 8041afe:	e005      	b.n	8041b0c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8041b00:	4b36      	ldr	r3, [pc, #216]	; (8041bdc <HAL_RCC_GetSysClockFreq+0x12c>)
 8041b02:	681b      	ldr	r3, [r3, #0]
 8041b04:	091b      	lsrs	r3, r3, #4
 8041b06:	f003 030f 	and.w	r3, r3, #15
 8041b0a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8041b0c:	4a34      	ldr	r2, [pc, #208]	; (8041be0 <HAL_RCC_GetSysClockFreq+0x130>)
 8041b0e:	69fb      	ldr	r3, [r7, #28]
 8041b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8041b14:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8041b16:	693b      	ldr	r3, [r7, #16]
 8041b18:	2b00      	cmp	r3, #0
 8041b1a:	d10d      	bne.n	8041b38 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8041b1c:	69fb      	ldr	r3, [r7, #28]
 8041b1e:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8041b20:	e00a      	b.n	8041b38 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8041b22:	693b      	ldr	r3, [r7, #16]
 8041b24:	2b04      	cmp	r3, #4
 8041b26:	d102      	bne.n	8041b2e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8041b28:	4b2e      	ldr	r3, [pc, #184]	; (8041be4 <HAL_RCC_GetSysClockFreq+0x134>)
 8041b2a:	61bb      	str	r3, [r7, #24]
 8041b2c:	e004      	b.n	8041b38 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8041b2e:	693b      	ldr	r3, [r7, #16]
 8041b30:	2b08      	cmp	r3, #8
 8041b32:	d101      	bne.n	8041b38 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8041b34:	4b2b      	ldr	r3, [pc, #172]	; (8041be4 <HAL_RCC_GetSysClockFreq+0x134>)
 8041b36:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8041b38:	693b      	ldr	r3, [r7, #16]
 8041b3a:	2b0c      	cmp	r3, #12
 8041b3c:	d146      	bne.n	8041bcc <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8041b3e:	4b27      	ldr	r3, [pc, #156]	; (8041bdc <HAL_RCC_GetSysClockFreq+0x12c>)
 8041b40:	68db      	ldr	r3, [r3, #12]
 8041b42:	f003 0303 	and.w	r3, r3, #3
 8041b46:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8041b48:	4b24      	ldr	r3, [pc, #144]	; (8041bdc <HAL_RCC_GetSysClockFreq+0x12c>)
 8041b4a:	68db      	ldr	r3, [r3, #12]
 8041b4c:	091b      	lsrs	r3, r3, #4
 8041b4e:	f003 030f 	and.w	r3, r3, #15
 8041b52:	3301      	adds	r3, #1
 8041b54:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8041b56:	68bb      	ldr	r3, [r7, #8]
 8041b58:	2b02      	cmp	r3, #2
 8041b5a:	d003      	beq.n	8041b64 <HAL_RCC_GetSysClockFreq+0xb4>
 8041b5c:	68bb      	ldr	r3, [r7, #8]
 8041b5e:	2b03      	cmp	r3, #3
 8041b60:	d00d      	beq.n	8041b7e <HAL_RCC_GetSysClockFreq+0xce>
 8041b62:	e019      	b.n	8041b98 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8041b64:	4a1f      	ldr	r2, [pc, #124]	; (8041be4 <HAL_RCC_GetSysClockFreq+0x134>)
 8041b66:	687b      	ldr	r3, [r7, #4]
 8041b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8041b6c:	4a1b      	ldr	r2, [pc, #108]	; (8041bdc <HAL_RCC_GetSysClockFreq+0x12c>)
 8041b6e:	68d2      	ldr	r2, [r2, #12]
 8041b70:	0a12      	lsrs	r2, r2, #8
 8041b72:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8041b76:	fb02 f303 	mul.w	r3, r2, r3
 8041b7a:	617b      	str	r3, [r7, #20]
        break;
 8041b7c:	e019      	b.n	8041bb2 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8041b7e:	4a19      	ldr	r2, [pc, #100]	; (8041be4 <HAL_RCC_GetSysClockFreq+0x134>)
 8041b80:	687b      	ldr	r3, [r7, #4]
 8041b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8041b86:	4a15      	ldr	r2, [pc, #84]	; (8041bdc <HAL_RCC_GetSysClockFreq+0x12c>)
 8041b88:	68d2      	ldr	r2, [r2, #12]
 8041b8a:	0a12      	lsrs	r2, r2, #8
 8041b8c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8041b90:	fb02 f303 	mul.w	r3, r2, r3
 8041b94:	617b      	str	r3, [r7, #20]
        break;
 8041b96:	e00c      	b.n	8041bb2 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8041b98:	69fa      	ldr	r2, [r7, #28]
 8041b9a:	687b      	ldr	r3, [r7, #4]
 8041b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8041ba0:	4a0e      	ldr	r2, [pc, #56]	; (8041bdc <HAL_RCC_GetSysClockFreq+0x12c>)
 8041ba2:	68d2      	ldr	r2, [r2, #12]
 8041ba4:	0a12      	lsrs	r2, r2, #8
 8041ba6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8041baa:	fb02 f303 	mul.w	r3, r2, r3
 8041bae:	617b      	str	r3, [r7, #20]
        break;
 8041bb0:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8041bb2:	4b0a      	ldr	r3, [pc, #40]	; (8041bdc <HAL_RCC_GetSysClockFreq+0x12c>)
 8041bb4:	68db      	ldr	r3, [r3, #12]
 8041bb6:	0e5b      	lsrs	r3, r3, #25
 8041bb8:	f003 0303 	and.w	r3, r3, #3
 8041bbc:	3301      	adds	r3, #1
 8041bbe:	005b      	lsls	r3, r3, #1
 8041bc0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8041bc2:	697a      	ldr	r2, [r7, #20]
 8041bc4:	683b      	ldr	r3, [r7, #0]
 8041bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8041bca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8041bcc:	69bb      	ldr	r3, [r7, #24]
}
 8041bce:	4618      	mov	r0, r3
 8041bd0:	3724      	adds	r7, #36	; 0x24
 8041bd2:	46bd      	mov	sp, r7
 8041bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041bd8:	4770      	bx	lr
 8041bda:	bf00      	nop
 8041bdc:	40021000 	.word	0x40021000
 8041be0:	08042db0 	.word	0x08042db0
 8041be4:	00f42400 	.word	0x00f42400

08041be8 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8041be8:	b580      	push	{r7, lr}
 8041bea:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8041bec:	f7ff ff60 	bl	8041ab0 <HAL_RCC_GetSysClockFreq>
 8041bf0:	4602      	mov	r2, r0
 8041bf2:	4b05      	ldr	r3, [pc, #20]	; (8041c08 <HAL_RCC_GetHCLKFreq+0x20>)
 8041bf4:	689b      	ldr	r3, [r3, #8]
 8041bf6:	091b      	lsrs	r3, r3, #4
 8041bf8:	f003 030f 	and.w	r3, r3, #15
 8041bfc:	4903      	ldr	r1, [pc, #12]	; (8041c0c <HAL_RCC_GetHCLKFreq+0x24>)
 8041bfe:	5ccb      	ldrb	r3, [r1, r3]
 8041c00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8041c04:	4618      	mov	r0, r3
 8041c06:	bd80      	pop	{r7, pc}
 8041c08:	40021000 	.word	0x40021000
 8041c0c:	08042da0 	.word	0x08042da0

08041c10 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8041c10:	b580      	push	{r7, lr}
 8041c12:	b086      	sub	sp, #24
 8041c14:	af00      	add	r7, sp, #0
 8041c16:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8041c18:	2300      	movs	r3, #0
 8041c1a:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8041c1c:	4b2c      	ldr	r3, [pc, #176]	; (8041cd0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8041c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8041c24:	2b00      	cmp	r3, #0
 8041c26:	d003      	beq.n	8041c30 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8041c28:	f7ff f8a6 	bl	8040d78 <HAL_PWREx_GetVoltageRange>
 8041c2c:	6138      	str	r0, [r7, #16]
 8041c2e:	e014      	b.n	8041c5a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8041c30:	4b27      	ldr	r3, [pc, #156]	; (8041cd0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8041c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041c34:	4a26      	ldr	r2, [pc, #152]	; (8041cd0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8041c36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8041c3a:	6593      	str	r3, [r2, #88]	; 0x58
 8041c3c:	4b24      	ldr	r3, [pc, #144]	; (8041cd0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8041c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8041c44:	60fb      	str	r3, [r7, #12]
 8041c46:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8041c48:	f7ff f896 	bl	8040d78 <HAL_PWREx_GetVoltageRange>
 8041c4c:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8041c4e:	4b20      	ldr	r3, [pc, #128]	; (8041cd0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8041c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041c52:	4a1f      	ldr	r2, [pc, #124]	; (8041cd0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8041c54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8041c58:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8041c5a:	693b      	ldr	r3, [r7, #16]
 8041c5c:	2b00      	cmp	r3, #0
 8041c5e:	d003      	beq.n	8041c68 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8041c60:	693b      	ldr	r3, [r7, #16]
 8041c62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8041c66:	d10b      	bne.n	8041c80 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8041c68:	687b      	ldr	r3, [r7, #4]
 8041c6a:	2b80      	cmp	r3, #128	; 0x80
 8041c6c:	d919      	bls.n	8041ca2 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8041c6e:	687b      	ldr	r3, [r7, #4]
 8041c70:	2ba0      	cmp	r3, #160	; 0xa0
 8041c72:	d902      	bls.n	8041c7a <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8041c74:	2302      	movs	r3, #2
 8041c76:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8041c78:	e013      	b.n	8041ca2 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8041c7a:	2301      	movs	r3, #1
 8041c7c:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8041c7e:	e010      	b.n	8041ca2 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8041c80:	687b      	ldr	r3, [r7, #4]
 8041c82:	2b80      	cmp	r3, #128	; 0x80
 8041c84:	d902      	bls.n	8041c8c <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8041c86:	2303      	movs	r3, #3
 8041c88:	617b      	str	r3, [r7, #20]
 8041c8a:	e00a      	b.n	8041ca2 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8041c8c:	687b      	ldr	r3, [r7, #4]
 8041c8e:	2b80      	cmp	r3, #128	; 0x80
 8041c90:	d102      	bne.n	8041c98 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8041c92:	2302      	movs	r3, #2
 8041c94:	617b      	str	r3, [r7, #20]
 8041c96:	e004      	b.n	8041ca2 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8041c98:	687b      	ldr	r3, [r7, #4]
 8041c9a:	2b70      	cmp	r3, #112	; 0x70
 8041c9c:	d101      	bne.n	8041ca2 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8041c9e:	2301      	movs	r3, #1
 8041ca0:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8041ca2:	4b0c      	ldr	r3, [pc, #48]	; (8041cd4 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8041ca4:	681b      	ldr	r3, [r3, #0]
 8041ca6:	f023 020f 	bic.w	r2, r3, #15
 8041caa:	490a      	ldr	r1, [pc, #40]	; (8041cd4 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8041cac:	697b      	ldr	r3, [r7, #20]
 8041cae:	4313      	orrs	r3, r2
 8041cb0:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8041cb2:	4b08      	ldr	r3, [pc, #32]	; (8041cd4 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8041cb4:	681b      	ldr	r3, [r3, #0]
 8041cb6:	f003 030f 	and.w	r3, r3, #15
 8041cba:	697a      	ldr	r2, [r7, #20]
 8041cbc:	429a      	cmp	r2, r3
 8041cbe:	d001      	beq.n	8041cc4 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8041cc0:	2301      	movs	r3, #1
 8041cc2:	e000      	b.n	8041cc6 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8041cc4:	2300      	movs	r3, #0
}
 8041cc6:	4618      	mov	r0, r3
 8041cc8:	3718      	adds	r7, #24
 8041cca:	46bd      	mov	sp, r7
 8041ccc:	bd80      	pop	{r7, pc}
 8041cce:	bf00      	nop
 8041cd0:	40021000 	.word	0x40021000
 8041cd4:	40022000 	.word	0x40022000

08041cd8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8041cd8:	b480      	push	{r7}
 8041cda:	b087      	sub	sp, #28
 8041cdc:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8041cde:	4b31      	ldr	r3, [pc, #196]	; (8041da4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8041ce0:	68db      	ldr	r3, [r3, #12]
 8041ce2:	f003 0303 	and.w	r3, r3, #3
 8041ce6:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8041ce8:	4b2e      	ldr	r3, [pc, #184]	; (8041da4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8041cea:	68db      	ldr	r3, [r3, #12]
 8041cec:	091b      	lsrs	r3, r3, #4
 8041cee:	f003 030f 	and.w	r3, r3, #15
 8041cf2:	3301      	adds	r3, #1
 8041cf4:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8041cf6:	68fb      	ldr	r3, [r7, #12]
 8041cf8:	2b03      	cmp	r3, #3
 8041cfa:	d015      	beq.n	8041d28 <RCC_GetSysClockFreqFromPLLSource+0x50>
 8041cfc:	68fb      	ldr	r3, [r7, #12]
 8041cfe:	2b03      	cmp	r3, #3
 8041d00:	d839      	bhi.n	8041d76 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8041d02:	68fb      	ldr	r3, [r7, #12]
 8041d04:	2b01      	cmp	r3, #1
 8041d06:	d01c      	beq.n	8041d42 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8041d08:	68fb      	ldr	r3, [r7, #12]
 8041d0a:	2b02      	cmp	r3, #2
 8041d0c:	d133      	bne.n	8041d76 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8041d0e:	4a26      	ldr	r2, [pc, #152]	; (8041da8 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8041d10:	68bb      	ldr	r3, [r7, #8]
 8041d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8041d16:	4a23      	ldr	r2, [pc, #140]	; (8041da4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8041d18:	68d2      	ldr	r2, [r2, #12]
 8041d1a:	0a12      	lsrs	r2, r2, #8
 8041d1c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8041d20:	fb02 f303 	mul.w	r3, r2, r3
 8041d24:	613b      	str	r3, [r7, #16]
      break;
 8041d26:	e029      	b.n	8041d7c <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8041d28:	4a1f      	ldr	r2, [pc, #124]	; (8041da8 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8041d2a:	68bb      	ldr	r3, [r7, #8]
 8041d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8041d30:	4a1c      	ldr	r2, [pc, #112]	; (8041da4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8041d32:	68d2      	ldr	r2, [r2, #12]
 8041d34:	0a12      	lsrs	r2, r2, #8
 8041d36:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8041d3a:	fb02 f303 	mul.w	r3, r2, r3
 8041d3e:	613b      	str	r3, [r7, #16]
      break;
 8041d40:	e01c      	b.n	8041d7c <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8041d42:	4b18      	ldr	r3, [pc, #96]	; (8041da4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8041d44:	681b      	ldr	r3, [r3, #0]
 8041d46:	f003 0308 	and.w	r3, r3, #8
 8041d4a:	2b00      	cmp	r3, #0
 8041d4c:	d107      	bne.n	8041d5e <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8041d4e:	4b15      	ldr	r3, [pc, #84]	; (8041da4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8041d50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8041d54:	0a1b      	lsrs	r3, r3, #8
 8041d56:	f003 030f 	and.w	r3, r3, #15
 8041d5a:	617b      	str	r3, [r7, #20]
 8041d5c:	e005      	b.n	8041d6a <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8041d5e:	4b11      	ldr	r3, [pc, #68]	; (8041da4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8041d60:	681b      	ldr	r3, [r3, #0]
 8041d62:	091b      	lsrs	r3, r3, #4
 8041d64:	f003 030f 	and.w	r3, r3, #15
 8041d68:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8041d6a:	4a10      	ldr	r2, [pc, #64]	; (8041dac <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8041d6c:	697b      	ldr	r3, [r7, #20]
 8041d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8041d72:	613b      	str	r3, [r7, #16]
        break;
 8041d74:	e002      	b.n	8041d7c <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8041d76:	2300      	movs	r3, #0
 8041d78:	613b      	str	r3, [r7, #16]
      break;
 8041d7a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8041d7c:	4b09      	ldr	r3, [pc, #36]	; (8041da4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8041d7e:	68db      	ldr	r3, [r3, #12]
 8041d80:	0e5b      	lsrs	r3, r3, #25
 8041d82:	f003 0303 	and.w	r3, r3, #3
 8041d86:	3301      	adds	r3, #1
 8041d88:	005b      	lsls	r3, r3, #1
 8041d8a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8041d8c:	693a      	ldr	r2, [r7, #16]
 8041d8e:	687b      	ldr	r3, [r7, #4]
 8041d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8041d94:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8041d96:	683b      	ldr	r3, [r7, #0]
}
 8041d98:	4618      	mov	r0, r3
 8041d9a:	371c      	adds	r7, #28
 8041d9c:	46bd      	mov	sp, r7
 8041d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041da2:	4770      	bx	lr
 8041da4:	40021000 	.word	0x40021000
 8041da8:	00f42400 	.word	0x00f42400
 8041dac:	08042db0 	.word	0x08042db0

08041db0 <std>:
 8041db0:	2300      	movs	r3, #0
 8041db2:	b510      	push	{r4, lr}
 8041db4:	4604      	mov	r4, r0
 8041db6:	6083      	str	r3, [r0, #8]
 8041db8:	8181      	strh	r1, [r0, #12]
 8041dba:	4619      	mov	r1, r3
 8041dbc:	6643      	str	r3, [r0, #100]	; 0x64
 8041dbe:	81c2      	strh	r2, [r0, #14]
 8041dc0:	2208      	movs	r2, #8
 8041dc2:	6183      	str	r3, [r0, #24]
 8041dc4:	e9c0 3300 	strd	r3, r3, [r0]
 8041dc8:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8041dcc:	305c      	adds	r0, #92	; 0x5c
 8041dce:	f000 f8cb 	bl	8041f68 <memset>
 8041dd2:	4b0d      	ldr	r3, [pc, #52]	; (8041e08 <std+0x58>)
 8041dd4:	6224      	str	r4, [r4, #32]
 8041dd6:	6263      	str	r3, [r4, #36]	; 0x24
 8041dd8:	4b0c      	ldr	r3, [pc, #48]	; (8041e0c <std+0x5c>)
 8041dda:	62a3      	str	r3, [r4, #40]	; 0x28
 8041ddc:	4b0c      	ldr	r3, [pc, #48]	; (8041e10 <std+0x60>)
 8041dde:	62e3      	str	r3, [r4, #44]	; 0x2c
 8041de0:	4b0c      	ldr	r3, [pc, #48]	; (8041e14 <std+0x64>)
 8041de2:	6323      	str	r3, [r4, #48]	; 0x30
 8041de4:	4b0c      	ldr	r3, [pc, #48]	; (8041e18 <std+0x68>)
 8041de6:	429c      	cmp	r4, r3
 8041de8:	d006      	beq.n	8041df8 <std+0x48>
 8041dea:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8041dee:	4294      	cmp	r4, r2
 8041df0:	d002      	beq.n	8041df8 <std+0x48>
 8041df2:	33d0      	adds	r3, #208	; 0xd0
 8041df4:	429c      	cmp	r4, r3
 8041df6:	d105      	bne.n	8041e04 <std+0x54>
 8041df8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8041dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8041e00:	f000 b8e4 	b.w	8041fcc <__retarget_lock_init_recursive>
 8041e04:	bd10      	pop	{r4, pc}
 8041e06:	bf00      	nop
 8041e08:	0804282d 	.word	0x0804282d
 8041e0c:	0804284f 	.word	0x0804284f
 8041e10:	08042887 	.word	0x08042887
 8041e14:	080428ab 	.word	0x080428ab
 8041e18:	200180ec 	.word	0x200180ec

08041e1c <stdio_exit_handler>:
 8041e1c:	4a02      	ldr	r2, [pc, #8]	; (8041e28 <stdio_exit_handler+0xc>)
 8041e1e:	4903      	ldr	r1, [pc, #12]	; (8041e2c <stdio_exit_handler+0x10>)
 8041e20:	4803      	ldr	r0, [pc, #12]	; (8041e30 <stdio_exit_handler+0x14>)
 8041e22:	f000 b869 	b.w	8041ef8 <_fwalk_sglue>
 8041e26:	bf00      	nop
 8041e28:	2001806c 	.word	0x2001806c
 8041e2c:	080427c5 	.word	0x080427c5
 8041e30:	20018078 	.word	0x20018078

08041e34 <cleanup_stdio>:
 8041e34:	6841      	ldr	r1, [r0, #4]
 8041e36:	4b0c      	ldr	r3, [pc, #48]	; (8041e68 <cleanup_stdio+0x34>)
 8041e38:	4299      	cmp	r1, r3
 8041e3a:	b510      	push	{r4, lr}
 8041e3c:	4604      	mov	r4, r0
 8041e3e:	d001      	beq.n	8041e44 <cleanup_stdio+0x10>
 8041e40:	f000 fcc0 	bl	80427c4 <_fflush_r>
 8041e44:	68a1      	ldr	r1, [r4, #8]
 8041e46:	4b09      	ldr	r3, [pc, #36]	; (8041e6c <cleanup_stdio+0x38>)
 8041e48:	4299      	cmp	r1, r3
 8041e4a:	d002      	beq.n	8041e52 <cleanup_stdio+0x1e>
 8041e4c:	4620      	mov	r0, r4
 8041e4e:	f000 fcb9 	bl	80427c4 <_fflush_r>
 8041e52:	68e1      	ldr	r1, [r4, #12]
 8041e54:	4b06      	ldr	r3, [pc, #24]	; (8041e70 <cleanup_stdio+0x3c>)
 8041e56:	4299      	cmp	r1, r3
 8041e58:	d004      	beq.n	8041e64 <cleanup_stdio+0x30>
 8041e5a:	4620      	mov	r0, r4
 8041e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8041e60:	f000 bcb0 	b.w	80427c4 <_fflush_r>
 8041e64:	bd10      	pop	{r4, pc}
 8041e66:	bf00      	nop
 8041e68:	200180ec 	.word	0x200180ec
 8041e6c:	20018154 	.word	0x20018154
 8041e70:	200181bc 	.word	0x200181bc

08041e74 <global_stdio_init.part.0>:
 8041e74:	b510      	push	{r4, lr}
 8041e76:	4b0b      	ldr	r3, [pc, #44]	; (8041ea4 <global_stdio_init.part.0+0x30>)
 8041e78:	2104      	movs	r1, #4
 8041e7a:	4c0b      	ldr	r4, [pc, #44]	; (8041ea8 <global_stdio_init.part.0+0x34>)
 8041e7c:	4a0b      	ldr	r2, [pc, #44]	; (8041eac <global_stdio_init.part.0+0x38>)
 8041e7e:	4620      	mov	r0, r4
 8041e80:	601a      	str	r2, [r3, #0]
 8041e82:	2200      	movs	r2, #0
 8041e84:	f7ff ff94 	bl	8041db0 <std>
 8041e88:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8041e8c:	2201      	movs	r2, #1
 8041e8e:	2109      	movs	r1, #9
 8041e90:	f7ff ff8e 	bl	8041db0 <std>
 8041e94:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8041e98:	2202      	movs	r2, #2
 8041e9a:	2112      	movs	r1, #18
 8041e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8041ea0:	f7ff bf86 	b.w	8041db0 <std>
 8041ea4:	20018224 	.word	0x20018224
 8041ea8:	200180ec 	.word	0x200180ec
 8041eac:	08041e1d 	.word	0x08041e1d

08041eb0 <__sfp_lock_acquire>:
 8041eb0:	4801      	ldr	r0, [pc, #4]	; (8041eb8 <__sfp_lock_acquire+0x8>)
 8041eb2:	f000 b88c 	b.w	8041fce <__retarget_lock_acquire_recursive>
 8041eb6:	bf00      	nop
 8041eb8:	20018229 	.word	0x20018229

08041ebc <__sfp_lock_release>:
 8041ebc:	4801      	ldr	r0, [pc, #4]	; (8041ec4 <__sfp_lock_release+0x8>)
 8041ebe:	f000 b887 	b.w	8041fd0 <__retarget_lock_release_recursive>
 8041ec2:	bf00      	nop
 8041ec4:	20018229 	.word	0x20018229

08041ec8 <__sinit>:
 8041ec8:	b510      	push	{r4, lr}
 8041eca:	4604      	mov	r4, r0
 8041ecc:	f7ff fff0 	bl	8041eb0 <__sfp_lock_acquire>
 8041ed0:	6a23      	ldr	r3, [r4, #32]
 8041ed2:	b11b      	cbz	r3, 8041edc <__sinit+0x14>
 8041ed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8041ed8:	f7ff bff0 	b.w	8041ebc <__sfp_lock_release>
 8041edc:	4b04      	ldr	r3, [pc, #16]	; (8041ef0 <__sinit+0x28>)
 8041ede:	6223      	str	r3, [r4, #32]
 8041ee0:	4b04      	ldr	r3, [pc, #16]	; (8041ef4 <__sinit+0x2c>)
 8041ee2:	681b      	ldr	r3, [r3, #0]
 8041ee4:	2b00      	cmp	r3, #0
 8041ee6:	d1f5      	bne.n	8041ed4 <__sinit+0xc>
 8041ee8:	f7ff ffc4 	bl	8041e74 <global_stdio_init.part.0>
 8041eec:	e7f2      	b.n	8041ed4 <__sinit+0xc>
 8041eee:	bf00      	nop
 8041ef0:	08041e35 	.word	0x08041e35
 8041ef4:	20018224 	.word	0x20018224

08041ef8 <_fwalk_sglue>:
 8041ef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8041efc:	4607      	mov	r7, r0
 8041efe:	4688      	mov	r8, r1
 8041f00:	4614      	mov	r4, r2
 8041f02:	2600      	movs	r6, #0
 8041f04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8041f08:	f1b9 0901 	subs.w	r9, r9, #1
 8041f0c:	d505      	bpl.n	8041f1a <_fwalk_sglue+0x22>
 8041f0e:	6824      	ldr	r4, [r4, #0]
 8041f10:	2c00      	cmp	r4, #0
 8041f12:	d1f7      	bne.n	8041f04 <_fwalk_sglue+0xc>
 8041f14:	4630      	mov	r0, r6
 8041f16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8041f1a:	89ab      	ldrh	r3, [r5, #12]
 8041f1c:	2b01      	cmp	r3, #1
 8041f1e:	d907      	bls.n	8041f30 <_fwalk_sglue+0x38>
 8041f20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8041f24:	3301      	adds	r3, #1
 8041f26:	d003      	beq.n	8041f30 <_fwalk_sglue+0x38>
 8041f28:	4629      	mov	r1, r5
 8041f2a:	4638      	mov	r0, r7
 8041f2c:	47c0      	blx	r8
 8041f2e:	4306      	orrs	r6, r0
 8041f30:	3568      	adds	r5, #104	; 0x68
 8041f32:	e7e9      	b.n	8041f08 <_fwalk_sglue+0x10>

08041f34 <iprintf>:
 8041f34:	b40f      	push	{r0, r1, r2, r3}
 8041f36:	b507      	push	{r0, r1, r2, lr}
 8041f38:	4906      	ldr	r1, [pc, #24]	; (8041f54 <iprintf+0x20>)
 8041f3a:	ab04      	add	r3, sp, #16
 8041f3c:	6808      	ldr	r0, [r1, #0]
 8041f3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8041f42:	6881      	ldr	r1, [r0, #8]
 8041f44:	9301      	str	r3, [sp, #4]
 8041f46:	f000 f86d 	bl	8042024 <_vfiprintf_r>
 8041f4a:	b003      	add	sp, #12
 8041f4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8041f50:	b004      	add	sp, #16
 8041f52:	4770      	bx	lr
 8041f54:	200180c4 	.word	0x200180c4

08041f58 <putchar>:
 8041f58:	4b02      	ldr	r3, [pc, #8]	; (8041f64 <putchar+0xc>)
 8041f5a:	4601      	mov	r1, r0
 8041f5c:	6818      	ldr	r0, [r3, #0]
 8041f5e:	6882      	ldr	r2, [r0, #8]
 8041f60:	f000 bd9d 	b.w	8042a9e <_putc_r>
 8041f64:	200180c4 	.word	0x200180c4

08041f68 <memset>:
 8041f68:	4402      	add	r2, r0
 8041f6a:	4603      	mov	r3, r0
 8041f6c:	4293      	cmp	r3, r2
 8041f6e:	d100      	bne.n	8041f72 <memset+0xa>
 8041f70:	4770      	bx	lr
 8041f72:	f803 1b01 	strb.w	r1, [r3], #1
 8041f76:	e7f9      	b.n	8041f6c <memset+0x4>

08041f78 <__errno>:
 8041f78:	4b01      	ldr	r3, [pc, #4]	; (8041f80 <__errno+0x8>)
 8041f7a:	6818      	ldr	r0, [r3, #0]
 8041f7c:	4770      	bx	lr
 8041f7e:	bf00      	nop
 8041f80:	200180c4 	.word	0x200180c4

08041f84 <__libc_init_array>:
 8041f84:	b570      	push	{r4, r5, r6, lr}
 8041f86:	4d0d      	ldr	r5, [pc, #52]	; (8041fbc <__libc_init_array+0x38>)
 8041f88:	2600      	movs	r6, #0
 8041f8a:	4c0d      	ldr	r4, [pc, #52]	; (8041fc0 <__libc_init_array+0x3c>)
 8041f8c:	1b64      	subs	r4, r4, r5
 8041f8e:	10a4      	asrs	r4, r4, #2
 8041f90:	42a6      	cmp	r6, r4
 8041f92:	d109      	bne.n	8041fa8 <__libc_init_array+0x24>
 8041f94:	4d0b      	ldr	r5, [pc, #44]	; (8041fc4 <__libc_init_array+0x40>)
 8041f96:	2600      	movs	r6, #0
 8041f98:	4c0b      	ldr	r4, [pc, #44]	; (8041fc8 <__libc_init_array+0x44>)
 8041f9a:	f000 fe87 	bl	8042cac <_init>
 8041f9e:	1b64      	subs	r4, r4, r5
 8041fa0:	10a4      	asrs	r4, r4, #2
 8041fa2:	42a6      	cmp	r6, r4
 8041fa4:	d105      	bne.n	8041fb2 <__libc_init_array+0x2e>
 8041fa6:	bd70      	pop	{r4, r5, r6, pc}
 8041fa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8041fac:	3601      	adds	r6, #1
 8041fae:	4798      	blx	r3
 8041fb0:	e7ee      	b.n	8041f90 <__libc_init_array+0xc>
 8041fb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8041fb6:	3601      	adds	r6, #1
 8041fb8:	4798      	blx	r3
 8041fba:	e7f2      	b.n	8041fa2 <__libc_init_array+0x1e>
 8041fbc:	08042e24 	.word	0x08042e24
 8041fc0:	08042e24 	.word	0x08042e24
 8041fc4:	08042e24 	.word	0x08042e24
 8041fc8:	08042e28 	.word	0x08042e28

08041fcc <__retarget_lock_init_recursive>:
 8041fcc:	4770      	bx	lr

08041fce <__retarget_lock_acquire_recursive>:
 8041fce:	4770      	bx	lr

08041fd0 <__retarget_lock_release_recursive>:
 8041fd0:	4770      	bx	lr

08041fd2 <__sfputc_r>:
 8041fd2:	6893      	ldr	r3, [r2, #8]
 8041fd4:	3b01      	subs	r3, #1
 8041fd6:	2b00      	cmp	r3, #0
 8041fd8:	6093      	str	r3, [r2, #8]
 8041fda:	b410      	push	{r4}
 8041fdc:	da08      	bge.n	8041ff0 <__sfputc_r+0x1e>
 8041fde:	6994      	ldr	r4, [r2, #24]
 8041fe0:	42a3      	cmp	r3, r4
 8041fe2:	db01      	blt.n	8041fe8 <__sfputc_r+0x16>
 8041fe4:	290a      	cmp	r1, #10
 8041fe6:	d103      	bne.n	8041ff0 <__sfputc_r+0x1e>
 8041fe8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8041fec:	f000 bc61 	b.w	80428b2 <__swbuf_r>
 8041ff0:	6813      	ldr	r3, [r2, #0]
 8041ff2:	1c58      	adds	r0, r3, #1
 8041ff4:	6010      	str	r0, [r2, #0]
 8041ff6:	4608      	mov	r0, r1
 8041ff8:	7019      	strb	r1, [r3, #0]
 8041ffa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8041ffe:	4770      	bx	lr

08042000 <__sfputs_r>:
 8042000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8042002:	4606      	mov	r6, r0
 8042004:	460f      	mov	r7, r1
 8042006:	4614      	mov	r4, r2
 8042008:	18d5      	adds	r5, r2, r3
 804200a:	42ac      	cmp	r4, r5
 804200c:	d101      	bne.n	8042012 <__sfputs_r+0x12>
 804200e:	2000      	movs	r0, #0
 8042010:	e007      	b.n	8042022 <__sfputs_r+0x22>
 8042012:	463a      	mov	r2, r7
 8042014:	f814 1b01 	ldrb.w	r1, [r4], #1
 8042018:	4630      	mov	r0, r6
 804201a:	f7ff ffda 	bl	8041fd2 <__sfputc_r>
 804201e:	1c43      	adds	r3, r0, #1
 8042020:	d1f3      	bne.n	804200a <__sfputs_r+0xa>
 8042022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08042024 <_vfiprintf_r>:
 8042024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8042028:	460d      	mov	r5, r1
 804202a:	b09d      	sub	sp, #116	; 0x74
 804202c:	4614      	mov	r4, r2
 804202e:	4698      	mov	r8, r3
 8042030:	4606      	mov	r6, r0
 8042032:	b118      	cbz	r0, 804203c <_vfiprintf_r+0x18>
 8042034:	6a03      	ldr	r3, [r0, #32]
 8042036:	b90b      	cbnz	r3, 804203c <_vfiprintf_r+0x18>
 8042038:	f7ff ff46 	bl	8041ec8 <__sinit>
 804203c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 804203e:	07d9      	lsls	r1, r3, #31
 8042040:	d405      	bmi.n	804204e <_vfiprintf_r+0x2a>
 8042042:	89ab      	ldrh	r3, [r5, #12]
 8042044:	059a      	lsls	r2, r3, #22
 8042046:	d402      	bmi.n	804204e <_vfiprintf_r+0x2a>
 8042048:	6da8      	ldr	r0, [r5, #88]	; 0x58
 804204a:	f7ff ffc0 	bl	8041fce <__retarget_lock_acquire_recursive>
 804204e:	89ab      	ldrh	r3, [r5, #12]
 8042050:	071b      	lsls	r3, r3, #28
 8042052:	d501      	bpl.n	8042058 <_vfiprintf_r+0x34>
 8042054:	692b      	ldr	r3, [r5, #16]
 8042056:	b99b      	cbnz	r3, 8042080 <_vfiprintf_r+0x5c>
 8042058:	4629      	mov	r1, r5
 804205a:	4630      	mov	r0, r6
 804205c:	f000 fc66 	bl	804292c <__swsetup_r>
 8042060:	b170      	cbz	r0, 8042080 <_vfiprintf_r+0x5c>
 8042062:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8042064:	07dc      	lsls	r4, r3, #31
 8042066:	d504      	bpl.n	8042072 <_vfiprintf_r+0x4e>
 8042068:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 804206c:	b01d      	add	sp, #116	; 0x74
 804206e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8042072:	89ab      	ldrh	r3, [r5, #12]
 8042074:	0598      	lsls	r0, r3, #22
 8042076:	d4f7      	bmi.n	8042068 <_vfiprintf_r+0x44>
 8042078:	6da8      	ldr	r0, [r5, #88]	; 0x58
 804207a:	f7ff ffa9 	bl	8041fd0 <__retarget_lock_release_recursive>
 804207e:	e7f3      	b.n	8042068 <_vfiprintf_r+0x44>
 8042080:	2300      	movs	r3, #0
 8042082:	f8cd 800c 	str.w	r8, [sp, #12]
 8042086:	f04f 0901 	mov.w	r9, #1
 804208a:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 8042244 <_vfiprintf_r+0x220>
 804208e:	9309      	str	r3, [sp, #36]	; 0x24
 8042090:	2320      	movs	r3, #32
 8042092:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8042096:	2330      	movs	r3, #48	; 0x30
 8042098:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 804209c:	4623      	mov	r3, r4
 804209e:	469a      	mov	sl, r3
 80420a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80420a4:	b10a      	cbz	r2, 80420aa <_vfiprintf_r+0x86>
 80420a6:	2a25      	cmp	r2, #37	; 0x25
 80420a8:	d1f9      	bne.n	804209e <_vfiprintf_r+0x7a>
 80420aa:	ebba 0b04 	subs.w	fp, sl, r4
 80420ae:	d00b      	beq.n	80420c8 <_vfiprintf_r+0xa4>
 80420b0:	465b      	mov	r3, fp
 80420b2:	4622      	mov	r2, r4
 80420b4:	4629      	mov	r1, r5
 80420b6:	4630      	mov	r0, r6
 80420b8:	f7ff ffa2 	bl	8042000 <__sfputs_r>
 80420bc:	3001      	adds	r0, #1
 80420be:	f000 80a9 	beq.w	8042214 <_vfiprintf_r+0x1f0>
 80420c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80420c4:	445a      	add	r2, fp
 80420c6:	9209      	str	r2, [sp, #36]	; 0x24
 80420c8:	f89a 3000 	ldrb.w	r3, [sl]
 80420cc:	2b00      	cmp	r3, #0
 80420ce:	f000 80a1 	beq.w	8042214 <_vfiprintf_r+0x1f0>
 80420d2:	2300      	movs	r3, #0
 80420d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80420d8:	f10a 0a01 	add.w	sl, sl, #1
 80420dc:	9304      	str	r3, [sp, #16]
 80420de:	9307      	str	r3, [sp, #28]
 80420e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80420e4:	931a      	str	r3, [sp, #104]	; 0x68
 80420e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80420ea:	4654      	mov	r4, sl
 80420ec:	2205      	movs	r2, #5
 80420ee:	4855      	ldr	r0, [pc, #340]	; (8042244 <_vfiprintf_r+0x220>)
 80420f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80420f4:	f000 fd80 	bl	8042bf8 <memchr>
 80420f8:	9a04      	ldr	r2, [sp, #16]
 80420fa:	b9d8      	cbnz	r0, 8042134 <_vfiprintf_r+0x110>
 80420fc:	06d1      	lsls	r1, r2, #27
 80420fe:	bf44      	itt	mi
 8042100:	2320      	movmi	r3, #32
 8042102:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8042106:	0713      	lsls	r3, r2, #28
 8042108:	bf44      	itt	mi
 804210a:	232b      	movmi	r3, #43	; 0x2b
 804210c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8042110:	f89a 3000 	ldrb.w	r3, [sl]
 8042114:	2b2a      	cmp	r3, #42	; 0x2a
 8042116:	d015      	beq.n	8042144 <_vfiprintf_r+0x120>
 8042118:	9a07      	ldr	r2, [sp, #28]
 804211a:	4654      	mov	r4, sl
 804211c:	2000      	movs	r0, #0
 804211e:	f04f 0c0a 	mov.w	ip, #10
 8042122:	4621      	mov	r1, r4
 8042124:	f811 3b01 	ldrb.w	r3, [r1], #1
 8042128:	3b30      	subs	r3, #48	; 0x30
 804212a:	2b09      	cmp	r3, #9
 804212c:	d94d      	bls.n	80421ca <_vfiprintf_r+0x1a6>
 804212e:	b1b0      	cbz	r0, 804215e <_vfiprintf_r+0x13a>
 8042130:	9207      	str	r2, [sp, #28]
 8042132:	e014      	b.n	804215e <_vfiprintf_r+0x13a>
 8042134:	eba0 0308 	sub.w	r3, r0, r8
 8042138:	46a2      	mov	sl, r4
 804213a:	fa09 f303 	lsl.w	r3, r9, r3
 804213e:	4313      	orrs	r3, r2
 8042140:	9304      	str	r3, [sp, #16]
 8042142:	e7d2      	b.n	80420ea <_vfiprintf_r+0xc6>
 8042144:	9b03      	ldr	r3, [sp, #12]
 8042146:	1d19      	adds	r1, r3, #4
 8042148:	681b      	ldr	r3, [r3, #0]
 804214a:	2b00      	cmp	r3, #0
 804214c:	9103      	str	r1, [sp, #12]
 804214e:	bfbb      	ittet	lt
 8042150:	425b      	neglt	r3, r3
 8042152:	f042 0202 	orrlt.w	r2, r2, #2
 8042156:	9307      	strge	r3, [sp, #28]
 8042158:	9307      	strlt	r3, [sp, #28]
 804215a:	bfb8      	it	lt
 804215c:	9204      	strlt	r2, [sp, #16]
 804215e:	7823      	ldrb	r3, [r4, #0]
 8042160:	2b2e      	cmp	r3, #46	; 0x2e
 8042162:	d10c      	bne.n	804217e <_vfiprintf_r+0x15a>
 8042164:	7863      	ldrb	r3, [r4, #1]
 8042166:	2b2a      	cmp	r3, #42	; 0x2a
 8042168:	d134      	bne.n	80421d4 <_vfiprintf_r+0x1b0>
 804216a:	9b03      	ldr	r3, [sp, #12]
 804216c:	3402      	adds	r4, #2
 804216e:	1d1a      	adds	r2, r3, #4
 8042170:	681b      	ldr	r3, [r3, #0]
 8042172:	2b00      	cmp	r3, #0
 8042174:	9203      	str	r2, [sp, #12]
 8042176:	bfb8      	it	lt
 8042178:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 804217c:	9305      	str	r3, [sp, #20]
 804217e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8042254 <_vfiprintf_r+0x230>
 8042182:	2203      	movs	r2, #3
 8042184:	7821      	ldrb	r1, [r4, #0]
 8042186:	4650      	mov	r0, sl
 8042188:	f000 fd36 	bl	8042bf8 <memchr>
 804218c:	b138      	cbz	r0, 804219e <_vfiprintf_r+0x17a>
 804218e:	eba0 000a 	sub.w	r0, r0, sl
 8042192:	2240      	movs	r2, #64	; 0x40
 8042194:	9b04      	ldr	r3, [sp, #16]
 8042196:	3401      	adds	r4, #1
 8042198:	4082      	lsls	r2, r0
 804219a:	4313      	orrs	r3, r2
 804219c:	9304      	str	r3, [sp, #16]
 804219e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80421a2:	2206      	movs	r2, #6
 80421a4:	4828      	ldr	r0, [pc, #160]	; (8042248 <_vfiprintf_r+0x224>)
 80421a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80421aa:	f000 fd25 	bl	8042bf8 <memchr>
 80421ae:	2800      	cmp	r0, #0
 80421b0:	d03f      	beq.n	8042232 <_vfiprintf_r+0x20e>
 80421b2:	4b26      	ldr	r3, [pc, #152]	; (804224c <_vfiprintf_r+0x228>)
 80421b4:	bb1b      	cbnz	r3, 80421fe <_vfiprintf_r+0x1da>
 80421b6:	9b03      	ldr	r3, [sp, #12]
 80421b8:	3307      	adds	r3, #7
 80421ba:	f023 0307 	bic.w	r3, r3, #7
 80421be:	3308      	adds	r3, #8
 80421c0:	9303      	str	r3, [sp, #12]
 80421c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80421c4:	443b      	add	r3, r7
 80421c6:	9309      	str	r3, [sp, #36]	; 0x24
 80421c8:	e768      	b.n	804209c <_vfiprintf_r+0x78>
 80421ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80421ce:	460c      	mov	r4, r1
 80421d0:	2001      	movs	r0, #1
 80421d2:	e7a6      	b.n	8042122 <_vfiprintf_r+0xfe>
 80421d4:	2300      	movs	r3, #0
 80421d6:	3401      	adds	r4, #1
 80421d8:	f04f 0c0a 	mov.w	ip, #10
 80421dc:	4619      	mov	r1, r3
 80421de:	9305      	str	r3, [sp, #20]
 80421e0:	4620      	mov	r0, r4
 80421e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80421e6:	3a30      	subs	r2, #48	; 0x30
 80421e8:	2a09      	cmp	r2, #9
 80421ea:	d903      	bls.n	80421f4 <_vfiprintf_r+0x1d0>
 80421ec:	2b00      	cmp	r3, #0
 80421ee:	d0c6      	beq.n	804217e <_vfiprintf_r+0x15a>
 80421f0:	9105      	str	r1, [sp, #20]
 80421f2:	e7c4      	b.n	804217e <_vfiprintf_r+0x15a>
 80421f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80421f8:	4604      	mov	r4, r0
 80421fa:	2301      	movs	r3, #1
 80421fc:	e7f0      	b.n	80421e0 <_vfiprintf_r+0x1bc>
 80421fe:	ab03      	add	r3, sp, #12
 8042200:	462a      	mov	r2, r5
 8042202:	a904      	add	r1, sp, #16
 8042204:	4630      	mov	r0, r6
 8042206:	9300      	str	r3, [sp, #0]
 8042208:	4b11      	ldr	r3, [pc, #68]	; (8042250 <_vfiprintf_r+0x22c>)
 804220a:	f3af 8000 	nop.w
 804220e:	4607      	mov	r7, r0
 8042210:	1c78      	adds	r0, r7, #1
 8042212:	d1d6      	bne.n	80421c2 <_vfiprintf_r+0x19e>
 8042214:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8042216:	07d9      	lsls	r1, r3, #31
 8042218:	d405      	bmi.n	8042226 <_vfiprintf_r+0x202>
 804221a:	89ab      	ldrh	r3, [r5, #12]
 804221c:	059a      	lsls	r2, r3, #22
 804221e:	d402      	bmi.n	8042226 <_vfiprintf_r+0x202>
 8042220:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8042222:	f7ff fed5 	bl	8041fd0 <__retarget_lock_release_recursive>
 8042226:	89ab      	ldrh	r3, [r5, #12]
 8042228:	065b      	lsls	r3, r3, #25
 804222a:	f53f af1d 	bmi.w	8042068 <_vfiprintf_r+0x44>
 804222e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8042230:	e71c      	b.n	804206c <_vfiprintf_r+0x48>
 8042232:	ab03      	add	r3, sp, #12
 8042234:	462a      	mov	r2, r5
 8042236:	a904      	add	r1, sp, #16
 8042238:	4630      	mov	r0, r6
 804223a:	9300      	str	r3, [sp, #0]
 804223c:	4b04      	ldr	r3, [pc, #16]	; (8042250 <_vfiprintf_r+0x22c>)
 804223e:	f000 f91d 	bl	804247c <_printf_i>
 8042242:	e7e4      	b.n	804220e <_vfiprintf_r+0x1ea>
 8042244:	08042df0 	.word	0x08042df0
 8042248:	08042dfa 	.word	0x08042dfa
 804224c:	00000000 	.word	0x00000000
 8042250:	08042001 	.word	0x08042001
 8042254:	08042df6 	.word	0x08042df6

08042258 <sbrk_aligned>:
 8042258:	b570      	push	{r4, r5, r6, lr}
 804225a:	4e0e      	ldr	r6, [pc, #56]	; (8042294 <sbrk_aligned+0x3c>)
 804225c:	460c      	mov	r4, r1
 804225e:	4605      	mov	r5, r0
 8042260:	6831      	ldr	r1, [r6, #0]
 8042262:	b911      	cbnz	r1, 804226a <sbrk_aligned+0x12>
 8042264:	f000 fca6 	bl	8042bb4 <_sbrk_r>
 8042268:	6030      	str	r0, [r6, #0]
 804226a:	4621      	mov	r1, r4
 804226c:	4628      	mov	r0, r5
 804226e:	f000 fca1 	bl	8042bb4 <_sbrk_r>
 8042272:	1c43      	adds	r3, r0, #1
 8042274:	d00a      	beq.n	804228c <sbrk_aligned+0x34>
 8042276:	1cc4      	adds	r4, r0, #3
 8042278:	f024 0403 	bic.w	r4, r4, #3
 804227c:	42a0      	cmp	r0, r4
 804227e:	d007      	beq.n	8042290 <sbrk_aligned+0x38>
 8042280:	1a21      	subs	r1, r4, r0
 8042282:	4628      	mov	r0, r5
 8042284:	f000 fc96 	bl	8042bb4 <_sbrk_r>
 8042288:	3001      	adds	r0, #1
 804228a:	d101      	bne.n	8042290 <sbrk_aligned+0x38>
 804228c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8042290:	4620      	mov	r0, r4
 8042292:	bd70      	pop	{r4, r5, r6, pc}
 8042294:	20018230 	.word	0x20018230

08042298 <_malloc_r>:
 8042298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 804229c:	1ccd      	adds	r5, r1, #3
 804229e:	4607      	mov	r7, r0
 80422a0:	f025 0503 	bic.w	r5, r5, #3
 80422a4:	3508      	adds	r5, #8
 80422a6:	2d0c      	cmp	r5, #12
 80422a8:	bf38      	it	cc
 80422aa:	250c      	movcc	r5, #12
 80422ac:	2d00      	cmp	r5, #0
 80422ae:	db01      	blt.n	80422b4 <_malloc_r+0x1c>
 80422b0:	42a9      	cmp	r1, r5
 80422b2:	d905      	bls.n	80422c0 <_malloc_r+0x28>
 80422b4:	230c      	movs	r3, #12
 80422b6:	2600      	movs	r6, #0
 80422b8:	603b      	str	r3, [r7, #0]
 80422ba:	4630      	mov	r0, r6
 80422bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80422c0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8042394 <_malloc_r+0xfc>
 80422c4:	f000 faa6 	bl	8042814 <__malloc_lock>
 80422c8:	f8d8 3000 	ldr.w	r3, [r8]
 80422cc:	461c      	mov	r4, r3
 80422ce:	bb5c      	cbnz	r4, 8042328 <_malloc_r+0x90>
 80422d0:	4629      	mov	r1, r5
 80422d2:	4638      	mov	r0, r7
 80422d4:	f7ff ffc0 	bl	8042258 <sbrk_aligned>
 80422d8:	1c43      	adds	r3, r0, #1
 80422da:	4604      	mov	r4, r0
 80422dc:	d155      	bne.n	804238a <_malloc_r+0xf2>
 80422de:	f8d8 4000 	ldr.w	r4, [r8]
 80422e2:	4626      	mov	r6, r4
 80422e4:	2e00      	cmp	r6, #0
 80422e6:	d145      	bne.n	8042374 <_malloc_r+0xdc>
 80422e8:	2c00      	cmp	r4, #0
 80422ea:	d048      	beq.n	804237e <_malloc_r+0xe6>
 80422ec:	6823      	ldr	r3, [r4, #0]
 80422ee:	4631      	mov	r1, r6
 80422f0:	4638      	mov	r0, r7
 80422f2:	eb04 0903 	add.w	r9, r4, r3
 80422f6:	f000 fc5d 	bl	8042bb4 <_sbrk_r>
 80422fa:	4581      	cmp	r9, r0
 80422fc:	d13f      	bne.n	804237e <_malloc_r+0xe6>
 80422fe:	6821      	ldr	r1, [r4, #0]
 8042300:	4638      	mov	r0, r7
 8042302:	1a6d      	subs	r5, r5, r1
 8042304:	4629      	mov	r1, r5
 8042306:	f7ff ffa7 	bl	8042258 <sbrk_aligned>
 804230a:	3001      	adds	r0, #1
 804230c:	d037      	beq.n	804237e <_malloc_r+0xe6>
 804230e:	6823      	ldr	r3, [r4, #0]
 8042310:	442b      	add	r3, r5
 8042312:	6023      	str	r3, [r4, #0]
 8042314:	f8d8 3000 	ldr.w	r3, [r8]
 8042318:	2b00      	cmp	r3, #0
 804231a:	d038      	beq.n	804238e <_malloc_r+0xf6>
 804231c:	685a      	ldr	r2, [r3, #4]
 804231e:	42a2      	cmp	r2, r4
 8042320:	d12b      	bne.n	804237a <_malloc_r+0xe2>
 8042322:	2200      	movs	r2, #0
 8042324:	605a      	str	r2, [r3, #4]
 8042326:	e00f      	b.n	8042348 <_malloc_r+0xb0>
 8042328:	6822      	ldr	r2, [r4, #0]
 804232a:	1b52      	subs	r2, r2, r5
 804232c:	d41f      	bmi.n	804236e <_malloc_r+0xd6>
 804232e:	2a0b      	cmp	r2, #11
 8042330:	d917      	bls.n	8042362 <_malloc_r+0xca>
 8042332:	1961      	adds	r1, r4, r5
 8042334:	42a3      	cmp	r3, r4
 8042336:	6025      	str	r5, [r4, #0]
 8042338:	bf18      	it	ne
 804233a:	6059      	strne	r1, [r3, #4]
 804233c:	6863      	ldr	r3, [r4, #4]
 804233e:	bf08      	it	eq
 8042340:	f8c8 1000 	streq.w	r1, [r8]
 8042344:	5162      	str	r2, [r4, r5]
 8042346:	604b      	str	r3, [r1, #4]
 8042348:	f104 060b 	add.w	r6, r4, #11
 804234c:	4638      	mov	r0, r7
 804234e:	f000 fa67 	bl	8042820 <__malloc_unlock>
 8042352:	1d23      	adds	r3, r4, #4
 8042354:	f026 0607 	bic.w	r6, r6, #7
 8042358:	1af2      	subs	r2, r6, r3
 804235a:	d0ae      	beq.n	80422ba <_malloc_r+0x22>
 804235c:	1b9b      	subs	r3, r3, r6
 804235e:	50a3      	str	r3, [r4, r2]
 8042360:	e7ab      	b.n	80422ba <_malloc_r+0x22>
 8042362:	42a3      	cmp	r3, r4
 8042364:	6862      	ldr	r2, [r4, #4]
 8042366:	d1dd      	bne.n	8042324 <_malloc_r+0x8c>
 8042368:	f8c8 2000 	str.w	r2, [r8]
 804236c:	e7ec      	b.n	8042348 <_malloc_r+0xb0>
 804236e:	4623      	mov	r3, r4
 8042370:	6864      	ldr	r4, [r4, #4]
 8042372:	e7ac      	b.n	80422ce <_malloc_r+0x36>
 8042374:	4634      	mov	r4, r6
 8042376:	6876      	ldr	r6, [r6, #4]
 8042378:	e7b4      	b.n	80422e4 <_malloc_r+0x4c>
 804237a:	4613      	mov	r3, r2
 804237c:	e7cc      	b.n	8042318 <_malloc_r+0x80>
 804237e:	230c      	movs	r3, #12
 8042380:	4638      	mov	r0, r7
 8042382:	603b      	str	r3, [r7, #0]
 8042384:	f000 fa4c 	bl	8042820 <__malloc_unlock>
 8042388:	e797      	b.n	80422ba <_malloc_r+0x22>
 804238a:	6025      	str	r5, [r4, #0]
 804238c:	e7dc      	b.n	8042348 <_malloc_r+0xb0>
 804238e:	605b      	str	r3, [r3, #4]
 8042390:	deff      	udf	#255	; 0xff
 8042392:	bf00      	nop
 8042394:	2001822c 	.word	0x2001822c

08042398 <_printf_common>:
 8042398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804239c:	4616      	mov	r6, r2
 804239e:	4699      	mov	r9, r3
 80423a0:	688a      	ldr	r2, [r1, #8]
 80423a2:	4607      	mov	r7, r0
 80423a4:	690b      	ldr	r3, [r1, #16]
 80423a6:	460c      	mov	r4, r1
 80423a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80423ac:	4293      	cmp	r3, r2
 80423ae:	bfb8      	it	lt
 80423b0:	4613      	movlt	r3, r2
 80423b2:	6033      	str	r3, [r6, #0]
 80423b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80423b8:	b10a      	cbz	r2, 80423be <_printf_common+0x26>
 80423ba:	3301      	adds	r3, #1
 80423bc:	6033      	str	r3, [r6, #0]
 80423be:	6823      	ldr	r3, [r4, #0]
 80423c0:	0699      	lsls	r1, r3, #26
 80423c2:	bf42      	ittt	mi
 80423c4:	6833      	ldrmi	r3, [r6, #0]
 80423c6:	3302      	addmi	r3, #2
 80423c8:	6033      	strmi	r3, [r6, #0]
 80423ca:	6825      	ldr	r5, [r4, #0]
 80423cc:	f015 0506 	ands.w	r5, r5, #6
 80423d0:	d106      	bne.n	80423e0 <_printf_common+0x48>
 80423d2:	f104 0a19 	add.w	sl, r4, #25
 80423d6:	68e3      	ldr	r3, [r4, #12]
 80423d8:	6832      	ldr	r2, [r6, #0]
 80423da:	1a9b      	subs	r3, r3, r2
 80423dc:	42ab      	cmp	r3, r5
 80423de:	dc2b      	bgt.n	8042438 <_printf_common+0xa0>
 80423e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80423e4:	1e13      	subs	r3, r2, #0
 80423e6:	6822      	ldr	r2, [r4, #0]
 80423e8:	bf18      	it	ne
 80423ea:	2301      	movne	r3, #1
 80423ec:	0692      	lsls	r2, r2, #26
 80423ee:	d430      	bmi.n	8042452 <_printf_common+0xba>
 80423f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80423f4:	4649      	mov	r1, r9
 80423f6:	4638      	mov	r0, r7
 80423f8:	47c0      	blx	r8
 80423fa:	3001      	adds	r0, #1
 80423fc:	d023      	beq.n	8042446 <_printf_common+0xae>
 80423fe:	6823      	ldr	r3, [r4, #0]
 8042400:	341a      	adds	r4, #26
 8042402:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8042406:	f003 0306 	and.w	r3, r3, #6
 804240a:	2b04      	cmp	r3, #4
 804240c:	bf0a      	itet	eq
 804240e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8042412:	2500      	movne	r5, #0
 8042414:	6833      	ldreq	r3, [r6, #0]
 8042416:	f04f 0600 	mov.w	r6, #0
 804241a:	bf08      	it	eq
 804241c:	1aed      	subeq	r5, r5, r3
 804241e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8042422:	bf08      	it	eq
 8042424:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8042428:	4293      	cmp	r3, r2
 804242a:	bfc4      	itt	gt
 804242c:	1a9b      	subgt	r3, r3, r2
 804242e:	18ed      	addgt	r5, r5, r3
 8042430:	42b5      	cmp	r5, r6
 8042432:	d11a      	bne.n	804246a <_printf_common+0xd2>
 8042434:	2000      	movs	r0, #0
 8042436:	e008      	b.n	804244a <_printf_common+0xb2>
 8042438:	2301      	movs	r3, #1
 804243a:	4652      	mov	r2, sl
 804243c:	4649      	mov	r1, r9
 804243e:	4638      	mov	r0, r7
 8042440:	47c0      	blx	r8
 8042442:	3001      	adds	r0, #1
 8042444:	d103      	bne.n	804244e <_printf_common+0xb6>
 8042446:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 804244a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804244e:	3501      	adds	r5, #1
 8042450:	e7c1      	b.n	80423d6 <_printf_common+0x3e>
 8042452:	18e1      	adds	r1, r4, r3
 8042454:	1c5a      	adds	r2, r3, #1
 8042456:	2030      	movs	r0, #48	; 0x30
 8042458:	3302      	adds	r3, #2
 804245a:	4422      	add	r2, r4
 804245c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8042460:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8042464:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8042468:	e7c2      	b.n	80423f0 <_printf_common+0x58>
 804246a:	2301      	movs	r3, #1
 804246c:	4622      	mov	r2, r4
 804246e:	4649      	mov	r1, r9
 8042470:	4638      	mov	r0, r7
 8042472:	47c0      	blx	r8
 8042474:	3001      	adds	r0, #1
 8042476:	d0e6      	beq.n	8042446 <_printf_common+0xae>
 8042478:	3601      	adds	r6, #1
 804247a:	e7d9      	b.n	8042430 <_printf_common+0x98>

0804247c <_printf_i>:
 804247c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8042480:	7e0f      	ldrb	r7, [r1, #24]
 8042482:	4691      	mov	r9, r2
 8042484:	4680      	mov	r8, r0
 8042486:	460c      	mov	r4, r1
 8042488:	2f78      	cmp	r7, #120	; 0x78
 804248a:	469a      	mov	sl, r3
 804248c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 804248e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8042492:	d807      	bhi.n	80424a4 <_printf_i+0x28>
 8042494:	2f62      	cmp	r7, #98	; 0x62
 8042496:	d80a      	bhi.n	80424ae <_printf_i+0x32>
 8042498:	2f00      	cmp	r7, #0
 804249a:	f000 80d3 	beq.w	8042644 <_printf_i+0x1c8>
 804249e:	2f58      	cmp	r7, #88	; 0x58
 80424a0:	f000 80bf 	beq.w	8042622 <_printf_i+0x1a6>
 80424a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80424a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80424ac:	e03a      	b.n	8042524 <_printf_i+0xa8>
 80424ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80424b2:	2b15      	cmp	r3, #21
 80424b4:	d8f6      	bhi.n	80424a4 <_printf_i+0x28>
 80424b6:	a101      	add	r1, pc, #4	; (adr r1, 80424bc <_printf_i+0x40>)
 80424b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80424bc:	08042515 	.word	0x08042515
 80424c0:	08042529 	.word	0x08042529
 80424c4:	080424a5 	.word	0x080424a5
 80424c8:	080424a5 	.word	0x080424a5
 80424cc:	080424a5 	.word	0x080424a5
 80424d0:	080424a5 	.word	0x080424a5
 80424d4:	08042529 	.word	0x08042529
 80424d8:	080424a5 	.word	0x080424a5
 80424dc:	080424a5 	.word	0x080424a5
 80424e0:	080424a5 	.word	0x080424a5
 80424e4:	080424a5 	.word	0x080424a5
 80424e8:	0804262b 	.word	0x0804262b
 80424ec:	08042555 	.word	0x08042555
 80424f0:	080425e7 	.word	0x080425e7
 80424f4:	080424a5 	.word	0x080424a5
 80424f8:	080424a5 	.word	0x080424a5
 80424fc:	0804264d 	.word	0x0804264d
 8042500:	080424a5 	.word	0x080424a5
 8042504:	08042555 	.word	0x08042555
 8042508:	080424a5 	.word	0x080424a5
 804250c:	080424a5 	.word	0x080424a5
 8042510:	080425ef 	.word	0x080425ef
 8042514:	682b      	ldr	r3, [r5, #0]
 8042516:	1d1a      	adds	r2, r3, #4
 8042518:	681b      	ldr	r3, [r3, #0]
 804251a:	602a      	str	r2, [r5, #0]
 804251c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8042520:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8042524:	2301      	movs	r3, #1
 8042526:	e09e      	b.n	8042666 <_printf_i+0x1ea>
 8042528:	6820      	ldr	r0, [r4, #0]
 804252a:	682b      	ldr	r3, [r5, #0]
 804252c:	0607      	lsls	r7, r0, #24
 804252e:	f103 0104 	add.w	r1, r3, #4
 8042532:	6029      	str	r1, [r5, #0]
 8042534:	d501      	bpl.n	804253a <_printf_i+0xbe>
 8042536:	681e      	ldr	r6, [r3, #0]
 8042538:	e003      	b.n	8042542 <_printf_i+0xc6>
 804253a:	0646      	lsls	r6, r0, #25
 804253c:	d5fb      	bpl.n	8042536 <_printf_i+0xba>
 804253e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8042542:	2e00      	cmp	r6, #0
 8042544:	da03      	bge.n	804254e <_printf_i+0xd2>
 8042546:	232d      	movs	r3, #45	; 0x2d
 8042548:	4276      	negs	r6, r6
 804254a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 804254e:	4859      	ldr	r0, [pc, #356]	; (80426b4 <_printf_i+0x238>)
 8042550:	230a      	movs	r3, #10
 8042552:	e012      	b.n	804257a <_printf_i+0xfe>
 8042554:	682b      	ldr	r3, [r5, #0]
 8042556:	6820      	ldr	r0, [r4, #0]
 8042558:	1d19      	adds	r1, r3, #4
 804255a:	6029      	str	r1, [r5, #0]
 804255c:	0605      	lsls	r5, r0, #24
 804255e:	d501      	bpl.n	8042564 <_printf_i+0xe8>
 8042560:	681e      	ldr	r6, [r3, #0]
 8042562:	e002      	b.n	804256a <_printf_i+0xee>
 8042564:	0641      	lsls	r1, r0, #25
 8042566:	d5fb      	bpl.n	8042560 <_printf_i+0xe4>
 8042568:	881e      	ldrh	r6, [r3, #0]
 804256a:	2f6f      	cmp	r7, #111	; 0x6f
 804256c:	4851      	ldr	r0, [pc, #324]	; (80426b4 <_printf_i+0x238>)
 804256e:	bf0c      	ite	eq
 8042570:	2308      	moveq	r3, #8
 8042572:	230a      	movne	r3, #10
 8042574:	2100      	movs	r1, #0
 8042576:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 804257a:	6865      	ldr	r5, [r4, #4]
 804257c:	2d00      	cmp	r5, #0
 804257e:	60a5      	str	r5, [r4, #8]
 8042580:	bfa2      	ittt	ge
 8042582:	6821      	ldrge	r1, [r4, #0]
 8042584:	f021 0104 	bicge.w	r1, r1, #4
 8042588:	6021      	strge	r1, [r4, #0]
 804258a:	b90e      	cbnz	r6, 8042590 <_printf_i+0x114>
 804258c:	2d00      	cmp	r5, #0
 804258e:	d04a      	beq.n	8042626 <_printf_i+0x1aa>
 8042590:	4615      	mov	r5, r2
 8042592:	fbb6 f1f3 	udiv	r1, r6, r3
 8042596:	fb03 6711 	mls	r7, r3, r1, r6
 804259a:	5dc7      	ldrb	r7, [r0, r7]
 804259c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80425a0:	4637      	mov	r7, r6
 80425a2:	460e      	mov	r6, r1
 80425a4:	42bb      	cmp	r3, r7
 80425a6:	d9f4      	bls.n	8042592 <_printf_i+0x116>
 80425a8:	2b08      	cmp	r3, #8
 80425aa:	d10b      	bne.n	80425c4 <_printf_i+0x148>
 80425ac:	6823      	ldr	r3, [r4, #0]
 80425ae:	07de      	lsls	r6, r3, #31
 80425b0:	d508      	bpl.n	80425c4 <_printf_i+0x148>
 80425b2:	6923      	ldr	r3, [r4, #16]
 80425b4:	6861      	ldr	r1, [r4, #4]
 80425b6:	4299      	cmp	r1, r3
 80425b8:	bfde      	ittt	le
 80425ba:	2330      	movle	r3, #48	; 0x30
 80425bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80425c0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80425c4:	1b52      	subs	r2, r2, r5
 80425c6:	6122      	str	r2, [r4, #16]
 80425c8:	464b      	mov	r3, r9
 80425ca:	aa03      	add	r2, sp, #12
 80425cc:	4621      	mov	r1, r4
 80425ce:	4640      	mov	r0, r8
 80425d0:	f8cd a000 	str.w	sl, [sp]
 80425d4:	f7ff fee0 	bl	8042398 <_printf_common>
 80425d8:	3001      	adds	r0, #1
 80425da:	d149      	bne.n	8042670 <_printf_i+0x1f4>
 80425dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80425e0:	b004      	add	sp, #16
 80425e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80425e6:	6823      	ldr	r3, [r4, #0]
 80425e8:	f043 0320 	orr.w	r3, r3, #32
 80425ec:	6023      	str	r3, [r4, #0]
 80425ee:	2778      	movs	r7, #120	; 0x78
 80425f0:	4831      	ldr	r0, [pc, #196]	; (80426b8 <_printf_i+0x23c>)
 80425f2:	6823      	ldr	r3, [r4, #0]
 80425f4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80425f8:	061f      	lsls	r7, r3, #24
 80425fa:	6829      	ldr	r1, [r5, #0]
 80425fc:	f851 6b04 	ldr.w	r6, [r1], #4
 8042600:	d402      	bmi.n	8042608 <_printf_i+0x18c>
 8042602:	065f      	lsls	r7, r3, #25
 8042604:	bf48      	it	mi
 8042606:	b2b6      	uxthmi	r6, r6
 8042608:	07df      	lsls	r7, r3, #31
 804260a:	6029      	str	r1, [r5, #0]
 804260c:	bf44      	itt	mi
 804260e:	f043 0320 	orrmi.w	r3, r3, #32
 8042612:	6023      	strmi	r3, [r4, #0]
 8042614:	b91e      	cbnz	r6, 804261e <_printf_i+0x1a2>
 8042616:	6823      	ldr	r3, [r4, #0]
 8042618:	f023 0320 	bic.w	r3, r3, #32
 804261c:	6023      	str	r3, [r4, #0]
 804261e:	2310      	movs	r3, #16
 8042620:	e7a8      	b.n	8042574 <_printf_i+0xf8>
 8042622:	4824      	ldr	r0, [pc, #144]	; (80426b4 <_printf_i+0x238>)
 8042624:	e7e5      	b.n	80425f2 <_printf_i+0x176>
 8042626:	4615      	mov	r5, r2
 8042628:	e7be      	b.n	80425a8 <_printf_i+0x12c>
 804262a:	682b      	ldr	r3, [r5, #0]
 804262c:	6826      	ldr	r6, [r4, #0]
 804262e:	1d18      	adds	r0, r3, #4
 8042630:	6961      	ldr	r1, [r4, #20]
 8042632:	6028      	str	r0, [r5, #0]
 8042634:	0635      	lsls	r5, r6, #24
 8042636:	681b      	ldr	r3, [r3, #0]
 8042638:	d501      	bpl.n	804263e <_printf_i+0x1c2>
 804263a:	6019      	str	r1, [r3, #0]
 804263c:	e002      	b.n	8042644 <_printf_i+0x1c8>
 804263e:	0670      	lsls	r0, r6, #25
 8042640:	d5fb      	bpl.n	804263a <_printf_i+0x1be>
 8042642:	8019      	strh	r1, [r3, #0]
 8042644:	2300      	movs	r3, #0
 8042646:	4615      	mov	r5, r2
 8042648:	6123      	str	r3, [r4, #16]
 804264a:	e7bd      	b.n	80425c8 <_printf_i+0x14c>
 804264c:	682b      	ldr	r3, [r5, #0]
 804264e:	2100      	movs	r1, #0
 8042650:	1d1a      	adds	r2, r3, #4
 8042652:	602a      	str	r2, [r5, #0]
 8042654:	681d      	ldr	r5, [r3, #0]
 8042656:	6862      	ldr	r2, [r4, #4]
 8042658:	4628      	mov	r0, r5
 804265a:	f000 facd 	bl	8042bf8 <memchr>
 804265e:	b108      	cbz	r0, 8042664 <_printf_i+0x1e8>
 8042660:	1b40      	subs	r0, r0, r5
 8042662:	6060      	str	r0, [r4, #4]
 8042664:	6863      	ldr	r3, [r4, #4]
 8042666:	6123      	str	r3, [r4, #16]
 8042668:	2300      	movs	r3, #0
 804266a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 804266e:	e7ab      	b.n	80425c8 <_printf_i+0x14c>
 8042670:	6923      	ldr	r3, [r4, #16]
 8042672:	462a      	mov	r2, r5
 8042674:	4649      	mov	r1, r9
 8042676:	4640      	mov	r0, r8
 8042678:	47d0      	blx	sl
 804267a:	3001      	adds	r0, #1
 804267c:	d0ae      	beq.n	80425dc <_printf_i+0x160>
 804267e:	6823      	ldr	r3, [r4, #0]
 8042680:	079b      	lsls	r3, r3, #30
 8042682:	d413      	bmi.n	80426ac <_printf_i+0x230>
 8042684:	68e0      	ldr	r0, [r4, #12]
 8042686:	9b03      	ldr	r3, [sp, #12]
 8042688:	4298      	cmp	r0, r3
 804268a:	bfb8      	it	lt
 804268c:	4618      	movlt	r0, r3
 804268e:	e7a7      	b.n	80425e0 <_printf_i+0x164>
 8042690:	2301      	movs	r3, #1
 8042692:	4632      	mov	r2, r6
 8042694:	4649      	mov	r1, r9
 8042696:	4640      	mov	r0, r8
 8042698:	47d0      	blx	sl
 804269a:	3001      	adds	r0, #1
 804269c:	d09e      	beq.n	80425dc <_printf_i+0x160>
 804269e:	3501      	adds	r5, #1
 80426a0:	68e3      	ldr	r3, [r4, #12]
 80426a2:	9903      	ldr	r1, [sp, #12]
 80426a4:	1a5b      	subs	r3, r3, r1
 80426a6:	42ab      	cmp	r3, r5
 80426a8:	dcf2      	bgt.n	8042690 <_printf_i+0x214>
 80426aa:	e7eb      	b.n	8042684 <_printf_i+0x208>
 80426ac:	2500      	movs	r5, #0
 80426ae:	f104 0619 	add.w	r6, r4, #25
 80426b2:	e7f5      	b.n	80426a0 <_printf_i+0x224>
 80426b4:	08042e01 	.word	0x08042e01
 80426b8:	08042e12 	.word	0x08042e12

080426bc <__sflush_r>:
 80426bc:	898a      	ldrh	r2, [r1, #12]
 80426be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80426c2:	4605      	mov	r5, r0
 80426c4:	0710      	lsls	r0, r2, #28
 80426c6:	460c      	mov	r4, r1
 80426c8:	d458      	bmi.n	804277c <__sflush_r+0xc0>
 80426ca:	684b      	ldr	r3, [r1, #4]
 80426cc:	2b00      	cmp	r3, #0
 80426ce:	dc05      	bgt.n	80426dc <__sflush_r+0x20>
 80426d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80426d2:	2b00      	cmp	r3, #0
 80426d4:	dc02      	bgt.n	80426dc <__sflush_r+0x20>
 80426d6:	2000      	movs	r0, #0
 80426d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80426dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80426de:	2e00      	cmp	r6, #0
 80426e0:	d0f9      	beq.n	80426d6 <__sflush_r+0x1a>
 80426e2:	2300      	movs	r3, #0
 80426e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80426e8:	682f      	ldr	r7, [r5, #0]
 80426ea:	6a21      	ldr	r1, [r4, #32]
 80426ec:	602b      	str	r3, [r5, #0]
 80426ee:	d032      	beq.n	8042756 <__sflush_r+0x9a>
 80426f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80426f2:	89a3      	ldrh	r3, [r4, #12]
 80426f4:	075a      	lsls	r2, r3, #29
 80426f6:	d505      	bpl.n	8042704 <__sflush_r+0x48>
 80426f8:	6863      	ldr	r3, [r4, #4]
 80426fa:	1ac0      	subs	r0, r0, r3
 80426fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80426fe:	b10b      	cbz	r3, 8042704 <__sflush_r+0x48>
 8042700:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8042702:	1ac0      	subs	r0, r0, r3
 8042704:	2300      	movs	r3, #0
 8042706:	4602      	mov	r2, r0
 8042708:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 804270a:	4628      	mov	r0, r5
 804270c:	6a21      	ldr	r1, [r4, #32]
 804270e:	47b0      	blx	r6
 8042710:	1c43      	adds	r3, r0, #1
 8042712:	89a3      	ldrh	r3, [r4, #12]
 8042714:	d106      	bne.n	8042724 <__sflush_r+0x68>
 8042716:	6829      	ldr	r1, [r5, #0]
 8042718:	291d      	cmp	r1, #29
 804271a:	d82b      	bhi.n	8042774 <__sflush_r+0xb8>
 804271c:	4a28      	ldr	r2, [pc, #160]	; (80427c0 <__sflush_r+0x104>)
 804271e:	410a      	asrs	r2, r1
 8042720:	07d6      	lsls	r6, r2, #31
 8042722:	d427      	bmi.n	8042774 <__sflush_r+0xb8>
 8042724:	2200      	movs	r2, #0
 8042726:	04d9      	lsls	r1, r3, #19
 8042728:	6062      	str	r2, [r4, #4]
 804272a:	6922      	ldr	r2, [r4, #16]
 804272c:	6022      	str	r2, [r4, #0]
 804272e:	d504      	bpl.n	804273a <__sflush_r+0x7e>
 8042730:	1c42      	adds	r2, r0, #1
 8042732:	d101      	bne.n	8042738 <__sflush_r+0x7c>
 8042734:	682b      	ldr	r3, [r5, #0]
 8042736:	b903      	cbnz	r3, 804273a <__sflush_r+0x7e>
 8042738:	6560      	str	r0, [r4, #84]	; 0x54
 804273a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 804273c:	602f      	str	r7, [r5, #0]
 804273e:	2900      	cmp	r1, #0
 8042740:	d0c9      	beq.n	80426d6 <__sflush_r+0x1a>
 8042742:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8042746:	4299      	cmp	r1, r3
 8042748:	d002      	beq.n	8042750 <__sflush_r+0x94>
 804274a:	4628      	mov	r0, r5
 804274c:	f000 fa62 	bl	8042c14 <_free_r>
 8042750:	2000      	movs	r0, #0
 8042752:	6360      	str	r0, [r4, #52]	; 0x34
 8042754:	e7c0      	b.n	80426d8 <__sflush_r+0x1c>
 8042756:	2301      	movs	r3, #1
 8042758:	4628      	mov	r0, r5
 804275a:	47b0      	blx	r6
 804275c:	1c41      	adds	r1, r0, #1
 804275e:	d1c8      	bne.n	80426f2 <__sflush_r+0x36>
 8042760:	682b      	ldr	r3, [r5, #0]
 8042762:	2b00      	cmp	r3, #0
 8042764:	d0c5      	beq.n	80426f2 <__sflush_r+0x36>
 8042766:	2b1d      	cmp	r3, #29
 8042768:	d001      	beq.n	804276e <__sflush_r+0xb2>
 804276a:	2b16      	cmp	r3, #22
 804276c:	d101      	bne.n	8042772 <__sflush_r+0xb6>
 804276e:	602f      	str	r7, [r5, #0]
 8042770:	e7b1      	b.n	80426d6 <__sflush_r+0x1a>
 8042772:	89a3      	ldrh	r3, [r4, #12]
 8042774:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8042778:	81a3      	strh	r3, [r4, #12]
 804277a:	e7ad      	b.n	80426d8 <__sflush_r+0x1c>
 804277c:	690f      	ldr	r7, [r1, #16]
 804277e:	2f00      	cmp	r7, #0
 8042780:	d0a9      	beq.n	80426d6 <__sflush_r+0x1a>
 8042782:	0793      	lsls	r3, r2, #30
 8042784:	680e      	ldr	r6, [r1, #0]
 8042786:	600f      	str	r7, [r1, #0]
 8042788:	bf0c      	ite	eq
 804278a:	694b      	ldreq	r3, [r1, #20]
 804278c:	2300      	movne	r3, #0
 804278e:	eba6 0807 	sub.w	r8, r6, r7
 8042792:	608b      	str	r3, [r1, #8]
 8042794:	f1b8 0f00 	cmp.w	r8, #0
 8042798:	dd9d      	ble.n	80426d6 <__sflush_r+0x1a>
 804279a:	4643      	mov	r3, r8
 804279c:	463a      	mov	r2, r7
 804279e:	6a21      	ldr	r1, [r4, #32]
 80427a0:	4628      	mov	r0, r5
 80427a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80427a4:	47b0      	blx	r6
 80427a6:	2800      	cmp	r0, #0
 80427a8:	dc06      	bgt.n	80427b8 <__sflush_r+0xfc>
 80427aa:	89a3      	ldrh	r3, [r4, #12]
 80427ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80427b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80427b4:	81a3      	strh	r3, [r4, #12]
 80427b6:	e78f      	b.n	80426d8 <__sflush_r+0x1c>
 80427b8:	4407      	add	r7, r0
 80427ba:	eba8 0800 	sub.w	r8, r8, r0
 80427be:	e7e9      	b.n	8042794 <__sflush_r+0xd8>
 80427c0:	dfbffffe 	.word	0xdfbffffe

080427c4 <_fflush_r>:
 80427c4:	b538      	push	{r3, r4, r5, lr}
 80427c6:	690b      	ldr	r3, [r1, #16]
 80427c8:	4605      	mov	r5, r0
 80427ca:	460c      	mov	r4, r1
 80427cc:	b913      	cbnz	r3, 80427d4 <_fflush_r+0x10>
 80427ce:	2500      	movs	r5, #0
 80427d0:	4628      	mov	r0, r5
 80427d2:	bd38      	pop	{r3, r4, r5, pc}
 80427d4:	b118      	cbz	r0, 80427de <_fflush_r+0x1a>
 80427d6:	6a03      	ldr	r3, [r0, #32]
 80427d8:	b90b      	cbnz	r3, 80427de <_fflush_r+0x1a>
 80427da:	f7ff fb75 	bl	8041ec8 <__sinit>
 80427de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80427e2:	2b00      	cmp	r3, #0
 80427e4:	d0f3      	beq.n	80427ce <_fflush_r+0xa>
 80427e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80427e8:	07d0      	lsls	r0, r2, #31
 80427ea:	d404      	bmi.n	80427f6 <_fflush_r+0x32>
 80427ec:	0599      	lsls	r1, r3, #22
 80427ee:	d402      	bmi.n	80427f6 <_fflush_r+0x32>
 80427f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80427f2:	f7ff fbec 	bl	8041fce <__retarget_lock_acquire_recursive>
 80427f6:	4628      	mov	r0, r5
 80427f8:	4621      	mov	r1, r4
 80427fa:	f7ff ff5f 	bl	80426bc <__sflush_r>
 80427fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8042800:	4605      	mov	r5, r0
 8042802:	07da      	lsls	r2, r3, #31
 8042804:	d4e4      	bmi.n	80427d0 <_fflush_r+0xc>
 8042806:	89a3      	ldrh	r3, [r4, #12]
 8042808:	059b      	lsls	r3, r3, #22
 804280a:	d4e1      	bmi.n	80427d0 <_fflush_r+0xc>
 804280c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 804280e:	f7ff fbdf 	bl	8041fd0 <__retarget_lock_release_recursive>
 8042812:	e7dd      	b.n	80427d0 <_fflush_r+0xc>

08042814 <__malloc_lock>:
 8042814:	4801      	ldr	r0, [pc, #4]	; (804281c <__malloc_lock+0x8>)
 8042816:	f7ff bbda 	b.w	8041fce <__retarget_lock_acquire_recursive>
 804281a:	bf00      	nop
 804281c:	20018228 	.word	0x20018228

08042820 <__malloc_unlock>:
 8042820:	4801      	ldr	r0, [pc, #4]	; (8042828 <__malloc_unlock+0x8>)
 8042822:	f7ff bbd5 	b.w	8041fd0 <__retarget_lock_release_recursive>
 8042826:	bf00      	nop
 8042828:	20018228 	.word	0x20018228

0804282c <__sread>:
 804282c:	b510      	push	{r4, lr}
 804282e:	460c      	mov	r4, r1
 8042830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8042834:	f000 f9ac 	bl	8042b90 <_read_r>
 8042838:	2800      	cmp	r0, #0
 804283a:	bfab      	itete	ge
 804283c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 804283e:	89a3      	ldrhlt	r3, [r4, #12]
 8042840:	181b      	addge	r3, r3, r0
 8042842:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8042846:	bfac      	ite	ge
 8042848:	6563      	strge	r3, [r4, #84]	; 0x54
 804284a:	81a3      	strhlt	r3, [r4, #12]
 804284c:	bd10      	pop	{r4, pc}

0804284e <__swrite>:
 804284e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8042852:	461f      	mov	r7, r3
 8042854:	898b      	ldrh	r3, [r1, #12]
 8042856:	4605      	mov	r5, r0
 8042858:	460c      	mov	r4, r1
 804285a:	05db      	lsls	r3, r3, #23
 804285c:	4616      	mov	r6, r2
 804285e:	d505      	bpl.n	804286c <__swrite+0x1e>
 8042860:	2302      	movs	r3, #2
 8042862:	2200      	movs	r2, #0
 8042864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8042868:	f000 f980 	bl	8042b6c <_lseek_r>
 804286c:	89a3      	ldrh	r3, [r4, #12]
 804286e:	4632      	mov	r2, r6
 8042870:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8042874:	4628      	mov	r0, r5
 8042876:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 804287a:	81a3      	strh	r3, [r4, #12]
 804287c:	463b      	mov	r3, r7
 804287e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8042882:	f000 b9a7 	b.w	8042bd4 <_write_r>

08042886 <__sseek>:
 8042886:	b510      	push	{r4, lr}
 8042888:	460c      	mov	r4, r1
 804288a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804288e:	f000 f96d 	bl	8042b6c <_lseek_r>
 8042892:	1c43      	adds	r3, r0, #1
 8042894:	89a3      	ldrh	r3, [r4, #12]
 8042896:	bf15      	itete	ne
 8042898:	6560      	strne	r0, [r4, #84]	; 0x54
 804289a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 804289e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80428a2:	81a3      	strheq	r3, [r4, #12]
 80428a4:	bf18      	it	ne
 80428a6:	81a3      	strhne	r3, [r4, #12]
 80428a8:	bd10      	pop	{r4, pc}

080428aa <__sclose>:
 80428aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80428ae:	f000 b92b 	b.w	8042b08 <_close_r>

080428b2 <__swbuf_r>:
 80428b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80428b4:	460e      	mov	r6, r1
 80428b6:	4614      	mov	r4, r2
 80428b8:	4605      	mov	r5, r0
 80428ba:	b118      	cbz	r0, 80428c4 <__swbuf_r+0x12>
 80428bc:	6a03      	ldr	r3, [r0, #32]
 80428be:	b90b      	cbnz	r3, 80428c4 <__swbuf_r+0x12>
 80428c0:	f7ff fb02 	bl	8041ec8 <__sinit>
 80428c4:	69a3      	ldr	r3, [r4, #24]
 80428c6:	60a3      	str	r3, [r4, #8]
 80428c8:	89a3      	ldrh	r3, [r4, #12]
 80428ca:	071a      	lsls	r2, r3, #28
 80428cc:	d525      	bpl.n	804291a <__swbuf_r+0x68>
 80428ce:	6923      	ldr	r3, [r4, #16]
 80428d0:	b31b      	cbz	r3, 804291a <__swbuf_r+0x68>
 80428d2:	6823      	ldr	r3, [r4, #0]
 80428d4:	b2f6      	uxtb	r6, r6
 80428d6:	6922      	ldr	r2, [r4, #16]
 80428d8:	4637      	mov	r7, r6
 80428da:	1a98      	subs	r0, r3, r2
 80428dc:	6963      	ldr	r3, [r4, #20]
 80428de:	4283      	cmp	r3, r0
 80428e0:	dc04      	bgt.n	80428ec <__swbuf_r+0x3a>
 80428e2:	4621      	mov	r1, r4
 80428e4:	4628      	mov	r0, r5
 80428e6:	f7ff ff6d 	bl	80427c4 <_fflush_r>
 80428ea:	b9e0      	cbnz	r0, 8042926 <__swbuf_r+0x74>
 80428ec:	68a3      	ldr	r3, [r4, #8]
 80428ee:	3b01      	subs	r3, #1
 80428f0:	60a3      	str	r3, [r4, #8]
 80428f2:	6823      	ldr	r3, [r4, #0]
 80428f4:	1c5a      	adds	r2, r3, #1
 80428f6:	6022      	str	r2, [r4, #0]
 80428f8:	701e      	strb	r6, [r3, #0]
 80428fa:	1c43      	adds	r3, r0, #1
 80428fc:	6962      	ldr	r2, [r4, #20]
 80428fe:	429a      	cmp	r2, r3
 8042900:	d004      	beq.n	804290c <__swbuf_r+0x5a>
 8042902:	89a3      	ldrh	r3, [r4, #12]
 8042904:	07db      	lsls	r3, r3, #31
 8042906:	d506      	bpl.n	8042916 <__swbuf_r+0x64>
 8042908:	2e0a      	cmp	r6, #10
 804290a:	d104      	bne.n	8042916 <__swbuf_r+0x64>
 804290c:	4621      	mov	r1, r4
 804290e:	4628      	mov	r0, r5
 8042910:	f7ff ff58 	bl	80427c4 <_fflush_r>
 8042914:	b938      	cbnz	r0, 8042926 <__swbuf_r+0x74>
 8042916:	4638      	mov	r0, r7
 8042918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 804291a:	4621      	mov	r1, r4
 804291c:	4628      	mov	r0, r5
 804291e:	f000 f805 	bl	804292c <__swsetup_r>
 8042922:	2800      	cmp	r0, #0
 8042924:	d0d5      	beq.n	80428d2 <__swbuf_r+0x20>
 8042926:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 804292a:	e7f4      	b.n	8042916 <__swbuf_r+0x64>

0804292c <__swsetup_r>:
 804292c:	b538      	push	{r3, r4, r5, lr}
 804292e:	4b2a      	ldr	r3, [pc, #168]	; (80429d8 <__swsetup_r+0xac>)
 8042930:	4605      	mov	r5, r0
 8042932:	460c      	mov	r4, r1
 8042934:	6818      	ldr	r0, [r3, #0]
 8042936:	b118      	cbz	r0, 8042940 <__swsetup_r+0x14>
 8042938:	6a03      	ldr	r3, [r0, #32]
 804293a:	b90b      	cbnz	r3, 8042940 <__swsetup_r+0x14>
 804293c:	f7ff fac4 	bl	8041ec8 <__sinit>
 8042940:	89a3      	ldrh	r3, [r4, #12]
 8042942:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8042946:	0718      	lsls	r0, r3, #28
 8042948:	d422      	bmi.n	8042990 <__swsetup_r+0x64>
 804294a:	06d9      	lsls	r1, r3, #27
 804294c:	d407      	bmi.n	804295e <__swsetup_r+0x32>
 804294e:	2309      	movs	r3, #9
 8042950:	602b      	str	r3, [r5, #0]
 8042952:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8042956:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 804295a:	81a3      	strh	r3, [r4, #12]
 804295c:	e034      	b.n	80429c8 <__swsetup_r+0x9c>
 804295e:	0758      	lsls	r0, r3, #29
 8042960:	d512      	bpl.n	8042988 <__swsetup_r+0x5c>
 8042962:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8042964:	b141      	cbz	r1, 8042978 <__swsetup_r+0x4c>
 8042966:	f104 0344 	add.w	r3, r4, #68	; 0x44
 804296a:	4299      	cmp	r1, r3
 804296c:	d002      	beq.n	8042974 <__swsetup_r+0x48>
 804296e:	4628      	mov	r0, r5
 8042970:	f000 f950 	bl	8042c14 <_free_r>
 8042974:	2300      	movs	r3, #0
 8042976:	6363      	str	r3, [r4, #52]	; 0x34
 8042978:	89a3      	ldrh	r3, [r4, #12]
 804297a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 804297e:	81a3      	strh	r3, [r4, #12]
 8042980:	2300      	movs	r3, #0
 8042982:	6063      	str	r3, [r4, #4]
 8042984:	6923      	ldr	r3, [r4, #16]
 8042986:	6023      	str	r3, [r4, #0]
 8042988:	89a3      	ldrh	r3, [r4, #12]
 804298a:	f043 0308 	orr.w	r3, r3, #8
 804298e:	81a3      	strh	r3, [r4, #12]
 8042990:	6923      	ldr	r3, [r4, #16]
 8042992:	b94b      	cbnz	r3, 80429a8 <__swsetup_r+0x7c>
 8042994:	89a3      	ldrh	r3, [r4, #12]
 8042996:	f403 7320 	and.w	r3, r3, #640	; 0x280
 804299a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 804299e:	d003      	beq.n	80429a8 <__swsetup_r+0x7c>
 80429a0:	4621      	mov	r1, r4
 80429a2:	4628      	mov	r0, r5
 80429a4:	f000 f83f 	bl	8042a26 <__smakebuf_r>
 80429a8:	89a0      	ldrh	r0, [r4, #12]
 80429aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80429ae:	f010 0301 	ands.w	r3, r0, #1
 80429b2:	d00a      	beq.n	80429ca <__swsetup_r+0x9e>
 80429b4:	2300      	movs	r3, #0
 80429b6:	60a3      	str	r3, [r4, #8]
 80429b8:	6963      	ldr	r3, [r4, #20]
 80429ba:	425b      	negs	r3, r3
 80429bc:	61a3      	str	r3, [r4, #24]
 80429be:	6923      	ldr	r3, [r4, #16]
 80429c0:	b943      	cbnz	r3, 80429d4 <__swsetup_r+0xa8>
 80429c2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80429c6:	d1c4      	bne.n	8042952 <__swsetup_r+0x26>
 80429c8:	bd38      	pop	{r3, r4, r5, pc}
 80429ca:	0781      	lsls	r1, r0, #30
 80429cc:	bf58      	it	pl
 80429ce:	6963      	ldrpl	r3, [r4, #20]
 80429d0:	60a3      	str	r3, [r4, #8]
 80429d2:	e7f4      	b.n	80429be <__swsetup_r+0x92>
 80429d4:	2000      	movs	r0, #0
 80429d6:	e7f7      	b.n	80429c8 <__swsetup_r+0x9c>
 80429d8:	200180c4 	.word	0x200180c4

080429dc <__swhatbuf_r>:
 80429dc:	b570      	push	{r4, r5, r6, lr}
 80429de:	460c      	mov	r4, r1
 80429e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80429e4:	b096      	sub	sp, #88	; 0x58
 80429e6:	4615      	mov	r5, r2
 80429e8:	2900      	cmp	r1, #0
 80429ea:	461e      	mov	r6, r3
 80429ec:	da0c      	bge.n	8042a08 <__swhatbuf_r+0x2c>
 80429ee:	89a3      	ldrh	r3, [r4, #12]
 80429f0:	2100      	movs	r1, #0
 80429f2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80429f6:	bf0c      	ite	eq
 80429f8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80429fc:	2340      	movne	r3, #64	; 0x40
 80429fe:	2000      	movs	r0, #0
 8042a00:	6031      	str	r1, [r6, #0]
 8042a02:	602b      	str	r3, [r5, #0]
 8042a04:	b016      	add	sp, #88	; 0x58
 8042a06:	bd70      	pop	{r4, r5, r6, pc}
 8042a08:	466a      	mov	r2, sp
 8042a0a:	f000 f88d 	bl	8042b28 <_fstat_r>
 8042a0e:	2800      	cmp	r0, #0
 8042a10:	dbed      	blt.n	80429ee <__swhatbuf_r+0x12>
 8042a12:	9901      	ldr	r1, [sp, #4]
 8042a14:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8042a18:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8042a1c:	4259      	negs	r1, r3
 8042a1e:	4159      	adcs	r1, r3
 8042a20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8042a24:	e7eb      	b.n	80429fe <__swhatbuf_r+0x22>

08042a26 <__smakebuf_r>:
 8042a26:	898b      	ldrh	r3, [r1, #12]
 8042a28:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8042a2a:	079d      	lsls	r5, r3, #30
 8042a2c:	4606      	mov	r6, r0
 8042a2e:	460c      	mov	r4, r1
 8042a30:	d507      	bpl.n	8042a42 <__smakebuf_r+0x1c>
 8042a32:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8042a36:	6023      	str	r3, [r4, #0]
 8042a38:	6123      	str	r3, [r4, #16]
 8042a3a:	2301      	movs	r3, #1
 8042a3c:	6163      	str	r3, [r4, #20]
 8042a3e:	b002      	add	sp, #8
 8042a40:	bd70      	pop	{r4, r5, r6, pc}
 8042a42:	ab01      	add	r3, sp, #4
 8042a44:	466a      	mov	r2, sp
 8042a46:	f7ff ffc9 	bl	80429dc <__swhatbuf_r>
 8042a4a:	9900      	ldr	r1, [sp, #0]
 8042a4c:	4605      	mov	r5, r0
 8042a4e:	4630      	mov	r0, r6
 8042a50:	f7ff fc22 	bl	8042298 <_malloc_r>
 8042a54:	b948      	cbnz	r0, 8042a6a <__smakebuf_r+0x44>
 8042a56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8042a5a:	059a      	lsls	r2, r3, #22
 8042a5c:	d4ef      	bmi.n	8042a3e <__smakebuf_r+0x18>
 8042a5e:	f023 0303 	bic.w	r3, r3, #3
 8042a62:	f043 0302 	orr.w	r3, r3, #2
 8042a66:	81a3      	strh	r3, [r4, #12]
 8042a68:	e7e3      	b.n	8042a32 <__smakebuf_r+0xc>
 8042a6a:	89a3      	ldrh	r3, [r4, #12]
 8042a6c:	6020      	str	r0, [r4, #0]
 8042a6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8042a72:	6120      	str	r0, [r4, #16]
 8042a74:	81a3      	strh	r3, [r4, #12]
 8042a76:	9b00      	ldr	r3, [sp, #0]
 8042a78:	6163      	str	r3, [r4, #20]
 8042a7a:	9b01      	ldr	r3, [sp, #4]
 8042a7c:	b15b      	cbz	r3, 8042a96 <__smakebuf_r+0x70>
 8042a7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8042a82:	4630      	mov	r0, r6
 8042a84:	f000 f862 	bl	8042b4c <_isatty_r>
 8042a88:	b128      	cbz	r0, 8042a96 <__smakebuf_r+0x70>
 8042a8a:	89a3      	ldrh	r3, [r4, #12]
 8042a8c:	f023 0303 	bic.w	r3, r3, #3
 8042a90:	f043 0301 	orr.w	r3, r3, #1
 8042a94:	81a3      	strh	r3, [r4, #12]
 8042a96:	89a3      	ldrh	r3, [r4, #12]
 8042a98:	431d      	orrs	r5, r3
 8042a9a:	81a5      	strh	r5, [r4, #12]
 8042a9c:	e7cf      	b.n	8042a3e <__smakebuf_r+0x18>

08042a9e <_putc_r>:
 8042a9e:	b570      	push	{r4, r5, r6, lr}
 8042aa0:	460d      	mov	r5, r1
 8042aa2:	4614      	mov	r4, r2
 8042aa4:	4606      	mov	r6, r0
 8042aa6:	b118      	cbz	r0, 8042ab0 <_putc_r+0x12>
 8042aa8:	6a03      	ldr	r3, [r0, #32]
 8042aaa:	b90b      	cbnz	r3, 8042ab0 <_putc_r+0x12>
 8042aac:	f7ff fa0c 	bl	8041ec8 <__sinit>
 8042ab0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8042ab2:	07d8      	lsls	r0, r3, #31
 8042ab4:	d405      	bmi.n	8042ac2 <_putc_r+0x24>
 8042ab6:	89a3      	ldrh	r3, [r4, #12]
 8042ab8:	0599      	lsls	r1, r3, #22
 8042aba:	d402      	bmi.n	8042ac2 <_putc_r+0x24>
 8042abc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8042abe:	f7ff fa86 	bl	8041fce <__retarget_lock_acquire_recursive>
 8042ac2:	68a3      	ldr	r3, [r4, #8]
 8042ac4:	3b01      	subs	r3, #1
 8042ac6:	2b00      	cmp	r3, #0
 8042ac8:	60a3      	str	r3, [r4, #8]
 8042aca:	da05      	bge.n	8042ad8 <_putc_r+0x3a>
 8042acc:	69a2      	ldr	r2, [r4, #24]
 8042ace:	4293      	cmp	r3, r2
 8042ad0:	db12      	blt.n	8042af8 <_putc_r+0x5a>
 8042ad2:	b2eb      	uxtb	r3, r5
 8042ad4:	2b0a      	cmp	r3, #10
 8042ad6:	d00f      	beq.n	8042af8 <_putc_r+0x5a>
 8042ad8:	6823      	ldr	r3, [r4, #0]
 8042ada:	1c5a      	adds	r2, r3, #1
 8042adc:	6022      	str	r2, [r4, #0]
 8042ade:	701d      	strb	r5, [r3, #0]
 8042ae0:	b2ed      	uxtb	r5, r5
 8042ae2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8042ae4:	07da      	lsls	r2, r3, #31
 8042ae6:	d405      	bmi.n	8042af4 <_putc_r+0x56>
 8042ae8:	89a3      	ldrh	r3, [r4, #12]
 8042aea:	059b      	lsls	r3, r3, #22
 8042aec:	d402      	bmi.n	8042af4 <_putc_r+0x56>
 8042aee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8042af0:	f7ff fa6e 	bl	8041fd0 <__retarget_lock_release_recursive>
 8042af4:	4628      	mov	r0, r5
 8042af6:	bd70      	pop	{r4, r5, r6, pc}
 8042af8:	4629      	mov	r1, r5
 8042afa:	4622      	mov	r2, r4
 8042afc:	4630      	mov	r0, r6
 8042afe:	f7ff fed8 	bl	80428b2 <__swbuf_r>
 8042b02:	4605      	mov	r5, r0
 8042b04:	e7ed      	b.n	8042ae2 <_putc_r+0x44>
	...

08042b08 <_close_r>:
 8042b08:	b538      	push	{r3, r4, r5, lr}
 8042b0a:	2300      	movs	r3, #0
 8042b0c:	4d05      	ldr	r5, [pc, #20]	; (8042b24 <_close_r+0x1c>)
 8042b0e:	4604      	mov	r4, r0
 8042b10:	4608      	mov	r0, r1
 8042b12:	602b      	str	r3, [r5, #0]
 8042b14:	f7fd fd7b 	bl	804060e <_close>
 8042b18:	1c43      	adds	r3, r0, #1
 8042b1a:	d102      	bne.n	8042b22 <_close_r+0x1a>
 8042b1c:	682b      	ldr	r3, [r5, #0]
 8042b1e:	b103      	cbz	r3, 8042b22 <_close_r+0x1a>
 8042b20:	6023      	str	r3, [r4, #0]
 8042b22:	bd38      	pop	{r3, r4, r5, pc}
 8042b24:	20018234 	.word	0x20018234

08042b28 <_fstat_r>:
 8042b28:	b538      	push	{r3, r4, r5, lr}
 8042b2a:	2300      	movs	r3, #0
 8042b2c:	4d06      	ldr	r5, [pc, #24]	; (8042b48 <_fstat_r+0x20>)
 8042b2e:	4604      	mov	r4, r0
 8042b30:	4608      	mov	r0, r1
 8042b32:	4611      	mov	r1, r2
 8042b34:	602b      	str	r3, [r5, #0]
 8042b36:	f7fd fd76 	bl	8040626 <_fstat>
 8042b3a:	1c43      	adds	r3, r0, #1
 8042b3c:	d102      	bne.n	8042b44 <_fstat_r+0x1c>
 8042b3e:	682b      	ldr	r3, [r5, #0]
 8042b40:	b103      	cbz	r3, 8042b44 <_fstat_r+0x1c>
 8042b42:	6023      	str	r3, [r4, #0]
 8042b44:	bd38      	pop	{r3, r4, r5, pc}
 8042b46:	bf00      	nop
 8042b48:	20018234 	.word	0x20018234

08042b4c <_isatty_r>:
 8042b4c:	b538      	push	{r3, r4, r5, lr}
 8042b4e:	2300      	movs	r3, #0
 8042b50:	4d05      	ldr	r5, [pc, #20]	; (8042b68 <_isatty_r+0x1c>)
 8042b52:	4604      	mov	r4, r0
 8042b54:	4608      	mov	r0, r1
 8042b56:	602b      	str	r3, [r5, #0]
 8042b58:	f7fd fd75 	bl	8040646 <_isatty>
 8042b5c:	1c43      	adds	r3, r0, #1
 8042b5e:	d102      	bne.n	8042b66 <_isatty_r+0x1a>
 8042b60:	682b      	ldr	r3, [r5, #0]
 8042b62:	b103      	cbz	r3, 8042b66 <_isatty_r+0x1a>
 8042b64:	6023      	str	r3, [r4, #0]
 8042b66:	bd38      	pop	{r3, r4, r5, pc}
 8042b68:	20018234 	.word	0x20018234

08042b6c <_lseek_r>:
 8042b6c:	b538      	push	{r3, r4, r5, lr}
 8042b6e:	4604      	mov	r4, r0
 8042b70:	4d06      	ldr	r5, [pc, #24]	; (8042b8c <_lseek_r+0x20>)
 8042b72:	4608      	mov	r0, r1
 8042b74:	4611      	mov	r1, r2
 8042b76:	2200      	movs	r2, #0
 8042b78:	602a      	str	r2, [r5, #0]
 8042b7a:	461a      	mov	r2, r3
 8042b7c:	f7fd fd6e 	bl	804065c <_lseek>
 8042b80:	1c43      	adds	r3, r0, #1
 8042b82:	d102      	bne.n	8042b8a <_lseek_r+0x1e>
 8042b84:	682b      	ldr	r3, [r5, #0]
 8042b86:	b103      	cbz	r3, 8042b8a <_lseek_r+0x1e>
 8042b88:	6023      	str	r3, [r4, #0]
 8042b8a:	bd38      	pop	{r3, r4, r5, pc}
 8042b8c:	20018234 	.word	0x20018234

08042b90 <_read_r>:
 8042b90:	b538      	push	{r3, r4, r5, lr}
 8042b92:	4604      	mov	r4, r0
 8042b94:	4d06      	ldr	r5, [pc, #24]	; (8042bb0 <_read_r+0x20>)
 8042b96:	4608      	mov	r0, r1
 8042b98:	4611      	mov	r1, r2
 8042b9a:	2200      	movs	r2, #0
 8042b9c:	602a      	str	r2, [r5, #0]
 8042b9e:	461a      	mov	r2, r3
 8042ba0:	f7fd fcfc 	bl	804059c <_read>
 8042ba4:	1c43      	adds	r3, r0, #1
 8042ba6:	d102      	bne.n	8042bae <_read_r+0x1e>
 8042ba8:	682b      	ldr	r3, [r5, #0]
 8042baa:	b103      	cbz	r3, 8042bae <_read_r+0x1e>
 8042bac:	6023      	str	r3, [r4, #0]
 8042bae:	bd38      	pop	{r3, r4, r5, pc}
 8042bb0:	20018234 	.word	0x20018234

08042bb4 <_sbrk_r>:
 8042bb4:	b538      	push	{r3, r4, r5, lr}
 8042bb6:	2300      	movs	r3, #0
 8042bb8:	4d05      	ldr	r5, [pc, #20]	; (8042bd0 <_sbrk_r+0x1c>)
 8042bba:	4604      	mov	r4, r0
 8042bbc:	4608      	mov	r0, r1
 8042bbe:	602b      	str	r3, [r5, #0]
 8042bc0:	f7fd fd5a 	bl	8040678 <_sbrk>
 8042bc4:	1c43      	adds	r3, r0, #1
 8042bc6:	d102      	bne.n	8042bce <_sbrk_r+0x1a>
 8042bc8:	682b      	ldr	r3, [r5, #0]
 8042bca:	b103      	cbz	r3, 8042bce <_sbrk_r+0x1a>
 8042bcc:	6023      	str	r3, [r4, #0]
 8042bce:	bd38      	pop	{r3, r4, r5, pc}
 8042bd0:	20018234 	.word	0x20018234

08042bd4 <_write_r>:
 8042bd4:	b538      	push	{r3, r4, r5, lr}
 8042bd6:	4604      	mov	r4, r0
 8042bd8:	4d06      	ldr	r5, [pc, #24]	; (8042bf4 <_write_r+0x20>)
 8042bda:	4608      	mov	r0, r1
 8042bdc:	4611      	mov	r1, r2
 8042bde:	2200      	movs	r2, #0
 8042be0:	602a      	str	r2, [r5, #0]
 8042be2:	461a      	mov	r2, r3
 8042be4:	f7fd fcf7 	bl	80405d6 <_write>
 8042be8:	1c43      	adds	r3, r0, #1
 8042bea:	d102      	bne.n	8042bf2 <_write_r+0x1e>
 8042bec:	682b      	ldr	r3, [r5, #0]
 8042bee:	b103      	cbz	r3, 8042bf2 <_write_r+0x1e>
 8042bf0:	6023      	str	r3, [r4, #0]
 8042bf2:	bd38      	pop	{r3, r4, r5, pc}
 8042bf4:	20018234 	.word	0x20018234

08042bf8 <memchr>:
 8042bf8:	b2c9      	uxtb	r1, r1
 8042bfa:	4402      	add	r2, r0
 8042bfc:	b510      	push	{r4, lr}
 8042bfe:	4290      	cmp	r0, r2
 8042c00:	4603      	mov	r3, r0
 8042c02:	d101      	bne.n	8042c08 <memchr+0x10>
 8042c04:	2300      	movs	r3, #0
 8042c06:	e003      	b.n	8042c10 <memchr+0x18>
 8042c08:	781c      	ldrb	r4, [r3, #0]
 8042c0a:	3001      	adds	r0, #1
 8042c0c:	428c      	cmp	r4, r1
 8042c0e:	d1f6      	bne.n	8042bfe <memchr+0x6>
 8042c10:	4618      	mov	r0, r3
 8042c12:	bd10      	pop	{r4, pc}

08042c14 <_free_r>:
 8042c14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8042c16:	2900      	cmp	r1, #0
 8042c18:	d043      	beq.n	8042ca2 <_free_r+0x8e>
 8042c1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8042c1e:	1f0c      	subs	r4, r1, #4
 8042c20:	9001      	str	r0, [sp, #4]
 8042c22:	2b00      	cmp	r3, #0
 8042c24:	bfb8      	it	lt
 8042c26:	18e4      	addlt	r4, r4, r3
 8042c28:	f7ff fdf4 	bl	8042814 <__malloc_lock>
 8042c2c:	4a1e      	ldr	r2, [pc, #120]	; (8042ca8 <_free_r+0x94>)
 8042c2e:	9801      	ldr	r0, [sp, #4]
 8042c30:	6813      	ldr	r3, [r2, #0]
 8042c32:	b933      	cbnz	r3, 8042c42 <_free_r+0x2e>
 8042c34:	6063      	str	r3, [r4, #4]
 8042c36:	6014      	str	r4, [r2, #0]
 8042c38:	b003      	add	sp, #12
 8042c3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8042c3e:	f7ff bdef 	b.w	8042820 <__malloc_unlock>
 8042c42:	42a3      	cmp	r3, r4
 8042c44:	d908      	bls.n	8042c58 <_free_r+0x44>
 8042c46:	6825      	ldr	r5, [r4, #0]
 8042c48:	1961      	adds	r1, r4, r5
 8042c4a:	428b      	cmp	r3, r1
 8042c4c:	bf01      	itttt	eq
 8042c4e:	6819      	ldreq	r1, [r3, #0]
 8042c50:	685b      	ldreq	r3, [r3, #4]
 8042c52:	1949      	addeq	r1, r1, r5
 8042c54:	6021      	streq	r1, [r4, #0]
 8042c56:	e7ed      	b.n	8042c34 <_free_r+0x20>
 8042c58:	461a      	mov	r2, r3
 8042c5a:	685b      	ldr	r3, [r3, #4]
 8042c5c:	b10b      	cbz	r3, 8042c62 <_free_r+0x4e>
 8042c5e:	42a3      	cmp	r3, r4
 8042c60:	d9fa      	bls.n	8042c58 <_free_r+0x44>
 8042c62:	6811      	ldr	r1, [r2, #0]
 8042c64:	1855      	adds	r5, r2, r1
 8042c66:	42a5      	cmp	r5, r4
 8042c68:	d10b      	bne.n	8042c82 <_free_r+0x6e>
 8042c6a:	6824      	ldr	r4, [r4, #0]
 8042c6c:	4421      	add	r1, r4
 8042c6e:	1854      	adds	r4, r2, r1
 8042c70:	6011      	str	r1, [r2, #0]
 8042c72:	42a3      	cmp	r3, r4
 8042c74:	d1e0      	bne.n	8042c38 <_free_r+0x24>
 8042c76:	681c      	ldr	r4, [r3, #0]
 8042c78:	685b      	ldr	r3, [r3, #4]
 8042c7a:	440c      	add	r4, r1
 8042c7c:	6053      	str	r3, [r2, #4]
 8042c7e:	6014      	str	r4, [r2, #0]
 8042c80:	e7da      	b.n	8042c38 <_free_r+0x24>
 8042c82:	d902      	bls.n	8042c8a <_free_r+0x76>
 8042c84:	230c      	movs	r3, #12
 8042c86:	6003      	str	r3, [r0, #0]
 8042c88:	e7d6      	b.n	8042c38 <_free_r+0x24>
 8042c8a:	6825      	ldr	r5, [r4, #0]
 8042c8c:	1961      	adds	r1, r4, r5
 8042c8e:	428b      	cmp	r3, r1
 8042c90:	bf02      	ittt	eq
 8042c92:	6819      	ldreq	r1, [r3, #0]
 8042c94:	685b      	ldreq	r3, [r3, #4]
 8042c96:	1949      	addeq	r1, r1, r5
 8042c98:	6063      	str	r3, [r4, #4]
 8042c9a:	bf08      	it	eq
 8042c9c:	6021      	streq	r1, [r4, #0]
 8042c9e:	6054      	str	r4, [r2, #4]
 8042ca0:	e7ca      	b.n	8042c38 <_free_r+0x24>
 8042ca2:	b003      	add	sp, #12
 8042ca4:	bd30      	pop	{r4, r5, pc}
 8042ca6:	bf00      	nop
 8042ca8:	2001822c 	.word	0x2001822c

08042cac <_init>:
 8042cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8042cae:	bf00      	nop
 8042cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8042cb2:	bc08      	pop	{r3}
 8042cb4:	469e      	mov	lr, r3
 8042cb6:	4770      	bx	lr

08042cb8 <_fini>:
 8042cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8042cba:	bf00      	nop
 8042cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8042cbe:	bc08      	pop	{r3}
 8042cc0:	469e      	mov	lr, r3
 8042cc2:	4770      	bx	lr
 8042cc4:	0000      	movs	r0, r0
	...

08042cc8 <__encrypt_decrypt_veneer>:
 8042cc8:	f85f f000 	ldr.w	pc, [pc]	; 8042ccc <__encrypt_decrypt_veneer+0x4>
 8042ccc:	0c03e009 	.word	0x0c03e009

08042cd0 <__SECURE_SystemCoreClockUpdate_veneer>:
 8042cd0:	f85f f000 	ldr.w	pc, [pc]	; 8042cd4 <__SECURE_SystemCoreClockUpdate_veneer+0x4>
 8042cd4:	0c03e001 	.word	0x0c03e001

08042cd8 <__key_stream_veneer>:
 8042cd8:	f85f f000 	ldr.w	pc, [pc]	; 8042cdc <__key_stream_veneer+0x4>
 8042cdc:	0c03e019 	.word	0x0c03e019
