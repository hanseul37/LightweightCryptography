
no_clefia.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c00  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08003df4  08003df4  00013df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f38  08003f38  000203b8  2**0
                  CONTENTS
  4 .ARM          00000000  08003f38  08003f38  000203b8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f38  08003f38  000203b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f38  08003f38  00013f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f3c  08003f3c  00013f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003b8  20000000  08003f40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  200003b8  080042f8  000203b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000528  080042f8  00020528  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  000203b8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000203ee  2**0
                  CONTENTS, READONLY
 13 .debug_info   000070f2  00000000  00000000  00020431  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001771  00000000  00000000  00027523  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007b0  00000000  00000000  00028c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005a6  00000000  00000000  00029448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027e0b  00000000  00000000  000299ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000083e3  00000000  00000000  000517f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f8c40  00000000  00000000  00059bdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002564  00000000  00000000  0015281c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00154d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	f3af 8000 	nop.w
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	200003b8 	.word	0x200003b8
 8000210:	00000000 	.word	0x00000000
 8000214:	08003ddc 	.word	0x08003ddc

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	f3af 8000 	nop.w
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	200003bc 	.word	0x200003bc
 8000230:	08003ddc 	.word	0x08003ddc

08000234 <byte_from_word>:
  unsigned int res = 0;
  res = ((a << 24) | 0x00ffffff) & ((b << 16) | 0xff00ffff ) & ((c << 8) | 0xffff00ff) & (d | 0xffffff00);
  return res;
}

char byte_from_word(unsigned int x, int off) {
 8000234:	b480      	push	{r7}
 8000236:	b083      	sub	sp, #12
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
 800023c:	6039      	str	r1, [r7, #0]
  if (off == 3) {
 800023e:	683b      	ldr	r3, [r7, #0]
 8000240:	2b03      	cmp	r3, #3
 8000242:	d102      	bne.n	800024a <byte_from_word+0x16>
    return x & W24_32;
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	b2db      	uxtb	r3, r3
 8000248:	e010      	b.n	800026c <byte_from_word+0x38>
  }
  if (off == 2) {
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	2b02      	cmp	r3, #2
 800024e:	d103      	bne.n	8000258 <byte_from_word+0x24>
    return (x & W16_24)	>> 8;
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	0a1b      	lsrs	r3, r3, #8
 8000254:	b2db      	uxtb	r3, r3
 8000256:	e009      	b.n	800026c <byte_from_word+0x38>
  }
  if (off == 1) {
 8000258:	683b      	ldr	r3, [r7, #0]
 800025a:	2b01      	cmp	r3, #1
 800025c:	d103      	bne.n	8000266 <byte_from_word+0x32>
    return (x & W8_16) >> 16;
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	0c1b      	lsrs	r3, r3, #16
 8000262:	b2db      	uxtb	r3, r3
 8000264:	e002      	b.n	800026c <byte_from_word+0x38>
  }
  return (x & W0_8) >> 24;
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	0e1b      	lsrs	r3, r3, #24
 800026a:	b2db      	uxtb	r3, r3
}
 800026c:	4618      	mov	r0, r3
 800026e:	370c      	adds	r7, #12
 8000270:	46bd      	mov	sp, r7
 8000272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000276:	4770      	bx	lr

08000278 <mul2>:

unsigned char mul2(unsigned char x) {
 8000278:	b480      	push	{r7}
 800027a:	b083      	sub	sp, #12
 800027c:	af00      	add	r7, sp, #0
 800027e:	4603      	mov	r3, r0
 8000280:	71fb      	strb	r3, [r7, #7]
  /* multiplicacao em GF(2^8) (p(x) = '11d') */
  if(x & 0x80U){
 8000282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000286:	2b00      	cmp	r3, #0
 8000288:	da03      	bge.n	8000292 <mul2+0x1a>
    x ^= 0x0eU;
 800028a:	79fb      	ldrb	r3, [r7, #7]
 800028c:	f083 030e 	eor.w	r3, r3, #14
 8000290:	71fb      	strb	r3, [r7, #7]
  }
  return ((x << 1) | (x >> 7));
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	005b      	lsls	r3, r3, #1
 8000296:	b25a      	sxtb	r2, r3
 8000298:	79fb      	ldrb	r3, [r7, #7]
 800029a:	09db      	lsrs	r3, r3, #7
 800029c:	b2db      	uxtb	r3, r3
 800029e:	b25b      	sxtb	r3, r3
 80002a0:	4313      	orrs	r3, r2
 80002a2:	b25b      	sxtb	r3, r3
 80002a4:	b2db      	uxtb	r3, r3
}
 80002a6:	4618      	mov	r0, r3
 80002a8:	370c      	adds	r7, #12
 80002aa:	46bd      	mov	sp, r7
 80002ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b0:	4770      	bx	lr
	...

080002b4 <f0>:
#define mul4(_x) (mul2(mul2((_x))))
#define mul6(_x) (mul2((_x)) ^ mul4((_x)))
#define mul8(_x) (mul2(mul4((_x))))
#define mulA(_x) (mul2((_x)) ^ mul8((_x)))

unsigned int f0(unsigned int rk, unsigned int x) {
 80002b4:	b5b0      	push	{r4, r5, r7, lr}
 80002b6:	b086      	sub	sp, #24
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
 80002bc:	6039      	str	r1, [r7, #0]
  /* Step 1 */
  unsigned int t = rk ^ x;
 80002be:	687a      	ldr	r2, [r7, #4]
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	4053      	eors	r3, r2
 80002c4:	617b      	str	r3, [r7, #20]
  /* Step 2 */
  char t0 = (t & W0_8) >> 24;
 80002c6:	697b      	ldr	r3, [r7, #20]
 80002c8:	0e1b      	lsrs	r3, r3, #24
 80002ca:	74fb      	strb	r3, [r7, #19]
  char t1 = (t & W8_16) >> 16;
 80002cc:	697b      	ldr	r3, [r7, #20]
 80002ce:	0c1b      	lsrs	r3, r3, #16
 80002d0:	74bb      	strb	r3, [r7, #18]
  char t2 = (t & W16_24) >> 8;
 80002d2:	697b      	ldr	r3, [r7, #20]
 80002d4:	0a1b      	lsrs	r3, r3, #8
 80002d6:	747b      	strb	r3, [r7, #17]
  char t3 = t & W24_32;
 80002d8:	697b      	ldr	r3, [r7, #20]
 80002da:	743b      	strb	r3, [r7, #16]
  t0 = s0[(t0 & B0_4) >> 4][t0 & B4_8];
 80002dc:	7cfb      	ldrb	r3, [r7, #19]
 80002de:	091b      	lsrs	r3, r3, #4
 80002e0:	b2db      	uxtb	r3, r3
 80002e2:	461a      	mov	r2, r3
 80002e4:	7cfb      	ldrb	r3, [r7, #19]
 80002e6:	f003 030f 	and.w	r3, r3, #15
 80002ea:	4970      	ldr	r1, [pc, #448]	; (80004ac <f0+0x1f8>)
 80002ec:	0112      	lsls	r2, r2, #4
 80002ee:	440a      	add	r2, r1
 80002f0:	4413      	add	r3, r2
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	74fb      	strb	r3, [r7, #19]
  t1 = s1[(t1 & B0_4) >> 4][t1 & B4_8];
 80002f6:	7cbb      	ldrb	r3, [r7, #18]
 80002f8:	091b      	lsrs	r3, r3, #4
 80002fa:	b2db      	uxtb	r3, r3
 80002fc:	461a      	mov	r2, r3
 80002fe:	7cbb      	ldrb	r3, [r7, #18]
 8000300:	f003 030f 	and.w	r3, r3, #15
 8000304:	496a      	ldr	r1, [pc, #424]	; (80004b0 <f0+0x1fc>)
 8000306:	0112      	lsls	r2, r2, #4
 8000308:	440a      	add	r2, r1
 800030a:	4413      	add	r3, r2
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	74bb      	strb	r3, [r7, #18]
  t2 = s0[(t2 & B0_4) >> 4][t2 & B4_8];
 8000310:	7c7b      	ldrb	r3, [r7, #17]
 8000312:	091b      	lsrs	r3, r3, #4
 8000314:	b2db      	uxtb	r3, r3
 8000316:	461a      	mov	r2, r3
 8000318:	7c7b      	ldrb	r3, [r7, #17]
 800031a:	f003 030f 	and.w	r3, r3, #15
 800031e:	4963      	ldr	r1, [pc, #396]	; (80004ac <f0+0x1f8>)
 8000320:	0112      	lsls	r2, r2, #4
 8000322:	440a      	add	r2, r1
 8000324:	4413      	add	r3, r2
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	747b      	strb	r3, [r7, #17]
  t3 = s1[(t3 & B0_4) >> 4][t3 & B4_8];
 800032a:	7c3b      	ldrb	r3, [r7, #16]
 800032c:	091b      	lsrs	r3, r3, #4
 800032e:	b2db      	uxtb	r3, r3
 8000330:	461a      	mov	r2, r3
 8000332:	7c3b      	ldrb	r3, [r7, #16]
 8000334:	f003 030f 	and.w	r3, r3, #15
 8000338:	495d      	ldr	r1, [pc, #372]	; (80004b0 <f0+0x1fc>)
 800033a:	0112      	lsls	r2, r2, #4
 800033c:	440a      	add	r2, r1
 800033e:	4413      	add	r3, r2
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	743b      	strb	r3, [r7, #16]
  /* Step 3 */
  char y0 =      t0  ^ mul2(t1) ^ mul4(t2) ^ mul6(t3);
 8000344:	7cbb      	ldrb	r3, [r7, #18]
 8000346:	4618      	mov	r0, r3
 8000348:	f7ff ff96 	bl	8000278 <mul2>
 800034c:	4603      	mov	r3, r0
 800034e:	461a      	mov	r2, r3
 8000350:	7cfb      	ldrb	r3, [r7, #19]
 8000352:	4053      	eors	r3, r2
 8000354:	b2dc      	uxtb	r4, r3
 8000356:	7c7b      	ldrb	r3, [r7, #17]
 8000358:	4618      	mov	r0, r3
 800035a:	f7ff ff8d 	bl	8000278 <mul2>
 800035e:	4603      	mov	r3, r0
 8000360:	4618      	mov	r0, r3
 8000362:	f7ff ff89 	bl	8000278 <mul2>
 8000366:	4603      	mov	r3, r0
 8000368:	4063      	eors	r3, r4
 800036a:	b2dc      	uxtb	r4, r3
 800036c:	7c3b      	ldrb	r3, [r7, #16]
 800036e:	4618      	mov	r0, r3
 8000370:	f7ff ff82 	bl	8000278 <mul2>
 8000374:	4603      	mov	r3, r0
 8000376:	461d      	mov	r5, r3
 8000378:	7c3b      	ldrb	r3, [r7, #16]
 800037a:	4618      	mov	r0, r3
 800037c:	f7ff ff7c 	bl	8000278 <mul2>
 8000380:	4603      	mov	r3, r0
 8000382:	4618      	mov	r0, r3
 8000384:	f7ff ff78 	bl	8000278 <mul2>
 8000388:	4603      	mov	r3, r0
 800038a:	406b      	eors	r3, r5
 800038c:	b2db      	uxtb	r3, r3
 800038e:	4063      	eors	r3, r4
 8000390:	73fb      	strb	r3, [r7, #15]
  char y1 = mul2(t0) ^      t1  ^ mul6(t2) ^ mul4(t3);
 8000392:	7cfb      	ldrb	r3, [r7, #19]
 8000394:	4618      	mov	r0, r3
 8000396:	f7ff ff6f 	bl	8000278 <mul2>
 800039a:	4603      	mov	r3, r0
 800039c:	461a      	mov	r2, r3
 800039e:	7cbb      	ldrb	r3, [r7, #18]
 80003a0:	4053      	eors	r3, r2
 80003a2:	b2dc      	uxtb	r4, r3
 80003a4:	7c7b      	ldrb	r3, [r7, #17]
 80003a6:	4618      	mov	r0, r3
 80003a8:	f7ff ff66 	bl	8000278 <mul2>
 80003ac:	4603      	mov	r3, r0
 80003ae:	461d      	mov	r5, r3
 80003b0:	7c7b      	ldrb	r3, [r7, #17]
 80003b2:	4618      	mov	r0, r3
 80003b4:	f7ff ff60 	bl	8000278 <mul2>
 80003b8:	4603      	mov	r3, r0
 80003ba:	4618      	mov	r0, r3
 80003bc:	f7ff ff5c 	bl	8000278 <mul2>
 80003c0:	4603      	mov	r3, r0
 80003c2:	406b      	eors	r3, r5
 80003c4:	b2db      	uxtb	r3, r3
 80003c6:	4063      	eors	r3, r4
 80003c8:	b2dc      	uxtb	r4, r3
 80003ca:	7c3b      	ldrb	r3, [r7, #16]
 80003cc:	4618      	mov	r0, r3
 80003ce:	f7ff ff53 	bl	8000278 <mul2>
 80003d2:	4603      	mov	r3, r0
 80003d4:	4618      	mov	r0, r3
 80003d6:	f7ff ff4f 	bl	8000278 <mul2>
 80003da:	4603      	mov	r3, r0
 80003dc:	4063      	eors	r3, r4
 80003de:	73bb      	strb	r3, [r7, #14]
  char y2 = mul4(t0) ^ mul6(t1) ^      t2  ^ mul2(t3);
 80003e0:	7cfb      	ldrb	r3, [r7, #19]
 80003e2:	4618      	mov	r0, r3
 80003e4:	f7ff ff48 	bl	8000278 <mul2>
 80003e8:	4603      	mov	r3, r0
 80003ea:	4618      	mov	r0, r3
 80003ec:	f7ff ff44 	bl	8000278 <mul2>
 80003f0:	4603      	mov	r3, r0
 80003f2:	461c      	mov	r4, r3
 80003f4:	7cbb      	ldrb	r3, [r7, #18]
 80003f6:	4618      	mov	r0, r3
 80003f8:	f7ff ff3e 	bl	8000278 <mul2>
 80003fc:	4603      	mov	r3, r0
 80003fe:	461d      	mov	r5, r3
 8000400:	7cbb      	ldrb	r3, [r7, #18]
 8000402:	4618      	mov	r0, r3
 8000404:	f7ff ff38 	bl	8000278 <mul2>
 8000408:	4603      	mov	r3, r0
 800040a:	4618      	mov	r0, r3
 800040c:	f7ff ff34 	bl	8000278 <mul2>
 8000410:	4603      	mov	r3, r0
 8000412:	406b      	eors	r3, r5
 8000414:	b2db      	uxtb	r3, r3
 8000416:	4063      	eors	r3, r4
 8000418:	b2da      	uxtb	r2, r3
 800041a:	7c7b      	ldrb	r3, [r7, #17]
 800041c:	4053      	eors	r3, r2
 800041e:	b2dc      	uxtb	r4, r3
 8000420:	7c3b      	ldrb	r3, [r7, #16]
 8000422:	4618      	mov	r0, r3
 8000424:	f7ff ff28 	bl	8000278 <mul2>
 8000428:	4603      	mov	r3, r0
 800042a:	4063      	eors	r3, r4
 800042c:	737b      	strb	r3, [r7, #13]
  char y3 = mul6(t0) ^ mul4(t1) ^ mul2(t2) ^       t3;
 800042e:	7cfb      	ldrb	r3, [r7, #19]
 8000430:	4618      	mov	r0, r3
 8000432:	f7ff ff21 	bl	8000278 <mul2>
 8000436:	4603      	mov	r3, r0
 8000438:	461c      	mov	r4, r3
 800043a:	7cfb      	ldrb	r3, [r7, #19]
 800043c:	4618      	mov	r0, r3
 800043e:	f7ff ff1b 	bl	8000278 <mul2>
 8000442:	4603      	mov	r3, r0
 8000444:	4618      	mov	r0, r3
 8000446:	f7ff ff17 	bl	8000278 <mul2>
 800044a:	4603      	mov	r3, r0
 800044c:	4063      	eors	r3, r4
 800044e:	b2dc      	uxtb	r4, r3
 8000450:	7cbb      	ldrb	r3, [r7, #18]
 8000452:	4618      	mov	r0, r3
 8000454:	f7ff ff10 	bl	8000278 <mul2>
 8000458:	4603      	mov	r3, r0
 800045a:	4618      	mov	r0, r3
 800045c:	f7ff ff0c 	bl	8000278 <mul2>
 8000460:	4603      	mov	r3, r0
 8000462:	4063      	eors	r3, r4
 8000464:	b2dc      	uxtb	r4, r3
 8000466:	7c7b      	ldrb	r3, [r7, #17]
 8000468:	4618      	mov	r0, r3
 800046a:	f7ff ff05 	bl	8000278 <mul2>
 800046e:	4603      	mov	r3, r0
 8000470:	4063      	eors	r3, r4
 8000472:	b2da      	uxtb	r2, r3
 8000474:	7c3b      	ldrb	r3, [r7, #16]
 8000476:	4053      	eors	r3, r2
 8000478:	733b      	strb	r3, [r7, #12]
  unsigned int y = WORD_FROM_BYTES(y0, y1, y2, y3);
 800047a:	7bfb      	ldrb	r3, [r7, #15]
 800047c:	061b      	lsls	r3, r3, #24
 800047e:	f063 437f 	orn	r3, r3, #4278190080	; 0xff000000
 8000482:	461a      	mov	r2, r3
 8000484:	7bbb      	ldrb	r3, [r7, #14]
 8000486:	041b      	lsls	r3, r3, #16
 8000488:	f463 037f 	orn	r3, r3, #16711680	; 0xff0000
 800048c:	401a      	ands	r2, r3
 800048e:	7b7b      	ldrb	r3, [r7, #13]
 8000490:	021b      	lsls	r3, r3, #8
 8000492:	f463 437f 	orn	r3, r3, #65280	; 0xff00
 8000496:	401a      	ands	r2, r3
 8000498:	7b3b      	ldrb	r3, [r7, #12]
 800049a:	f063 03ff 	orn	r3, r3, #255	; 0xff
 800049e:	4013      	ands	r3, r2
 80004a0:	60bb      	str	r3, [r7, #8]
  return y;
 80004a2:	68bb      	ldr	r3, [r7, #8]
}
 80004a4:	4618      	mov	r0, r3
 80004a6:	3718      	adds	r7, #24
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bdb0      	pop	{r4, r5, r7, pc}
 80004ac:	20000000 	.word	0x20000000
 80004b0:	20000100 	.word	0x20000100

080004b4 <f1>:

unsigned int f1(unsigned int rk, unsigned int x) {
 80004b4:	b5b0      	push	{r4, r5, r7, lr}
 80004b6:	b086      	sub	sp, #24
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
 80004bc:	6039      	str	r1, [r7, #0]
  /* Step 1 */
  unsigned int t = rk ^ x;
 80004be:	687a      	ldr	r2, [r7, #4]
 80004c0:	683b      	ldr	r3, [r7, #0]
 80004c2:	4053      	eors	r3, r2
 80004c4:	617b      	str	r3, [r7, #20]
  /* Step 2 */
  char t0 = (t & W0_8) >> 24;
 80004c6:	697b      	ldr	r3, [r7, #20]
 80004c8:	0e1b      	lsrs	r3, r3, #24
 80004ca:	74fb      	strb	r3, [r7, #19]
  char t1 = (t & W8_16) >> 16;
 80004cc:	697b      	ldr	r3, [r7, #20]
 80004ce:	0c1b      	lsrs	r3, r3, #16
 80004d0:	74bb      	strb	r3, [r7, #18]
  char t2 = (t & W16_24) >> 8;
 80004d2:	697b      	ldr	r3, [r7, #20]
 80004d4:	0a1b      	lsrs	r3, r3, #8
 80004d6:	747b      	strb	r3, [r7, #17]
  char t3 = t & W24_32;
 80004d8:	697b      	ldr	r3, [r7, #20]
 80004da:	743b      	strb	r3, [r7, #16]
  t0 = s1[(t0 & B0_4) >> 4][t0 & B4_8];
 80004dc:	7cfb      	ldrb	r3, [r7, #19]
 80004de:	091b      	lsrs	r3, r3, #4
 80004e0:	b2db      	uxtb	r3, r3
 80004e2:	461a      	mov	r2, r3
 80004e4:	7cfb      	ldrb	r3, [r7, #19]
 80004e6:	f003 030f 	and.w	r3, r3, #15
 80004ea:	497f      	ldr	r1, [pc, #508]	; (80006e8 <f1+0x234>)
 80004ec:	0112      	lsls	r2, r2, #4
 80004ee:	440a      	add	r2, r1
 80004f0:	4413      	add	r3, r2
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	74fb      	strb	r3, [r7, #19]
  t1 = s0[(t1 & B0_4) >> 4][t1 & B4_8];
 80004f6:	7cbb      	ldrb	r3, [r7, #18]
 80004f8:	091b      	lsrs	r3, r3, #4
 80004fa:	b2db      	uxtb	r3, r3
 80004fc:	461a      	mov	r2, r3
 80004fe:	7cbb      	ldrb	r3, [r7, #18]
 8000500:	f003 030f 	and.w	r3, r3, #15
 8000504:	4979      	ldr	r1, [pc, #484]	; (80006ec <f1+0x238>)
 8000506:	0112      	lsls	r2, r2, #4
 8000508:	440a      	add	r2, r1
 800050a:	4413      	add	r3, r2
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	74bb      	strb	r3, [r7, #18]
  t2 = s1[(t2 & B0_4) >> 4][t2 & B4_8];
 8000510:	7c7b      	ldrb	r3, [r7, #17]
 8000512:	091b      	lsrs	r3, r3, #4
 8000514:	b2db      	uxtb	r3, r3
 8000516:	461a      	mov	r2, r3
 8000518:	7c7b      	ldrb	r3, [r7, #17]
 800051a:	f003 030f 	and.w	r3, r3, #15
 800051e:	4972      	ldr	r1, [pc, #456]	; (80006e8 <f1+0x234>)
 8000520:	0112      	lsls	r2, r2, #4
 8000522:	440a      	add	r2, r1
 8000524:	4413      	add	r3, r2
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	747b      	strb	r3, [r7, #17]
  t3 = s0[(t3 & B0_4) >> 4][t3 & B4_8];
 800052a:	7c3b      	ldrb	r3, [r7, #16]
 800052c:	091b      	lsrs	r3, r3, #4
 800052e:	b2db      	uxtb	r3, r3
 8000530:	461a      	mov	r2, r3
 8000532:	7c3b      	ldrb	r3, [r7, #16]
 8000534:	f003 030f 	and.w	r3, r3, #15
 8000538:	496c      	ldr	r1, [pc, #432]	; (80006ec <f1+0x238>)
 800053a:	0112      	lsls	r2, r2, #4
 800053c:	440a      	add	r2, r1
 800053e:	4413      	add	r3, r2
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	743b      	strb	r3, [r7, #16]
  /* Step 3 */
  char y0 =      t0  ^ mul8(t1) ^ mul2(t2) ^ mulA(t3);
 8000544:	7cbb      	ldrb	r3, [r7, #18]
 8000546:	4618      	mov	r0, r3
 8000548:	f7ff fe96 	bl	8000278 <mul2>
 800054c:	4603      	mov	r3, r0
 800054e:	4618      	mov	r0, r3
 8000550:	f7ff fe92 	bl	8000278 <mul2>
 8000554:	4603      	mov	r3, r0
 8000556:	4618      	mov	r0, r3
 8000558:	f7ff fe8e 	bl	8000278 <mul2>
 800055c:	4603      	mov	r3, r0
 800055e:	461a      	mov	r2, r3
 8000560:	7cfb      	ldrb	r3, [r7, #19]
 8000562:	4053      	eors	r3, r2
 8000564:	b2dc      	uxtb	r4, r3
 8000566:	7c7b      	ldrb	r3, [r7, #17]
 8000568:	4618      	mov	r0, r3
 800056a:	f7ff fe85 	bl	8000278 <mul2>
 800056e:	4603      	mov	r3, r0
 8000570:	4063      	eors	r3, r4
 8000572:	b2dc      	uxtb	r4, r3
 8000574:	7c3b      	ldrb	r3, [r7, #16]
 8000576:	4618      	mov	r0, r3
 8000578:	f7ff fe7e 	bl	8000278 <mul2>
 800057c:	4603      	mov	r3, r0
 800057e:	461d      	mov	r5, r3
 8000580:	7c3b      	ldrb	r3, [r7, #16]
 8000582:	4618      	mov	r0, r3
 8000584:	f7ff fe78 	bl	8000278 <mul2>
 8000588:	4603      	mov	r3, r0
 800058a:	4618      	mov	r0, r3
 800058c:	f7ff fe74 	bl	8000278 <mul2>
 8000590:	4603      	mov	r3, r0
 8000592:	4618      	mov	r0, r3
 8000594:	f7ff fe70 	bl	8000278 <mul2>
 8000598:	4603      	mov	r3, r0
 800059a:	406b      	eors	r3, r5
 800059c:	b2db      	uxtb	r3, r3
 800059e:	4063      	eors	r3, r4
 80005a0:	73fb      	strb	r3, [r7, #15]
  char y1 = mul8(t0) ^      t1  ^ mulA(t2) ^ mul2(t3);
 80005a2:	7cfb      	ldrb	r3, [r7, #19]
 80005a4:	4618      	mov	r0, r3
 80005a6:	f7ff fe67 	bl	8000278 <mul2>
 80005aa:	4603      	mov	r3, r0
 80005ac:	4618      	mov	r0, r3
 80005ae:	f7ff fe63 	bl	8000278 <mul2>
 80005b2:	4603      	mov	r3, r0
 80005b4:	4618      	mov	r0, r3
 80005b6:	f7ff fe5f 	bl	8000278 <mul2>
 80005ba:	4603      	mov	r3, r0
 80005bc:	461a      	mov	r2, r3
 80005be:	7cbb      	ldrb	r3, [r7, #18]
 80005c0:	4053      	eors	r3, r2
 80005c2:	b2dc      	uxtb	r4, r3
 80005c4:	7c7b      	ldrb	r3, [r7, #17]
 80005c6:	4618      	mov	r0, r3
 80005c8:	f7ff fe56 	bl	8000278 <mul2>
 80005cc:	4603      	mov	r3, r0
 80005ce:	461d      	mov	r5, r3
 80005d0:	7c7b      	ldrb	r3, [r7, #17]
 80005d2:	4618      	mov	r0, r3
 80005d4:	f7ff fe50 	bl	8000278 <mul2>
 80005d8:	4603      	mov	r3, r0
 80005da:	4618      	mov	r0, r3
 80005dc:	f7ff fe4c 	bl	8000278 <mul2>
 80005e0:	4603      	mov	r3, r0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f7ff fe48 	bl	8000278 <mul2>
 80005e8:	4603      	mov	r3, r0
 80005ea:	406b      	eors	r3, r5
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	4063      	eors	r3, r4
 80005f0:	b2dc      	uxtb	r4, r3
 80005f2:	7c3b      	ldrb	r3, [r7, #16]
 80005f4:	4618      	mov	r0, r3
 80005f6:	f7ff fe3f 	bl	8000278 <mul2>
 80005fa:	4603      	mov	r3, r0
 80005fc:	4063      	eors	r3, r4
 80005fe:	73bb      	strb	r3, [r7, #14]
  char y2 = mul2(t0) ^ mulA(t1) ^      t2  ^ mul8(t3);
 8000600:	7cfb      	ldrb	r3, [r7, #19]
 8000602:	4618      	mov	r0, r3
 8000604:	f7ff fe38 	bl	8000278 <mul2>
 8000608:	4603      	mov	r3, r0
 800060a:	461c      	mov	r4, r3
 800060c:	7cbb      	ldrb	r3, [r7, #18]
 800060e:	4618      	mov	r0, r3
 8000610:	f7ff fe32 	bl	8000278 <mul2>
 8000614:	4603      	mov	r3, r0
 8000616:	461d      	mov	r5, r3
 8000618:	7cbb      	ldrb	r3, [r7, #18]
 800061a:	4618      	mov	r0, r3
 800061c:	f7ff fe2c 	bl	8000278 <mul2>
 8000620:	4603      	mov	r3, r0
 8000622:	4618      	mov	r0, r3
 8000624:	f7ff fe28 	bl	8000278 <mul2>
 8000628:	4603      	mov	r3, r0
 800062a:	4618      	mov	r0, r3
 800062c:	f7ff fe24 	bl	8000278 <mul2>
 8000630:	4603      	mov	r3, r0
 8000632:	406b      	eors	r3, r5
 8000634:	b2db      	uxtb	r3, r3
 8000636:	4063      	eors	r3, r4
 8000638:	b2da      	uxtb	r2, r3
 800063a:	7c7b      	ldrb	r3, [r7, #17]
 800063c:	4053      	eors	r3, r2
 800063e:	b2dc      	uxtb	r4, r3
 8000640:	7c3b      	ldrb	r3, [r7, #16]
 8000642:	4618      	mov	r0, r3
 8000644:	f7ff fe18 	bl	8000278 <mul2>
 8000648:	4603      	mov	r3, r0
 800064a:	4618      	mov	r0, r3
 800064c:	f7ff fe14 	bl	8000278 <mul2>
 8000650:	4603      	mov	r3, r0
 8000652:	4618      	mov	r0, r3
 8000654:	f7ff fe10 	bl	8000278 <mul2>
 8000658:	4603      	mov	r3, r0
 800065a:	4063      	eors	r3, r4
 800065c:	737b      	strb	r3, [r7, #13]
  char y3 = mulA(t0) ^ mul2(t1) ^ mul8(t2) ^       t3;
 800065e:	7cfb      	ldrb	r3, [r7, #19]
 8000660:	4618      	mov	r0, r3
 8000662:	f7ff fe09 	bl	8000278 <mul2>
 8000666:	4603      	mov	r3, r0
 8000668:	461c      	mov	r4, r3
 800066a:	7cfb      	ldrb	r3, [r7, #19]
 800066c:	4618      	mov	r0, r3
 800066e:	f7ff fe03 	bl	8000278 <mul2>
 8000672:	4603      	mov	r3, r0
 8000674:	4618      	mov	r0, r3
 8000676:	f7ff fdff 	bl	8000278 <mul2>
 800067a:	4603      	mov	r3, r0
 800067c:	4618      	mov	r0, r3
 800067e:	f7ff fdfb 	bl	8000278 <mul2>
 8000682:	4603      	mov	r3, r0
 8000684:	4063      	eors	r3, r4
 8000686:	b2dc      	uxtb	r4, r3
 8000688:	7cbb      	ldrb	r3, [r7, #18]
 800068a:	4618      	mov	r0, r3
 800068c:	f7ff fdf4 	bl	8000278 <mul2>
 8000690:	4603      	mov	r3, r0
 8000692:	4063      	eors	r3, r4
 8000694:	b2dc      	uxtb	r4, r3
 8000696:	7c7b      	ldrb	r3, [r7, #17]
 8000698:	4618      	mov	r0, r3
 800069a:	f7ff fded 	bl	8000278 <mul2>
 800069e:	4603      	mov	r3, r0
 80006a0:	4618      	mov	r0, r3
 80006a2:	f7ff fde9 	bl	8000278 <mul2>
 80006a6:	4603      	mov	r3, r0
 80006a8:	4618      	mov	r0, r3
 80006aa:	f7ff fde5 	bl	8000278 <mul2>
 80006ae:	4603      	mov	r3, r0
 80006b0:	4063      	eors	r3, r4
 80006b2:	b2da      	uxtb	r2, r3
 80006b4:	7c3b      	ldrb	r3, [r7, #16]
 80006b6:	4053      	eors	r3, r2
 80006b8:	733b      	strb	r3, [r7, #12]
  return WORD_FROM_BYTES(y0, y1, y2, y3);
 80006ba:	7bfb      	ldrb	r3, [r7, #15]
 80006bc:	061b      	lsls	r3, r3, #24
 80006be:	f063 437f 	orn	r3, r3, #4278190080	; 0xff000000
 80006c2:	461a      	mov	r2, r3
 80006c4:	7bbb      	ldrb	r3, [r7, #14]
 80006c6:	041b      	lsls	r3, r3, #16
 80006c8:	f463 037f 	orn	r3, r3, #16711680	; 0xff0000
 80006cc:	401a      	ands	r2, r3
 80006ce:	7b7b      	ldrb	r3, [r7, #13]
 80006d0:	021b      	lsls	r3, r3, #8
 80006d2:	f463 437f 	orn	r3, r3, #65280	; 0xff00
 80006d6:	401a      	ands	r2, r3
 80006d8:	7b3b      	ldrb	r3, [r7, #12]
 80006da:	f063 03ff 	orn	r3, r3, #255	; 0xff
 80006de:	4013      	ands	r3, r2
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3718      	adds	r7, #24
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bdb0      	pop	{r4, r5, r7, pc}
 80006e8:	20000100 	.word	0x20000100
 80006ec:	20000000 	.word	0x20000000

080006f0 <gfn4>:

void gfn4(int r, unsigned int* rk, unsigned int *x, unsigned int *y) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08a      	sub	sp, #40	; 0x28
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	60f8      	str	r0, [r7, #12]
 80006f8:	60b9      	str	r1, [r7, #8]
 80006fa:	607a      	str	r2, [r7, #4]
 80006fc:	603b      	str	r3, [r7, #0]
  int i;
  unsigned int temp;
  /* Step 1 */
  unsigned int t0 = x[0];
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	623b      	str	r3, [r7, #32]
  unsigned int t1 = x[1];
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	685b      	ldr	r3, [r3, #4]
 8000708:	61fb      	str	r3, [r7, #28]
  unsigned int t2 = x[2];
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	689b      	ldr	r3, [r3, #8]
 800070e:	61bb      	str	r3, [r7, #24]
  unsigned int t3 = x[3];
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	68db      	ldr	r3, [r3, #12]
 8000714:	617b      	str	r3, [r7, #20]
  /* Step 2 */
  for (i = 0; i < r; i++) {
 8000716:	2300      	movs	r3, #0
 8000718:	627b      	str	r3, [r7, #36]	; 0x24
 800071a:	e027      	b.n	800076c <gfn4+0x7c>
    /* Step 2.1 */
    t1 ^= f0(rk[2*i], t0);
 800071c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800071e:	00db      	lsls	r3, r3, #3
 8000720:	68ba      	ldr	r2, [r7, #8]
 8000722:	4413      	add	r3, r2
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	6a39      	ldr	r1, [r7, #32]
 8000728:	4618      	mov	r0, r3
 800072a:	f7ff fdc3 	bl	80002b4 <f0>
 800072e:	4602      	mov	r2, r0
 8000730:	69fb      	ldr	r3, [r7, #28]
 8000732:	4053      	eors	r3, r2
 8000734:	61fb      	str	r3, [r7, #28]
    t3 ^= f1(rk[2*i + 1], t2);
 8000736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000738:	00db      	lsls	r3, r3, #3
 800073a:	3304      	adds	r3, #4
 800073c:	68ba      	ldr	r2, [r7, #8]
 800073e:	4413      	add	r3, r2
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	69b9      	ldr	r1, [r7, #24]
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff feb5 	bl	80004b4 <f1>
 800074a:	4602      	mov	r2, r0
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	4053      	eors	r3, r2
 8000750:	617b      	str	r3, [r7, #20]
    /* Step 2.2 */
    temp = t0;
 8000752:	6a3b      	ldr	r3, [r7, #32]
 8000754:	613b      	str	r3, [r7, #16]
    t0 = t1;
 8000756:	69fb      	ldr	r3, [r7, #28]
 8000758:	623b      	str	r3, [r7, #32]
    t1 = t2;
 800075a:	69bb      	ldr	r3, [r7, #24]
 800075c:	61fb      	str	r3, [r7, #28]
    t2 = t3;
 800075e:	697b      	ldr	r3, [r7, #20]
 8000760:	61bb      	str	r3, [r7, #24]
    t3 = temp;
 8000762:	693b      	ldr	r3, [r7, #16]
 8000764:	617b      	str	r3, [r7, #20]
  for (i = 0; i < r; i++) {
 8000766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000768:	3301      	adds	r3, #1
 800076a:	627b      	str	r3, [r7, #36]	; 0x24
 800076c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	429a      	cmp	r2, r3
 8000772:	dbd3      	blt.n	800071c <gfn4+0x2c>
  }
  /* Step 3 */
  y[0] = t3;
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	697a      	ldr	r2, [r7, #20]
 8000778:	601a      	str	r2, [r3, #0]
  y[1] = t0;
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	3304      	adds	r3, #4
 800077e:	6a3a      	ldr	r2, [r7, #32]
 8000780:	601a      	str	r2, [r3, #0]
  y[2] = t1;
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	3308      	adds	r3, #8
 8000786:	69fa      	ldr	r2, [r7, #28]
 8000788:	601a      	str	r2, [r3, #0]
  y[3] = t2;
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	330c      	adds	r3, #12
 800078e:	69ba      	ldr	r2, [r7, #24]
 8000790:	601a      	str	r2, [r3, #0]
}
 8000792:	bf00      	nop
 8000794:	3728      	adds	r7, #40	; 0x28
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}

0800079a <gfn_inv4>:
  y[5] = t4;
  y[6] = t5;
  y[7] = t6;
}

void gfn_inv4(int r, unsigned int* rk, unsigned int *x, unsigned int *y) {
 800079a:	b580      	push	{r7, lr}
 800079c:	b08e      	sub	sp, #56	; 0x38
 800079e:	af00      	add	r7, sp, #0
 80007a0:	60f8      	str	r0, [r7, #12]
 80007a2:	60b9      	str	r1, [r7, #8]
 80007a4:	607a      	str	r2, [r7, #4]
 80007a6:	603b      	str	r3, [r7, #0]
  unsigned int temp0;
  unsigned int temp1;
  unsigned int temp2;
  unsigned int temp3;
  /* Step 1 */
  unsigned int t0 = x[0];
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	633b      	str	r3, [r7, #48]	; 0x30
  unsigned int t1 = x[1];
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	685b      	ldr	r3, [r3, #4]
 80007b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  unsigned int t2 = x[2];
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	689b      	ldr	r3, [r3, #8]
 80007b8:	62bb      	str	r3, [r7, #40]	; 0x28
  unsigned int t3 = x[3];
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	68db      	ldr	r3, [r3, #12]
 80007be:	627b      	str	r3, [r7, #36]	; 0x24
  /* Step 2 */
  for (i = 0; i < r; i++) {
 80007c0:	2300      	movs	r3, #0
 80007c2:	637b      	str	r3, [r7, #52]	; 0x34
 80007c4:	e034      	b.n	8000830 <gfn_inv4+0x96>
    /* Step 2.1 */
    t1 ^= f0(rk[2*(r-i) - 2], t0);
 80007c6:	68fa      	ldr	r2, [r7, #12]
 80007c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007ca:	1ad3      	subs	r3, r2, r3
 80007cc:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80007d0:	3b01      	subs	r3, #1
 80007d2:	00db      	lsls	r3, r3, #3
 80007d4:	68ba      	ldr	r2, [r7, #8]
 80007d6:	4413      	add	r3, r2
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff fd69 	bl	80002b4 <f0>
 80007e2:	4602      	mov	r2, r0
 80007e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007e6:	4053      	eors	r3, r2
 80007e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    t3 ^= f1(rk[2*(r-i) - 1], t2);
 80007ea:	68fa      	ldr	r2, [r7, #12]
 80007ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007ee:	1ad3      	subs	r3, r2, r3
 80007f0:	00db      	lsls	r3, r3, #3
 80007f2:	3b04      	subs	r3, #4
 80007f4:	68ba      	ldr	r2, [r7, #8]
 80007f6:	4413      	add	r3, r2
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff fe59 	bl	80004b4 <f1>
 8000802:	4602      	mov	r2, r0
 8000804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000806:	4053      	eors	r3, r2
 8000808:	627b      	str	r3, [r7, #36]	; 0x24
    /* Step 2.2 */
    temp0 = t0;
 800080a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800080c:	623b      	str	r3, [r7, #32]
    temp1 = t1;
 800080e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000810:	61fb      	str	r3, [r7, #28]
    temp2 = t2;
 8000812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000814:	61bb      	str	r3, [r7, #24]
    temp3 = t3;
 8000816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000818:	617b      	str	r3, [r7, #20]
    t0 = temp3;
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	633b      	str	r3, [r7, #48]	; 0x30
    t1 = temp0;
 800081e:	6a3b      	ldr	r3, [r7, #32]
 8000820:	62fb      	str	r3, [r7, #44]	; 0x2c
    t2 = temp1;
 8000822:	69fb      	ldr	r3, [r7, #28]
 8000824:	62bb      	str	r3, [r7, #40]	; 0x28
    t3 = temp2;
 8000826:	69bb      	ldr	r3, [r7, #24]
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0; i < r; i++) {
 800082a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800082c:	3301      	adds	r3, #1
 800082e:	637b      	str	r3, [r7, #52]	; 0x34
 8000830:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	429a      	cmp	r2, r3
 8000836:	dbc6      	blt.n	80007c6 <gfn_inv4+0x2c>
  }
  /* Step 3 */
  y[0] = t1;
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800083c:	601a      	str	r2, [r3, #0]
  y[1] = t2;
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	3304      	adds	r3, #4
 8000842:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000844:	601a      	str	r2, [r3, #0]
  y[2] = t3;
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	3308      	adds	r3, #8
 800084a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800084c:	601a      	str	r2, [r3, #0]
  y[3] = t0;
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	330c      	adds	r3, #12
 8000852:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000854:	601a      	str	r2, [r3, #0]
}
 8000856:	bf00      	nop
 8000858:	3738      	adds	r7, #56	; 0x38
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}

0800085e <sigma>:

void sigma(unsigned int *x, unsigned int* y) {
 800085e:	b480      	push	{r7}
 8000860:	b083      	sub	sp, #12
 8000862:	af00      	add	r7, sp, #0
 8000864:	6078      	str	r0, [r7, #4]
 8000866:	6039      	str	r1, [r7, #0]

  y[0] = ((x[0] & W7_31) << 7)   | ((x[1] & W0_6) >> 25);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	01da      	lsls	r2, r3, #7
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	3304      	adds	r3, #4
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	0e5b      	lsrs	r3, r3, #25
 8000876:	431a      	orrs	r2, r3
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	601a      	str	r2, [r3, #0]
  y[1] = ((x[1] & W7_31) << 7)   | (x[3]  & W25_31);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	3304      	adds	r3, #4
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	01d9      	lsls	r1, r3, #7
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	330c      	adds	r3, #12
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	3304      	adds	r3, #4
 8000892:	430a      	orrs	r2, r1
 8000894:	601a      	str	r2, [r3, #0]
  y[2] = (x[0]  & W0_6)          | ((x[2] & W0_24) >> 7);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	f003 417e 	and.w	r1, r3, #4261412864	; 0xfe000000
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	3308      	adds	r3, #8
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	09da      	lsrs	r2, r3, #7
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	3308      	adds	r3, #8
 80008aa:	430a      	orrs	r2, r1
 80008ac:	601a      	str	r2, [r3, #0]
  y[3] = ((x[2] & W25_31) << 25) | ((x[3] & W0_24) >> 7);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	3308      	adds	r3, #8
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	0659      	lsls	r1, r3, #25
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	330c      	adds	r3, #12
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	09da      	lsrs	r2, r3, #7
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	330c      	adds	r3, #12
 80008c2:	430a      	orrs	r2, r1
 80008c4:	601a      	str	r2, [r3, #0]
}
 80008c6:	bf00      	nop
 80008c8:	370c      	adds	r7, #12
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
	...

080008d4 <key_scheduling_128>:
  p[1] = t[1] ^ wk[0];
  p[2] = t[2];
  p[3] = t[3] ^ wk[1];
}

void key_scheduling_128(unsigned int *k, unsigned int *wk, unsigned int *rk) {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b092      	sub	sp, #72	; 0x48
 80008d8:	af00      	add	r7, sp, #0
 80008da:	60f8      	str	r0, [r7, #12]
 80008dc:	60b9      	str	r1, [r7, #8]
 80008de:	607a      	str	r2, [r7, #4]
  unsigned int l[4];
  unsigned int t[4];
  int i;

  /* step 1 */
  gfn4(12, con_128, k, y);
 80008e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80008e4:	68fa      	ldr	r2, [r7, #12]
 80008e6:	494f      	ldr	r1, [pc, #316]	; (8000a24 <key_scheduling_128+0x150>)
 80008e8:	200c      	movs	r0, #12
 80008ea:	f7ff ff01 	bl	80006f0 <gfn4>
  l[0] = y[0];
 80008ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
  l[1] = y[1];
 80008f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008f4:	62bb      	str	r3, [r7, #40]	; 0x28
  l[2] = y[2];
 80008f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  l[3] = y[3];
 80008fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80008fc:	633b      	str	r3, [r7, #48]	; 0x30

  /* step 2 */
  wk[0] = k[0];
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	681a      	ldr	r2, [r3, #0]
 8000902:	68bb      	ldr	r3, [r7, #8]
 8000904:	601a      	str	r2, [r3, #0]
  wk[1] = k[1];
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	3304      	adds	r3, #4
 800090a:	68fa      	ldr	r2, [r7, #12]
 800090c:	6852      	ldr	r2, [r2, #4]
 800090e:	601a      	str	r2, [r3, #0]
  wk[2] = k[2];
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	3308      	adds	r3, #8
 8000914:	68fa      	ldr	r2, [r7, #12]
 8000916:	6892      	ldr	r2, [r2, #8]
 8000918:	601a      	str	r2, [r3, #0]
  wk[3] = k[3];
 800091a:	68bb      	ldr	r3, [r7, #8]
 800091c:	330c      	adds	r3, #12
 800091e:	68fa      	ldr	r2, [r7, #12]
 8000920:	68d2      	ldr	r2, [r2, #12]
 8000922:	601a      	str	r2, [r3, #0]

  /* step 3 */
  for (i = 0; i < 9; i++) {
 8000924:	2300      	movs	r3, #0
 8000926:	647b      	str	r3, [r7, #68]	; 0x44
 8000928:	e073      	b.n	8000a12 <key_scheduling_128+0x13e>
    t[0] = l[0] ^ con_128[24 + 4 * i];
 800092a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800092c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800092e:	3306      	adds	r3, #6
 8000930:	009b      	lsls	r3, r3, #2
 8000932:	493c      	ldr	r1, [pc, #240]	; (8000a24 <key_scheduling_128+0x150>)
 8000934:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000938:	4053      	eors	r3, r2
 800093a:	617b      	str	r3, [r7, #20]
    t[1] = l[1] ^ con_128[24 + 4 * i + 1];
 800093c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800093e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000940:	3306      	adds	r3, #6
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	3301      	adds	r3, #1
 8000946:	4937      	ldr	r1, [pc, #220]	; (8000a24 <key_scheduling_128+0x150>)
 8000948:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800094c:	4053      	eors	r3, r2
 800094e:	61bb      	str	r3, [r7, #24]
    t[2] = l[2] ^ con_128[24 + 4 * i + 2];
 8000950:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000952:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000954:	3306      	adds	r3, #6
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	3302      	adds	r3, #2
 800095a:	4932      	ldr	r1, [pc, #200]	; (8000a24 <key_scheduling_128+0x150>)
 800095c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000960:	4053      	eors	r3, r2
 8000962:	61fb      	str	r3, [r7, #28]
    t[3] = l[3] ^ con_128[24 + 4 * i + 3];
 8000964:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000966:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000968:	3306      	adds	r3, #6
 800096a:	009b      	lsls	r3, r3, #2
 800096c:	3303      	adds	r3, #3
 800096e:	492d      	ldr	r1, [pc, #180]	; (8000a24 <key_scheduling_128+0x150>)
 8000970:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000974:	4053      	eors	r3, r2
 8000976:	623b      	str	r3, [r7, #32]

    sigma(l, y);
 8000978:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800097c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000980:	4611      	mov	r1, r2
 8000982:	4618      	mov	r0, r3
 8000984:	f7ff ff6b 	bl	800085e <sigma>
    l[0] = y[0];
 8000988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800098a:	627b      	str	r3, [r7, #36]	; 0x24
    l[1] = y[1];
 800098c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800098e:	62bb      	str	r3, [r7, #40]	; 0x28
    l[2] = y[2];
 8000990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000992:	62fb      	str	r3, [r7, #44]	; 0x2c
    l[3] = y[3];
 8000994:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000996:	633b      	str	r3, [r7, #48]	; 0x30

    if (i % 2 == 1) {
 8000998:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800099a:	2b00      	cmp	r3, #0
 800099c:	f003 0301 	and.w	r3, r3, #1
 80009a0:	bfb8      	it	lt
 80009a2:	425b      	neglt	r3, r3
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	d116      	bne.n	80009d6 <key_scheduling_128+0x102>
      t[0] = t[0] ^ k[0];
 80009a8:	697a      	ldr	r2, [r7, #20]
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4053      	eors	r3, r2
 80009b0:	617b      	str	r3, [r7, #20]
      t[1] = t[1] ^ k[1];
 80009b2:	69ba      	ldr	r2, [r7, #24]
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	3304      	adds	r3, #4
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4053      	eors	r3, r2
 80009bc:	61bb      	str	r3, [r7, #24]
      t[2] = t[2] ^ k[2];
 80009be:	69fa      	ldr	r2, [r7, #28]
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	3308      	adds	r3, #8
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4053      	eors	r3, r2
 80009c8:	61fb      	str	r3, [r7, #28]
      t[3] = t[3] ^ k[3];
 80009ca:	6a3a      	ldr	r2, [r7, #32]
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	330c      	adds	r3, #12
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4053      	eors	r3, r2
 80009d4:	623b      	str	r3, [r7, #32]
    }

    rk[4*i] = t[0];
 80009d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80009d8:	011b      	lsls	r3, r3, #4
 80009da:	687a      	ldr	r2, [r7, #4]
 80009dc:	4413      	add	r3, r2
 80009de:	697a      	ldr	r2, [r7, #20]
 80009e0:	601a      	str	r2, [r3, #0]
    rk[4*i+1] = t[1];
 80009e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80009e4:	011b      	lsls	r3, r3, #4
 80009e6:	3304      	adds	r3, #4
 80009e8:	687a      	ldr	r2, [r7, #4]
 80009ea:	4413      	add	r3, r2
 80009ec:	69ba      	ldr	r2, [r7, #24]
 80009ee:	601a      	str	r2, [r3, #0]
    rk[4*i+2] = t[2];
 80009f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80009f2:	011b      	lsls	r3, r3, #4
 80009f4:	3308      	adds	r3, #8
 80009f6:	687a      	ldr	r2, [r7, #4]
 80009f8:	4413      	add	r3, r2
 80009fa:	69fa      	ldr	r2, [r7, #28]
 80009fc:	601a      	str	r2, [r3, #0]
    rk[4*i+3] = t[3];
 80009fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a00:	011b      	lsls	r3, r3, #4
 8000a02:	330c      	adds	r3, #12
 8000a04:	687a      	ldr	r2, [r7, #4]
 8000a06:	4413      	add	r3, r2
 8000a08:	6a3a      	ldr	r2, [r7, #32]
 8000a0a:	601a      	str	r2, [r3, #0]
  for (i = 0; i < 9; i++) {
 8000a0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a0e:	3301      	adds	r3, #1
 8000a10:	647b      	str	r3, [r7, #68]	; 0x44
 8000a12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a14:	2b08      	cmp	r3, #8
 8000a16:	dd88      	ble.n	800092a <key_scheduling_128+0x56>
  }
}
 8000a18:	bf00      	nop
 8000a1a:	bf00      	nop
 8000a1c:	3748      	adds	r7, #72	; 0x48
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000200 	.word	0x20000200

08000a28 <encryption_128>:

void encryption_128(unsigned int *p, unsigned int *c, unsigned int *wk, unsigned int* rk) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08c      	sub	sp, #48	; 0x30
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	60f8      	str	r0, [r7, #12]
 8000a30:	60b9      	str	r1, [r7, #8]
 8000a32:	607a      	str	r2, [r7, #4]
 8000a34:	603b      	str	r3, [r7, #0]
  unsigned int t[4];
  unsigned int y[4];


  /* step 1 */
  t[0] = p[0];
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	623b      	str	r3, [r7, #32]
  t[1] = p[1] ^ wk[0];
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	3304      	adds	r3, #4
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4053      	eors	r3, r2
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24
  t[2] = p[2];
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	689b      	ldr	r3, [r3, #8]
 8000a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  t[3] = p[3] ^ wk[1];
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	330c      	adds	r3, #12
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	3304      	adds	r3, #4
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4053      	eors	r3, r2
 8000a5e:	62fb      	str	r3, [r7, #44]	; 0x2c



  /* step 2 */
  gfn4(18, rk, t, y);
 8000a60:	f107 0310 	add.w	r3, r7, #16
 8000a64:	f107 0220 	add.w	r2, r7, #32
 8000a68:	6839      	ldr	r1, [r7, #0]
 8000a6a:	2012      	movs	r0, #18
 8000a6c:	f7ff fe40 	bl	80006f0 <gfn4>
  t[0] = y[0];
 8000a70:	693b      	ldr	r3, [r7, #16]
 8000a72:	623b      	str	r3, [r7, #32]
  t[1] = y[1];
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	627b      	str	r3, [r7, #36]	; 0x24
  t[2] = y[2];
 8000a78:	69bb      	ldr	r3, [r7, #24]
 8000a7a:	62bb      	str	r3, [r7, #40]	; 0x28
  t[3] = y[3];
 8000a7c:	69fb      	ldr	r3, [r7, #28]
 8000a7e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* step 3 */
  c[0] = t[0];
 8000a80:	6a3a      	ldr	r2, [r7, #32]
 8000a82:	68bb      	ldr	r3, [r7, #8]
 8000a84:	601a      	str	r2, [r3, #0]
  c[1] = t[1] ^ wk[2];
 8000a86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	3308      	adds	r3, #8
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	3304      	adds	r3, #4
 8000a92:	404a      	eors	r2, r1
 8000a94:	601a      	str	r2, [r3, #0]
  c[2] = t[2];
 8000a96:	68bb      	ldr	r3, [r7, #8]
 8000a98:	3308      	adds	r3, #8
 8000a9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a9c:	601a      	str	r2, [r3, #0]
  c[3] = t[3] ^ wk[3];
 8000a9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	330c      	adds	r3, #12
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	330c      	adds	r3, #12
 8000aaa:	404a      	eors	r2, r1
 8000aac:	601a      	str	r2, [r3, #0]
}
 8000aae:	bf00      	nop
 8000ab0:	3730      	adds	r7, #48	; 0x30
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <decryption_128>:

void decryption_128(unsigned int *p, unsigned int *c, unsigned int *wk, unsigned int* rk) {
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b08c      	sub	sp, #48	; 0x30
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	60f8      	str	r0, [r7, #12]
 8000abe:	60b9      	str	r1, [r7, #8]
 8000ac0:	607a      	str	r2, [r7, #4]
 8000ac2:	603b      	str	r3, [r7, #0]
  unsigned int t[4];
  unsigned int y[4];


  /* step 1 */
  t[0] = c[0];
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	623b      	str	r3, [r7, #32]
  t[1] = c[1] ^ wk[2];
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	3304      	adds	r3, #4
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	3308      	adds	r3, #8
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4053      	eors	r3, r2
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
  t[2] = c[2];
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	689b      	ldr	r3, [r3, #8]
 8000ade:	62bb      	str	r3, [r7, #40]	; 0x28
  t[3] = c[3] ^ wk[3];
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	330c      	adds	r3, #12
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	330c      	adds	r3, #12
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4053      	eors	r3, r2
 8000aee:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* step 2 */
  gfn_inv4(18, rk, t, y);
 8000af0:	f107 0310 	add.w	r3, r7, #16
 8000af4:	f107 0220 	add.w	r2, r7, #32
 8000af8:	6839      	ldr	r1, [r7, #0]
 8000afa:	2012      	movs	r0, #18
 8000afc:	f7ff fe4d 	bl	800079a <gfn_inv4>
  t[0] = y[0];
 8000b00:	693b      	ldr	r3, [r7, #16]
 8000b02:	623b      	str	r3, [r7, #32]
  t[1] = y[1];
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	627b      	str	r3, [r7, #36]	; 0x24
  t[2] = y[2];
 8000b08:	69bb      	ldr	r3, [r7, #24]
 8000b0a:	62bb      	str	r3, [r7, #40]	; 0x28
  t[3] = y[3];
 8000b0c:	69fb      	ldr	r3, [r7, #28]
 8000b0e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* step 3 */
  p[0] = t[0];
 8000b10:	6a3a      	ldr	r2, [r7, #32]
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	601a      	str	r2, [r3, #0]
  p[1] = t[1] ^ wk[0];
 8000b16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	3304      	adds	r3, #4
 8000b20:	404a      	eors	r2, r1
 8000b22:	601a      	str	r2, [r3, #0]
  p[2] = t[2];
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	3308      	adds	r3, #8
 8000b28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b2a:	601a      	str	r2, [r3, #0]
  p[3] = t[3] ^ wk[1];
 8000b2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	3304      	adds	r3, #4
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	330c      	adds	r3, #12
 8000b38:	404a      	eors	r2, r1
 8000b3a:	601a      	str	r2, [r3, #0]
}
 8000b3c:	bf00      	nop
 8000b3e:	3730      	adds	r7, #48	; 0x30
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <clefia_cbc_128_dec>:

void clefia_cbc_128_dec(char * plain, char * cipher, int length, unsigned int* iv, unsigned int *k) {
 8000b44:	b590      	push	{r4, r7, lr}
 8000b46:	b0bd      	sub	sp, #244	; 0xf4
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	607a      	str	r2, [r7, #4]
 8000b50:	603b      	str	r3, [r7, #0]
  unsigned int wk[4];
  unsigned int rk[36];


  int j;
  int i = 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

  int tam = length;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

  if (tam % 16 != 0) {
 8000b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000b62:	f003 030f 	and.w	r3, r3, #15
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d01e      	beq.n	8000ba8 <clefia_cbc_128_dec+0x64>
    for (j = tam % 16; j < 16; j++) {
 8000b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000b6e:	425a      	negs	r2, r3
 8000b70:	f003 030f 	and.w	r3, r3, #15
 8000b74:	f002 020f 	and.w	r2, r2, #15
 8000b78:	bf58      	it	pl
 8000b7a:	4253      	negpl	r3, r2
 8000b7c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8000b80:	e00e      	b.n	8000ba0 <clefia_cbc_128_dec+0x5c>
      cipher[tam++] = 0;
 8000b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000b86:	1c5a      	adds	r2, r3, #1
 8000b88:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	4413      	add	r3, r2
 8000b92:	2200      	movs	r2, #0
 8000b94:	701a      	strb	r2, [r3, #0]
    for (j = tam % 16; j < 16; j++) {
 8000b96:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8000ba0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000ba4:	2b0f      	cmp	r3, #15
 8000ba6:	ddec      	ble.n	8000b82 <clefia_cbc_128_dec+0x3e>
    }
  }

  for (j = 0; j < 4; j++) {
 8000ba8:	2300      	movs	r3, #0
 8000baa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8000bae:	e011      	b.n	8000bd4 <clefia_cbc_128_dec+0x90>
    aux[j] = iv[j];
 8000bb0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	683a      	ldr	r2, [r7, #0]
 8000bb8:	4413      	add	r3, r2
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	33f0      	adds	r3, #240	; 0xf0
 8000bc4:	443b      	add	r3, r7
 8000bc6:	f843 2c3c 	str.w	r2, [r3, #-60]
  for (j = 0; j < 4; j++) {
 8000bca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000bce:	3301      	adds	r3, #1
 8000bd0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8000bd4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000bd8:	2b03      	cmp	r3, #3
 8000bda:	dde9      	ble.n	8000bb0 <clefia_cbc_128_dec+0x6c>
  }

  key_scheduling_128(k, wk, rk);
 8000bdc:	f107 0214 	add.w	r2, r7, #20
 8000be0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000be4:	4619      	mov	r1, r3
 8000be6:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 8000bea:	f7ff fe73 	bl	80008d4 <key_scheduling_128>

  while (i < tam) {
 8000bee:	e0c0      	b.n	8000d72 <clefia_cbc_128_dec+0x22e>
    for (j = 0; j < 4; j++) {
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8000bf6:	e043      	b.n	8000c80 <clefia_cbc_128_dec+0x13c>
      c[j] = WORD_FROM_BYTES(cipher[i+4*j], cipher[i+4*j+1], cipher[i+4*j+2], cipher[i+4*j+3]);
 8000bf8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000bfc:	009a      	lsls	r2, r3, #2
 8000bfe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000c02:	4413      	add	r3, r2
 8000c04:	461a      	mov	r2, r3
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	4413      	add	r3, r2
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	061b      	lsls	r3, r3, #24
 8000c0e:	f063 437f 	orn	r3, r3, #4278190080	; 0xff000000
 8000c12:	4619      	mov	r1, r3
 8000c14:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000c18:	009a      	lsls	r2, r3, #2
 8000c1a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000c1e:	4413      	add	r3, r2
 8000c20:	3301      	adds	r3, #1
 8000c22:	68ba      	ldr	r2, [r7, #8]
 8000c24:	4413      	add	r3, r2
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	041b      	lsls	r3, r3, #16
 8000c2a:	f463 037f 	orn	r3, r3, #16711680	; 0xff0000
 8000c2e:	ea01 0203 	and.w	r2, r1, r3
 8000c32:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000c36:	0099      	lsls	r1, r3, #2
 8000c38:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000c3c:	440b      	add	r3, r1
 8000c3e:	3302      	adds	r3, #2
 8000c40:	68b9      	ldr	r1, [r7, #8]
 8000c42:	440b      	add	r3, r1
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	021b      	lsls	r3, r3, #8
 8000c48:	f463 437f 	orn	r3, r3, #65280	; 0xff00
 8000c4c:	401a      	ands	r2, r3
 8000c4e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000c52:	0099      	lsls	r1, r3, #2
 8000c54:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000c58:	440b      	add	r3, r1
 8000c5a:	3303      	adds	r3, #3
 8000c5c:	68b9      	ldr	r1, [r7, #8]
 8000c5e:	440b      	add	r3, r1
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	f063 03ff 	orn	r3, r3, #255	; 0xff
 8000c66:	401a      	ands	r2, r3
 8000c68:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	33f0      	adds	r3, #240	; 0xf0
 8000c70:	443b      	add	r3, r7
 8000c72:	f843 2c2c 	str.w	r2, [r3, #-44]
    for (j = 0; j < 4; j++) {
 8000c76:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8000c80:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000c84:	2b03      	cmp	r3, #3
 8000c86:	ddb7      	ble.n	8000bf8 <clefia_cbc_128_dec+0xb4>
    }
    decryption_128(p, c, wk, rk);
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8000c90:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8000c94:	f107 00d4 	add.w	r0, r7, #212	; 0xd4
 8000c98:	f7ff ff0d 	bl	8000ab6 <decryption_128>

    for (j = 0; j < 16; j++) {
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8000ca2:	e042      	b.n	8000d2a <clefia_cbc_128_dec+0x1e6>
      plain[i+j] = byte_from_word(p[j/4], j%4) ^ byte_from_word(aux[j/4], j%4);
 8000ca4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	da00      	bge.n	8000cae <clefia_cbc_128_dec+0x16a>
 8000cac:	3303      	adds	r3, #3
 8000cae:	109b      	asrs	r3, r3, #2
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	33f0      	adds	r3, #240	; 0xf0
 8000cb4:	443b      	add	r3, r7
 8000cb6:	f853 0c1c 	ldr.w	r0, [r3, #-28]
 8000cba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000cbe:	425a      	negs	r2, r3
 8000cc0:	f003 0303 	and.w	r3, r3, #3
 8000cc4:	f002 0203 	and.w	r2, r2, #3
 8000cc8:	bf58      	it	pl
 8000cca:	4253      	negpl	r3, r2
 8000ccc:	4619      	mov	r1, r3
 8000cce:	f7ff fab1 	bl	8000234 <byte_from_word>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	461c      	mov	r4, r3
 8000cd6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	da00      	bge.n	8000ce0 <clefia_cbc_128_dec+0x19c>
 8000cde:	3303      	adds	r3, #3
 8000ce0:	109b      	asrs	r3, r3, #2
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	33f0      	adds	r3, #240	; 0xf0
 8000ce6:	443b      	add	r3, r7
 8000ce8:	f853 0c3c 	ldr.w	r0, [r3, #-60]
 8000cec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000cf0:	425a      	negs	r2, r3
 8000cf2:	f003 0303 	and.w	r3, r3, #3
 8000cf6:	f002 0203 	and.w	r2, r2, #3
 8000cfa:	bf58      	it	pl
 8000cfc:	4253      	negpl	r3, r2
 8000cfe:	4619      	mov	r1, r3
 8000d00:	f7ff fa98 	bl	8000234 <byte_from_word>
 8000d04:	4603      	mov	r3, r0
 8000d06:	4619      	mov	r1, r3
 8000d08:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000d0c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000d10:	4413      	add	r3, r2
 8000d12:	461a      	mov	r2, r3
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	4413      	add	r3, r2
 8000d18:	ea84 0201 	eor.w	r2, r4, r1
 8000d1c:	b2d2      	uxtb	r2, r2
 8000d1e:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 16; j++) {
 8000d20:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000d24:	3301      	adds	r3, #1
 8000d26:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8000d2a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000d2e:	2b0f      	cmp	r3, #15
 8000d30:	ddb8      	ble.n	8000ca4 <clefia_cbc_128_dec+0x160>
    }

    for (j = 0; j < 4; j++) {
 8000d32:	2300      	movs	r3, #0
 8000d34:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8000d38:	e012      	b.n	8000d60 <clefia_cbc_128_dec+0x21c>
      aux[j] = c[j];
 8000d3a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	33f0      	adds	r3, #240	; 0xf0
 8000d42:	443b      	add	r3, r7
 8000d44:	f853 2c2c 	ldr.w	r2, [r3, #-44]
 8000d48:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	33f0      	adds	r3, #240	; 0xf0
 8000d50:	443b      	add	r3, r7
 8000d52:	f843 2c3c 	str.w	r2, [r3, #-60]
    for (j = 0; j < 4; j++) {
 8000d56:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8000d60:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000d64:	2b03      	cmp	r3, #3
 8000d66:	dde8      	ble.n	8000d3a <clefia_cbc_128_dec+0x1f6>
    }

    i = i + 16;
 8000d68:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000d6c:	3310      	adds	r3, #16
 8000d6e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  while (i < tam) {
 8000d72:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	f6ff af38 	blt.w	8000bf0 <clefia_cbc_128_dec+0xac>
  }
}
 8000d80:	bf00      	nop
 8000d82:	bf00      	nop
 8000d84:	37f4      	adds	r7, #244	; 0xf4
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd90      	pop	{r4, r7, pc}

08000d8a <clefia_cbc_128_enc>:

void clefia_cbc_128_enc(char* plain, char * cipher, int length, unsigned int* iv, unsigned int *k) {
 8000d8a:	b590      	push	{r4, r7, lr}
 8000d8c:	b0bd      	sub	sp, #244	; 0xf4
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	60f8      	str	r0, [r7, #12]
 8000d92:	60b9      	str	r1, [r7, #8]
 8000d94:	607a      	str	r2, [r7, #4]
 8000d96:	603b      	str	r3, [r7, #0]
  unsigned int c[4];
  unsigned int wk[4];
  unsigned int rk[36];

  int j;
  int i = 0;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

  int tam = length;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

  if (tam % 16 != 0) {
 8000da4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000da8:	f003 030f 	and.w	r3, r3, #15
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d01e      	beq.n	8000dee <clefia_cbc_128_enc+0x64>
    for (j = tam % 16; j < 16; j++) {
 8000db0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000db4:	425a      	negs	r2, r3
 8000db6:	f003 030f 	and.w	r3, r3, #15
 8000dba:	f002 020f 	and.w	r2, r2, #15
 8000dbe:	bf58      	it	pl
 8000dc0:	4253      	negpl	r3, r2
 8000dc2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8000dc6:	e00e      	b.n	8000de6 <clefia_cbc_128_enc+0x5c>
      plain[tam++] = 0;
 8000dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000dcc:	1c5a      	adds	r2, r3, #1
 8000dce:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	2200      	movs	r2, #0
 8000dda:	701a      	strb	r2, [r3, #0]
    for (j = tam % 16; j < 16; j++) {
 8000ddc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000de0:	3301      	adds	r3, #1
 8000de2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8000de6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8000dea:	2b0f      	cmp	r3, #15
 8000dec:	ddec      	ble.n	8000dc8 <clefia_cbc_128_enc+0x3e>
    }
  }

  c[0] = iv[0];
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  c[1] = iv[1];
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  c[2] = iv[2];
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  c[3] = iv[3];
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	68db      	ldr	r3, [r3, #12]
 8000e0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

  key_scheduling_128(k, wk, rk);
 8000e0e:	f107 0214 	add.w	r2, r7, #20
 8000e12:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e16:	4619      	mov	r1, r3
 8000e18:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 8000e1c:	f7ff fd5a 	bl	80008d4 <key_scheduling_128>

  while (i < tam) {
 8000e20:	e190      	b.n	8001144 <clefia_cbc_128_enc+0x3ba>

    unsigned int bla0 = WORD_FROM_BYTES(plain[i+4*0],plain[i+4*0+1],plain[i+4*0+2],plain[i+4*0+3]);
 8000e22:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000e26:	68fa      	ldr	r2, [r7, #12]
 8000e28:	4413      	add	r3, r2
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	061b      	lsls	r3, r3, #24
 8000e2e:	f063 437f 	orn	r3, r3, #4278190080	; 0xff000000
 8000e32:	4619      	mov	r1, r3
 8000e34:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000e38:	3301      	adds	r3, #1
 8000e3a:	68fa      	ldr	r2, [r7, #12]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	041b      	lsls	r3, r3, #16
 8000e42:	f463 037f 	orn	r3, r3, #16711680	; 0xff0000
 8000e46:	ea01 0203 	and.w	r2, r1, r3
 8000e4a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000e4e:	3302      	adds	r3, #2
 8000e50:	68f9      	ldr	r1, [r7, #12]
 8000e52:	440b      	add	r3, r1
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	021b      	lsls	r3, r3, #8
 8000e58:	f463 437f 	orn	r3, r3, #65280	; 0xff00
 8000e5c:	401a      	ands	r2, r3
 8000e5e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000e62:	3303      	adds	r3, #3
 8000e64:	68f9      	ldr	r1, [r7, #12]
 8000e66:	440b      	add	r3, r1
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	f063 03ff 	orn	r3, r3, #255	; 0xff
 8000e6e:	4013      	ands	r3, r2
 8000e70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    unsigned int bla1 = WORD_FROM_BYTES(plain[i+4*1],plain[i+4*1+1],plain[i+4*1+2],plain[i+4*1+3]);
 8000e74:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000e78:	3304      	adds	r3, #4
 8000e7a:	68fa      	ldr	r2, [r7, #12]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	061b      	lsls	r3, r3, #24
 8000e82:	f063 437f 	orn	r3, r3, #4278190080	; 0xff000000
 8000e86:	4619      	mov	r1, r3
 8000e88:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000e8c:	3305      	adds	r3, #5
 8000e8e:	68fa      	ldr	r2, [r7, #12]
 8000e90:	4413      	add	r3, r2
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	041b      	lsls	r3, r3, #16
 8000e96:	f463 037f 	orn	r3, r3, #16711680	; 0xff0000
 8000e9a:	ea01 0203 	and.w	r2, r1, r3
 8000e9e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000ea2:	3306      	adds	r3, #6
 8000ea4:	68f9      	ldr	r1, [r7, #12]
 8000ea6:	440b      	add	r3, r1
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	021b      	lsls	r3, r3, #8
 8000eac:	f463 437f 	orn	r3, r3, #65280	; 0xff00
 8000eb0:	401a      	ands	r2, r3
 8000eb2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000eb6:	3307      	adds	r3, #7
 8000eb8:	68f9      	ldr	r1, [r7, #12]
 8000eba:	440b      	add	r3, r1
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	f063 03ff 	orn	r3, r3, #255	; 0xff
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    unsigned int bla2 = WORD_FROM_BYTES(plain[i+4*2],plain[i+4*2+1],plain[i+4*2+2],plain[i+4*2+3]);
 8000ec8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000ecc:	3308      	adds	r3, #8
 8000ece:	68fa      	ldr	r2, [r7, #12]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	061b      	lsls	r3, r3, #24
 8000ed6:	f063 437f 	orn	r3, r3, #4278190080	; 0xff000000
 8000eda:	4619      	mov	r1, r3
 8000edc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000ee0:	3309      	adds	r3, #9
 8000ee2:	68fa      	ldr	r2, [r7, #12]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	041b      	lsls	r3, r3, #16
 8000eea:	f463 037f 	orn	r3, r3, #16711680	; 0xff0000
 8000eee:	ea01 0203 	and.w	r2, r1, r3
 8000ef2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000ef6:	330a      	adds	r3, #10
 8000ef8:	68f9      	ldr	r1, [r7, #12]
 8000efa:	440b      	add	r3, r1
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	021b      	lsls	r3, r3, #8
 8000f00:	f463 437f 	orn	r3, r3, #65280	; 0xff00
 8000f04:	401a      	ands	r2, r3
 8000f06:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000f0a:	330b      	adds	r3, #11
 8000f0c:	68f9      	ldr	r1, [r7, #12]
 8000f0e:	440b      	add	r3, r1
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	f063 03ff 	orn	r3, r3, #255	; 0xff
 8000f16:	4013      	ands	r3, r2
 8000f18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    unsigned int bla3 = WORD_FROM_BYTES(plain[i+4*3],plain[i+4*3+1],plain[i+4*3+2],plain[i+4*3+3]);
 8000f1c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000f20:	330c      	adds	r3, #12
 8000f22:	68fa      	ldr	r2, [r7, #12]
 8000f24:	4413      	add	r3, r2
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	061b      	lsls	r3, r3, #24
 8000f2a:	f063 437f 	orn	r3, r3, #4278190080	; 0xff000000
 8000f2e:	4619      	mov	r1, r3
 8000f30:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000f34:	330d      	adds	r3, #13
 8000f36:	68fa      	ldr	r2, [r7, #12]
 8000f38:	4413      	add	r3, r2
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	041b      	lsls	r3, r3, #16
 8000f3e:	f463 037f 	orn	r3, r3, #16711680	; 0xff0000
 8000f42:	ea01 0203 	and.w	r2, r1, r3
 8000f46:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000f4a:	330e      	adds	r3, #14
 8000f4c:	68f9      	ldr	r1, [r7, #12]
 8000f4e:	440b      	add	r3, r1
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	021b      	lsls	r3, r3, #8
 8000f54:	f463 437f 	orn	r3, r3, #65280	; 0xff00
 8000f58:	401a      	ands	r2, r3
 8000f5a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000f5e:	330f      	adds	r3, #15
 8000f60:	68f9      	ldr	r1, [r7, #12]
 8000f62:	440b      	add	r3, r1
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	f063 03ff 	orn	r3, r3, #255	; 0xff
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

    p[0] = bla0 ^ c[0];
 8000f70:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8000f74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000f78:	4053      	eors	r3, r2
 8000f7a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    p[1] = bla1 ^ c[1];
 8000f7e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8000f82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000f86:	4053      	eors	r3, r2
 8000f88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    p[2] = bla2 ^ c[2];
 8000f8c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000f90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000f94:	4053      	eors	r3, r2
 8000f96:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    p[3] = bla3 ^ c[3];
 8000f9a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8000f9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000fa2:	4053      	eors	r3, r2
 8000fa4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0


    encryption_128(p, c, wk, rk);
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8000fb0:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8000fb4:	f107 00c4 	add.w	r0, r7, #196	; 0xc4
 8000fb8:	f7ff fd36 	bl	8000a28 <encryption_128>

    cipher[i+0] = byte_from_word(c[0/4], 0 % 4);
 8000fbc:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8000fc0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000fc4:	68ba      	ldr	r2, [r7, #8]
 8000fc6:	18d4      	adds	r4, r2, r3
 8000fc8:	2100      	movs	r1, #0
 8000fca:	f7ff f933 	bl	8000234 <byte_from_word>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	7023      	strb	r3, [r4, #0]
    cipher[i+1] = byte_from_word(c[1/4], 1 % 4);
 8000fd2:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8000fd6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000fda:	3301      	adds	r3, #1
 8000fdc:	68ba      	ldr	r2, [r7, #8]
 8000fde:	18d4      	adds	r4, r2, r3
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	f7ff f927 	bl	8000234 <byte_from_word>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	7023      	strb	r3, [r4, #0]
    cipher[i+2] = byte_from_word(c[2/4], 2 % 4);
 8000fea:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8000fee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000ff2:	3302      	adds	r3, #2
 8000ff4:	68ba      	ldr	r2, [r7, #8]
 8000ff6:	18d4      	adds	r4, r2, r3
 8000ff8:	2102      	movs	r1, #2
 8000ffa:	f7ff f91b 	bl	8000234 <byte_from_word>
 8000ffe:	4603      	mov	r3, r0
 8001000:	7023      	strb	r3, [r4, #0]
    cipher[i+3] = byte_from_word(c[3/4], 3 % 4);
 8001002:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8001006:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800100a:	3303      	adds	r3, #3
 800100c:	68ba      	ldr	r2, [r7, #8]
 800100e:	18d4      	adds	r4, r2, r3
 8001010:	2103      	movs	r1, #3
 8001012:	f7ff f90f 	bl	8000234 <byte_from_word>
 8001016:	4603      	mov	r3, r0
 8001018:	7023      	strb	r3, [r4, #0]
    cipher[i+4] = byte_from_word(c[4/4], 4 % 4);
 800101a:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800101e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001022:	3304      	adds	r3, #4
 8001024:	68ba      	ldr	r2, [r7, #8]
 8001026:	18d4      	adds	r4, r2, r3
 8001028:	2100      	movs	r1, #0
 800102a:	f7ff f903 	bl	8000234 <byte_from_word>
 800102e:	4603      	mov	r3, r0
 8001030:	7023      	strb	r3, [r4, #0]
    cipher[i+5] = byte_from_word(c[5/4], 5 % 4);
 8001032:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8001036:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800103a:	3305      	adds	r3, #5
 800103c:	68ba      	ldr	r2, [r7, #8]
 800103e:	18d4      	adds	r4, r2, r3
 8001040:	2101      	movs	r1, #1
 8001042:	f7ff f8f7 	bl	8000234 <byte_from_word>
 8001046:	4603      	mov	r3, r0
 8001048:	7023      	strb	r3, [r4, #0]
    cipher[i+6] = byte_from_word(c[6/4], 6 % 4);
 800104a:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800104e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001052:	3306      	adds	r3, #6
 8001054:	68ba      	ldr	r2, [r7, #8]
 8001056:	18d4      	adds	r4, r2, r3
 8001058:	2102      	movs	r1, #2
 800105a:	f7ff f8eb 	bl	8000234 <byte_from_word>
 800105e:	4603      	mov	r3, r0
 8001060:	7023      	strb	r3, [r4, #0]
    cipher[i+7] = byte_from_word(c[7/4], 7 % 4);
 8001062:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8001066:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800106a:	3307      	adds	r3, #7
 800106c:	68ba      	ldr	r2, [r7, #8]
 800106e:	18d4      	adds	r4, r2, r3
 8001070:	2103      	movs	r1, #3
 8001072:	f7ff f8df 	bl	8000234 <byte_from_word>
 8001076:	4603      	mov	r3, r0
 8001078:	7023      	strb	r3, [r4, #0]
    cipher[i+8] = byte_from_word(c[8/4], 8 % 4);
 800107a:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800107e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001082:	3308      	adds	r3, #8
 8001084:	68ba      	ldr	r2, [r7, #8]
 8001086:	18d4      	adds	r4, r2, r3
 8001088:	2100      	movs	r1, #0
 800108a:	f7ff f8d3 	bl	8000234 <byte_from_word>
 800108e:	4603      	mov	r3, r0
 8001090:	7023      	strb	r3, [r4, #0]
    cipher[i+9] = byte_from_word(c[9/4], 9 % 4);
 8001092:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8001096:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800109a:	3309      	adds	r3, #9
 800109c:	68ba      	ldr	r2, [r7, #8]
 800109e:	18d4      	adds	r4, r2, r3
 80010a0:	2101      	movs	r1, #1
 80010a2:	f7ff f8c7 	bl	8000234 <byte_from_word>
 80010a6:	4603      	mov	r3, r0
 80010a8:	7023      	strb	r3, [r4, #0]
    cipher[i+10] = byte_from_word(c[10/4], 10 % 4);
 80010aa:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80010ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80010b2:	330a      	adds	r3, #10
 80010b4:	68ba      	ldr	r2, [r7, #8]
 80010b6:	18d4      	adds	r4, r2, r3
 80010b8:	2102      	movs	r1, #2
 80010ba:	f7ff f8bb 	bl	8000234 <byte_from_word>
 80010be:	4603      	mov	r3, r0
 80010c0:	7023      	strb	r3, [r4, #0]
    cipher[i+11] = byte_from_word(c[11/4], 11 % 4);
 80010c2:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80010c6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80010ca:	330b      	adds	r3, #11
 80010cc:	68ba      	ldr	r2, [r7, #8]
 80010ce:	18d4      	adds	r4, r2, r3
 80010d0:	2103      	movs	r1, #3
 80010d2:	f7ff f8af 	bl	8000234 <byte_from_word>
 80010d6:	4603      	mov	r3, r0
 80010d8:	7023      	strb	r3, [r4, #0]
    cipher[i+12] = byte_from_word(c[12/4], 12 % 4);
 80010da:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80010de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80010e2:	330c      	adds	r3, #12
 80010e4:	68ba      	ldr	r2, [r7, #8]
 80010e6:	18d4      	adds	r4, r2, r3
 80010e8:	2100      	movs	r1, #0
 80010ea:	f7ff f8a3 	bl	8000234 <byte_from_word>
 80010ee:	4603      	mov	r3, r0
 80010f0:	7023      	strb	r3, [r4, #0]
    cipher[i+13] = byte_from_word(c[13/4], 13 % 4);
 80010f2:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80010f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80010fa:	330d      	adds	r3, #13
 80010fc:	68ba      	ldr	r2, [r7, #8]
 80010fe:	18d4      	adds	r4, r2, r3
 8001100:	2101      	movs	r1, #1
 8001102:	f7ff f897 	bl	8000234 <byte_from_word>
 8001106:	4603      	mov	r3, r0
 8001108:	7023      	strb	r3, [r4, #0]
    cipher[i+14] = byte_from_word(c[14/4], 14 % 4);
 800110a:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800110e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001112:	330e      	adds	r3, #14
 8001114:	68ba      	ldr	r2, [r7, #8]
 8001116:	18d4      	adds	r4, r2, r3
 8001118:	2102      	movs	r1, #2
 800111a:	f7ff f88b 	bl	8000234 <byte_from_word>
 800111e:	4603      	mov	r3, r0
 8001120:	7023      	strb	r3, [r4, #0]
    cipher[i+15] = byte_from_word(c[15/4], 15 % 4);
 8001122:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8001126:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800112a:	330f      	adds	r3, #15
 800112c:	68ba      	ldr	r2, [r7, #8]
 800112e:	18d4      	adds	r4, r2, r3
 8001130:	2103      	movs	r1, #3
 8001132:	f7ff f87f 	bl	8000234 <byte_from_word>
 8001136:	4603      	mov	r3, r0
 8001138:	7023      	strb	r3, [r4, #0]
    i = i + 16;
 800113a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800113e:	3310      	adds	r3, #16
 8001140:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  while (i < tam) {
 8001144:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8001148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800114c:	429a      	cmp	r2, r3
 800114e:	f6ff ae68 	blt.w	8000e22 <clefia_cbc_128_enc+0x98>
  }
}
 8001152:	bf00      	nop
 8001154:	bf00      	nop
 8001156:	37f4      	adds	r7, #244	; 0xf4
 8001158:	46bd      	mov	sp, r7
 800115a:	bd90      	pop	{r4, r7, pc}

0800115c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001164:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001168:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800116c:	f003 0301 	and.w	r3, r3, #1
 8001170:	2b00      	cmp	r3, #0
 8001172:	d013      	beq.n	800119c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001174:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001178:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800117c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001180:	2b00      	cmp	r3, #0
 8001182:	d00b      	beq.n	800119c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001184:	e000      	b.n	8001188 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001186:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001188:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d0f9      	beq.n	8001186 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001192:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800119c:	687b      	ldr	r3, [r7, #4]
}
 800119e:	4618      	mov	r0, r3
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
	...

080011ac <print_hex>:
#ifndef _UTIL_H
#define _UTIL_H

static void print_hex(const unsigned char* hex, int len)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
	for (const unsigned char* p = hex; p - hex < len; p++)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	e008      	b.n	80011ce <print_hex+0x22>
		printf("%02X ", *p);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	4619      	mov	r1, r3
 80011c2:	4809      	ldr	r0, [pc, #36]	; (80011e8 <print_hex+0x3c>)
 80011c4:	f001 ff4e 	bl	8003064 <iprintf>
	for (const unsigned char* p = hex; p - hex < len; p++)
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	3301      	adds	r3, #1
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	68fa      	ldr	r2, [r7, #12]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	683a      	ldr	r2, [r7, #0]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	dcf0      	bgt.n	80011bc <print_hex+0x10>
	printf("\n");
 80011da:	200a      	movs	r0, #10
 80011dc:	f001 ff54 	bl	8003088 <putchar>
}
 80011e0:	bf00      	nop
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	08003df4 	.word	0x08003df4

080011ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b09a      	sub	sp, #104	; 0x68
 80011f0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80011f2:	4b43      	ldr	r3, [pc, #268]	; (8001300 <main+0x114>)
 80011f4:	68db      	ldr	r3, [r3, #12]
 80011f6:	4a42      	ldr	r2, [pc, #264]	; (8001300 <main+0x114>)
 80011f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80011fc:	60d3      	str	r3, [r2, #12]
	  DWT->CYCCNT = 0;
 80011fe:	4b41      	ldr	r3, [pc, #260]	; (8001304 <main+0x118>)
 8001200:	2200      	movs	r2, #0
 8001202:	605a      	str	r2, [r3, #4]
	  DWT->CTRL  |= 1;
 8001204:	4b3f      	ldr	r3, [pc, #252]	; (8001304 <main+0x118>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a3e      	ldr	r2, [pc, #248]	; (8001304 <main+0x118>)
 800120a:	f043 0301 	orr.w	r3, r3, #1
 800120e:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001210:	f000 fb3d 	bl	800188e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001214:	f000 f894 	bl	8001340 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001218:	f000 f8d8 	bl	80013cc <MX_GPIO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 800121c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001220:	4839      	ldr	r0, [pc, #228]	; (8001308 <main+0x11c>)
 8001222:	f000 fe27 	bl	8001e74 <HAL_GPIO_TogglePin>

		print_hex(plain, STRING_LENGTH);
 8001226:	2140      	movs	r1, #64	; 0x40
 8001228:	4838      	ldr	r0, [pc, #224]	; (800130c <main+0x120>)
 800122a:	f7ff ffbf 	bl	80011ac <print_hex>

		uint32_t key_cycle_count = DWT->CYCCNT;
 800122e:	4b35      	ldr	r3, [pc, #212]	; (8001304 <main+0x118>)
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	65fb      	str	r3, [r7, #92]	; 0x5c

		uint8_t cipher[STRING_LENGTH];

		uint32_t enc_start_cycle_count = DWT->CYCCNT;
 8001234:	4b33      	ldr	r3, [pc, #204]	; (8001304 <main+0x118>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	65bb      	str	r3, [r7, #88]	; 0x58
		//// Do encryption ////
		clefia_cbc_128_enc(plain, cipher, STRING_LENGTH, (uint32_t*)iv, (uint32_t*)key);
 800123a:	4639      	mov	r1, r7
 800123c:	4b34      	ldr	r3, [pc, #208]	; (8001310 <main+0x124>)
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	4b34      	ldr	r3, [pc, #208]	; (8001314 <main+0x128>)
 8001242:	2240      	movs	r2, #64	; 0x40
 8001244:	4831      	ldr	r0, [pc, #196]	; (800130c <main+0x120>)
 8001246:	f7ff fda0 	bl	8000d8a <clefia_cbc_128_enc>
		uint32_t enc_end_cycle_count = DWT->CYCCNT;
 800124a:	4b2e      	ldr	r3, [pc, #184]	; (8001304 <main+0x118>)
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	657b      	str	r3, [r7, #84]	; 0x54

		print_hex(cipher, STRING_LENGTH);
 8001250:	463b      	mov	r3, r7
 8001252:	2140      	movs	r1, #64	; 0x40
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff ffa9 	bl	80011ac <print_hex>

		uint32_t dec_start_cycle_count = DWT->CYCCNT;
 800125a:	4b2a      	ldr	r3, [pc, #168]	; (8001304 <main+0x118>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	653b      	str	r3, [r7, #80]	; 0x50
		//// Do decryption ////
		clefia_cbc_128_dec(plain, cipher, STRING_LENGTH, (uint32_t*)iv, (uint32_t*)key);
 8001260:	4639      	mov	r1, r7
 8001262:	4b2b      	ldr	r3, [pc, #172]	; (8001310 <main+0x124>)
 8001264:	9300      	str	r3, [sp, #0]
 8001266:	4b2b      	ldr	r3, [pc, #172]	; (8001314 <main+0x128>)
 8001268:	2240      	movs	r2, #64	; 0x40
 800126a:	4828      	ldr	r0, [pc, #160]	; (800130c <main+0x120>)
 800126c:	f7ff fc6a 	bl	8000b44 <clefia_cbc_128_dec>
		uint32_t dec_end_cycle_count = DWT->CYCCNT;
 8001270:	4b24      	ldr	r3, [pc, #144]	; (8001304 <main+0x118>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	64fb      	str	r3, [r7, #76]	; 0x4c

		print_hex(plain, STRING_LENGTH);
 8001276:	2140      	movs	r1, #64	; 0x40
 8001278:	4824      	ldr	r0, [pc, #144]	; (800130c <main+0x120>)
 800127a:	f7ff ff97 	bl	80011ac <print_hex>

		uint32_t key_cycles = enc_start_cycle_count - key_cycle_count;
 800127e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001280:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	64bb      	str	r3, [r7, #72]	; 0x48
	    uint32_t enc_total_cycles = enc_end_cycle_count - enc_start_cycle_count;
 8001286:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001288:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	647b      	str	r3, [r7, #68]	; 0x44
	    uint32_t dec_total_cycles = dec_end_cycle_count - dec_start_cycle_count;
 800128e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001290:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	643b      	str	r3, [r7, #64]	; 0x40

	    printf("Key cycles: %u\n", key_cycles);
 8001296:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001298:	481f      	ldr	r0, [pc, #124]	; (8001318 <main+0x12c>)
 800129a:	f001 fee3 	bl	8003064 <iprintf>
	    printf("\nEnc start cycles: %u\n", enc_start_cycle_count);
 800129e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80012a0:	481e      	ldr	r0, [pc, #120]	; (800131c <main+0x130>)
 80012a2:	f001 fedf 	bl	8003064 <iprintf>
	    printf("Enc end cycles: %u\n", enc_end_cycle_count);
 80012a6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80012a8:	481d      	ldr	r0, [pc, #116]	; (8001320 <main+0x134>)
 80012aa:	f001 fedb 	bl	8003064 <iprintf>
	    printf("Enc total cycles: %u\n", enc_total_cycles);
 80012ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80012b0:	481c      	ldr	r0, [pc, #112]	; (8001324 <main+0x138>)
 80012b2:	f001 fed7 	bl	8003064 <iprintf>
	    printf("\nDec start cycles: %u\n", dec_start_cycle_count);
 80012b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80012b8:	481b      	ldr	r0, [pc, #108]	; (8001328 <main+0x13c>)
 80012ba:	f001 fed3 	bl	8003064 <iprintf>
	    printf("Dec end cycles: %u\n", dec_end_cycle_count);
 80012be:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80012c0:	481a      	ldr	r0, [pc, #104]	; (800132c <main+0x140>)
 80012c2:	f001 fecf 	bl	8003064 <iprintf>
	    printf("Dec total cycles: %u\n", dec_total_cycles);
 80012c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80012c8:	4819      	ldr	r0, [pc, #100]	; (8001330 <main+0x144>)
 80012ca:	f001 fecb 	bl	8003064 <iprintf>
	    printf("\nKey + Enc: %u\n", key_cycles + enc_total_cycles);
 80012ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80012d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012d2:	4413      	add	r3, r2
 80012d4:	4619      	mov	r1, r3
 80012d6:	4817      	ldr	r0, [pc, #92]	; (8001334 <main+0x148>)
 80012d8:	f001 fec4 	bl	8003064 <iprintf>
	    printf("Key + Dec: %u\n", key_cycles + dec_total_cycles);
 80012dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80012de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80012e0:	4413      	add	r3, r2
 80012e2:	4619      	mov	r1, r3
 80012e4:	4814      	ldr	r0, [pc, #80]	; (8001338 <main+0x14c>)
 80012e6:	f001 febd 	bl	8003064 <iprintf>

	    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80012ea:	2180      	movs	r1, #128	; 0x80
 80012ec:	4813      	ldr	r0, [pc, #76]	; (800133c <main+0x150>)
 80012ee:	f000 fdc1 	bl	8001e74 <HAL_GPIO_TogglePin>

	    break;
 80012f2:	bf00      	nop
 80012f4:	2300      	movs	r3, #0
  }
  /* USER CODE END 3 */
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3760      	adds	r7, #96	; 0x60
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	e000edf0 	.word	0xe000edf0
 8001304:	e0001000 	.word	0xe0001000
 8001308:	42020000 	.word	0x42020000
 800130c:	200002f0 	.word	0x200002f0
 8001310:	20000330 	.word	0x20000330
 8001314:	20000340 	.word	0x20000340
 8001318:	08003dfc 	.word	0x08003dfc
 800131c:	08003e0c 	.word	0x08003e0c
 8001320:	08003e24 	.word	0x08003e24
 8001324:	08003e38 	.word	0x08003e38
 8001328:	08003e50 	.word	0x08003e50
 800132c:	08003e68 	.word	0x08003e68
 8001330:	08003e7c 	.word	0x08003e7c
 8001334:	08003e94 	.word	0x08003e94
 8001338:	08003ea4 	.word	0x08003ea4
 800133c:	42020400 	.word	0x42020400

08001340 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b098      	sub	sp, #96	; 0x60
 8001344:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001346:	f107 0318 	add.w	r3, r7, #24
 800134a:	2248      	movs	r2, #72	; 0x48
 800134c:	2100      	movs	r1, #0
 800134e:	4618      	mov	r0, r3
 8001350:	f001 fea2 	bl	8003098 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001354:	1d3b      	adds	r3, r7, #4
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]
 8001360:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 8001362:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001366:	f000 fdad 	bl	8001ec4 <HAL_PWREx_ControlVoltageScaling>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001370:	f000 f8af 	bl	80014d2 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001374:	2310      	movs	r3, #16
 8001376:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001378:	2301      	movs	r3, #1
 800137a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800137c:	2300      	movs	r3, #0
 800137e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001380:	2360      	movs	r3, #96	; 0x60
 8001382:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001384:	2300      	movs	r3, #0
 8001386:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001388:	f107 0318 	add.w	r3, r7, #24
 800138c:	4618      	mov	r0, r3
 800138e:	f000 fe19 	bl	8001fc4 <HAL_RCC_OscConfig>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001398:	f000 f89b 	bl	80014d2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800139c:	230f      	movs	r3, #15
 800139e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80013a0:	2300      	movs	r3, #0
 80013a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013a4:	2300      	movs	r3, #0
 80013a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013a8:	2300      	movs	r3, #0
 80013aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013b0:	1d3b      	adds	r3, r7, #4
 80013b2:	2100      	movs	r1, #0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f001 fadb 	bl	8002970 <HAL_RCC_ClockConfig>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80013c0:	f000 f887 	bl	80014d2 <Error_Handler>
  }
}
 80013c4:	bf00      	nop
 80013c6:	3760      	adds	r7, #96	; 0x60
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b088      	sub	sp, #32
 80013d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d2:	f107 030c 	add.w	r3, r7, #12
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]
 80013de:	60da      	str	r2, [r3, #12]
 80013e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013e2:	4b31      	ldr	r3, [pc, #196]	; (80014a8 <MX_GPIO_Init+0xdc>)
 80013e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e6:	4a30      	ldr	r2, [pc, #192]	; (80014a8 <MX_GPIO_Init+0xdc>)
 80013e8:	f043 0304 	orr.w	r3, r3, #4
 80013ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ee:	4b2e      	ldr	r3, [pc, #184]	; (80014a8 <MX_GPIO_Init+0xdc>)
 80013f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f2:	f003 0304 	and.w	r3, r3, #4
 80013f6:	60bb      	str	r3, [r7, #8]
 80013f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fa:	4b2b      	ldr	r3, [pc, #172]	; (80014a8 <MX_GPIO_Init+0xdc>)
 80013fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fe:	4a2a      	ldr	r2, [pc, #168]	; (80014a8 <MX_GPIO_Init+0xdc>)
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001406:	4b28      	ldr	r3, [pc, #160]	; (80014a8 <MX_GPIO_Init+0xdc>)
 8001408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	607b      	str	r3, [r7, #4]
 8001410:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001412:	4b25      	ldr	r3, [pc, #148]	; (80014a8 <MX_GPIO_Init+0xdc>)
 8001414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001416:	4a24      	ldr	r2, [pc, #144]	; (80014a8 <MX_GPIO_Init+0xdc>)
 8001418:	f043 0302 	orr.w	r3, r3, #2
 800141c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800141e:	4b22      	ldr	r3, [pc, #136]	; (80014a8 <MX_GPIO_Init+0xdc>)
 8001420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	603b      	str	r3, [r7, #0]
 8001428:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800142a:	2200      	movs	r2, #0
 800142c:	2180      	movs	r1, #128	; 0x80
 800142e:	481f      	ldr	r0, [pc, #124]	; (80014ac <MX_GPIO_Init+0xe0>)
 8001430:	f000 fd08 	bl	8001e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001434:	2200      	movs	r2, #0
 8001436:	f44f 7100 	mov.w	r1, #512	; 0x200
 800143a:	481d      	ldr	r0, [pc, #116]	; (80014b0 <MX_GPIO_Init+0xe4>)
 800143c:	f000 fd02 	bl	8001e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8001440:	2200      	movs	r2, #0
 8001442:	2180      	movs	r1, #128	; 0x80
 8001444:	481b      	ldr	r0, [pc, #108]	; (80014b4 <MX_GPIO_Init+0xe8>)
 8001446:	f000 fcfd 	bl	8001e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800144a:	2380      	movs	r3, #128	; 0x80
 800144c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144e:	2301      	movs	r3, #1
 8001450:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001456:	2300      	movs	r3, #0
 8001458:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800145a:	f107 030c 	add.w	r3, r7, #12
 800145e:	4619      	mov	r1, r3
 8001460:	4812      	ldr	r0, [pc, #72]	; (80014ac <MX_GPIO_Init+0xe0>)
 8001462:	f000 fb6f 	bl	8001b44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001466:	f44f 7300 	mov.w	r3, #512	; 0x200
 800146a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800146c:	2301      	movs	r3, #1
 800146e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001474:	2300      	movs	r3, #0
 8001476:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001478:	f107 030c 	add.w	r3, r7, #12
 800147c:	4619      	mov	r1, r3
 800147e:	480c      	ldr	r0, [pc, #48]	; (80014b0 <MX_GPIO_Init+0xe4>)
 8001480:	f000 fb60 	bl	8001b44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001484:	2380      	movs	r3, #128	; 0x80
 8001486:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001488:	2301      	movs	r3, #1
 800148a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001490:	2300      	movs	r3, #0
 8001492:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001494:	f107 030c 	add.w	r3, r7, #12
 8001498:	4619      	mov	r1, r3
 800149a:	4806      	ldr	r0, [pc, #24]	; (80014b4 <MX_GPIO_Init+0xe8>)
 800149c:	f000 fb52 	bl	8001b44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014a0:	bf00      	nop
 80014a2:	3720      	adds	r7, #32
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40021000 	.word	0x40021000
 80014ac:	42020800 	.word	0x42020800
 80014b0:	42020000 	.word	0x42020000
 80014b4:	42020400 	.word	0x42020400

080014b8 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
	return ITM_SendChar(ch);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff fe4a 	bl	800115c <ITM_SendChar>
 80014c8:	4603      	mov	r3, r0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014d6:	b672      	cpsid	i
}
 80014d8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014da:	e7fe      	b.n	80014da <Error_Handler+0x8>

080014dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e2:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <HAL_MspInit+0x44>)
 80014e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014e6:	4a0e      	ldr	r2, [pc, #56]	; (8001520 <HAL_MspInit+0x44>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	6613      	str	r3, [r2, #96]	; 0x60
 80014ee:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <HAL_MspInit+0x44>)
 80014f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	607b      	str	r3, [r7, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014fa:	4b09      	ldr	r3, [pc, #36]	; (8001520 <HAL_MspInit+0x44>)
 80014fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014fe:	4a08      	ldr	r2, [pc, #32]	; (8001520 <HAL_MspInit+0x44>)
 8001500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001504:	6593      	str	r3, [r2, #88]	; 0x58
 8001506:	4b06      	ldr	r3, [pc, #24]	; (8001520 <HAL_MspInit+0x44>)
 8001508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800150a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150e:	603b      	str	r3, [r7, #0]
 8001510:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	40021000 	.word	0x40021000

08001524 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001528:	e7fe      	b.n	8001528 <NMI_Handler+0x4>

0800152a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800152e:	e7fe      	b.n	800152e <HardFault_Handler+0x4>

08001530 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001534:	e7fe      	b.n	8001534 <MemManage_Handler+0x4>

08001536 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800153a:	e7fe      	b.n	800153a <BusFault_Handler+0x4>

0800153c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001540:	e7fe      	b.n	8001540 <UsageFault_Handler+0x4>

08001542 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001570:	f000 f9e4 	bl	800193c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}

08001578 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001584:	2300      	movs	r3, #0
 8001586:	617b      	str	r3, [r7, #20]
 8001588:	e00a      	b.n	80015a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800158a:	f3af 8000 	nop.w
 800158e:	4601      	mov	r1, r0
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	1c5a      	adds	r2, r3, #1
 8001594:	60ba      	str	r2, [r7, #8]
 8001596:	b2ca      	uxtb	r2, r1
 8001598:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	3301      	adds	r3, #1
 800159e:	617b      	str	r3, [r7, #20]
 80015a0:	697a      	ldr	r2, [r7, #20]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	dbf0      	blt.n	800158a <_read+0x12>
  }

  return len;
 80015a8:	687b      	ldr	r3, [r7, #4]
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3718      	adds	r7, #24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b086      	sub	sp, #24
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	60f8      	str	r0, [r7, #12]
 80015ba:	60b9      	str	r1, [r7, #8]
 80015bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015be:	2300      	movs	r3, #0
 80015c0:	617b      	str	r3, [r7, #20]
 80015c2:	e009      	b.n	80015d8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	1c5a      	adds	r2, r3, #1
 80015c8:	60ba      	str	r2, [r7, #8]
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff ff73 	bl	80014b8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	3301      	adds	r3, #1
 80015d6:	617b      	str	r3, [r7, #20]
 80015d8:	697a      	ldr	r2, [r7, #20]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	429a      	cmp	r2, r3
 80015de:	dbf1      	blt.n	80015c4 <_write+0x12>
  }
  return len;
 80015e0:	687b      	ldr	r3, [r7, #4]
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3718      	adds	r7, #24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <_close>:

int _close(int file)
{
 80015ea:	b480      	push	{r7}
 80015ec:	b083      	sub	sp, #12
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001602:	b480      	push	{r7}
 8001604:	b083      	sub	sp, #12
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
 800160a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001612:	605a      	str	r2, [r3, #4]
  return 0;
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <_isatty>:

int _isatty(int file)
{
 8001622:	b480      	push	{r7}
 8001624:	b083      	sub	sp, #12
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800162a:	2301      	movs	r3, #1
}
 800162c:	4618      	mov	r0, r3
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001638:	b480      	push	{r7}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3714      	adds	r7, #20
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
	...

08001654 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800165c:	4a14      	ldr	r2, [pc, #80]	; (80016b0 <_sbrk+0x5c>)
 800165e:	4b15      	ldr	r3, [pc, #84]	; (80016b4 <_sbrk+0x60>)
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001668:	4b13      	ldr	r3, [pc, #76]	; (80016b8 <_sbrk+0x64>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d102      	bne.n	8001676 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001670:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <_sbrk+0x64>)
 8001672:	4a12      	ldr	r2, [pc, #72]	; (80016bc <_sbrk+0x68>)
 8001674:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001676:	4b10      	ldr	r3, [pc, #64]	; (80016b8 <_sbrk+0x64>)
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4413      	add	r3, r2
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	429a      	cmp	r2, r3
 8001682:	d207      	bcs.n	8001694 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001684:	f001 fd10 	bl	80030a8 <__errno>
 8001688:	4603      	mov	r3, r0
 800168a:	220c      	movs	r2, #12
 800168c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800168e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001692:	e009      	b.n	80016a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001694:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <_sbrk+0x64>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800169a:	4b07      	ldr	r3, [pc, #28]	; (80016b8 <_sbrk+0x64>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4413      	add	r3, r2
 80016a2:	4a05      	ldr	r2, [pc, #20]	; (80016b8 <_sbrk+0x64>)
 80016a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016a6:	68fb      	ldr	r3, [r7, #12]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3718      	adds	r7, #24
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20030000 	.word	0x20030000
 80016b4:	00000400 	.word	0x00000400
 80016b8:	200003d4 	.word	0x200003d4
 80016bc:	20000528 	.word	0x20000528

080016c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80016c4:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <SystemInit+0x20>)
 80016c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ca:	4a05      	ldr	r2, [pc, #20]	; (80016e0 <SystemInit+0x20>)
 80016cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b087      	sub	sp, #28
 80016e8:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 80016ea:	4b4f      	ldr	r3, [pc, #316]	; (8001828 <SystemCoreClockUpdate+0x144>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0308 	and.w	r3, r3, #8
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d107      	bne.n	8001706 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 80016f6:	4b4c      	ldr	r3, [pc, #304]	; (8001828 <SystemCoreClockUpdate+0x144>)
 80016f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016fc:	0a1b      	lsrs	r3, r3, #8
 80016fe:	f003 030f 	and.w	r3, r3, #15
 8001702:	617b      	str	r3, [r7, #20]
 8001704:	e005      	b.n	8001712 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8001706:	4b48      	ldr	r3, [pc, #288]	; (8001828 <SystemCoreClockUpdate+0x144>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	091b      	lsrs	r3, r3, #4
 800170c:	f003 030f 	and.w	r3, r3, #15
 8001710:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8001712:	4a46      	ldr	r2, [pc, #280]	; (800182c <SystemCoreClockUpdate+0x148>)
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800171a:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800171c:	4b42      	ldr	r3, [pc, #264]	; (8001828 <SystemCoreClockUpdate+0x144>)
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f003 030c 	and.w	r3, r3, #12
 8001724:	2b0c      	cmp	r3, #12
 8001726:	d866      	bhi.n	80017f6 <SystemCoreClockUpdate+0x112>
 8001728:	a201      	add	r2, pc, #4	; (adr r2, 8001730 <SystemCoreClockUpdate+0x4c>)
 800172a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800172e:	bf00      	nop
 8001730:	08001765 	.word	0x08001765
 8001734:	080017f7 	.word	0x080017f7
 8001738:	080017f7 	.word	0x080017f7
 800173c:	080017f7 	.word	0x080017f7
 8001740:	0800176d 	.word	0x0800176d
 8001744:	080017f7 	.word	0x080017f7
 8001748:	080017f7 	.word	0x080017f7
 800174c:	080017f7 	.word	0x080017f7
 8001750:	08001775 	.word	0x08001775
 8001754:	080017f7 	.word	0x080017f7
 8001758:	080017f7 	.word	0x080017f7
 800175c:	080017f7 	.word	0x080017f7
 8001760:	0800177d 	.word	0x0800177d
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8001764:	4a32      	ldr	r2, [pc, #200]	; (8001830 <SystemCoreClockUpdate+0x14c>)
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	6013      	str	r3, [r2, #0]
      break;
 800176a:	e048      	b.n	80017fe <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800176c:	4b30      	ldr	r3, [pc, #192]	; (8001830 <SystemCoreClockUpdate+0x14c>)
 800176e:	4a31      	ldr	r2, [pc, #196]	; (8001834 <SystemCoreClockUpdate+0x150>)
 8001770:	601a      	str	r2, [r3, #0]
      break;
 8001772:	e044      	b.n	80017fe <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001774:	4b2e      	ldr	r3, [pc, #184]	; (8001830 <SystemCoreClockUpdate+0x14c>)
 8001776:	4a2f      	ldr	r2, [pc, #188]	; (8001834 <SystemCoreClockUpdate+0x150>)
 8001778:	601a      	str	r2, [r3, #0]
      break;
 800177a:	e040      	b.n	80017fe <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800177c:	4b2a      	ldr	r3, [pc, #168]	; (8001828 <SystemCoreClockUpdate+0x144>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	f003 0303 	and.w	r3, r3, #3
 8001784:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8001786:	4b28      	ldr	r3, [pc, #160]	; (8001828 <SystemCoreClockUpdate+0x144>)
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	091b      	lsrs	r3, r3, #4
 800178c:	f003 030f 	and.w	r3, r3, #15
 8001790:	3301      	adds	r3, #1
 8001792:	60bb      	str	r3, [r7, #8]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2b02      	cmp	r3, #2
 8001798:	d003      	beq.n	80017a2 <SystemCoreClockUpdate+0xbe>
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2b03      	cmp	r3, #3
 800179e:	d006      	beq.n	80017ae <SystemCoreClockUpdate+0xca>
 80017a0:	e00b      	b.n	80017ba <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 80017a2:	4a24      	ldr	r2, [pc, #144]	; (8001834 <SystemCoreClockUpdate+0x150>)
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017aa:	613b      	str	r3, [r7, #16]
          break;
 80017ac:	e00b      	b.n	80017c6 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 80017ae:	4a21      	ldr	r2, [pc, #132]	; (8001834 <SystemCoreClockUpdate+0x150>)
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b6:	613b      	str	r3, [r7, #16]
          break;
 80017b8:	e005      	b.n	80017c6 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 80017ba:	697a      	ldr	r2, [r7, #20]
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c2:	613b      	str	r3, [r7, #16]
          break;
 80017c4:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 80017c6:	4b18      	ldr	r3, [pc, #96]	; (8001828 <SystemCoreClockUpdate+0x144>)
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	0a1b      	lsrs	r3, r3, #8
 80017cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	fb02 f303 	mul.w	r3, r2, r3
 80017d6:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 80017d8:	4b13      	ldr	r3, [pc, #76]	; (8001828 <SystemCoreClockUpdate+0x144>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	0e5b      	lsrs	r3, r3, #25
 80017de:	f003 0303 	and.w	r3, r3, #3
 80017e2:	3301      	adds	r3, #1
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f0:	4a0f      	ldr	r2, [pc, #60]	; (8001830 <SystemCoreClockUpdate+0x14c>)
 80017f2:	6013      	str	r3, [r2, #0]
      break;
 80017f4:	e003      	b.n	80017fe <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 80017f6:	4a0e      	ldr	r2, [pc, #56]	; (8001830 <SystemCoreClockUpdate+0x14c>)
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	6013      	str	r3, [r2, #0]
      break;
 80017fc:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 80017fe:	4b0a      	ldr	r3, [pc, #40]	; (8001828 <SystemCoreClockUpdate+0x144>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	091b      	lsrs	r3, r3, #4
 8001804:	f003 030f 	and.w	r3, r3, #15
 8001808:	4a0b      	ldr	r2, [pc, #44]	; (8001838 <SystemCoreClockUpdate+0x154>)
 800180a:	5cd3      	ldrb	r3, [r2, r3]
 800180c:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800180e:	4b08      	ldr	r3, [pc, #32]	; (8001830 <SystemCoreClockUpdate+0x14c>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	fa22 f303 	lsr.w	r3, r2, r3
 8001818:	4a05      	ldr	r2, [pc, #20]	; (8001830 <SystemCoreClockUpdate+0x14c>)
 800181a:	6013      	str	r3, [r2, #0]
}
 800181c:	bf00      	nop
 800181e:	371c      	adds	r7, #28
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	40021000 	.word	0x40021000
 800182c:	08003ec4 	.word	0x08003ec4
 8001830:	20000350 	.word	0x20000350
 8001834:	00f42400 	.word	0x00f42400
 8001838:	08003eb4 	.word	0x08003eb4

0800183c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 800183c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001874 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001840:	f7ff ff3e 	bl	80016c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001844:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001846:	e003      	b.n	8001850 <LoopCopyDataInit>

08001848 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001848:	4b0b      	ldr	r3, [pc, #44]	; (8001878 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800184a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800184c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800184e:	3104      	adds	r1, #4

08001850 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001850:	480a      	ldr	r0, [pc, #40]	; (800187c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001852:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001854:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001856:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001858:	d3f6      	bcc.n	8001848 <CopyDataInit>
	ldr	r2, =_sbss
 800185a:	4a0a      	ldr	r2, [pc, #40]	; (8001884 <LoopForever+0x12>)
	b	LoopFillZerobss
 800185c:	e002      	b.n	8001864 <LoopFillZerobss>

0800185e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800185e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001860:	f842 3b04 	str.w	r3, [r2], #4

08001864 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001864:	4b08      	ldr	r3, [pc, #32]	; (8001888 <LoopForever+0x16>)
	cmp	r2, r3
 8001866:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001868:	d3f9      	bcc.n	800185e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800186a:	f001 fc23 	bl	80030b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800186e:	f7ff fcbd 	bl	80011ec <main>

08001872 <LoopForever>:

LoopForever:
    b LoopForever
 8001872:	e7fe      	b.n	8001872 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001874:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8001878:	08003f40 	.word	0x08003f40
	ldr	r0, =_sdata
 800187c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001880:	200003b8 	.word	0x200003b8
	ldr	r2, =_sbss
 8001884:	200003b8 	.word	0x200003b8
	ldr	r3, = _ebss
 8001888:	20000528 	.word	0x20000528

0800188c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800188c:	e7fe      	b.n	800188c <ADC1_2_IRQHandler>

0800188e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b082      	sub	sp, #8
 8001892:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001894:	2300      	movs	r3, #0
 8001896:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001898:	2004      	movs	r0, #4
 800189a:	f000 f921 	bl	8001ae0 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 800189e:	f7ff ff21 	bl	80016e4 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018a2:	2007      	movs	r0, #7
 80018a4:	f000 f80e 	bl	80018c4 <HAL_InitTick>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d002      	beq.n	80018b4 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	71fb      	strb	r3, [r7, #7]
 80018b2:	e001      	b.n	80018b8 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018b4:	f7ff fe12 	bl	80014dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018b8:	79fb      	ldrb	r3, [r7, #7]
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
	...

080018c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018cc:	2300      	movs	r3, #0
 80018ce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80018d0:	4b17      	ldr	r3, [pc, #92]	; (8001930 <HAL_InitTick+0x6c>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d023      	beq.n	8001920 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80018d8:	4b16      	ldr	r3, [pc, #88]	; (8001934 <HAL_InitTick+0x70>)
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	4b14      	ldr	r3, [pc, #80]	; (8001930 <HAL_InitTick+0x6c>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	4619      	mov	r1, r3
 80018e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ee:	4618      	mov	r0, r3
 80018f0:	f000 f91b 	bl	8001b2a <HAL_SYSTICK_Config>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d10f      	bne.n	800191a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2b07      	cmp	r3, #7
 80018fe:	d809      	bhi.n	8001914 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001900:	2200      	movs	r2, #0
 8001902:	6879      	ldr	r1, [r7, #4]
 8001904:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001908:	f000 f8f5 	bl	8001af6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800190c:	4a0a      	ldr	r2, [pc, #40]	; (8001938 <HAL_InitTick+0x74>)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	e007      	b.n	8001924 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	73fb      	strb	r3, [r7, #15]
 8001918:	e004      	b.n	8001924 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	73fb      	strb	r3, [r7, #15]
 800191e:	e001      	b.n	8001924 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001924:	7bfb      	ldrb	r3, [r7, #15]
}
 8001926:	4618      	mov	r0, r3
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000358 	.word	0x20000358
 8001934:	20000350 	.word	0x20000350
 8001938:	20000354 	.word	0x20000354

0800193c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001940:	4b06      	ldr	r3, [pc, #24]	; (800195c <HAL_IncTick+0x20>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	461a      	mov	r2, r3
 8001946:	4b06      	ldr	r3, [pc, #24]	; (8001960 <HAL_IncTick+0x24>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4413      	add	r3, r2
 800194c:	4a04      	ldr	r2, [pc, #16]	; (8001960 <HAL_IncTick+0x24>)
 800194e:	6013      	str	r3, [r2, #0]
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	20000358 	.word	0x20000358
 8001960:	200003d8 	.word	0x200003d8

08001964 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  return uwTick;
 8001968:	4b03      	ldr	r3, [pc, #12]	; (8001978 <HAL_GetTick+0x14>)
 800196a:	681b      	ldr	r3, [r3, #0]
}
 800196c:	4618      	mov	r0, r3
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	200003d8 	.word	0x200003d8

0800197c <__NVIC_SetPriorityGrouping>:
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800198c:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <__NVIC_SetPriorityGrouping+0x44>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001992:	68ba      	ldr	r2, [r7, #8]
 8001994:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001998:	4013      	ands	r3, r2
 800199a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ae:	4a04      	ldr	r2, [pc, #16]	; (80019c0 <__NVIC_SetPriorityGrouping+0x44>)
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	60d3      	str	r3, [r2, #12]
}
 80019b4:	bf00      	nop
 80019b6:	3714      	adds	r7, #20
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <__NVIC_GetPriorityGrouping>:
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019c8:	4b04      	ldr	r3, [pc, #16]	; (80019dc <__NVIC_GetPriorityGrouping+0x18>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	0a1b      	lsrs	r3, r3, #8
 80019ce:	f003 0307 	and.w	r3, r3, #7
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <__NVIC_SetPriority>:
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	6039      	str	r1, [r7, #0]
 80019ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	db0a      	blt.n	8001a0a <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	b2da      	uxtb	r2, r3
 80019f8:	490c      	ldr	r1, [pc, #48]	; (8001a2c <__NVIC_SetPriority+0x4c>)
 80019fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fe:	0152      	lsls	r2, r2, #5
 8001a00:	b2d2      	uxtb	r2, r2
 8001a02:	440b      	add	r3, r1
 8001a04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001a08:	e00a      	b.n	8001a20 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	4908      	ldr	r1, [pc, #32]	; (8001a30 <__NVIC_SetPriority+0x50>)
 8001a10:	79fb      	ldrb	r3, [r7, #7]
 8001a12:	f003 030f 	and.w	r3, r3, #15
 8001a16:	3b04      	subs	r3, #4
 8001a18:	0152      	lsls	r2, r2, #5
 8001a1a:	b2d2      	uxtb	r2, r2
 8001a1c:	440b      	add	r3, r1
 8001a1e:	761a      	strb	r2, [r3, #24]
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	e000e100 	.word	0xe000e100
 8001a30:	e000ed00 	.word	0xe000ed00

08001a34 <NVIC_EncodePriority>:
{
 8001a34:	b480      	push	{r7}
 8001a36:	b089      	sub	sp, #36	; 0x24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	f1c3 0307 	rsb	r3, r3, #7
 8001a4e:	2b03      	cmp	r3, #3
 8001a50:	bf28      	it	cs
 8001a52:	2303      	movcs	r3, #3
 8001a54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	3303      	adds	r3, #3
 8001a5a:	2b06      	cmp	r3, #6
 8001a5c:	d902      	bls.n	8001a64 <NVIC_EncodePriority+0x30>
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	3b04      	subs	r3, #4
 8001a62:	e000      	b.n	8001a66 <NVIC_EncodePriority+0x32>
 8001a64:	2300      	movs	r3, #0
 8001a66:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	43da      	mvns	r2, r3
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	401a      	ands	r2, r3
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	fa01 f303 	lsl.w	r3, r1, r3
 8001a86:	43d9      	mvns	r1, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a8c:	4313      	orrs	r3, r2
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3724      	adds	r7, #36	; 0x24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
	...

08001a9c <SysTick_Config>:
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aac:	d301      	bcc.n	8001ab2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e00f      	b.n	8001ad2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ab2:	4a0a      	ldr	r2, [pc, #40]	; (8001adc <SysTick_Config+0x40>)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aba:	2107      	movs	r1, #7
 8001abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ac0:	f7ff ff8e 	bl	80019e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ac4:	4b05      	ldr	r3, [pc, #20]	; (8001adc <SysTick_Config+0x40>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aca:	4b04      	ldr	r3, [pc, #16]	; (8001adc <SysTick_Config+0x40>)
 8001acc:	2207      	movs	r2, #7
 8001ace:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	e000e010 	.word	0xe000e010

08001ae0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f7ff ff47 	bl	800197c <__NVIC_SetPriorityGrouping>
}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b086      	sub	sp, #24
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	4603      	mov	r3, r0
 8001afe:	60b9      	str	r1, [r7, #8]
 8001b00:	607a      	str	r2, [r7, #4]
 8001b02:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b04:	f7ff ff5e 	bl	80019c4 <__NVIC_GetPriorityGrouping>
 8001b08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	68b9      	ldr	r1, [r7, #8]
 8001b0e:	6978      	ldr	r0, [r7, #20]
 8001b10:	f7ff ff90 	bl	8001a34 <NVIC_EncodePriority>
 8001b14:	4602      	mov	r2, r0
 8001b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b1a:	4611      	mov	r1, r2
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff ff5f 	bl	80019e0 <__NVIC_SetPriority>
}
 8001b22:	bf00      	nop
 8001b24:	3718      	adds	r7, #24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b082      	sub	sp, #8
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7ff ffb2 	bl	8001a9c <SysTick_Config>
 8001b38:	4603      	mov	r3, r0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
	...

08001b44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b087      	sub	sp, #28
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001b52:	e158      	b.n	8001e06 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	2101      	movs	r1, #1
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b60:	4013      	ands	r3, r2
 8001b62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f000 814a 	beq.w	8001e00 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f003 0303 	and.w	r3, r3, #3
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d005      	beq.n	8001b84 <HAL_GPIO_Init+0x40>
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f003 0303 	and.w	r3, r3, #3
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d130      	bne.n	8001be6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	2203      	movs	r2, #3
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	43db      	mvns	r3, r3
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	68da      	ldr	r2, [r3, #12]
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bba:	2201      	movs	r2, #1
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	43db      	mvns	r3, r3
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	091b      	lsrs	r3, r3, #4
 8001bd0:	f003 0201 	and.w	r2, r3, #1
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f003 0303 	and.w	r3, r3, #3
 8001bee:	2b03      	cmp	r3, #3
 8001bf0:	d017      	beq.n	8001c22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	2203      	movs	r2, #3
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	43db      	mvns	r3, r3
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	4013      	ands	r3, r2
 8001c08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	689a      	ldr	r2, [r3, #8]
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f003 0303 	and.w	r3, r3, #3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d123      	bne.n	8001c76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	08da      	lsrs	r2, r3, #3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	3208      	adds	r2, #8
 8001c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	220f      	movs	r2, #15
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	691a      	ldr	r2, [r3, #16]
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	f003 0307 	and.w	r3, r3, #7
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	08da      	lsrs	r2, r3, #3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3208      	adds	r2, #8
 8001c70:	6939      	ldr	r1, [r7, #16]
 8001c72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	2203      	movs	r2, #3
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43db      	mvns	r3, r3
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f003 0203 	and.w	r2, r3, #3
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 80a4 	beq.w	8001e00 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8001cb8:	4a5a      	ldr	r2, [pc, #360]	; (8001e24 <HAL_GPIO_Init+0x2e0>)
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	089b      	lsrs	r3, r3, #2
 8001cbe:	3318      	adds	r3, #24
 8001cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cc4:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	f003 0303 	and.w	r3, r3, #3
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	220f      	movs	r2, #15
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4a52      	ldr	r2, [pc, #328]	; (8001e28 <HAL_GPIO_Init+0x2e4>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d025      	beq.n	8001d30 <HAL_GPIO_Init+0x1ec>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4a51      	ldr	r2, [pc, #324]	; (8001e2c <HAL_GPIO_Init+0x2e8>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d01f      	beq.n	8001d2c <HAL_GPIO_Init+0x1e8>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4a50      	ldr	r2, [pc, #320]	; (8001e30 <HAL_GPIO_Init+0x2ec>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d019      	beq.n	8001d28 <HAL_GPIO_Init+0x1e4>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4a4f      	ldr	r2, [pc, #316]	; (8001e34 <HAL_GPIO_Init+0x2f0>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d013      	beq.n	8001d24 <HAL_GPIO_Init+0x1e0>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4a4e      	ldr	r2, [pc, #312]	; (8001e38 <HAL_GPIO_Init+0x2f4>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d00d      	beq.n	8001d20 <HAL_GPIO_Init+0x1dc>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a4d      	ldr	r2, [pc, #308]	; (8001e3c <HAL_GPIO_Init+0x2f8>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d007      	beq.n	8001d1c <HAL_GPIO_Init+0x1d8>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4a4c      	ldr	r2, [pc, #304]	; (8001e40 <HAL_GPIO_Init+0x2fc>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d101      	bne.n	8001d18 <HAL_GPIO_Init+0x1d4>
 8001d14:	2306      	movs	r3, #6
 8001d16:	e00c      	b.n	8001d32 <HAL_GPIO_Init+0x1ee>
 8001d18:	2307      	movs	r3, #7
 8001d1a:	e00a      	b.n	8001d32 <HAL_GPIO_Init+0x1ee>
 8001d1c:	2305      	movs	r3, #5
 8001d1e:	e008      	b.n	8001d32 <HAL_GPIO_Init+0x1ee>
 8001d20:	2304      	movs	r3, #4
 8001d22:	e006      	b.n	8001d32 <HAL_GPIO_Init+0x1ee>
 8001d24:	2303      	movs	r3, #3
 8001d26:	e004      	b.n	8001d32 <HAL_GPIO_Init+0x1ee>
 8001d28:	2302      	movs	r3, #2
 8001d2a:	e002      	b.n	8001d32 <HAL_GPIO_Init+0x1ee>
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e000      	b.n	8001d32 <HAL_GPIO_Init+0x1ee>
 8001d30:	2300      	movs	r3, #0
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	f002 0203 	and.w	r2, r2, #3
 8001d38:	00d2      	lsls	r2, r2, #3
 8001d3a:	4093      	lsls	r3, r2
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8001d42:	4938      	ldr	r1, [pc, #224]	; (8001e24 <HAL_GPIO_Init+0x2e0>)
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	089b      	lsrs	r3, r3, #2
 8001d48:	3318      	adds	r3, #24
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d50:	4b34      	ldr	r3, [pc, #208]	; (8001e24 <HAL_GPIO_Init+0x2e0>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d003      	beq.n	8001d74 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d74:	4a2b      	ldr	r2, [pc, #172]	; (8001e24 <HAL_GPIO_Init+0x2e0>)
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001d7a:	4b2a      	ldr	r3, [pc, #168]	; (8001e24 <HAL_GPIO_Init+0x2e0>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	43db      	mvns	r3, r3
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	4013      	ands	r3, r2
 8001d88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d9e:	4a21      	ldr	r2, [pc, #132]	; (8001e24 <HAL_GPIO_Init+0x2e0>)
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001da4:	4b1f      	ldr	r3, [pc, #124]	; (8001e24 <HAL_GPIO_Init+0x2e0>)
 8001da6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001daa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	43db      	mvns	r3, r3
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	4013      	ands	r3, r2
 8001db4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d003      	beq.n	8001dca <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001dca:	4a16      	ldr	r2, [pc, #88]	; (8001e24 <HAL_GPIO_Init+0x2e0>)
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 8001dd2:	4b14      	ldr	r3, [pc, #80]	; (8001e24 <HAL_GPIO_Init+0x2e0>)
 8001dd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	4013      	ands	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d003      	beq.n	8001df8 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001df8:	4a0a      	ldr	r2, [pc, #40]	; (8001e24 <HAL_GPIO_Init+0x2e0>)
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	3301      	adds	r3, #1
 8001e04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f47f ae9f 	bne.w	8001b54 <HAL_GPIO_Init+0x10>
  }
}
 8001e16:	bf00      	nop
 8001e18:	bf00      	nop
 8001e1a:	371c      	adds	r7, #28
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	4002f400 	.word	0x4002f400
 8001e28:	42020000 	.word	0x42020000
 8001e2c:	42020400 	.word	0x42020400
 8001e30:	42020800 	.word	0x42020800
 8001e34:	42020c00 	.word	0x42020c00
 8001e38:	42021000 	.word	0x42021000
 8001e3c:	42021400 	.word	0x42021400
 8001e40:	42021800 	.word	0x42021800

08001e44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	807b      	strh	r3, [r7, #2]
 8001e50:	4613      	mov	r3, r2
 8001e52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e54:	787b      	ldrb	r3, [r7, #1]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e5a:	887a      	ldrh	r2, [r7, #2]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e60:	e002      	b.n	8001e68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e62:	887a      	ldrh	r2, [r7, #2]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	695b      	ldr	r3, [r3, #20]
 8001e84:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e86:	887a      	ldrh	r2, [r7, #2]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	041a      	lsls	r2, r3, #16
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	43d9      	mvns	r1, r3
 8001e92:	887b      	ldrh	r3, [r7, #2]
 8001e94:	400b      	ands	r3, r1
 8001e96:	431a      	orrs	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	619a      	str	r2, [r3, #24]
}
 8001e9c:	bf00      	nop
 8001e9e:	3714      	adds	r7, #20
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001eac:	4b04      	ldr	r3, [pc, #16]	; (8001ec0 <HAL_PWREx_GetVoltageRange+0x18>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	40007000 	.word	0x40007000

08001ec4 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8001ecc:	4b27      	ldr	r3, [pc, #156]	; (8001f6c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ed4:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8001ed6:	f000 f851 	bl	8001f7c <HAL_PWREx_SMPS_GetEffectiveMode>
 8001eda:	4603      	mov	r3, r0
 8001edc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ee0:	d101      	bne.n	8001ee6 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e03e      	b.n	8001f64 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8001ee6:	4b21      	ldr	r3, [pc, #132]	; (8001f6c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001eee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ef2:	d101      	bne.n	8001ef8 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e035      	b.n	8001f64 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8001ef8:	68ba      	ldr	r2, [r7, #8]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d101      	bne.n	8001f04 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8001f00:	2300      	movs	r3, #0
 8001f02:	e02f      	b.n	8001f64 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001f04:	4b19      	ldr	r3, [pc, #100]	; (8001f6c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8001f0c:	4917      	ldr	r1, [pc, #92]	; (8001f6c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8001f14:	4b16      	ldr	r3, [pc, #88]	; (8001f70 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	095b      	lsrs	r3, r3, #5
 8001f1a:	4a16      	ldr	r2, [pc, #88]	; (8001f74 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f20:	09db      	lsrs	r3, r3, #7
 8001f22:	2232      	movs	r2, #50	; 0x32
 8001f24:	fb02 f303 	mul.w	r3, r2, r3
 8001f28:	4a13      	ldr	r2, [pc, #76]	; (8001f78 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8001f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2e:	08db      	lsrs	r3, r3, #3
 8001f30:	3301      	adds	r3, #1
 8001f32:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f34:	e002      	b.n	8001f3c <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f3c:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001f3e:	695b      	ldr	r3, [r3, #20]
 8001f40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f48:	d102      	bne.n	8001f50 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d1f2      	bne.n	8001f36 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f50:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001f52:	695b      	ldr	r3, [r3, #20]
 8001f54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f5c:	d101      	bne.n	8001f62 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e000      	b.n	8001f64 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3710      	adds	r7, #16
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40007000 	.word	0x40007000
 8001f70:	20000350 	.word	0x20000350
 8001f74:	0a7c5ac5 	.word	0x0a7c5ac5
 8001f78:	cccccccd 	.word	0xcccccccd

08001f7c <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8001f82:	4b0f      	ldr	r3, [pc, #60]	; (8001fc0 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8001f92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f96:	607b      	str	r3, [r7, #4]
 8001f98:	e00a      	b.n	8001fb0 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d103      	bne.n	8001fac <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8001fa4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fa8:	607b      	str	r3, [r7, #4]
 8001faa:	e001      	b.n	8001fb0 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8001fac:	2300      	movs	r3, #0
 8001fae:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8001fb0:	687b      	ldr	r3, [r7, #4]
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	40007000 	.word	0x40007000

08001fc4 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b088      	sub	sp, #32
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d102      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	f000 bcc2 	b.w	800295c <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fd8:	4b99      	ldr	r3, [pc, #612]	; (8002240 <HAL_RCC_OscConfig+0x27c>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f003 030c 	and.w	r3, r3, #12
 8001fe0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fe2:	4b97      	ldr	r3, [pc, #604]	; (8002240 <HAL_RCC_OscConfig+0x27c>)
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	f003 0303 	and.w	r3, r3, #3
 8001fea:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0310 	and.w	r3, r3, #16
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	f000 80e9 	beq.w	80021cc <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d006      	beq.n	800200e <HAL_RCC_OscConfig+0x4a>
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	2b0c      	cmp	r3, #12
 8002004:	f040 8083 	bne.w	800210e <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d17f      	bne.n	800210e <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800200e:	4b8c      	ldr	r3, [pc, #560]	; (8002240 <HAL_RCC_OscConfig+0x27c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d006      	beq.n	8002028 <HAL_RCC_OscConfig+0x64>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d102      	bne.n	8002028 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	f000 bc9a 	b.w	800295c <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800202c:	4b84      	ldr	r3, [pc, #528]	; (8002240 <HAL_RCC_OscConfig+0x27c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0308 	and.w	r3, r3, #8
 8002034:	2b00      	cmp	r3, #0
 8002036:	d004      	beq.n	8002042 <HAL_RCC_OscConfig+0x7e>
 8002038:	4b81      	ldr	r3, [pc, #516]	; (8002240 <HAL_RCC_OscConfig+0x27c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002040:	e005      	b.n	800204e <HAL_RCC_OscConfig+0x8a>
 8002042:	4b7f      	ldr	r3, [pc, #508]	; (8002240 <HAL_RCC_OscConfig+0x27c>)
 8002044:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002048:	091b      	lsrs	r3, r3, #4
 800204a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800204e:	4293      	cmp	r3, r2
 8002050:	d224      	bcs.n	800209c <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002056:	4618      	mov	r0, r3
 8002058:	f000 fe72 	bl	8002d40 <RCC_SetFlashLatencyFromMSIRange>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d002      	beq.n	8002068 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	f000 bc7a 	b.w	800295c <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002068:	4b75      	ldr	r3, [pc, #468]	; (8002240 <HAL_RCC_OscConfig+0x27c>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a74      	ldr	r2, [pc, #464]	; (8002240 <HAL_RCC_OscConfig+0x27c>)
 800206e:	f043 0308 	orr.w	r3, r3, #8
 8002072:	6013      	str	r3, [r2, #0]
 8002074:	4b72      	ldr	r3, [pc, #456]	; (8002240 <HAL_RCC_OscConfig+0x27c>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002080:	496f      	ldr	r1, [pc, #444]	; (8002240 <HAL_RCC_OscConfig+0x27c>)
 8002082:	4313      	orrs	r3, r2
 8002084:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002086:	4b6e      	ldr	r3, [pc, #440]	; (8002240 <HAL_RCC_OscConfig+0x27c>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a1b      	ldr	r3, [r3, #32]
 8002092:	021b      	lsls	r3, r3, #8
 8002094:	496a      	ldr	r1, [pc, #424]	; (8002240 <HAL_RCC_OscConfig+0x27c>)
 8002096:	4313      	orrs	r3, r2
 8002098:	604b      	str	r3, [r1, #4]
 800209a:	e026      	b.n	80020ea <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800209c:	4b68      	ldr	r3, [pc, #416]	; (8002240 <HAL_RCC_OscConfig+0x27c>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a67      	ldr	r2, [pc, #412]	; (8002240 <HAL_RCC_OscConfig+0x27c>)
 80020a2:	f043 0308 	orr.w	r3, r3, #8
 80020a6:	6013      	str	r3, [r2, #0]
 80020a8:	4b65      	ldr	r3, [pc, #404]	; (8002240 <HAL_RCC_OscConfig+0x27c>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b4:	4962      	ldr	r1, [pc, #392]	; (8002240 <HAL_RCC_OscConfig+0x27c>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020ba:	4b61      	ldr	r3, [pc, #388]	; (8002240 <HAL_RCC_OscConfig+0x27c>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a1b      	ldr	r3, [r3, #32]
 80020c6:	021b      	lsls	r3, r3, #8
 80020c8:	495d      	ldr	r1, [pc, #372]	; (8002240 <HAL_RCC_OscConfig+0x27c>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d10a      	bne.n	80020ea <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d8:	4618      	mov	r0, r3
 80020da:	f000 fe31 	bl	8002d40 <RCC_SetFlashLatencyFromMSIRange>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d002      	beq.n	80020ea <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	f000 bc39 	b.w	800295c <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80020ea:	f000 fe15 	bl	8002d18 <HAL_RCC_GetHCLKFreq>
 80020ee:	4603      	mov	r3, r0
 80020f0:	4a54      	ldr	r2, [pc, #336]	; (8002244 <HAL_RCC_OscConfig+0x280>)
 80020f2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80020f4:	4b54      	ldr	r3, [pc, #336]	; (8002248 <HAL_RCC_OscConfig+0x284>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff fbe3 	bl	80018c4 <HAL_InitTick>
 80020fe:	4603      	mov	r3, r0
 8002100:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8002102:	7bfb      	ldrb	r3, [r7, #15]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d060      	beq.n	80021ca <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8002108:	7bfb      	ldrb	r3, [r7, #15]
 800210a:	f000 bc27 	b.w	800295c <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	69db      	ldr	r3, [r3, #28]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d039      	beq.n	800218a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002116:	4b4a      	ldr	r3, [pc, #296]	; (8002240 <HAL_RCC_OscConfig+0x27c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a49      	ldr	r2, [pc, #292]	; (8002240 <HAL_RCC_OscConfig+0x27c>)
 800211c:	f043 0301 	orr.w	r3, r3, #1
 8002120:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002122:	f7ff fc1f 	bl	8001964 <HAL_GetTick>
 8002126:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002128:	e00f      	b.n	800214a <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800212a:	f7ff fc1b 	bl	8001964 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d908      	bls.n	800214a <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002138:	4b41      	ldr	r3, [pc, #260]	; (8002240 <HAL_RCC_OscConfig+0x27c>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d102      	bne.n	800214a <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	f000 bc09 	b.w	800295c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800214a:	4b3d      	ldr	r3, [pc, #244]	; (8002240 <HAL_RCC_OscConfig+0x27c>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d0e9      	beq.n	800212a <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002156:	4b3a      	ldr	r3, [pc, #232]	; (8002240 <HAL_RCC_OscConfig+0x27c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a39      	ldr	r2, [pc, #228]	; (8002240 <HAL_RCC_OscConfig+0x27c>)
 800215c:	f043 0308 	orr.w	r3, r3, #8
 8002160:	6013      	str	r3, [r2, #0]
 8002162:	4b37      	ldr	r3, [pc, #220]	; (8002240 <HAL_RCC_OscConfig+0x27c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216e:	4934      	ldr	r1, [pc, #208]	; (8002240 <HAL_RCC_OscConfig+0x27c>)
 8002170:	4313      	orrs	r3, r2
 8002172:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002174:	4b32      	ldr	r3, [pc, #200]	; (8002240 <HAL_RCC_OscConfig+0x27c>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a1b      	ldr	r3, [r3, #32]
 8002180:	021b      	lsls	r3, r3, #8
 8002182:	492f      	ldr	r1, [pc, #188]	; (8002240 <HAL_RCC_OscConfig+0x27c>)
 8002184:	4313      	orrs	r3, r2
 8002186:	604b      	str	r3, [r1, #4]
 8002188:	e020      	b.n	80021cc <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800218a:	4b2d      	ldr	r3, [pc, #180]	; (8002240 <HAL_RCC_OscConfig+0x27c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a2c      	ldr	r2, [pc, #176]	; (8002240 <HAL_RCC_OscConfig+0x27c>)
 8002190:	f023 0301 	bic.w	r3, r3, #1
 8002194:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002196:	f7ff fbe5 	bl	8001964 <HAL_GetTick>
 800219a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800219c:	e00e      	b.n	80021bc <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800219e:	f7ff fbe1 	bl	8001964 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d907      	bls.n	80021bc <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021ac:	4b24      	ldr	r3, [pc, #144]	; (8002240 <HAL_RCC_OscConfig+0x27c>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0302 	and.w	r3, r3, #2
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e3cf      	b.n	800295c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021bc:	4b20      	ldr	r3, [pc, #128]	; (8002240 <HAL_RCC_OscConfig+0x27c>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d1ea      	bne.n	800219e <HAL_RCC_OscConfig+0x1da>
 80021c8:	e000      	b.n	80021cc <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021ca:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0301 	and.w	r3, r3, #1
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d07e      	beq.n	80022d6 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	2b08      	cmp	r3, #8
 80021dc:	d005      	beq.n	80021ea <HAL_RCC_OscConfig+0x226>
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	2b0c      	cmp	r3, #12
 80021e2:	d10e      	bne.n	8002202 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	2b03      	cmp	r3, #3
 80021e8:	d10b      	bne.n	8002202 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ea:	4b15      	ldr	r3, [pc, #84]	; (8002240 <HAL_RCC_OscConfig+0x27c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d06e      	beq.n	80022d4 <HAL_RCC_OscConfig+0x310>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d16a      	bne.n	80022d4 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e3ac      	b.n	800295c <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800220a:	d106      	bne.n	800221a <HAL_RCC_OscConfig+0x256>
 800220c:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <HAL_RCC_OscConfig+0x27c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a0b      	ldr	r2, [pc, #44]	; (8002240 <HAL_RCC_OscConfig+0x27c>)
 8002212:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002216:	6013      	str	r3, [r2, #0]
 8002218:	e024      	b.n	8002264 <HAL_RCC_OscConfig+0x2a0>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002222:	d113      	bne.n	800224c <HAL_RCC_OscConfig+0x288>
 8002224:	4b06      	ldr	r3, [pc, #24]	; (8002240 <HAL_RCC_OscConfig+0x27c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a05      	ldr	r2, [pc, #20]	; (8002240 <HAL_RCC_OscConfig+0x27c>)
 800222a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800222e:	6013      	str	r3, [r2, #0]
 8002230:	4b03      	ldr	r3, [pc, #12]	; (8002240 <HAL_RCC_OscConfig+0x27c>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a02      	ldr	r2, [pc, #8]	; (8002240 <HAL_RCC_OscConfig+0x27c>)
 8002236:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800223a:	6013      	str	r3, [r2, #0]
 800223c:	e012      	b.n	8002264 <HAL_RCC_OscConfig+0x2a0>
 800223e:	bf00      	nop
 8002240:	40021000 	.word	0x40021000
 8002244:	20000350 	.word	0x20000350
 8002248:	20000354 	.word	0x20000354
 800224c:	4b8b      	ldr	r3, [pc, #556]	; (800247c <HAL_RCC_OscConfig+0x4b8>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a8a      	ldr	r2, [pc, #552]	; (800247c <HAL_RCC_OscConfig+0x4b8>)
 8002252:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002256:	6013      	str	r3, [r2, #0]
 8002258:	4b88      	ldr	r3, [pc, #544]	; (800247c <HAL_RCC_OscConfig+0x4b8>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a87      	ldr	r2, [pc, #540]	; (800247c <HAL_RCC_OscConfig+0x4b8>)
 800225e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002262:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d019      	beq.n	80022a0 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800226c:	f7ff fb7a 	bl	8001964 <HAL_GetTick>
 8002270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002272:	e00e      	b.n	8002292 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002274:	f7ff fb76 	bl	8001964 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b64      	cmp	r3, #100	; 0x64
 8002280:	d907      	bls.n	8002292 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002282:	4b7e      	ldr	r3, [pc, #504]	; (800247c <HAL_RCC_OscConfig+0x4b8>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e364      	b.n	800295c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002292:	4b7a      	ldr	r3, [pc, #488]	; (800247c <HAL_RCC_OscConfig+0x4b8>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d0ea      	beq.n	8002274 <HAL_RCC_OscConfig+0x2b0>
 800229e:	e01a      	b.n	80022d6 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a0:	f7ff fb60 	bl	8001964 <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022a6:	e00e      	b.n	80022c6 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022a8:	f7ff fb5c 	bl	8001964 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b64      	cmp	r3, #100	; 0x64
 80022b4:	d907      	bls.n	80022c6 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022b6:	4b71      	ldr	r3, [pc, #452]	; (800247c <HAL_RCC_OscConfig+0x4b8>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e34a      	b.n	800295c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022c6:	4b6d      	ldr	r3, [pc, #436]	; (800247c <HAL_RCC_OscConfig+0x4b8>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1ea      	bne.n	80022a8 <HAL_RCC_OscConfig+0x2e4>
 80022d2:	e000      	b.n	80022d6 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d06c      	beq.n	80023bc <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	2b04      	cmp	r3, #4
 80022e6:	d005      	beq.n	80022f4 <HAL_RCC_OscConfig+0x330>
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	2b0c      	cmp	r3, #12
 80022ec:	d119      	bne.n	8002322 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d116      	bne.n	8002322 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022f4:	4b61      	ldr	r3, [pc, #388]	; (800247c <HAL_RCC_OscConfig+0x4b8>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d005      	beq.n	800230c <HAL_RCC_OscConfig+0x348>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d101      	bne.n	800230c <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e327      	b.n	800295c <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800230c:	4b5b      	ldr	r3, [pc, #364]	; (800247c <HAL_RCC_OscConfig+0x4b8>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	061b      	lsls	r3, r3, #24
 800231a:	4958      	ldr	r1, [pc, #352]	; (800247c <HAL_RCC_OscConfig+0x4b8>)
 800231c:	4313      	orrs	r3, r2
 800231e:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002320:	e04c      	b.n	80023bc <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d029      	beq.n	800237e <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800232a:	4b54      	ldr	r3, [pc, #336]	; (800247c <HAL_RCC_OscConfig+0x4b8>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a53      	ldr	r2, [pc, #332]	; (800247c <HAL_RCC_OscConfig+0x4b8>)
 8002330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002334:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002336:	f7ff fb15 	bl	8001964 <HAL_GetTick>
 800233a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800233c:	e00e      	b.n	800235c <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800233e:	f7ff fb11 	bl	8001964 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b02      	cmp	r3, #2
 800234a:	d907      	bls.n	800235c <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800234c:	4b4b      	ldr	r3, [pc, #300]	; (800247c <HAL_RCC_OscConfig+0x4b8>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002354:	2b00      	cmp	r3, #0
 8002356:	d101      	bne.n	800235c <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e2ff      	b.n	800295c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800235c:	4b47      	ldr	r3, [pc, #284]	; (800247c <HAL_RCC_OscConfig+0x4b8>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002364:	2b00      	cmp	r3, #0
 8002366:	d0ea      	beq.n	800233e <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002368:	4b44      	ldr	r3, [pc, #272]	; (800247c <HAL_RCC_OscConfig+0x4b8>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	061b      	lsls	r3, r3, #24
 8002376:	4941      	ldr	r1, [pc, #260]	; (800247c <HAL_RCC_OscConfig+0x4b8>)
 8002378:	4313      	orrs	r3, r2
 800237a:	604b      	str	r3, [r1, #4]
 800237c:	e01e      	b.n	80023bc <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800237e:	4b3f      	ldr	r3, [pc, #252]	; (800247c <HAL_RCC_OscConfig+0x4b8>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a3e      	ldr	r2, [pc, #248]	; (800247c <HAL_RCC_OscConfig+0x4b8>)
 8002384:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002388:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800238a:	f7ff faeb 	bl	8001964 <HAL_GetTick>
 800238e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002390:	e00e      	b.n	80023b0 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002392:	f7ff fae7 	bl	8001964 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d907      	bls.n	80023b0 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023a0:	4b36      	ldr	r3, [pc, #216]	; (800247c <HAL_RCC_OscConfig+0x4b8>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e2d5      	b.n	800295c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023b0:	4b32      	ldr	r3, [pc, #200]	; (800247c <HAL_RCC_OscConfig+0x4b8>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d1ea      	bne.n	8002392 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0308 	and.w	r3, r3, #8
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d062      	beq.n	800248e <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	695b      	ldr	r3, [r3, #20]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d038      	beq.n	8002442 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d108      	bne.n	80023ea <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80023d8:	4b28      	ldr	r3, [pc, #160]	; (800247c <HAL_RCC_OscConfig+0x4b8>)
 80023da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023de:	4a27      	ldr	r2, [pc, #156]	; (800247c <HAL_RCC_OscConfig+0x4b8>)
 80023e0:	f023 0310 	bic.w	r3, r3, #16
 80023e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80023e8:	e007      	b.n	80023fa <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80023ea:	4b24      	ldr	r3, [pc, #144]	; (800247c <HAL_RCC_OscConfig+0x4b8>)
 80023ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023f0:	4a22      	ldr	r2, [pc, #136]	; (800247c <HAL_RCC_OscConfig+0x4b8>)
 80023f2:	f043 0310 	orr.w	r3, r3, #16
 80023f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023fa:	4b20      	ldr	r3, [pc, #128]	; (800247c <HAL_RCC_OscConfig+0x4b8>)
 80023fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002400:	4a1e      	ldr	r2, [pc, #120]	; (800247c <HAL_RCC_OscConfig+0x4b8>)
 8002402:	f043 0301 	orr.w	r3, r3, #1
 8002406:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800240a:	f7ff faab 	bl	8001964 <HAL_GetTick>
 800240e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002410:	e00f      	b.n	8002432 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002412:	f7ff faa7 	bl	8001964 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b07      	cmp	r3, #7
 800241e:	d908      	bls.n	8002432 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002420:	4b16      	ldr	r3, [pc, #88]	; (800247c <HAL_RCC_OscConfig+0x4b8>)
 8002422:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e294      	b.n	800295c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002432:	4b12      	ldr	r3, [pc, #72]	; (800247c <HAL_RCC_OscConfig+0x4b8>)
 8002434:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d0e8      	beq.n	8002412 <HAL_RCC_OscConfig+0x44e>
 8002440:	e025      	b.n	800248e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002442:	4b0e      	ldr	r3, [pc, #56]	; (800247c <HAL_RCC_OscConfig+0x4b8>)
 8002444:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002448:	4a0c      	ldr	r2, [pc, #48]	; (800247c <HAL_RCC_OscConfig+0x4b8>)
 800244a:	f023 0301 	bic.w	r3, r3, #1
 800244e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002452:	f7ff fa87 	bl	8001964 <HAL_GetTick>
 8002456:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002458:	e012      	b.n	8002480 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800245a:	f7ff fa83 	bl	8001964 <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b07      	cmp	r3, #7
 8002466:	d90b      	bls.n	8002480 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002468:	4b04      	ldr	r3, [pc, #16]	; (800247c <HAL_RCC_OscConfig+0x4b8>)
 800246a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d004      	beq.n	8002480 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e270      	b.n	800295c <HAL_RCC_OscConfig+0x998>
 800247a:	bf00      	nop
 800247c:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002480:	4ba8      	ldr	r3, [pc, #672]	; (8002724 <HAL_RCC_OscConfig+0x760>)
 8002482:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1e5      	bne.n	800245a <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0304 	and.w	r3, r3, #4
 8002496:	2b00      	cmp	r3, #0
 8002498:	f000 812d 	beq.w	80026f6 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 800249c:	2300      	movs	r3, #0
 800249e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80024a0:	4ba0      	ldr	r3, [pc, #640]	; (8002724 <HAL_RCC_OscConfig+0x760>)
 80024a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d10d      	bne.n	80024c8 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024ac:	4b9d      	ldr	r3, [pc, #628]	; (8002724 <HAL_RCC_OscConfig+0x760>)
 80024ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b0:	4a9c      	ldr	r2, [pc, #624]	; (8002724 <HAL_RCC_OscConfig+0x760>)
 80024b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024b6:	6593      	str	r3, [r2, #88]	; 0x58
 80024b8:	4b9a      	ldr	r3, [pc, #616]	; (8002724 <HAL_RCC_OscConfig+0x760>)
 80024ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c0:	60bb      	str	r3, [r7, #8]
 80024c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024c4:	2301      	movs	r3, #1
 80024c6:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024c8:	4b97      	ldr	r3, [pc, #604]	; (8002728 <HAL_RCC_OscConfig+0x764>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d11e      	bne.n	8002512 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024d4:	4b94      	ldr	r3, [pc, #592]	; (8002728 <HAL_RCC_OscConfig+0x764>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a93      	ldr	r2, [pc, #588]	; (8002728 <HAL_RCC_OscConfig+0x764>)
 80024da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024e0:	f7ff fa40 	bl	8001964 <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024e6:	e00e      	b.n	8002506 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024e8:	f7ff fa3c 	bl	8001964 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d907      	bls.n	8002506 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024f6:	4b8c      	ldr	r3, [pc, #560]	; (8002728 <HAL_RCC_OscConfig+0x764>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e22a      	b.n	800295c <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002506:	4b88      	ldr	r3, [pc, #544]	; (8002728 <HAL_RCC_OscConfig+0x764>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800250e:	2b00      	cmp	r3, #0
 8002510:	d0ea      	beq.n	80024e8 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b00      	cmp	r3, #0
 800251c:	d01f      	beq.n	800255e <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f003 0304 	and.w	r3, r3, #4
 8002526:	2b00      	cmp	r3, #0
 8002528:	d010      	beq.n	800254c <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800252a:	4b7e      	ldr	r3, [pc, #504]	; (8002724 <HAL_RCC_OscConfig+0x760>)
 800252c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002530:	4a7c      	ldr	r2, [pc, #496]	; (8002724 <HAL_RCC_OscConfig+0x760>)
 8002532:	f043 0304 	orr.w	r3, r3, #4
 8002536:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800253a:	4b7a      	ldr	r3, [pc, #488]	; (8002724 <HAL_RCC_OscConfig+0x760>)
 800253c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002540:	4a78      	ldr	r2, [pc, #480]	; (8002724 <HAL_RCC_OscConfig+0x760>)
 8002542:	f043 0301 	orr.w	r3, r3, #1
 8002546:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800254a:	e018      	b.n	800257e <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800254c:	4b75      	ldr	r3, [pc, #468]	; (8002724 <HAL_RCC_OscConfig+0x760>)
 800254e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002552:	4a74      	ldr	r2, [pc, #464]	; (8002724 <HAL_RCC_OscConfig+0x760>)
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800255c:	e00f      	b.n	800257e <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800255e:	4b71      	ldr	r3, [pc, #452]	; (8002724 <HAL_RCC_OscConfig+0x760>)
 8002560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002564:	4a6f      	ldr	r2, [pc, #444]	; (8002724 <HAL_RCC_OscConfig+0x760>)
 8002566:	f023 0301 	bic.w	r3, r3, #1
 800256a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800256e:	4b6d      	ldr	r3, [pc, #436]	; (8002724 <HAL_RCC_OscConfig+0x760>)
 8002570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002574:	4a6b      	ldr	r2, [pc, #428]	; (8002724 <HAL_RCC_OscConfig+0x760>)
 8002576:	f023 0304 	bic.w	r3, r3, #4
 800257a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d068      	beq.n	8002658 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002586:	f7ff f9ed 	bl	8001964 <HAL_GetTick>
 800258a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800258c:	e011      	b.n	80025b2 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800258e:	f7ff f9e9 	bl	8001964 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	f241 3288 	movw	r2, #5000	; 0x1388
 800259c:	4293      	cmp	r3, r2
 800259e:	d908      	bls.n	80025b2 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025a0:	4b60      	ldr	r3, [pc, #384]	; (8002724 <HAL_RCC_OscConfig+0x760>)
 80025a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e1d4      	b.n	800295c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025b2:	4b5c      	ldr	r3, [pc, #368]	; (8002724 <HAL_RCC_OscConfig+0x760>)
 80025b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d0e6      	beq.n	800258e <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d022      	beq.n	8002612 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80025cc:	4b55      	ldr	r3, [pc, #340]	; (8002724 <HAL_RCC_OscConfig+0x760>)
 80025ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d2:	4a54      	ldr	r2, [pc, #336]	; (8002724 <HAL_RCC_OscConfig+0x760>)
 80025d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80025dc:	e011      	b.n	8002602 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025de:	f7ff f9c1 	bl	8001964 <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d908      	bls.n	8002602 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80025f0:	4b4c      	ldr	r3, [pc, #304]	; (8002724 <HAL_RCC_OscConfig+0x760>)
 80025f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e1ac      	b.n	800295c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002602:	4b48      	ldr	r3, [pc, #288]	; (8002724 <HAL_RCC_OscConfig+0x760>)
 8002604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002608:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800260c:	2b00      	cmp	r3, #0
 800260e:	d0e6      	beq.n	80025de <HAL_RCC_OscConfig+0x61a>
 8002610:	e068      	b.n	80026e4 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002612:	4b44      	ldr	r3, [pc, #272]	; (8002724 <HAL_RCC_OscConfig+0x760>)
 8002614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002618:	4a42      	ldr	r2, [pc, #264]	; (8002724 <HAL_RCC_OscConfig+0x760>)
 800261a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800261e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002622:	e011      	b.n	8002648 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002624:	f7ff f99e 	bl	8001964 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002632:	4293      	cmp	r3, r2
 8002634:	d908      	bls.n	8002648 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002636:	4b3b      	ldr	r3, [pc, #236]	; (8002724 <HAL_RCC_OscConfig+0x760>)
 8002638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800263c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e189      	b.n	800295c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002648:	4b36      	ldr	r3, [pc, #216]	; (8002724 <HAL_RCC_OscConfig+0x760>)
 800264a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800264e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1e6      	bne.n	8002624 <HAL_RCC_OscConfig+0x660>
 8002656:	e045      	b.n	80026e4 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002658:	f7ff f984 	bl	8001964 <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800265e:	e011      	b.n	8002684 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002660:	f7ff f980 	bl	8001964 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	f241 3288 	movw	r2, #5000	; 0x1388
 800266e:	4293      	cmp	r3, r2
 8002670:	d908      	bls.n	8002684 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002672:	4b2c      	ldr	r3, [pc, #176]	; (8002724 <HAL_RCC_OscConfig+0x760>)
 8002674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e16b      	b.n	800295c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002684:	4b27      	ldr	r3, [pc, #156]	; (8002724 <HAL_RCC_OscConfig+0x760>)
 8002686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1e6      	bne.n	8002660 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8002692:	4b24      	ldr	r3, [pc, #144]	; (8002724 <HAL_RCC_OscConfig+0x760>)
 8002694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800269c:	2b00      	cmp	r3, #0
 800269e:	d021      	beq.n	80026e4 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80026a0:	4b20      	ldr	r3, [pc, #128]	; (8002724 <HAL_RCC_OscConfig+0x760>)
 80026a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a6:	4a1f      	ldr	r2, [pc, #124]	; (8002724 <HAL_RCC_OscConfig+0x760>)
 80026a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80026b0:	e011      	b.n	80026d6 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026b2:	f7ff f957 	bl	8001964 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d908      	bls.n	80026d6 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80026c4:	4b17      	ldr	r3, [pc, #92]	; (8002724 <HAL_RCC_OscConfig+0x760>)
 80026c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e142      	b.n	800295c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80026d6:	4b13      	ldr	r3, [pc, #76]	; (8002724 <HAL_RCC_OscConfig+0x760>)
 80026d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d1e6      	bne.n	80026b2 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80026e4:	7ffb      	ldrb	r3, [r7, #31]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d105      	bne.n	80026f6 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026ea:	4b0e      	ldr	r3, [pc, #56]	; (8002724 <HAL_RCC_OscConfig+0x760>)
 80026ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ee:	4a0d      	ldr	r2, [pc, #52]	; (8002724 <HAL_RCC_OscConfig+0x760>)
 80026f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0320 	and.w	r3, r3, #32
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d04f      	beq.n	80027a2 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002706:	2b00      	cmp	r3, #0
 8002708:	d028      	beq.n	800275c <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800270a:	4b06      	ldr	r3, [pc, #24]	; (8002724 <HAL_RCC_OscConfig+0x760>)
 800270c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002710:	4a04      	ldr	r2, [pc, #16]	; (8002724 <HAL_RCC_OscConfig+0x760>)
 8002712:	f043 0301 	orr.w	r3, r3, #1
 8002716:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800271a:	f7ff f923 	bl	8001964 <HAL_GetTick>
 800271e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002720:	e014      	b.n	800274c <HAL_RCC_OscConfig+0x788>
 8002722:	bf00      	nop
 8002724:	40021000 	.word	0x40021000
 8002728:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800272c:	f7ff f91a 	bl	8001964 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d908      	bls.n	800274c <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800273a:	4b8a      	ldr	r3, [pc, #552]	; (8002964 <HAL_RCC_OscConfig+0x9a0>)
 800273c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002740:	f003 0302 	and.w	r3, r3, #2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d101      	bne.n	800274c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e107      	b.n	800295c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800274c:	4b85      	ldr	r3, [pc, #532]	; (8002964 <HAL_RCC_OscConfig+0x9a0>)
 800274e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d0e8      	beq.n	800272c <HAL_RCC_OscConfig+0x768>
 800275a:	e022      	b.n	80027a2 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800275c:	4b81      	ldr	r3, [pc, #516]	; (8002964 <HAL_RCC_OscConfig+0x9a0>)
 800275e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002762:	4a80      	ldr	r2, [pc, #512]	; (8002964 <HAL_RCC_OscConfig+0x9a0>)
 8002764:	f023 0301 	bic.w	r3, r3, #1
 8002768:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800276c:	f7ff f8fa 	bl	8001964 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002772:	e00f      	b.n	8002794 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002774:	f7ff f8f6 	bl	8001964 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d908      	bls.n	8002794 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002782:	4b78      	ldr	r3, [pc, #480]	; (8002964 <HAL_RCC_OscConfig+0x9a0>)
 8002784:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e0e3      	b.n	800295c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002794:	4b73      	ldr	r3, [pc, #460]	; (8002964 <HAL_RCC_OscConfig+0x9a0>)
 8002796:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1e8      	bne.n	8002774 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	f000 80d7 	beq.w	800295a <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027ac:	4b6d      	ldr	r3, [pc, #436]	; (8002964 <HAL_RCC_OscConfig+0x9a0>)
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f003 030c 	and.w	r3, r3, #12
 80027b4:	2b0c      	cmp	r3, #12
 80027b6:	f000 8091 	beq.w	80028dc <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d166      	bne.n	8002890 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027c2:	4b68      	ldr	r3, [pc, #416]	; (8002964 <HAL_RCC_OscConfig+0x9a0>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a67      	ldr	r2, [pc, #412]	; (8002964 <HAL_RCC_OscConfig+0x9a0>)
 80027c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ce:	f7ff f8c9 	bl	8001964 <HAL_GetTick>
 80027d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027d4:	e00e      	b.n	80027f4 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027d6:	f7ff f8c5 	bl	8001964 <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d907      	bls.n	80027f4 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027e4:	4b5f      	ldr	r3, [pc, #380]	; (8002964 <HAL_RCC_OscConfig+0x9a0>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e0b3      	b.n	800295c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027f4:	4b5b      	ldr	r3, [pc, #364]	; (8002964 <HAL_RCC_OscConfig+0x9a0>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1ea      	bne.n	80027d6 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002800:	4b58      	ldr	r3, [pc, #352]	; (8002964 <HAL_RCC_OscConfig+0x9a0>)
 8002802:	68da      	ldr	r2, [r3, #12]
 8002804:	4b58      	ldr	r3, [pc, #352]	; (8002968 <HAL_RCC_OscConfig+0x9a4>)
 8002806:	4013      	ands	r3, r2
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002810:	3a01      	subs	r2, #1
 8002812:	0112      	lsls	r2, r2, #4
 8002814:	4311      	orrs	r1, r2
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800281a:	0212      	lsls	r2, r2, #8
 800281c:	4311      	orrs	r1, r2
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002822:	0852      	lsrs	r2, r2, #1
 8002824:	3a01      	subs	r2, #1
 8002826:	0552      	lsls	r2, r2, #21
 8002828:	4311      	orrs	r1, r2
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800282e:	0852      	lsrs	r2, r2, #1
 8002830:	3a01      	subs	r2, #1
 8002832:	0652      	lsls	r2, r2, #25
 8002834:	4311      	orrs	r1, r2
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800283a:	06d2      	lsls	r2, r2, #27
 800283c:	430a      	orrs	r2, r1
 800283e:	4949      	ldr	r1, [pc, #292]	; (8002964 <HAL_RCC_OscConfig+0x9a0>)
 8002840:	4313      	orrs	r3, r2
 8002842:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002844:	4b47      	ldr	r3, [pc, #284]	; (8002964 <HAL_RCC_OscConfig+0x9a0>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a46      	ldr	r2, [pc, #280]	; (8002964 <HAL_RCC_OscConfig+0x9a0>)
 800284a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800284e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002850:	4b44      	ldr	r3, [pc, #272]	; (8002964 <HAL_RCC_OscConfig+0x9a0>)
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	4a43      	ldr	r2, [pc, #268]	; (8002964 <HAL_RCC_OscConfig+0x9a0>)
 8002856:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800285a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800285c:	f7ff f882 	bl	8001964 <HAL_GetTick>
 8002860:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002862:	e00e      	b.n	8002882 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002864:	f7ff f87e 	bl	8001964 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d907      	bls.n	8002882 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002872:	4b3c      	ldr	r3, [pc, #240]	; (8002964 <HAL_RCC_OscConfig+0x9a0>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e06c      	b.n	800295c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002882:	4b38      	ldr	r3, [pc, #224]	; (8002964 <HAL_RCC_OscConfig+0x9a0>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d0ea      	beq.n	8002864 <HAL_RCC_OscConfig+0x8a0>
 800288e:	e064      	b.n	800295a <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002890:	4b34      	ldr	r3, [pc, #208]	; (8002964 <HAL_RCC_OscConfig+0x9a0>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a33      	ldr	r2, [pc, #204]	; (8002964 <HAL_RCC_OscConfig+0x9a0>)
 8002896:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800289a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289c:	f7ff f862 	bl	8001964 <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028a2:	e00e      	b.n	80028c2 <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a4:	f7ff f85e 	bl	8001964 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d907      	bls.n	80028c2 <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028b2:	4b2c      	ldr	r3, [pc, #176]	; (8002964 <HAL_RCC_OscConfig+0x9a0>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e04c      	b.n	800295c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028c2:	4b28      	ldr	r3, [pc, #160]	; (8002964 <HAL_RCC_OscConfig+0x9a0>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1ea      	bne.n	80028a4 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80028ce:	4b25      	ldr	r3, [pc, #148]	; (8002964 <HAL_RCC_OscConfig+0x9a0>)
 80028d0:	68da      	ldr	r2, [r3, #12]
 80028d2:	4924      	ldr	r1, [pc, #144]	; (8002964 <HAL_RCC_OscConfig+0x9a0>)
 80028d4:	4b25      	ldr	r3, [pc, #148]	; (800296c <HAL_RCC_OscConfig+0x9a8>)
 80028d6:	4013      	ands	r3, r2
 80028d8:	60cb      	str	r3, [r1, #12]
 80028da:	e03e      	b.n	800295a <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d101      	bne.n	80028e8 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e039      	b.n	800295c <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80028e8:	4b1e      	ldr	r3, [pc, #120]	; (8002964 <HAL_RCC_OscConfig+0x9a0>)
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	f003 0203 	and.w	r2, r3, #3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d12c      	bne.n	8002956 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002906:	3b01      	subs	r3, #1
 8002908:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800290a:	429a      	cmp	r2, r3
 800290c:	d123      	bne.n	8002956 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002918:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800291a:	429a      	cmp	r2, r3
 800291c:	d11b      	bne.n	8002956 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002928:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800292a:	429a      	cmp	r2, r3
 800292c:	d113      	bne.n	8002956 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002938:	085b      	lsrs	r3, r3, #1
 800293a:	3b01      	subs	r3, #1
 800293c:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800293e:	429a      	cmp	r2, r3
 8002940:	d109      	bne.n	8002956 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294c:	085b      	lsrs	r3, r3, #1
 800294e:	3b01      	subs	r3, #1
 8002950:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002952:	429a      	cmp	r2, r3
 8002954:	d001      	beq.n	800295a <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e000      	b.n	800295c <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	3720      	adds	r7, #32
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	40021000 	.word	0x40021000
 8002968:	019f800c 	.word	0x019f800c
 800296c:	feeefffc 	.word	0xfeeefffc

08002970 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800297a:	2300      	movs	r3, #0
 800297c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d101      	bne.n	8002988 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e11c      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002988:	4b90      	ldr	r3, [pc, #576]	; (8002bcc <HAL_RCC_ClockConfig+0x25c>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 030f 	and.w	r3, r3, #15
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	429a      	cmp	r2, r3
 8002994:	d910      	bls.n	80029b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002996:	4b8d      	ldr	r3, [pc, #564]	; (8002bcc <HAL_RCC_ClockConfig+0x25c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f023 020f 	bic.w	r2, r3, #15
 800299e:	498b      	ldr	r1, [pc, #556]	; (8002bcc <HAL_RCC_ClockConfig+0x25c>)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029a6:	4b89      	ldr	r3, [pc, #548]	; (8002bcc <HAL_RCC_ClockConfig+0x25c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 030f 	and.w	r3, r3, #15
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d001      	beq.n	80029b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e104      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d010      	beq.n	80029e6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	4b81      	ldr	r3, [pc, #516]	; (8002bd0 <HAL_RCC_ClockConfig+0x260>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d908      	bls.n	80029e6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029d4:	4b7e      	ldr	r3, [pc, #504]	; (8002bd0 <HAL_RCC_ClockConfig+0x260>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	497b      	ldr	r1, [pc, #492]	; (8002bd0 <HAL_RCC_ClockConfig+0x260>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	f000 8085 	beq.w	8002afe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	2b03      	cmp	r3, #3
 80029fa:	d11f      	bne.n	8002a3c <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029fc:	4b74      	ldr	r3, [pc, #464]	; (8002bd0 <HAL_RCC_ClockConfig+0x260>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d101      	bne.n	8002a0c <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e0da      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002a0c:	f000 f9fc 	bl	8002e08 <RCC_GetSysClockFreqFromPLLSource>
 8002a10:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	4a6f      	ldr	r2, [pc, #444]	; (8002bd4 <HAL_RCC_ClockConfig+0x264>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d947      	bls.n	8002aaa <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002a1a:	4b6d      	ldr	r3, [pc, #436]	; (8002bd0 <HAL_RCC_ClockConfig+0x260>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d141      	bne.n	8002aaa <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a26:	4b6a      	ldr	r3, [pc, #424]	; (8002bd0 <HAL_RCC_ClockConfig+0x260>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a2e:	4a68      	ldr	r2, [pc, #416]	; (8002bd0 <HAL_RCC_ClockConfig+0x260>)
 8002a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a34:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002a36:	2380      	movs	r3, #128	; 0x80
 8002a38:	617b      	str	r3, [r7, #20]
 8002a3a:	e036      	b.n	8002aaa <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d107      	bne.n	8002a54 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a44:	4b62      	ldr	r3, [pc, #392]	; (8002bd0 <HAL_RCC_ClockConfig+0x260>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d115      	bne.n	8002a7c <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e0b6      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d107      	bne.n	8002a6c <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a5c:	4b5c      	ldr	r3, [pc, #368]	; (8002bd0 <HAL_RCC_ClockConfig+0x260>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d109      	bne.n	8002a7c <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e0aa      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a6c:	4b58      	ldr	r3, [pc, #352]	; (8002bd0 <HAL_RCC_ClockConfig+0x260>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d101      	bne.n	8002a7c <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e0a2      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002a7c:	f000 f8b0 	bl	8002be0 <HAL_RCC_GetSysClockFreq>
 8002a80:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	4a53      	ldr	r2, [pc, #332]	; (8002bd4 <HAL_RCC_ClockConfig+0x264>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d90f      	bls.n	8002aaa <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002a8a:	4b51      	ldr	r3, [pc, #324]	; (8002bd0 <HAL_RCC_ClockConfig+0x260>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d109      	bne.n	8002aaa <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a96:	4b4e      	ldr	r3, [pc, #312]	; (8002bd0 <HAL_RCC_ClockConfig+0x260>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a9e:	4a4c      	ldr	r2, [pc, #304]	; (8002bd0 <HAL_RCC_ClockConfig+0x260>)
 8002aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aa4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002aa6:	2380      	movs	r3, #128	; 0x80
 8002aa8:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002aaa:	4b49      	ldr	r3, [pc, #292]	; (8002bd0 <HAL_RCC_ClockConfig+0x260>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f023 0203 	bic.w	r2, r3, #3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	4946      	ldr	r1, [pc, #280]	; (8002bd0 <HAL_RCC_ClockConfig+0x260>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002abc:	f7fe ff52 	bl	8001964 <HAL_GetTick>
 8002ac0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ac2:	e013      	b.n	8002aec <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ac4:	f7fe ff4e 	bl	8001964 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d90a      	bls.n	8002aec <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ad6:	4b3e      	ldr	r3, [pc, #248]	; (8002bd0 <HAL_RCC_ClockConfig+0x260>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f003 020c 	and.w	r2, r3, #12
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d001      	beq.n	8002aec <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e06a      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aec:	4b38      	ldr	r3, [pc, #224]	; (8002bd0 <HAL_RCC_ClockConfig+0x260>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f003 020c 	and.w	r2, r3, #12
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d1e2      	bne.n	8002ac4 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	2b80      	cmp	r3, #128	; 0x80
 8002b02:	d105      	bne.n	8002b10 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002b04:	4b32      	ldr	r3, [pc, #200]	; (8002bd0 <HAL_RCC_ClockConfig+0x260>)
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	4a31      	ldr	r2, [pc, #196]	; (8002bd0 <HAL_RCC_ClockConfig+0x260>)
 8002b0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b0e:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0302 	and.w	r3, r3, #2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d010      	beq.n	8002b3e <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689a      	ldr	r2, [r3, #8]
 8002b20:	4b2b      	ldr	r3, [pc, #172]	; (8002bd0 <HAL_RCC_ClockConfig+0x260>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d208      	bcs.n	8002b3e <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b2c:	4b28      	ldr	r3, [pc, #160]	; (8002bd0 <HAL_RCC_ClockConfig+0x260>)
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	4925      	ldr	r1, [pc, #148]	; (8002bd0 <HAL_RCC_ClockConfig+0x260>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b3e:	4b23      	ldr	r3, [pc, #140]	; (8002bcc <HAL_RCC_ClockConfig+0x25c>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 030f 	and.w	r3, r3, #15
 8002b46:	683a      	ldr	r2, [r7, #0]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d210      	bcs.n	8002b6e <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b4c:	4b1f      	ldr	r3, [pc, #124]	; (8002bcc <HAL_RCC_ClockConfig+0x25c>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f023 020f 	bic.w	r2, r3, #15
 8002b54:	491d      	ldr	r1, [pc, #116]	; (8002bcc <HAL_RCC_ClockConfig+0x25c>)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b5c:	4b1b      	ldr	r3, [pc, #108]	; (8002bcc <HAL_RCC_ClockConfig+0x25c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 030f 	and.w	r3, r3, #15
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d001      	beq.n	8002b6e <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e029      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0304 	and.w	r3, r3, #4
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d008      	beq.n	8002b8c <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b7a:	4b15      	ldr	r3, [pc, #84]	; (8002bd0 <HAL_RCC_ClockConfig+0x260>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	4912      	ldr	r1, [pc, #72]	; (8002bd0 <HAL_RCC_ClockConfig+0x260>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0308 	and.w	r3, r3, #8
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d009      	beq.n	8002bac <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b98:	4b0d      	ldr	r3, [pc, #52]	; (8002bd0 <HAL_RCC_ClockConfig+0x260>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	00db      	lsls	r3, r3, #3
 8002ba6:	490a      	ldr	r1, [pc, #40]	; (8002bd0 <HAL_RCC_ClockConfig+0x260>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002bac:	f000 f8b4 	bl	8002d18 <HAL_RCC_GetHCLKFreq>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	4a09      	ldr	r2, [pc, #36]	; (8002bd8 <HAL_RCC_ClockConfig+0x268>)
 8002bb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002bb6:	4b09      	ldr	r3, [pc, #36]	; (8002bdc <HAL_RCC_ClockConfig+0x26c>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7fe fe82 	bl	80018c4 <HAL_InitTick>
 8002bc0:	4603      	mov	r3, r0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3718      	adds	r7, #24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	40022000 	.word	0x40022000
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	04c4b400 	.word	0x04c4b400
 8002bd8:	20000350 	.word	0x20000350
 8002bdc:	20000354 	.word	0x20000354

08002be0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b089      	sub	sp, #36	; 0x24
 8002be4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002be6:	2300      	movs	r3, #0
 8002be8:	61fb      	str	r3, [r7, #28]
 8002bea:	2300      	movs	r3, #0
 8002bec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bee:	4b47      	ldr	r3, [pc, #284]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x12c>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f003 030c 	and.w	r3, r3, #12
 8002bf6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bf8:	4b44      	ldr	r3, [pc, #272]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x12c>)
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	f003 0303 	and.w	r3, r3, #3
 8002c00:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d005      	beq.n	8002c14 <HAL_RCC_GetSysClockFreq+0x34>
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	2b0c      	cmp	r3, #12
 8002c0c:	d121      	bne.n	8002c52 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d11e      	bne.n	8002c52 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c14:	4b3d      	ldr	r3, [pc, #244]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x12c>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0308 	and.w	r3, r3, #8
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d107      	bne.n	8002c30 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c20:	4b3a      	ldr	r3, [pc, #232]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x12c>)
 8002c22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c26:	0a1b      	lsrs	r3, r3, #8
 8002c28:	f003 030f 	and.w	r3, r3, #15
 8002c2c:	61fb      	str	r3, [r7, #28]
 8002c2e:	e005      	b.n	8002c3c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c30:	4b36      	ldr	r3, [pc, #216]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x12c>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	091b      	lsrs	r3, r3, #4
 8002c36:	f003 030f 	and.w	r3, r3, #15
 8002c3a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8002c3c:	4a34      	ldr	r2, [pc, #208]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x130>)
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c44:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d10d      	bne.n	8002c68 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002c50:	e00a      	b.n	8002c68 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	2b04      	cmp	r3, #4
 8002c56:	d102      	bne.n	8002c5e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c58:	4b2e      	ldr	r3, [pc, #184]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x134>)
 8002c5a:	61bb      	str	r3, [r7, #24]
 8002c5c:	e004      	b.n	8002c68 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	2b08      	cmp	r3, #8
 8002c62:	d101      	bne.n	8002c68 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c64:	4b2b      	ldr	r3, [pc, #172]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x134>)
 8002c66:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	2b0c      	cmp	r3, #12
 8002c6c:	d146      	bne.n	8002cfc <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002c6e:	4b27      	ldr	r3, [pc, #156]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x12c>)
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	f003 0303 	and.w	r3, r3, #3
 8002c76:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c78:	4b24      	ldr	r3, [pc, #144]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x12c>)
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	091b      	lsrs	r3, r3, #4
 8002c7e:	f003 030f 	and.w	r3, r3, #15
 8002c82:	3301      	adds	r3, #1
 8002c84:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d003      	beq.n	8002c94 <HAL_RCC_GetSysClockFreq+0xb4>
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	2b03      	cmp	r3, #3
 8002c90:	d00d      	beq.n	8002cae <HAL_RCC_GetSysClockFreq+0xce>
 8002c92:	e019      	b.n	8002cc8 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c94:	4a1f      	ldr	r2, [pc, #124]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x134>)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c9c:	4a1b      	ldr	r2, [pc, #108]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x12c>)
 8002c9e:	68d2      	ldr	r2, [r2, #12]
 8002ca0:	0a12      	lsrs	r2, r2, #8
 8002ca2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002ca6:	fb02 f303 	mul.w	r3, r2, r3
 8002caa:	617b      	str	r3, [r7, #20]
        break;
 8002cac:	e019      	b.n	8002ce2 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002cae:	4a19      	ldr	r2, [pc, #100]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x134>)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb6:	4a15      	ldr	r2, [pc, #84]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x12c>)
 8002cb8:	68d2      	ldr	r2, [r2, #12]
 8002cba:	0a12      	lsrs	r2, r2, #8
 8002cbc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002cc0:	fb02 f303 	mul.w	r3, r2, r3
 8002cc4:	617b      	str	r3, [r7, #20]
        break;
 8002cc6:	e00c      	b.n	8002ce2 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002cc8:	69fa      	ldr	r2, [r7, #28]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd0:	4a0e      	ldr	r2, [pc, #56]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x12c>)
 8002cd2:	68d2      	ldr	r2, [r2, #12]
 8002cd4:	0a12      	lsrs	r2, r2, #8
 8002cd6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002cda:	fb02 f303 	mul.w	r3, r2, r3
 8002cde:	617b      	str	r3, [r7, #20]
        break;
 8002ce0:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8002ce2:	4b0a      	ldr	r3, [pc, #40]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x12c>)
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	0e5b      	lsrs	r3, r3, #25
 8002ce8:	f003 0303 	and.w	r3, r3, #3
 8002cec:	3301      	adds	r3, #1
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cfa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002cfc:	69bb      	ldr	r3, [r7, #24]
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3724      	adds	r7, #36	; 0x24
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	08003ec4 	.word	0x08003ec4
 8002d14:	00f42400 	.word	0x00f42400

08002d18 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8002d1c:	f7ff ff60 	bl	8002be0 <HAL_RCC_GetSysClockFreq>
 8002d20:	4602      	mov	r2, r0
 8002d22:	4b05      	ldr	r3, [pc, #20]	; (8002d38 <HAL_RCC_GetHCLKFreq+0x20>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	091b      	lsrs	r3, r3, #4
 8002d28:	f003 030f 	and.w	r3, r3, #15
 8002d2c:	4903      	ldr	r1, [pc, #12]	; (8002d3c <HAL_RCC_GetHCLKFreq+0x24>)
 8002d2e:	5ccb      	ldrb	r3, [r1, r3]
 8002d30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	08003eb4 	.word	0x08003eb4

08002d40 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b086      	sub	sp, #24
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d48:	2300      	movs	r3, #0
 8002d4a:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d4c:	4b2c      	ldr	r3, [pc, #176]	; (8002e00 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d003      	beq.n	8002d60 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d58:	f7ff f8a6 	bl	8001ea8 <HAL_PWREx_GetVoltageRange>
 8002d5c:	6138      	str	r0, [r7, #16]
 8002d5e:	e014      	b.n	8002d8a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d60:	4b27      	ldr	r3, [pc, #156]	; (8002e00 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d64:	4a26      	ldr	r2, [pc, #152]	; (8002e00 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002d66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d6a:	6593      	str	r3, [r2, #88]	; 0x58
 8002d6c:	4b24      	ldr	r3, [pc, #144]	; (8002e00 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d74:	60fb      	str	r3, [r7, #12]
 8002d76:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d78:	f7ff f896 	bl	8001ea8 <HAL_PWREx_GetVoltageRange>
 8002d7c:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d7e:	4b20      	ldr	r3, [pc, #128]	; (8002e00 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d82:	4a1f      	ldr	r2, [pc, #124]	; (8002e00 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002d84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d88:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d003      	beq.n	8002d98 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d96:	d10b      	bne.n	8002db0 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b80      	cmp	r3, #128	; 0x80
 8002d9c:	d919      	bls.n	8002dd2 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2ba0      	cmp	r3, #160	; 0xa0
 8002da2:	d902      	bls.n	8002daa <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002da4:	2302      	movs	r3, #2
 8002da6:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8002da8:	e013      	b.n	8002dd2 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002daa:	2301      	movs	r3, #1
 8002dac:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8002dae:	e010      	b.n	8002dd2 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2b80      	cmp	r3, #128	; 0x80
 8002db4:	d902      	bls.n	8002dbc <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002db6:	2303      	movs	r3, #3
 8002db8:	617b      	str	r3, [r7, #20]
 8002dba:	e00a      	b.n	8002dd2 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2b80      	cmp	r3, #128	; 0x80
 8002dc0:	d102      	bne.n	8002dc8 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	617b      	str	r3, [r7, #20]
 8002dc6:	e004      	b.n	8002dd2 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2b70      	cmp	r3, #112	; 0x70
 8002dcc:	d101      	bne.n	8002dd2 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002dce:	2301      	movs	r3, #1
 8002dd0:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002dd2:	4b0c      	ldr	r3, [pc, #48]	; (8002e04 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f023 020f 	bic.w	r2, r3, #15
 8002dda:	490a      	ldr	r1, [pc, #40]	; (8002e04 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002de2:	4b08      	ldr	r3, [pc, #32]	; (8002e04 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 030f 	and.w	r3, r3, #15
 8002dea:	697a      	ldr	r2, [r7, #20]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d001      	beq.n	8002df4 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e000      	b.n	8002df6 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3718      	adds	r7, #24
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	40021000 	.word	0x40021000
 8002e04:	40022000 	.word	0x40022000

08002e08 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b087      	sub	sp, #28
 8002e0c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e0e:	4b31      	ldr	r3, [pc, #196]	; (8002ed4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	f003 0303 	and.w	r3, r3, #3
 8002e16:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e18:	4b2e      	ldr	r3, [pc, #184]	; (8002ed4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	091b      	lsrs	r3, r3, #4
 8002e1e:	f003 030f 	and.w	r3, r3, #15
 8002e22:	3301      	adds	r3, #1
 8002e24:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2b03      	cmp	r3, #3
 8002e2a:	d015      	beq.n	8002e58 <RCC_GetSysClockFreqFromPLLSource+0x50>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2b03      	cmp	r3, #3
 8002e30:	d839      	bhi.n	8002ea6 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d01c      	beq.n	8002e72 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d133      	bne.n	8002ea6 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e3e:	4a26      	ldr	r2, [pc, #152]	; (8002ed8 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e46:	4a23      	ldr	r2, [pc, #140]	; (8002ed4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002e48:	68d2      	ldr	r2, [r2, #12]
 8002e4a:	0a12      	lsrs	r2, r2, #8
 8002e4c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002e50:	fb02 f303 	mul.w	r3, r2, r3
 8002e54:	613b      	str	r3, [r7, #16]
      break;
 8002e56:	e029      	b.n	8002eac <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e58:	4a1f      	ldr	r2, [pc, #124]	; (8002ed8 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e60:	4a1c      	ldr	r2, [pc, #112]	; (8002ed4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002e62:	68d2      	ldr	r2, [r2, #12]
 8002e64:	0a12      	lsrs	r2, r2, #8
 8002e66:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002e6a:	fb02 f303 	mul.w	r3, r2, r3
 8002e6e:	613b      	str	r3, [r7, #16]
      break;
 8002e70:	e01c      	b.n	8002eac <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e72:	4b18      	ldr	r3, [pc, #96]	; (8002ed4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0308 	and.w	r3, r3, #8
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d107      	bne.n	8002e8e <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e7e:	4b15      	ldr	r3, [pc, #84]	; (8002ed4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002e80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e84:	0a1b      	lsrs	r3, r3, #8
 8002e86:	f003 030f 	and.w	r3, r3, #15
 8002e8a:	617b      	str	r3, [r7, #20]
 8002e8c:	e005      	b.n	8002e9a <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e8e:	4b11      	ldr	r3, [pc, #68]	; (8002ed4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	091b      	lsrs	r3, r3, #4
 8002e94:	f003 030f 	and.w	r3, r3, #15
 8002e98:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8002e9a:	4a10      	ldr	r2, [pc, #64]	; (8002edc <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ea2:	613b      	str	r3, [r7, #16]
        break;
 8002ea4:	e002      	b.n	8002eac <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	613b      	str	r3, [r7, #16]
      break;
 8002eaa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8002eac:	4b09      	ldr	r3, [pc, #36]	; (8002ed4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	0e5b      	lsrs	r3, r3, #25
 8002eb2:	f003 0303 	and.w	r3, r3, #3
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002ebc:	693a      	ldr	r2, [r7, #16]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002ec6:	683b      	ldr	r3, [r7, #0]
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	371c      	adds	r7, #28
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	00f42400 	.word	0x00f42400
 8002edc:	08003ec4 	.word	0x08003ec4

08002ee0 <std>:
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	b510      	push	{r4, lr}
 8002ee4:	4604      	mov	r4, r0
 8002ee6:	6083      	str	r3, [r0, #8]
 8002ee8:	8181      	strh	r1, [r0, #12]
 8002eea:	4619      	mov	r1, r3
 8002eec:	6643      	str	r3, [r0, #100]	; 0x64
 8002eee:	81c2      	strh	r2, [r0, #14]
 8002ef0:	2208      	movs	r2, #8
 8002ef2:	6183      	str	r3, [r0, #24]
 8002ef4:	e9c0 3300 	strd	r3, r3, [r0]
 8002ef8:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002efc:	305c      	adds	r0, #92	; 0x5c
 8002efe:	f000 f8cb 	bl	8003098 <memset>
 8002f02:	4b0d      	ldr	r3, [pc, #52]	; (8002f38 <std+0x58>)
 8002f04:	6224      	str	r4, [r4, #32]
 8002f06:	6263      	str	r3, [r4, #36]	; 0x24
 8002f08:	4b0c      	ldr	r3, [pc, #48]	; (8002f3c <std+0x5c>)
 8002f0a:	62a3      	str	r3, [r4, #40]	; 0x28
 8002f0c:	4b0c      	ldr	r3, [pc, #48]	; (8002f40 <std+0x60>)
 8002f0e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002f10:	4b0c      	ldr	r3, [pc, #48]	; (8002f44 <std+0x64>)
 8002f12:	6323      	str	r3, [r4, #48]	; 0x30
 8002f14:	4b0c      	ldr	r3, [pc, #48]	; (8002f48 <std+0x68>)
 8002f16:	429c      	cmp	r4, r3
 8002f18:	d006      	beq.n	8002f28 <std+0x48>
 8002f1a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002f1e:	4294      	cmp	r4, r2
 8002f20:	d002      	beq.n	8002f28 <std+0x48>
 8002f22:	33d0      	adds	r3, #208	; 0xd0
 8002f24:	429c      	cmp	r4, r3
 8002f26:	d105      	bne.n	8002f34 <std+0x54>
 8002f28:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f30:	f000 b8e4 	b.w	80030fc <__retarget_lock_init_recursive>
 8002f34:	bd10      	pop	{r4, pc}
 8002f36:	bf00      	nop
 8002f38:	0800395d 	.word	0x0800395d
 8002f3c:	0800397f 	.word	0x0800397f
 8002f40:	080039b7 	.word	0x080039b7
 8002f44:	080039db 	.word	0x080039db
 8002f48:	200003dc 	.word	0x200003dc

08002f4c <stdio_exit_handler>:
 8002f4c:	4a02      	ldr	r2, [pc, #8]	; (8002f58 <stdio_exit_handler+0xc>)
 8002f4e:	4903      	ldr	r1, [pc, #12]	; (8002f5c <stdio_exit_handler+0x10>)
 8002f50:	4803      	ldr	r0, [pc, #12]	; (8002f60 <stdio_exit_handler+0x14>)
 8002f52:	f000 b869 	b.w	8003028 <_fwalk_sglue>
 8002f56:	bf00      	nop
 8002f58:	2000035c 	.word	0x2000035c
 8002f5c:	080038f5 	.word	0x080038f5
 8002f60:	20000368 	.word	0x20000368

08002f64 <cleanup_stdio>:
 8002f64:	6841      	ldr	r1, [r0, #4]
 8002f66:	4b0c      	ldr	r3, [pc, #48]	; (8002f98 <cleanup_stdio+0x34>)
 8002f68:	4299      	cmp	r1, r3
 8002f6a:	b510      	push	{r4, lr}
 8002f6c:	4604      	mov	r4, r0
 8002f6e:	d001      	beq.n	8002f74 <cleanup_stdio+0x10>
 8002f70:	f000 fcc0 	bl	80038f4 <_fflush_r>
 8002f74:	68a1      	ldr	r1, [r4, #8]
 8002f76:	4b09      	ldr	r3, [pc, #36]	; (8002f9c <cleanup_stdio+0x38>)
 8002f78:	4299      	cmp	r1, r3
 8002f7a:	d002      	beq.n	8002f82 <cleanup_stdio+0x1e>
 8002f7c:	4620      	mov	r0, r4
 8002f7e:	f000 fcb9 	bl	80038f4 <_fflush_r>
 8002f82:	68e1      	ldr	r1, [r4, #12]
 8002f84:	4b06      	ldr	r3, [pc, #24]	; (8002fa0 <cleanup_stdio+0x3c>)
 8002f86:	4299      	cmp	r1, r3
 8002f88:	d004      	beq.n	8002f94 <cleanup_stdio+0x30>
 8002f8a:	4620      	mov	r0, r4
 8002f8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f90:	f000 bcb0 	b.w	80038f4 <_fflush_r>
 8002f94:	bd10      	pop	{r4, pc}
 8002f96:	bf00      	nop
 8002f98:	200003dc 	.word	0x200003dc
 8002f9c:	20000444 	.word	0x20000444
 8002fa0:	200004ac 	.word	0x200004ac

08002fa4 <global_stdio_init.part.0>:
 8002fa4:	b510      	push	{r4, lr}
 8002fa6:	4b0b      	ldr	r3, [pc, #44]	; (8002fd4 <global_stdio_init.part.0+0x30>)
 8002fa8:	2104      	movs	r1, #4
 8002faa:	4c0b      	ldr	r4, [pc, #44]	; (8002fd8 <global_stdio_init.part.0+0x34>)
 8002fac:	4a0b      	ldr	r2, [pc, #44]	; (8002fdc <global_stdio_init.part.0+0x38>)
 8002fae:	4620      	mov	r0, r4
 8002fb0:	601a      	str	r2, [r3, #0]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f7ff ff94 	bl	8002ee0 <std>
 8002fb8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	2109      	movs	r1, #9
 8002fc0:	f7ff ff8e 	bl	8002ee0 <std>
 8002fc4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002fc8:	2202      	movs	r2, #2
 8002fca:	2112      	movs	r1, #18
 8002fcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fd0:	f7ff bf86 	b.w	8002ee0 <std>
 8002fd4:	20000514 	.word	0x20000514
 8002fd8:	200003dc 	.word	0x200003dc
 8002fdc:	08002f4d 	.word	0x08002f4d

08002fe0 <__sfp_lock_acquire>:
 8002fe0:	4801      	ldr	r0, [pc, #4]	; (8002fe8 <__sfp_lock_acquire+0x8>)
 8002fe2:	f000 b88c 	b.w	80030fe <__retarget_lock_acquire_recursive>
 8002fe6:	bf00      	nop
 8002fe8:	20000519 	.word	0x20000519

08002fec <__sfp_lock_release>:
 8002fec:	4801      	ldr	r0, [pc, #4]	; (8002ff4 <__sfp_lock_release+0x8>)
 8002fee:	f000 b887 	b.w	8003100 <__retarget_lock_release_recursive>
 8002ff2:	bf00      	nop
 8002ff4:	20000519 	.word	0x20000519

08002ff8 <__sinit>:
 8002ff8:	b510      	push	{r4, lr}
 8002ffa:	4604      	mov	r4, r0
 8002ffc:	f7ff fff0 	bl	8002fe0 <__sfp_lock_acquire>
 8003000:	6a23      	ldr	r3, [r4, #32]
 8003002:	b11b      	cbz	r3, 800300c <__sinit+0x14>
 8003004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003008:	f7ff bff0 	b.w	8002fec <__sfp_lock_release>
 800300c:	4b04      	ldr	r3, [pc, #16]	; (8003020 <__sinit+0x28>)
 800300e:	6223      	str	r3, [r4, #32]
 8003010:	4b04      	ldr	r3, [pc, #16]	; (8003024 <__sinit+0x2c>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1f5      	bne.n	8003004 <__sinit+0xc>
 8003018:	f7ff ffc4 	bl	8002fa4 <global_stdio_init.part.0>
 800301c:	e7f2      	b.n	8003004 <__sinit+0xc>
 800301e:	bf00      	nop
 8003020:	08002f65 	.word	0x08002f65
 8003024:	20000514 	.word	0x20000514

08003028 <_fwalk_sglue>:
 8003028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800302c:	4607      	mov	r7, r0
 800302e:	4688      	mov	r8, r1
 8003030:	4614      	mov	r4, r2
 8003032:	2600      	movs	r6, #0
 8003034:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003038:	f1b9 0901 	subs.w	r9, r9, #1
 800303c:	d505      	bpl.n	800304a <_fwalk_sglue+0x22>
 800303e:	6824      	ldr	r4, [r4, #0]
 8003040:	2c00      	cmp	r4, #0
 8003042:	d1f7      	bne.n	8003034 <_fwalk_sglue+0xc>
 8003044:	4630      	mov	r0, r6
 8003046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800304a:	89ab      	ldrh	r3, [r5, #12]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d907      	bls.n	8003060 <_fwalk_sglue+0x38>
 8003050:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003054:	3301      	adds	r3, #1
 8003056:	d003      	beq.n	8003060 <_fwalk_sglue+0x38>
 8003058:	4629      	mov	r1, r5
 800305a:	4638      	mov	r0, r7
 800305c:	47c0      	blx	r8
 800305e:	4306      	orrs	r6, r0
 8003060:	3568      	adds	r5, #104	; 0x68
 8003062:	e7e9      	b.n	8003038 <_fwalk_sglue+0x10>

08003064 <iprintf>:
 8003064:	b40f      	push	{r0, r1, r2, r3}
 8003066:	b507      	push	{r0, r1, r2, lr}
 8003068:	4906      	ldr	r1, [pc, #24]	; (8003084 <iprintf+0x20>)
 800306a:	ab04      	add	r3, sp, #16
 800306c:	6808      	ldr	r0, [r1, #0]
 800306e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003072:	6881      	ldr	r1, [r0, #8]
 8003074:	9301      	str	r3, [sp, #4]
 8003076:	f000 f86d 	bl	8003154 <_vfiprintf_r>
 800307a:	b003      	add	sp, #12
 800307c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003080:	b004      	add	sp, #16
 8003082:	4770      	bx	lr
 8003084:	200003b4 	.word	0x200003b4

08003088 <putchar>:
 8003088:	4b02      	ldr	r3, [pc, #8]	; (8003094 <putchar+0xc>)
 800308a:	4601      	mov	r1, r0
 800308c:	6818      	ldr	r0, [r3, #0]
 800308e:	6882      	ldr	r2, [r0, #8]
 8003090:	f000 bd9d 	b.w	8003bce <_putc_r>
 8003094:	200003b4 	.word	0x200003b4

08003098 <memset>:
 8003098:	4402      	add	r2, r0
 800309a:	4603      	mov	r3, r0
 800309c:	4293      	cmp	r3, r2
 800309e:	d100      	bne.n	80030a2 <memset+0xa>
 80030a0:	4770      	bx	lr
 80030a2:	f803 1b01 	strb.w	r1, [r3], #1
 80030a6:	e7f9      	b.n	800309c <memset+0x4>

080030a8 <__errno>:
 80030a8:	4b01      	ldr	r3, [pc, #4]	; (80030b0 <__errno+0x8>)
 80030aa:	6818      	ldr	r0, [r3, #0]
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	200003b4 	.word	0x200003b4

080030b4 <__libc_init_array>:
 80030b4:	b570      	push	{r4, r5, r6, lr}
 80030b6:	4d0d      	ldr	r5, [pc, #52]	; (80030ec <__libc_init_array+0x38>)
 80030b8:	2600      	movs	r6, #0
 80030ba:	4c0d      	ldr	r4, [pc, #52]	; (80030f0 <__libc_init_array+0x3c>)
 80030bc:	1b64      	subs	r4, r4, r5
 80030be:	10a4      	asrs	r4, r4, #2
 80030c0:	42a6      	cmp	r6, r4
 80030c2:	d109      	bne.n	80030d8 <__libc_init_array+0x24>
 80030c4:	4d0b      	ldr	r5, [pc, #44]	; (80030f4 <__libc_init_array+0x40>)
 80030c6:	2600      	movs	r6, #0
 80030c8:	4c0b      	ldr	r4, [pc, #44]	; (80030f8 <__libc_init_array+0x44>)
 80030ca:	f000 fe87 	bl	8003ddc <_init>
 80030ce:	1b64      	subs	r4, r4, r5
 80030d0:	10a4      	asrs	r4, r4, #2
 80030d2:	42a6      	cmp	r6, r4
 80030d4:	d105      	bne.n	80030e2 <__libc_init_array+0x2e>
 80030d6:	bd70      	pop	{r4, r5, r6, pc}
 80030d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80030dc:	3601      	adds	r6, #1
 80030de:	4798      	blx	r3
 80030e0:	e7ee      	b.n	80030c0 <__libc_init_array+0xc>
 80030e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80030e6:	3601      	adds	r6, #1
 80030e8:	4798      	blx	r3
 80030ea:	e7f2      	b.n	80030d2 <__libc_init_array+0x1e>
 80030ec:	08003f38 	.word	0x08003f38
 80030f0:	08003f38 	.word	0x08003f38
 80030f4:	08003f38 	.word	0x08003f38
 80030f8:	08003f3c 	.word	0x08003f3c

080030fc <__retarget_lock_init_recursive>:
 80030fc:	4770      	bx	lr

080030fe <__retarget_lock_acquire_recursive>:
 80030fe:	4770      	bx	lr

08003100 <__retarget_lock_release_recursive>:
 8003100:	4770      	bx	lr

08003102 <__sfputc_r>:
 8003102:	6893      	ldr	r3, [r2, #8]
 8003104:	3b01      	subs	r3, #1
 8003106:	2b00      	cmp	r3, #0
 8003108:	6093      	str	r3, [r2, #8]
 800310a:	b410      	push	{r4}
 800310c:	da08      	bge.n	8003120 <__sfputc_r+0x1e>
 800310e:	6994      	ldr	r4, [r2, #24]
 8003110:	42a3      	cmp	r3, r4
 8003112:	db01      	blt.n	8003118 <__sfputc_r+0x16>
 8003114:	290a      	cmp	r1, #10
 8003116:	d103      	bne.n	8003120 <__sfputc_r+0x1e>
 8003118:	f85d 4b04 	ldr.w	r4, [sp], #4
 800311c:	f000 bc61 	b.w	80039e2 <__swbuf_r>
 8003120:	6813      	ldr	r3, [r2, #0]
 8003122:	1c58      	adds	r0, r3, #1
 8003124:	6010      	str	r0, [r2, #0]
 8003126:	4608      	mov	r0, r1
 8003128:	7019      	strb	r1, [r3, #0]
 800312a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800312e:	4770      	bx	lr

08003130 <__sfputs_r>:
 8003130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003132:	4606      	mov	r6, r0
 8003134:	460f      	mov	r7, r1
 8003136:	4614      	mov	r4, r2
 8003138:	18d5      	adds	r5, r2, r3
 800313a:	42ac      	cmp	r4, r5
 800313c:	d101      	bne.n	8003142 <__sfputs_r+0x12>
 800313e:	2000      	movs	r0, #0
 8003140:	e007      	b.n	8003152 <__sfputs_r+0x22>
 8003142:	463a      	mov	r2, r7
 8003144:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003148:	4630      	mov	r0, r6
 800314a:	f7ff ffda 	bl	8003102 <__sfputc_r>
 800314e:	1c43      	adds	r3, r0, #1
 8003150:	d1f3      	bne.n	800313a <__sfputs_r+0xa>
 8003152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003154 <_vfiprintf_r>:
 8003154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003158:	460d      	mov	r5, r1
 800315a:	b09d      	sub	sp, #116	; 0x74
 800315c:	4614      	mov	r4, r2
 800315e:	4698      	mov	r8, r3
 8003160:	4606      	mov	r6, r0
 8003162:	b118      	cbz	r0, 800316c <_vfiprintf_r+0x18>
 8003164:	6a03      	ldr	r3, [r0, #32]
 8003166:	b90b      	cbnz	r3, 800316c <_vfiprintf_r+0x18>
 8003168:	f7ff ff46 	bl	8002ff8 <__sinit>
 800316c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800316e:	07d9      	lsls	r1, r3, #31
 8003170:	d405      	bmi.n	800317e <_vfiprintf_r+0x2a>
 8003172:	89ab      	ldrh	r3, [r5, #12]
 8003174:	059a      	lsls	r2, r3, #22
 8003176:	d402      	bmi.n	800317e <_vfiprintf_r+0x2a>
 8003178:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800317a:	f7ff ffc0 	bl	80030fe <__retarget_lock_acquire_recursive>
 800317e:	89ab      	ldrh	r3, [r5, #12]
 8003180:	071b      	lsls	r3, r3, #28
 8003182:	d501      	bpl.n	8003188 <_vfiprintf_r+0x34>
 8003184:	692b      	ldr	r3, [r5, #16]
 8003186:	b99b      	cbnz	r3, 80031b0 <_vfiprintf_r+0x5c>
 8003188:	4629      	mov	r1, r5
 800318a:	4630      	mov	r0, r6
 800318c:	f000 fc66 	bl	8003a5c <__swsetup_r>
 8003190:	b170      	cbz	r0, 80031b0 <_vfiprintf_r+0x5c>
 8003192:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003194:	07dc      	lsls	r4, r3, #31
 8003196:	d504      	bpl.n	80031a2 <_vfiprintf_r+0x4e>
 8003198:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800319c:	b01d      	add	sp, #116	; 0x74
 800319e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031a2:	89ab      	ldrh	r3, [r5, #12]
 80031a4:	0598      	lsls	r0, r3, #22
 80031a6:	d4f7      	bmi.n	8003198 <_vfiprintf_r+0x44>
 80031a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80031aa:	f7ff ffa9 	bl	8003100 <__retarget_lock_release_recursive>
 80031ae:	e7f3      	b.n	8003198 <_vfiprintf_r+0x44>
 80031b0:	2300      	movs	r3, #0
 80031b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80031b6:	f04f 0901 	mov.w	r9, #1
 80031ba:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 8003374 <_vfiprintf_r+0x220>
 80031be:	9309      	str	r3, [sp, #36]	; 0x24
 80031c0:	2320      	movs	r3, #32
 80031c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80031c6:	2330      	movs	r3, #48	; 0x30
 80031c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80031cc:	4623      	mov	r3, r4
 80031ce:	469a      	mov	sl, r3
 80031d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80031d4:	b10a      	cbz	r2, 80031da <_vfiprintf_r+0x86>
 80031d6:	2a25      	cmp	r2, #37	; 0x25
 80031d8:	d1f9      	bne.n	80031ce <_vfiprintf_r+0x7a>
 80031da:	ebba 0b04 	subs.w	fp, sl, r4
 80031de:	d00b      	beq.n	80031f8 <_vfiprintf_r+0xa4>
 80031e0:	465b      	mov	r3, fp
 80031e2:	4622      	mov	r2, r4
 80031e4:	4629      	mov	r1, r5
 80031e6:	4630      	mov	r0, r6
 80031e8:	f7ff ffa2 	bl	8003130 <__sfputs_r>
 80031ec:	3001      	adds	r0, #1
 80031ee:	f000 80a9 	beq.w	8003344 <_vfiprintf_r+0x1f0>
 80031f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80031f4:	445a      	add	r2, fp
 80031f6:	9209      	str	r2, [sp, #36]	; 0x24
 80031f8:	f89a 3000 	ldrb.w	r3, [sl]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f000 80a1 	beq.w	8003344 <_vfiprintf_r+0x1f0>
 8003202:	2300      	movs	r3, #0
 8003204:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003208:	f10a 0a01 	add.w	sl, sl, #1
 800320c:	9304      	str	r3, [sp, #16]
 800320e:	9307      	str	r3, [sp, #28]
 8003210:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003214:	931a      	str	r3, [sp, #104]	; 0x68
 8003216:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800321a:	4654      	mov	r4, sl
 800321c:	2205      	movs	r2, #5
 800321e:	4855      	ldr	r0, [pc, #340]	; (8003374 <_vfiprintf_r+0x220>)
 8003220:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003224:	f000 fd80 	bl	8003d28 <memchr>
 8003228:	9a04      	ldr	r2, [sp, #16]
 800322a:	b9d8      	cbnz	r0, 8003264 <_vfiprintf_r+0x110>
 800322c:	06d1      	lsls	r1, r2, #27
 800322e:	bf44      	itt	mi
 8003230:	2320      	movmi	r3, #32
 8003232:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003236:	0713      	lsls	r3, r2, #28
 8003238:	bf44      	itt	mi
 800323a:	232b      	movmi	r3, #43	; 0x2b
 800323c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003240:	f89a 3000 	ldrb.w	r3, [sl]
 8003244:	2b2a      	cmp	r3, #42	; 0x2a
 8003246:	d015      	beq.n	8003274 <_vfiprintf_r+0x120>
 8003248:	9a07      	ldr	r2, [sp, #28]
 800324a:	4654      	mov	r4, sl
 800324c:	2000      	movs	r0, #0
 800324e:	f04f 0c0a 	mov.w	ip, #10
 8003252:	4621      	mov	r1, r4
 8003254:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003258:	3b30      	subs	r3, #48	; 0x30
 800325a:	2b09      	cmp	r3, #9
 800325c:	d94d      	bls.n	80032fa <_vfiprintf_r+0x1a6>
 800325e:	b1b0      	cbz	r0, 800328e <_vfiprintf_r+0x13a>
 8003260:	9207      	str	r2, [sp, #28]
 8003262:	e014      	b.n	800328e <_vfiprintf_r+0x13a>
 8003264:	eba0 0308 	sub.w	r3, r0, r8
 8003268:	46a2      	mov	sl, r4
 800326a:	fa09 f303 	lsl.w	r3, r9, r3
 800326e:	4313      	orrs	r3, r2
 8003270:	9304      	str	r3, [sp, #16]
 8003272:	e7d2      	b.n	800321a <_vfiprintf_r+0xc6>
 8003274:	9b03      	ldr	r3, [sp, #12]
 8003276:	1d19      	adds	r1, r3, #4
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	9103      	str	r1, [sp, #12]
 800327e:	bfbb      	ittet	lt
 8003280:	425b      	neglt	r3, r3
 8003282:	f042 0202 	orrlt.w	r2, r2, #2
 8003286:	9307      	strge	r3, [sp, #28]
 8003288:	9307      	strlt	r3, [sp, #28]
 800328a:	bfb8      	it	lt
 800328c:	9204      	strlt	r2, [sp, #16]
 800328e:	7823      	ldrb	r3, [r4, #0]
 8003290:	2b2e      	cmp	r3, #46	; 0x2e
 8003292:	d10c      	bne.n	80032ae <_vfiprintf_r+0x15a>
 8003294:	7863      	ldrb	r3, [r4, #1]
 8003296:	2b2a      	cmp	r3, #42	; 0x2a
 8003298:	d134      	bne.n	8003304 <_vfiprintf_r+0x1b0>
 800329a:	9b03      	ldr	r3, [sp, #12]
 800329c:	3402      	adds	r4, #2
 800329e:	1d1a      	adds	r2, r3, #4
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	9203      	str	r2, [sp, #12]
 80032a6:	bfb8      	it	lt
 80032a8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80032ac:	9305      	str	r3, [sp, #20]
 80032ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8003384 <_vfiprintf_r+0x230>
 80032b2:	2203      	movs	r2, #3
 80032b4:	7821      	ldrb	r1, [r4, #0]
 80032b6:	4650      	mov	r0, sl
 80032b8:	f000 fd36 	bl	8003d28 <memchr>
 80032bc:	b138      	cbz	r0, 80032ce <_vfiprintf_r+0x17a>
 80032be:	eba0 000a 	sub.w	r0, r0, sl
 80032c2:	2240      	movs	r2, #64	; 0x40
 80032c4:	9b04      	ldr	r3, [sp, #16]
 80032c6:	3401      	adds	r4, #1
 80032c8:	4082      	lsls	r2, r0
 80032ca:	4313      	orrs	r3, r2
 80032cc:	9304      	str	r3, [sp, #16]
 80032ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032d2:	2206      	movs	r2, #6
 80032d4:	4828      	ldr	r0, [pc, #160]	; (8003378 <_vfiprintf_r+0x224>)
 80032d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80032da:	f000 fd25 	bl	8003d28 <memchr>
 80032de:	2800      	cmp	r0, #0
 80032e0:	d03f      	beq.n	8003362 <_vfiprintf_r+0x20e>
 80032e2:	4b26      	ldr	r3, [pc, #152]	; (800337c <_vfiprintf_r+0x228>)
 80032e4:	bb1b      	cbnz	r3, 800332e <_vfiprintf_r+0x1da>
 80032e6:	9b03      	ldr	r3, [sp, #12]
 80032e8:	3307      	adds	r3, #7
 80032ea:	f023 0307 	bic.w	r3, r3, #7
 80032ee:	3308      	adds	r3, #8
 80032f0:	9303      	str	r3, [sp, #12]
 80032f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032f4:	443b      	add	r3, r7
 80032f6:	9309      	str	r3, [sp, #36]	; 0x24
 80032f8:	e768      	b.n	80031cc <_vfiprintf_r+0x78>
 80032fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80032fe:	460c      	mov	r4, r1
 8003300:	2001      	movs	r0, #1
 8003302:	e7a6      	b.n	8003252 <_vfiprintf_r+0xfe>
 8003304:	2300      	movs	r3, #0
 8003306:	3401      	adds	r4, #1
 8003308:	f04f 0c0a 	mov.w	ip, #10
 800330c:	4619      	mov	r1, r3
 800330e:	9305      	str	r3, [sp, #20]
 8003310:	4620      	mov	r0, r4
 8003312:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003316:	3a30      	subs	r2, #48	; 0x30
 8003318:	2a09      	cmp	r2, #9
 800331a:	d903      	bls.n	8003324 <_vfiprintf_r+0x1d0>
 800331c:	2b00      	cmp	r3, #0
 800331e:	d0c6      	beq.n	80032ae <_vfiprintf_r+0x15a>
 8003320:	9105      	str	r1, [sp, #20]
 8003322:	e7c4      	b.n	80032ae <_vfiprintf_r+0x15a>
 8003324:	fb0c 2101 	mla	r1, ip, r1, r2
 8003328:	4604      	mov	r4, r0
 800332a:	2301      	movs	r3, #1
 800332c:	e7f0      	b.n	8003310 <_vfiprintf_r+0x1bc>
 800332e:	ab03      	add	r3, sp, #12
 8003330:	462a      	mov	r2, r5
 8003332:	a904      	add	r1, sp, #16
 8003334:	4630      	mov	r0, r6
 8003336:	9300      	str	r3, [sp, #0]
 8003338:	4b11      	ldr	r3, [pc, #68]	; (8003380 <_vfiprintf_r+0x22c>)
 800333a:	f3af 8000 	nop.w
 800333e:	4607      	mov	r7, r0
 8003340:	1c78      	adds	r0, r7, #1
 8003342:	d1d6      	bne.n	80032f2 <_vfiprintf_r+0x19e>
 8003344:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003346:	07d9      	lsls	r1, r3, #31
 8003348:	d405      	bmi.n	8003356 <_vfiprintf_r+0x202>
 800334a:	89ab      	ldrh	r3, [r5, #12]
 800334c:	059a      	lsls	r2, r3, #22
 800334e:	d402      	bmi.n	8003356 <_vfiprintf_r+0x202>
 8003350:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003352:	f7ff fed5 	bl	8003100 <__retarget_lock_release_recursive>
 8003356:	89ab      	ldrh	r3, [r5, #12]
 8003358:	065b      	lsls	r3, r3, #25
 800335a:	f53f af1d 	bmi.w	8003198 <_vfiprintf_r+0x44>
 800335e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003360:	e71c      	b.n	800319c <_vfiprintf_r+0x48>
 8003362:	ab03      	add	r3, sp, #12
 8003364:	462a      	mov	r2, r5
 8003366:	a904      	add	r1, sp, #16
 8003368:	4630      	mov	r0, r6
 800336a:	9300      	str	r3, [sp, #0]
 800336c:	4b04      	ldr	r3, [pc, #16]	; (8003380 <_vfiprintf_r+0x22c>)
 800336e:	f000 f91d 	bl	80035ac <_printf_i>
 8003372:	e7e4      	b.n	800333e <_vfiprintf_r+0x1ea>
 8003374:	08003f04 	.word	0x08003f04
 8003378:	08003f0e 	.word	0x08003f0e
 800337c:	00000000 	.word	0x00000000
 8003380:	08003131 	.word	0x08003131
 8003384:	08003f0a 	.word	0x08003f0a

08003388 <sbrk_aligned>:
 8003388:	b570      	push	{r4, r5, r6, lr}
 800338a:	4e0e      	ldr	r6, [pc, #56]	; (80033c4 <sbrk_aligned+0x3c>)
 800338c:	460c      	mov	r4, r1
 800338e:	4605      	mov	r5, r0
 8003390:	6831      	ldr	r1, [r6, #0]
 8003392:	b911      	cbnz	r1, 800339a <sbrk_aligned+0x12>
 8003394:	f000 fca6 	bl	8003ce4 <_sbrk_r>
 8003398:	6030      	str	r0, [r6, #0]
 800339a:	4621      	mov	r1, r4
 800339c:	4628      	mov	r0, r5
 800339e:	f000 fca1 	bl	8003ce4 <_sbrk_r>
 80033a2:	1c43      	adds	r3, r0, #1
 80033a4:	d00a      	beq.n	80033bc <sbrk_aligned+0x34>
 80033a6:	1cc4      	adds	r4, r0, #3
 80033a8:	f024 0403 	bic.w	r4, r4, #3
 80033ac:	42a0      	cmp	r0, r4
 80033ae:	d007      	beq.n	80033c0 <sbrk_aligned+0x38>
 80033b0:	1a21      	subs	r1, r4, r0
 80033b2:	4628      	mov	r0, r5
 80033b4:	f000 fc96 	bl	8003ce4 <_sbrk_r>
 80033b8:	3001      	adds	r0, #1
 80033ba:	d101      	bne.n	80033c0 <sbrk_aligned+0x38>
 80033bc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80033c0:	4620      	mov	r0, r4
 80033c2:	bd70      	pop	{r4, r5, r6, pc}
 80033c4:	20000520 	.word	0x20000520

080033c8 <_malloc_r>:
 80033c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033cc:	1ccd      	adds	r5, r1, #3
 80033ce:	4607      	mov	r7, r0
 80033d0:	f025 0503 	bic.w	r5, r5, #3
 80033d4:	3508      	adds	r5, #8
 80033d6:	2d0c      	cmp	r5, #12
 80033d8:	bf38      	it	cc
 80033da:	250c      	movcc	r5, #12
 80033dc:	2d00      	cmp	r5, #0
 80033de:	db01      	blt.n	80033e4 <_malloc_r+0x1c>
 80033e0:	42a9      	cmp	r1, r5
 80033e2:	d905      	bls.n	80033f0 <_malloc_r+0x28>
 80033e4:	230c      	movs	r3, #12
 80033e6:	2600      	movs	r6, #0
 80033e8:	603b      	str	r3, [r7, #0]
 80033ea:	4630      	mov	r0, r6
 80033ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80034c4 <_malloc_r+0xfc>
 80033f4:	f000 faa6 	bl	8003944 <__malloc_lock>
 80033f8:	f8d8 3000 	ldr.w	r3, [r8]
 80033fc:	461c      	mov	r4, r3
 80033fe:	bb5c      	cbnz	r4, 8003458 <_malloc_r+0x90>
 8003400:	4629      	mov	r1, r5
 8003402:	4638      	mov	r0, r7
 8003404:	f7ff ffc0 	bl	8003388 <sbrk_aligned>
 8003408:	1c43      	adds	r3, r0, #1
 800340a:	4604      	mov	r4, r0
 800340c:	d155      	bne.n	80034ba <_malloc_r+0xf2>
 800340e:	f8d8 4000 	ldr.w	r4, [r8]
 8003412:	4626      	mov	r6, r4
 8003414:	2e00      	cmp	r6, #0
 8003416:	d145      	bne.n	80034a4 <_malloc_r+0xdc>
 8003418:	2c00      	cmp	r4, #0
 800341a:	d048      	beq.n	80034ae <_malloc_r+0xe6>
 800341c:	6823      	ldr	r3, [r4, #0]
 800341e:	4631      	mov	r1, r6
 8003420:	4638      	mov	r0, r7
 8003422:	eb04 0903 	add.w	r9, r4, r3
 8003426:	f000 fc5d 	bl	8003ce4 <_sbrk_r>
 800342a:	4581      	cmp	r9, r0
 800342c:	d13f      	bne.n	80034ae <_malloc_r+0xe6>
 800342e:	6821      	ldr	r1, [r4, #0]
 8003430:	4638      	mov	r0, r7
 8003432:	1a6d      	subs	r5, r5, r1
 8003434:	4629      	mov	r1, r5
 8003436:	f7ff ffa7 	bl	8003388 <sbrk_aligned>
 800343a:	3001      	adds	r0, #1
 800343c:	d037      	beq.n	80034ae <_malloc_r+0xe6>
 800343e:	6823      	ldr	r3, [r4, #0]
 8003440:	442b      	add	r3, r5
 8003442:	6023      	str	r3, [r4, #0]
 8003444:	f8d8 3000 	ldr.w	r3, [r8]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d038      	beq.n	80034be <_malloc_r+0xf6>
 800344c:	685a      	ldr	r2, [r3, #4]
 800344e:	42a2      	cmp	r2, r4
 8003450:	d12b      	bne.n	80034aa <_malloc_r+0xe2>
 8003452:	2200      	movs	r2, #0
 8003454:	605a      	str	r2, [r3, #4]
 8003456:	e00f      	b.n	8003478 <_malloc_r+0xb0>
 8003458:	6822      	ldr	r2, [r4, #0]
 800345a:	1b52      	subs	r2, r2, r5
 800345c:	d41f      	bmi.n	800349e <_malloc_r+0xd6>
 800345e:	2a0b      	cmp	r2, #11
 8003460:	d917      	bls.n	8003492 <_malloc_r+0xca>
 8003462:	1961      	adds	r1, r4, r5
 8003464:	42a3      	cmp	r3, r4
 8003466:	6025      	str	r5, [r4, #0]
 8003468:	bf18      	it	ne
 800346a:	6059      	strne	r1, [r3, #4]
 800346c:	6863      	ldr	r3, [r4, #4]
 800346e:	bf08      	it	eq
 8003470:	f8c8 1000 	streq.w	r1, [r8]
 8003474:	5162      	str	r2, [r4, r5]
 8003476:	604b      	str	r3, [r1, #4]
 8003478:	f104 060b 	add.w	r6, r4, #11
 800347c:	4638      	mov	r0, r7
 800347e:	f000 fa67 	bl	8003950 <__malloc_unlock>
 8003482:	1d23      	adds	r3, r4, #4
 8003484:	f026 0607 	bic.w	r6, r6, #7
 8003488:	1af2      	subs	r2, r6, r3
 800348a:	d0ae      	beq.n	80033ea <_malloc_r+0x22>
 800348c:	1b9b      	subs	r3, r3, r6
 800348e:	50a3      	str	r3, [r4, r2]
 8003490:	e7ab      	b.n	80033ea <_malloc_r+0x22>
 8003492:	42a3      	cmp	r3, r4
 8003494:	6862      	ldr	r2, [r4, #4]
 8003496:	d1dd      	bne.n	8003454 <_malloc_r+0x8c>
 8003498:	f8c8 2000 	str.w	r2, [r8]
 800349c:	e7ec      	b.n	8003478 <_malloc_r+0xb0>
 800349e:	4623      	mov	r3, r4
 80034a0:	6864      	ldr	r4, [r4, #4]
 80034a2:	e7ac      	b.n	80033fe <_malloc_r+0x36>
 80034a4:	4634      	mov	r4, r6
 80034a6:	6876      	ldr	r6, [r6, #4]
 80034a8:	e7b4      	b.n	8003414 <_malloc_r+0x4c>
 80034aa:	4613      	mov	r3, r2
 80034ac:	e7cc      	b.n	8003448 <_malloc_r+0x80>
 80034ae:	230c      	movs	r3, #12
 80034b0:	4638      	mov	r0, r7
 80034b2:	603b      	str	r3, [r7, #0]
 80034b4:	f000 fa4c 	bl	8003950 <__malloc_unlock>
 80034b8:	e797      	b.n	80033ea <_malloc_r+0x22>
 80034ba:	6025      	str	r5, [r4, #0]
 80034bc:	e7dc      	b.n	8003478 <_malloc_r+0xb0>
 80034be:	605b      	str	r3, [r3, #4]
 80034c0:	deff      	udf	#255	; 0xff
 80034c2:	bf00      	nop
 80034c4:	2000051c 	.word	0x2000051c

080034c8 <_printf_common>:
 80034c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034cc:	4616      	mov	r6, r2
 80034ce:	4699      	mov	r9, r3
 80034d0:	688a      	ldr	r2, [r1, #8]
 80034d2:	4607      	mov	r7, r0
 80034d4:	690b      	ldr	r3, [r1, #16]
 80034d6:	460c      	mov	r4, r1
 80034d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80034dc:	4293      	cmp	r3, r2
 80034de:	bfb8      	it	lt
 80034e0:	4613      	movlt	r3, r2
 80034e2:	6033      	str	r3, [r6, #0]
 80034e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80034e8:	b10a      	cbz	r2, 80034ee <_printf_common+0x26>
 80034ea:	3301      	adds	r3, #1
 80034ec:	6033      	str	r3, [r6, #0]
 80034ee:	6823      	ldr	r3, [r4, #0]
 80034f0:	0699      	lsls	r1, r3, #26
 80034f2:	bf42      	ittt	mi
 80034f4:	6833      	ldrmi	r3, [r6, #0]
 80034f6:	3302      	addmi	r3, #2
 80034f8:	6033      	strmi	r3, [r6, #0]
 80034fa:	6825      	ldr	r5, [r4, #0]
 80034fc:	f015 0506 	ands.w	r5, r5, #6
 8003500:	d106      	bne.n	8003510 <_printf_common+0x48>
 8003502:	f104 0a19 	add.w	sl, r4, #25
 8003506:	68e3      	ldr	r3, [r4, #12]
 8003508:	6832      	ldr	r2, [r6, #0]
 800350a:	1a9b      	subs	r3, r3, r2
 800350c:	42ab      	cmp	r3, r5
 800350e:	dc2b      	bgt.n	8003568 <_printf_common+0xa0>
 8003510:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003514:	1e13      	subs	r3, r2, #0
 8003516:	6822      	ldr	r2, [r4, #0]
 8003518:	bf18      	it	ne
 800351a:	2301      	movne	r3, #1
 800351c:	0692      	lsls	r2, r2, #26
 800351e:	d430      	bmi.n	8003582 <_printf_common+0xba>
 8003520:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003524:	4649      	mov	r1, r9
 8003526:	4638      	mov	r0, r7
 8003528:	47c0      	blx	r8
 800352a:	3001      	adds	r0, #1
 800352c:	d023      	beq.n	8003576 <_printf_common+0xae>
 800352e:	6823      	ldr	r3, [r4, #0]
 8003530:	341a      	adds	r4, #26
 8003532:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8003536:	f003 0306 	and.w	r3, r3, #6
 800353a:	2b04      	cmp	r3, #4
 800353c:	bf0a      	itet	eq
 800353e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8003542:	2500      	movne	r5, #0
 8003544:	6833      	ldreq	r3, [r6, #0]
 8003546:	f04f 0600 	mov.w	r6, #0
 800354a:	bf08      	it	eq
 800354c:	1aed      	subeq	r5, r5, r3
 800354e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003552:	bf08      	it	eq
 8003554:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003558:	4293      	cmp	r3, r2
 800355a:	bfc4      	itt	gt
 800355c:	1a9b      	subgt	r3, r3, r2
 800355e:	18ed      	addgt	r5, r5, r3
 8003560:	42b5      	cmp	r5, r6
 8003562:	d11a      	bne.n	800359a <_printf_common+0xd2>
 8003564:	2000      	movs	r0, #0
 8003566:	e008      	b.n	800357a <_printf_common+0xb2>
 8003568:	2301      	movs	r3, #1
 800356a:	4652      	mov	r2, sl
 800356c:	4649      	mov	r1, r9
 800356e:	4638      	mov	r0, r7
 8003570:	47c0      	blx	r8
 8003572:	3001      	adds	r0, #1
 8003574:	d103      	bne.n	800357e <_printf_common+0xb6>
 8003576:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800357a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800357e:	3501      	adds	r5, #1
 8003580:	e7c1      	b.n	8003506 <_printf_common+0x3e>
 8003582:	18e1      	adds	r1, r4, r3
 8003584:	1c5a      	adds	r2, r3, #1
 8003586:	2030      	movs	r0, #48	; 0x30
 8003588:	3302      	adds	r3, #2
 800358a:	4422      	add	r2, r4
 800358c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003590:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003594:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003598:	e7c2      	b.n	8003520 <_printf_common+0x58>
 800359a:	2301      	movs	r3, #1
 800359c:	4622      	mov	r2, r4
 800359e:	4649      	mov	r1, r9
 80035a0:	4638      	mov	r0, r7
 80035a2:	47c0      	blx	r8
 80035a4:	3001      	adds	r0, #1
 80035a6:	d0e6      	beq.n	8003576 <_printf_common+0xae>
 80035a8:	3601      	adds	r6, #1
 80035aa:	e7d9      	b.n	8003560 <_printf_common+0x98>

080035ac <_printf_i>:
 80035ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80035b0:	7e0f      	ldrb	r7, [r1, #24]
 80035b2:	4691      	mov	r9, r2
 80035b4:	4680      	mov	r8, r0
 80035b6:	460c      	mov	r4, r1
 80035b8:	2f78      	cmp	r7, #120	; 0x78
 80035ba:	469a      	mov	sl, r3
 80035bc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80035be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80035c2:	d807      	bhi.n	80035d4 <_printf_i+0x28>
 80035c4:	2f62      	cmp	r7, #98	; 0x62
 80035c6:	d80a      	bhi.n	80035de <_printf_i+0x32>
 80035c8:	2f00      	cmp	r7, #0
 80035ca:	f000 80d3 	beq.w	8003774 <_printf_i+0x1c8>
 80035ce:	2f58      	cmp	r7, #88	; 0x58
 80035d0:	f000 80bf 	beq.w	8003752 <_printf_i+0x1a6>
 80035d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80035dc:	e03a      	b.n	8003654 <_printf_i+0xa8>
 80035de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80035e2:	2b15      	cmp	r3, #21
 80035e4:	d8f6      	bhi.n	80035d4 <_printf_i+0x28>
 80035e6:	a101      	add	r1, pc, #4	; (adr r1, 80035ec <_printf_i+0x40>)
 80035e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80035ec:	08003645 	.word	0x08003645
 80035f0:	08003659 	.word	0x08003659
 80035f4:	080035d5 	.word	0x080035d5
 80035f8:	080035d5 	.word	0x080035d5
 80035fc:	080035d5 	.word	0x080035d5
 8003600:	080035d5 	.word	0x080035d5
 8003604:	08003659 	.word	0x08003659
 8003608:	080035d5 	.word	0x080035d5
 800360c:	080035d5 	.word	0x080035d5
 8003610:	080035d5 	.word	0x080035d5
 8003614:	080035d5 	.word	0x080035d5
 8003618:	0800375b 	.word	0x0800375b
 800361c:	08003685 	.word	0x08003685
 8003620:	08003717 	.word	0x08003717
 8003624:	080035d5 	.word	0x080035d5
 8003628:	080035d5 	.word	0x080035d5
 800362c:	0800377d 	.word	0x0800377d
 8003630:	080035d5 	.word	0x080035d5
 8003634:	08003685 	.word	0x08003685
 8003638:	080035d5 	.word	0x080035d5
 800363c:	080035d5 	.word	0x080035d5
 8003640:	0800371f 	.word	0x0800371f
 8003644:	682b      	ldr	r3, [r5, #0]
 8003646:	1d1a      	adds	r2, r3, #4
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	602a      	str	r2, [r5, #0]
 800364c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003650:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003654:	2301      	movs	r3, #1
 8003656:	e09e      	b.n	8003796 <_printf_i+0x1ea>
 8003658:	6820      	ldr	r0, [r4, #0]
 800365a:	682b      	ldr	r3, [r5, #0]
 800365c:	0607      	lsls	r7, r0, #24
 800365e:	f103 0104 	add.w	r1, r3, #4
 8003662:	6029      	str	r1, [r5, #0]
 8003664:	d501      	bpl.n	800366a <_printf_i+0xbe>
 8003666:	681e      	ldr	r6, [r3, #0]
 8003668:	e003      	b.n	8003672 <_printf_i+0xc6>
 800366a:	0646      	lsls	r6, r0, #25
 800366c:	d5fb      	bpl.n	8003666 <_printf_i+0xba>
 800366e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003672:	2e00      	cmp	r6, #0
 8003674:	da03      	bge.n	800367e <_printf_i+0xd2>
 8003676:	232d      	movs	r3, #45	; 0x2d
 8003678:	4276      	negs	r6, r6
 800367a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800367e:	4859      	ldr	r0, [pc, #356]	; (80037e4 <_printf_i+0x238>)
 8003680:	230a      	movs	r3, #10
 8003682:	e012      	b.n	80036aa <_printf_i+0xfe>
 8003684:	682b      	ldr	r3, [r5, #0]
 8003686:	6820      	ldr	r0, [r4, #0]
 8003688:	1d19      	adds	r1, r3, #4
 800368a:	6029      	str	r1, [r5, #0]
 800368c:	0605      	lsls	r5, r0, #24
 800368e:	d501      	bpl.n	8003694 <_printf_i+0xe8>
 8003690:	681e      	ldr	r6, [r3, #0]
 8003692:	e002      	b.n	800369a <_printf_i+0xee>
 8003694:	0641      	lsls	r1, r0, #25
 8003696:	d5fb      	bpl.n	8003690 <_printf_i+0xe4>
 8003698:	881e      	ldrh	r6, [r3, #0]
 800369a:	2f6f      	cmp	r7, #111	; 0x6f
 800369c:	4851      	ldr	r0, [pc, #324]	; (80037e4 <_printf_i+0x238>)
 800369e:	bf0c      	ite	eq
 80036a0:	2308      	moveq	r3, #8
 80036a2:	230a      	movne	r3, #10
 80036a4:	2100      	movs	r1, #0
 80036a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80036aa:	6865      	ldr	r5, [r4, #4]
 80036ac:	2d00      	cmp	r5, #0
 80036ae:	60a5      	str	r5, [r4, #8]
 80036b0:	bfa2      	ittt	ge
 80036b2:	6821      	ldrge	r1, [r4, #0]
 80036b4:	f021 0104 	bicge.w	r1, r1, #4
 80036b8:	6021      	strge	r1, [r4, #0]
 80036ba:	b90e      	cbnz	r6, 80036c0 <_printf_i+0x114>
 80036bc:	2d00      	cmp	r5, #0
 80036be:	d04a      	beq.n	8003756 <_printf_i+0x1aa>
 80036c0:	4615      	mov	r5, r2
 80036c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80036c6:	fb03 6711 	mls	r7, r3, r1, r6
 80036ca:	5dc7      	ldrb	r7, [r0, r7]
 80036cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80036d0:	4637      	mov	r7, r6
 80036d2:	460e      	mov	r6, r1
 80036d4:	42bb      	cmp	r3, r7
 80036d6:	d9f4      	bls.n	80036c2 <_printf_i+0x116>
 80036d8:	2b08      	cmp	r3, #8
 80036da:	d10b      	bne.n	80036f4 <_printf_i+0x148>
 80036dc:	6823      	ldr	r3, [r4, #0]
 80036de:	07de      	lsls	r6, r3, #31
 80036e0:	d508      	bpl.n	80036f4 <_printf_i+0x148>
 80036e2:	6923      	ldr	r3, [r4, #16]
 80036e4:	6861      	ldr	r1, [r4, #4]
 80036e6:	4299      	cmp	r1, r3
 80036e8:	bfde      	ittt	le
 80036ea:	2330      	movle	r3, #48	; 0x30
 80036ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80036f0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80036f4:	1b52      	subs	r2, r2, r5
 80036f6:	6122      	str	r2, [r4, #16]
 80036f8:	464b      	mov	r3, r9
 80036fa:	aa03      	add	r2, sp, #12
 80036fc:	4621      	mov	r1, r4
 80036fe:	4640      	mov	r0, r8
 8003700:	f8cd a000 	str.w	sl, [sp]
 8003704:	f7ff fee0 	bl	80034c8 <_printf_common>
 8003708:	3001      	adds	r0, #1
 800370a:	d149      	bne.n	80037a0 <_printf_i+0x1f4>
 800370c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003710:	b004      	add	sp, #16
 8003712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003716:	6823      	ldr	r3, [r4, #0]
 8003718:	f043 0320 	orr.w	r3, r3, #32
 800371c:	6023      	str	r3, [r4, #0]
 800371e:	2778      	movs	r7, #120	; 0x78
 8003720:	4831      	ldr	r0, [pc, #196]	; (80037e8 <_printf_i+0x23c>)
 8003722:	6823      	ldr	r3, [r4, #0]
 8003724:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003728:	061f      	lsls	r7, r3, #24
 800372a:	6829      	ldr	r1, [r5, #0]
 800372c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003730:	d402      	bmi.n	8003738 <_printf_i+0x18c>
 8003732:	065f      	lsls	r7, r3, #25
 8003734:	bf48      	it	mi
 8003736:	b2b6      	uxthmi	r6, r6
 8003738:	07df      	lsls	r7, r3, #31
 800373a:	6029      	str	r1, [r5, #0]
 800373c:	bf44      	itt	mi
 800373e:	f043 0320 	orrmi.w	r3, r3, #32
 8003742:	6023      	strmi	r3, [r4, #0]
 8003744:	b91e      	cbnz	r6, 800374e <_printf_i+0x1a2>
 8003746:	6823      	ldr	r3, [r4, #0]
 8003748:	f023 0320 	bic.w	r3, r3, #32
 800374c:	6023      	str	r3, [r4, #0]
 800374e:	2310      	movs	r3, #16
 8003750:	e7a8      	b.n	80036a4 <_printf_i+0xf8>
 8003752:	4824      	ldr	r0, [pc, #144]	; (80037e4 <_printf_i+0x238>)
 8003754:	e7e5      	b.n	8003722 <_printf_i+0x176>
 8003756:	4615      	mov	r5, r2
 8003758:	e7be      	b.n	80036d8 <_printf_i+0x12c>
 800375a:	682b      	ldr	r3, [r5, #0]
 800375c:	6826      	ldr	r6, [r4, #0]
 800375e:	1d18      	adds	r0, r3, #4
 8003760:	6961      	ldr	r1, [r4, #20]
 8003762:	6028      	str	r0, [r5, #0]
 8003764:	0635      	lsls	r5, r6, #24
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	d501      	bpl.n	800376e <_printf_i+0x1c2>
 800376a:	6019      	str	r1, [r3, #0]
 800376c:	e002      	b.n	8003774 <_printf_i+0x1c8>
 800376e:	0670      	lsls	r0, r6, #25
 8003770:	d5fb      	bpl.n	800376a <_printf_i+0x1be>
 8003772:	8019      	strh	r1, [r3, #0]
 8003774:	2300      	movs	r3, #0
 8003776:	4615      	mov	r5, r2
 8003778:	6123      	str	r3, [r4, #16]
 800377a:	e7bd      	b.n	80036f8 <_printf_i+0x14c>
 800377c:	682b      	ldr	r3, [r5, #0]
 800377e:	2100      	movs	r1, #0
 8003780:	1d1a      	adds	r2, r3, #4
 8003782:	602a      	str	r2, [r5, #0]
 8003784:	681d      	ldr	r5, [r3, #0]
 8003786:	6862      	ldr	r2, [r4, #4]
 8003788:	4628      	mov	r0, r5
 800378a:	f000 facd 	bl	8003d28 <memchr>
 800378e:	b108      	cbz	r0, 8003794 <_printf_i+0x1e8>
 8003790:	1b40      	subs	r0, r0, r5
 8003792:	6060      	str	r0, [r4, #4]
 8003794:	6863      	ldr	r3, [r4, #4]
 8003796:	6123      	str	r3, [r4, #16]
 8003798:	2300      	movs	r3, #0
 800379a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800379e:	e7ab      	b.n	80036f8 <_printf_i+0x14c>
 80037a0:	6923      	ldr	r3, [r4, #16]
 80037a2:	462a      	mov	r2, r5
 80037a4:	4649      	mov	r1, r9
 80037a6:	4640      	mov	r0, r8
 80037a8:	47d0      	blx	sl
 80037aa:	3001      	adds	r0, #1
 80037ac:	d0ae      	beq.n	800370c <_printf_i+0x160>
 80037ae:	6823      	ldr	r3, [r4, #0]
 80037b0:	079b      	lsls	r3, r3, #30
 80037b2:	d413      	bmi.n	80037dc <_printf_i+0x230>
 80037b4:	68e0      	ldr	r0, [r4, #12]
 80037b6:	9b03      	ldr	r3, [sp, #12]
 80037b8:	4298      	cmp	r0, r3
 80037ba:	bfb8      	it	lt
 80037bc:	4618      	movlt	r0, r3
 80037be:	e7a7      	b.n	8003710 <_printf_i+0x164>
 80037c0:	2301      	movs	r3, #1
 80037c2:	4632      	mov	r2, r6
 80037c4:	4649      	mov	r1, r9
 80037c6:	4640      	mov	r0, r8
 80037c8:	47d0      	blx	sl
 80037ca:	3001      	adds	r0, #1
 80037cc:	d09e      	beq.n	800370c <_printf_i+0x160>
 80037ce:	3501      	adds	r5, #1
 80037d0:	68e3      	ldr	r3, [r4, #12]
 80037d2:	9903      	ldr	r1, [sp, #12]
 80037d4:	1a5b      	subs	r3, r3, r1
 80037d6:	42ab      	cmp	r3, r5
 80037d8:	dcf2      	bgt.n	80037c0 <_printf_i+0x214>
 80037da:	e7eb      	b.n	80037b4 <_printf_i+0x208>
 80037dc:	2500      	movs	r5, #0
 80037de:	f104 0619 	add.w	r6, r4, #25
 80037e2:	e7f5      	b.n	80037d0 <_printf_i+0x224>
 80037e4:	08003f15 	.word	0x08003f15
 80037e8:	08003f26 	.word	0x08003f26

080037ec <__sflush_r>:
 80037ec:	898a      	ldrh	r2, [r1, #12]
 80037ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037f2:	4605      	mov	r5, r0
 80037f4:	0710      	lsls	r0, r2, #28
 80037f6:	460c      	mov	r4, r1
 80037f8:	d458      	bmi.n	80038ac <__sflush_r+0xc0>
 80037fa:	684b      	ldr	r3, [r1, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	dc05      	bgt.n	800380c <__sflush_r+0x20>
 8003800:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003802:	2b00      	cmp	r3, #0
 8003804:	dc02      	bgt.n	800380c <__sflush_r+0x20>
 8003806:	2000      	movs	r0, #0
 8003808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800380c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800380e:	2e00      	cmp	r6, #0
 8003810:	d0f9      	beq.n	8003806 <__sflush_r+0x1a>
 8003812:	2300      	movs	r3, #0
 8003814:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003818:	682f      	ldr	r7, [r5, #0]
 800381a:	6a21      	ldr	r1, [r4, #32]
 800381c:	602b      	str	r3, [r5, #0]
 800381e:	d032      	beq.n	8003886 <__sflush_r+0x9a>
 8003820:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003822:	89a3      	ldrh	r3, [r4, #12]
 8003824:	075a      	lsls	r2, r3, #29
 8003826:	d505      	bpl.n	8003834 <__sflush_r+0x48>
 8003828:	6863      	ldr	r3, [r4, #4]
 800382a:	1ac0      	subs	r0, r0, r3
 800382c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800382e:	b10b      	cbz	r3, 8003834 <__sflush_r+0x48>
 8003830:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003832:	1ac0      	subs	r0, r0, r3
 8003834:	2300      	movs	r3, #0
 8003836:	4602      	mov	r2, r0
 8003838:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800383a:	4628      	mov	r0, r5
 800383c:	6a21      	ldr	r1, [r4, #32]
 800383e:	47b0      	blx	r6
 8003840:	1c43      	adds	r3, r0, #1
 8003842:	89a3      	ldrh	r3, [r4, #12]
 8003844:	d106      	bne.n	8003854 <__sflush_r+0x68>
 8003846:	6829      	ldr	r1, [r5, #0]
 8003848:	291d      	cmp	r1, #29
 800384a:	d82b      	bhi.n	80038a4 <__sflush_r+0xb8>
 800384c:	4a28      	ldr	r2, [pc, #160]	; (80038f0 <__sflush_r+0x104>)
 800384e:	410a      	asrs	r2, r1
 8003850:	07d6      	lsls	r6, r2, #31
 8003852:	d427      	bmi.n	80038a4 <__sflush_r+0xb8>
 8003854:	2200      	movs	r2, #0
 8003856:	04d9      	lsls	r1, r3, #19
 8003858:	6062      	str	r2, [r4, #4]
 800385a:	6922      	ldr	r2, [r4, #16]
 800385c:	6022      	str	r2, [r4, #0]
 800385e:	d504      	bpl.n	800386a <__sflush_r+0x7e>
 8003860:	1c42      	adds	r2, r0, #1
 8003862:	d101      	bne.n	8003868 <__sflush_r+0x7c>
 8003864:	682b      	ldr	r3, [r5, #0]
 8003866:	b903      	cbnz	r3, 800386a <__sflush_r+0x7e>
 8003868:	6560      	str	r0, [r4, #84]	; 0x54
 800386a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800386c:	602f      	str	r7, [r5, #0]
 800386e:	2900      	cmp	r1, #0
 8003870:	d0c9      	beq.n	8003806 <__sflush_r+0x1a>
 8003872:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003876:	4299      	cmp	r1, r3
 8003878:	d002      	beq.n	8003880 <__sflush_r+0x94>
 800387a:	4628      	mov	r0, r5
 800387c:	f000 fa62 	bl	8003d44 <_free_r>
 8003880:	2000      	movs	r0, #0
 8003882:	6360      	str	r0, [r4, #52]	; 0x34
 8003884:	e7c0      	b.n	8003808 <__sflush_r+0x1c>
 8003886:	2301      	movs	r3, #1
 8003888:	4628      	mov	r0, r5
 800388a:	47b0      	blx	r6
 800388c:	1c41      	adds	r1, r0, #1
 800388e:	d1c8      	bne.n	8003822 <__sflush_r+0x36>
 8003890:	682b      	ldr	r3, [r5, #0]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d0c5      	beq.n	8003822 <__sflush_r+0x36>
 8003896:	2b1d      	cmp	r3, #29
 8003898:	d001      	beq.n	800389e <__sflush_r+0xb2>
 800389a:	2b16      	cmp	r3, #22
 800389c:	d101      	bne.n	80038a2 <__sflush_r+0xb6>
 800389e:	602f      	str	r7, [r5, #0]
 80038a0:	e7b1      	b.n	8003806 <__sflush_r+0x1a>
 80038a2:	89a3      	ldrh	r3, [r4, #12]
 80038a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038a8:	81a3      	strh	r3, [r4, #12]
 80038aa:	e7ad      	b.n	8003808 <__sflush_r+0x1c>
 80038ac:	690f      	ldr	r7, [r1, #16]
 80038ae:	2f00      	cmp	r7, #0
 80038b0:	d0a9      	beq.n	8003806 <__sflush_r+0x1a>
 80038b2:	0793      	lsls	r3, r2, #30
 80038b4:	680e      	ldr	r6, [r1, #0]
 80038b6:	600f      	str	r7, [r1, #0]
 80038b8:	bf0c      	ite	eq
 80038ba:	694b      	ldreq	r3, [r1, #20]
 80038bc:	2300      	movne	r3, #0
 80038be:	eba6 0807 	sub.w	r8, r6, r7
 80038c2:	608b      	str	r3, [r1, #8]
 80038c4:	f1b8 0f00 	cmp.w	r8, #0
 80038c8:	dd9d      	ble.n	8003806 <__sflush_r+0x1a>
 80038ca:	4643      	mov	r3, r8
 80038cc:	463a      	mov	r2, r7
 80038ce:	6a21      	ldr	r1, [r4, #32]
 80038d0:	4628      	mov	r0, r5
 80038d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80038d4:	47b0      	blx	r6
 80038d6:	2800      	cmp	r0, #0
 80038d8:	dc06      	bgt.n	80038e8 <__sflush_r+0xfc>
 80038da:	89a3      	ldrh	r3, [r4, #12]
 80038dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038e4:	81a3      	strh	r3, [r4, #12]
 80038e6:	e78f      	b.n	8003808 <__sflush_r+0x1c>
 80038e8:	4407      	add	r7, r0
 80038ea:	eba8 0800 	sub.w	r8, r8, r0
 80038ee:	e7e9      	b.n	80038c4 <__sflush_r+0xd8>
 80038f0:	dfbffffe 	.word	0xdfbffffe

080038f4 <_fflush_r>:
 80038f4:	b538      	push	{r3, r4, r5, lr}
 80038f6:	690b      	ldr	r3, [r1, #16]
 80038f8:	4605      	mov	r5, r0
 80038fa:	460c      	mov	r4, r1
 80038fc:	b913      	cbnz	r3, 8003904 <_fflush_r+0x10>
 80038fe:	2500      	movs	r5, #0
 8003900:	4628      	mov	r0, r5
 8003902:	bd38      	pop	{r3, r4, r5, pc}
 8003904:	b118      	cbz	r0, 800390e <_fflush_r+0x1a>
 8003906:	6a03      	ldr	r3, [r0, #32]
 8003908:	b90b      	cbnz	r3, 800390e <_fflush_r+0x1a>
 800390a:	f7ff fb75 	bl	8002ff8 <__sinit>
 800390e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d0f3      	beq.n	80038fe <_fflush_r+0xa>
 8003916:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003918:	07d0      	lsls	r0, r2, #31
 800391a:	d404      	bmi.n	8003926 <_fflush_r+0x32>
 800391c:	0599      	lsls	r1, r3, #22
 800391e:	d402      	bmi.n	8003926 <_fflush_r+0x32>
 8003920:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003922:	f7ff fbec 	bl	80030fe <__retarget_lock_acquire_recursive>
 8003926:	4628      	mov	r0, r5
 8003928:	4621      	mov	r1, r4
 800392a:	f7ff ff5f 	bl	80037ec <__sflush_r>
 800392e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003930:	4605      	mov	r5, r0
 8003932:	07da      	lsls	r2, r3, #31
 8003934:	d4e4      	bmi.n	8003900 <_fflush_r+0xc>
 8003936:	89a3      	ldrh	r3, [r4, #12]
 8003938:	059b      	lsls	r3, r3, #22
 800393a:	d4e1      	bmi.n	8003900 <_fflush_r+0xc>
 800393c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800393e:	f7ff fbdf 	bl	8003100 <__retarget_lock_release_recursive>
 8003942:	e7dd      	b.n	8003900 <_fflush_r+0xc>

08003944 <__malloc_lock>:
 8003944:	4801      	ldr	r0, [pc, #4]	; (800394c <__malloc_lock+0x8>)
 8003946:	f7ff bbda 	b.w	80030fe <__retarget_lock_acquire_recursive>
 800394a:	bf00      	nop
 800394c:	20000518 	.word	0x20000518

08003950 <__malloc_unlock>:
 8003950:	4801      	ldr	r0, [pc, #4]	; (8003958 <__malloc_unlock+0x8>)
 8003952:	f7ff bbd5 	b.w	8003100 <__retarget_lock_release_recursive>
 8003956:	bf00      	nop
 8003958:	20000518 	.word	0x20000518

0800395c <__sread>:
 800395c:	b510      	push	{r4, lr}
 800395e:	460c      	mov	r4, r1
 8003960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003964:	f000 f9ac 	bl	8003cc0 <_read_r>
 8003968:	2800      	cmp	r0, #0
 800396a:	bfab      	itete	ge
 800396c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800396e:	89a3      	ldrhlt	r3, [r4, #12]
 8003970:	181b      	addge	r3, r3, r0
 8003972:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003976:	bfac      	ite	ge
 8003978:	6563      	strge	r3, [r4, #84]	; 0x54
 800397a:	81a3      	strhlt	r3, [r4, #12]
 800397c:	bd10      	pop	{r4, pc}

0800397e <__swrite>:
 800397e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003982:	461f      	mov	r7, r3
 8003984:	898b      	ldrh	r3, [r1, #12]
 8003986:	4605      	mov	r5, r0
 8003988:	460c      	mov	r4, r1
 800398a:	05db      	lsls	r3, r3, #23
 800398c:	4616      	mov	r6, r2
 800398e:	d505      	bpl.n	800399c <__swrite+0x1e>
 8003990:	2302      	movs	r3, #2
 8003992:	2200      	movs	r2, #0
 8003994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003998:	f000 f980 	bl	8003c9c <_lseek_r>
 800399c:	89a3      	ldrh	r3, [r4, #12]
 800399e:	4632      	mov	r2, r6
 80039a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80039a4:	4628      	mov	r0, r5
 80039a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039aa:	81a3      	strh	r3, [r4, #12]
 80039ac:	463b      	mov	r3, r7
 80039ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80039b2:	f000 b9a7 	b.w	8003d04 <_write_r>

080039b6 <__sseek>:
 80039b6:	b510      	push	{r4, lr}
 80039b8:	460c      	mov	r4, r1
 80039ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039be:	f000 f96d 	bl	8003c9c <_lseek_r>
 80039c2:	1c43      	adds	r3, r0, #1
 80039c4:	89a3      	ldrh	r3, [r4, #12]
 80039c6:	bf15      	itete	ne
 80039c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80039ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80039ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80039d2:	81a3      	strheq	r3, [r4, #12]
 80039d4:	bf18      	it	ne
 80039d6:	81a3      	strhne	r3, [r4, #12]
 80039d8:	bd10      	pop	{r4, pc}

080039da <__sclose>:
 80039da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039de:	f000 b92b 	b.w	8003c38 <_close_r>

080039e2 <__swbuf_r>:
 80039e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039e4:	460e      	mov	r6, r1
 80039e6:	4614      	mov	r4, r2
 80039e8:	4605      	mov	r5, r0
 80039ea:	b118      	cbz	r0, 80039f4 <__swbuf_r+0x12>
 80039ec:	6a03      	ldr	r3, [r0, #32]
 80039ee:	b90b      	cbnz	r3, 80039f4 <__swbuf_r+0x12>
 80039f0:	f7ff fb02 	bl	8002ff8 <__sinit>
 80039f4:	69a3      	ldr	r3, [r4, #24]
 80039f6:	60a3      	str	r3, [r4, #8]
 80039f8:	89a3      	ldrh	r3, [r4, #12]
 80039fa:	071a      	lsls	r2, r3, #28
 80039fc:	d525      	bpl.n	8003a4a <__swbuf_r+0x68>
 80039fe:	6923      	ldr	r3, [r4, #16]
 8003a00:	b31b      	cbz	r3, 8003a4a <__swbuf_r+0x68>
 8003a02:	6823      	ldr	r3, [r4, #0]
 8003a04:	b2f6      	uxtb	r6, r6
 8003a06:	6922      	ldr	r2, [r4, #16]
 8003a08:	4637      	mov	r7, r6
 8003a0a:	1a98      	subs	r0, r3, r2
 8003a0c:	6963      	ldr	r3, [r4, #20]
 8003a0e:	4283      	cmp	r3, r0
 8003a10:	dc04      	bgt.n	8003a1c <__swbuf_r+0x3a>
 8003a12:	4621      	mov	r1, r4
 8003a14:	4628      	mov	r0, r5
 8003a16:	f7ff ff6d 	bl	80038f4 <_fflush_r>
 8003a1a:	b9e0      	cbnz	r0, 8003a56 <__swbuf_r+0x74>
 8003a1c:	68a3      	ldr	r3, [r4, #8]
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	60a3      	str	r3, [r4, #8]
 8003a22:	6823      	ldr	r3, [r4, #0]
 8003a24:	1c5a      	adds	r2, r3, #1
 8003a26:	6022      	str	r2, [r4, #0]
 8003a28:	701e      	strb	r6, [r3, #0]
 8003a2a:	1c43      	adds	r3, r0, #1
 8003a2c:	6962      	ldr	r2, [r4, #20]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d004      	beq.n	8003a3c <__swbuf_r+0x5a>
 8003a32:	89a3      	ldrh	r3, [r4, #12]
 8003a34:	07db      	lsls	r3, r3, #31
 8003a36:	d506      	bpl.n	8003a46 <__swbuf_r+0x64>
 8003a38:	2e0a      	cmp	r6, #10
 8003a3a:	d104      	bne.n	8003a46 <__swbuf_r+0x64>
 8003a3c:	4621      	mov	r1, r4
 8003a3e:	4628      	mov	r0, r5
 8003a40:	f7ff ff58 	bl	80038f4 <_fflush_r>
 8003a44:	b938      	cbnz	r0, 8003a56 <__swbuf_r+0x74>
 8003a46:	4638      	mov	r0, r7
 8003a48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a4a:	4621      	mov	r1, r4
 8003a4c:	4628      	mov	r0, r5
 8003a4e:	f000 f805 	bl	8003a5c <__swsetup_r>
 8003a52:	2800      	cmp	r0, #0
 8003a54:	d0d5      	beq.n	8003a02 <__swbuf_r+0x20>
 8003a56:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003a5a:	e7f4      	b.n	8003a46 <__swbuf_r+0x64>

08003a5c <__swsetup_r>:
 8003a5c:	b538      	push	{r3, r4, r5, lr}
 8003a5e:	4b2a      	ldr	r3, [pc, #168]	; (8003b08 <__swsetup_r+0xac>)
 8003a60:	4605      	mov	r5, r0
 8003a62:	460c      	mov	r4, r1
 8003a64:	6818      	ldr	r0, [r3, #0]
 8003a66:	b118      	cbz	r0, 8003a70 <__swsetup_r+0x14>
 8003a68:	6a03      	ldr	r3, [r0, #32]
 8003a6a:	b90b      	cbnz	r3, 8003a70 <__swsetup_r+0x14>
 8003a6c:	f7ff fac4 	bl	8002ff8 <__sinit>
 8003a70:	89a3      	ldrh	r3, [r4, #12]
 8003a72:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003a76:	0718      	lsls	r0, r3, #28
 8003a78:	d422      	bmi.n	8003ac0 <__swsetup_r+0x64>
 8003a7a:	06d9      	lsls	r1, r3, #27
 8003a7c:	d407      	bmi.n	8003a8e <__swsetup_r+0x32>
 8003a7e:	2309      	movs	r3, #9
 8003a80:	602b      	str	r3, [r5, #0]
 8003a82:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003a86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a8a:	81a3      	strh	r3, [r4, #12]
 8003a8c:	e034      	b.n	8003af8 <__swsetup_r+0x9c>
 8003a8e:	0758      	lsls	r0, r3, #29
 8003a90:	d512      	bpl.n	8003ab8 <__swsetup_r+0x5c>
 8003a92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a94:	b141      	cbz	r1, 8003aa8 <__swsetup_r+0x4c>
 8003a96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a9a:	4299      	cmp	r1, r3
 8003a9c:	d002      	beq.n	8003aa4 <__swsetup_r+0x48>
 8003a9e:	4628      	mov	r0, r5
 8003aa0:	f000 f950 	bl	8003d44 <_free_r>
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	6363      	str	r3, [r4, #52]	; 0x34
 8003aa8:	89a3      	ldrh	r3, [r4, #12]
 8003aaa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003aae:	81a3      	strh	r3, [r4, #12]
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	6063      	str	r3, [r4, #4]
 8003ab4:	6923      	ldr	r3, [r4, #16]
 8003ab6:	6023      	str	r3, [r4, #0]
 8003ab8:	89a3      	ldrh	r3, [r4, #12]
 8003aba:	f043 0308 	orr.w	r3, r3, #8
 8003abe:	81a3      	strh	r3, [r4, #12]
 8003ac0:	6923      	ldr	r3, [r4, #16]
 8003ac2:	b94b      	cbnz	r3, 8003ad8 <__swsetup_r+0x7c>
 8003ac4:	89a3      	ldrh	r3, [r4, #12]
 8003ac6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003aca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ace:	d003      	beq.n	8003ad8 <__swsetup_r+0x7c>
 8003ad0:	4621      	mov	r1, r4
 8003ad2:	4628      	mov	r0, r5
 8003ad4:	f000 f83f 	bl	8003b56 <__smakebuf_r>
 8003ad8:	89a0      	ldrh	r0, [r4, #12]
 8003ada:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003ade:	f010 0301 	ands.w	r3, r0, #1
 8003ae2:	d00a      	beq.n	8003afa <__swsetup_r+0x9e>
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	60a3      	str	r3, [r4, #8]
 8003ae8:	6963      	ldr	r3, [r4, #20]
 8003aea:	425b      	negs	r3, r3
 8003aec:	61a3      	str	r3, [r4, #24]
 8003aee:	6923      	ldr	r3, [r4, #16]
 8003af0:	b943      	cbnz	r3, 8003b04 <__swsetup_r+0xa8>
 8003af2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003af6:	d1c4      	bne.n	8003a82 <__swsetup_r+0x26>
 8003af8:	bd38      	pop	{r3, r4, r5, pc}
 8003afa:	0781      	lsls	r1, r0, #30
 8003afc:	bf58      	it	pl
 8003afe:	6963      	ldrpl	r3, [r4, #20]
 8003b00:	60a3      	str	r3, [r4, #8]
 8003b02:	e7f4      	b.n	8003aee <__swsetup_r+0x92>
 8003b04:	2000      	movs	r0, #0
 8003b06:	e7f7      	b.n	8003af8 <__swsetup_r+0x9c>
 8003b08:	200003b4 	.word	0x200003b4

08003b0c <__swhatbuf_r>:
 8003b0c:	b570      	push	{r4, r5, r6, lr}
 8003b0e:	460c      	mov	r4, r1
 8003b10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b14:	b096      	sub	sp, #88	; 0x58
 8003b16:	4615      	mov	r5, r2
 8003b18:	2900      	cmp	r1, #0
 8003b1a:	461e      	mov	r6, r3
 8003b1c:	da0c      	bge.n	8003b38 <__swhatbuf_r+0x2c>
 8003b1e:	89a3      	ldrh	r3, [r4, #12]
 8003b20:	2100      	movs	r1, #0
 8003b22:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003b26:	bf0c      	ite	eq
 8003b28:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003b2c:	2340      	movne	r3, #64	; 0x40
 8003b2e:	2000      	movs	r0, #0
 8003b30:	6031      	str	r1, [r6, #0]
 8003b32:	602b      	str	r3, [r5, #0]
 8003b34:	b016      	add	sp, #88	; 0x58
 8003b36:	bd70      	pop	{r4, r5, r6, pc}
 8003b38:	466a      	mov	r2, sp
 8003b3a:	f000 f88d 	bl	8003c58 <_fstat_r>
 8003b3e:	2800      	cmp	r0, #0
 8003b40:	dbed      	blt.n	8003b1e <__swhatbuf_r+0x12>
 8003b42:	9901      	ldr	r1, [sp, #4]
 8003b44:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003b48:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003b4c:	4259      	negs	r1, r3
 8003b4e:	4159      	adcs	r1, r3
 8003b50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b54:	e7eb      	b.n	8003b2e <__swhatbuf_r+0x22>

08003b56 <__smakebuf_r>:
 8003b56:	898b      	ldrh	r3, [r1, #12]
 8003b58:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003b5a:	079d      	lsls	r5, r3, #30
 8003b5c:	4606      	mov	r6, r0
 8003b5e:	460c      	mov	r4, r1
 8003b60:	d507      	bpl.n	8003b72 <__smakebuf_r+0x1c>
 8003b62:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003b66:	6023      	str	r3, [r4, #0]
 8003b68:	6123      	str	r3, [r4, #16]
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	6163      	str	r3, [r4, #20]
 8003b6e:	b002      	add	sp, #8
 8003b70:	bd70      	pop	{r4, r5, r6, pc}
 8003b72:	ab01      	add	r3, sp, #4
 8003b74:	466a      	mov	r2, sp
 8003b76:	f7ff ffc9 	bl	8003b0c <__swhatbuf_r>
 8003b7a:	9900      	ldr	r1, [sp, #0]
 8003b7c:	4605      	mov	r5, r0
 8003b7e:	4630      	mov	r0, r6
 8003b80:	f7ff fc22 	bl	80033c8 <_malloc_r>
 8003b84:	b948      	cbnz	r0, 8003b9a <__smakebuf_r+0x44>
 8003b86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b8a:	059a      	lsls	r2, r3, #22
 8003b8c:	d4ef      	bmi.n	8003b6e <__smakebuf_r+0x18>
 8003b8e:	f023 0303 	bic.w	r3, r3, #3
 8003b92:	f043 0302 	orr.w	r3, r3, #2
 8003b96:	81a3      	strh	r3, [r4, #12]
 8003b98:	e7e3      	b.n	8003b62 <__smakebuf_r+0xc>
 8003b9a:	89a3      	ldrh	r3, [r4, #12]
 8003b9c:	6020      	str	r0, [r4, #0]
 8003b9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ba2:	6120      	str	r0, [r4, #16]
 8003ba4:	81a3      	strh	r3, [r4, #12]
 8003ba6:	9b00      	ldr	r3, [sp, #0]
 8003ba8:	6163      	str	r3, [r4, #20]
 8003baa:	9b01      	ldr	r3, [sp, #4]
 8003bac:	b15b      	cbz	r3, 8003bc6 <__smakebuf_r+0x70>
 8003bae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003bb2:	4630      	mov	r0, r6
 8003bb4:	f000 f862 	bl	8003c7c <_isatty_r>
 8003bb8:	b128      	cbz	r0, 8003bc6 <__smakebuf_r+0x70>
 8003bba:	89a3      	ldrh	r3, [r4, #12]
 8003bbc:	f023 0303 	bic.w	r3, r3, #3
 8003bc0:	f043 0301 	orr.w	r3, r3, #1
 8003bc4:	81a3      	strh	r3, [r4, #12]
 8003bc6:	89a3      	ldrh	r3, [r4, #12]
 8003bc8:	431d      	orrs	r5, r3
 8003bca:	81a5      	strh	r5, [r4, #12]
 8003bcc:	e7cf      	b.n	8003b6e <__smakebuf_r+0x18>

08003bce <_putc_r>:
 8003bce:	b570      	push	{r4, r5, r6, lr}
 8003bd0:	460d      	mov	r5, r1
 8003bd2:	4614      	mov	r4, r2
 8003bd4:	4606      	mov	r6, r0
 8003bd6:	b118      	cbz	r0, 8003be0 <_putc_r+0x12>
 8003bd8:	6a03      	ldr	r3, [r0, #32]
 8003bda:	b90b      	cbnz	r3, 8003be0 <_putc_r+0x12>
 8003bdc:	f7ff fa0c 	bl	8002ff8 <__sinit>
 8003be0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003be2:	07d8      	lsls	r0, r3, #31
 8003be4:	d405      	bmi.n	8003bf2 <_putc_r+0x24>
 8003be6:	89a3      	ldrh	r3, [r4, #12]
 8003be8:	0599      	lsls	r1, r3, #22
 8003bea:	d402      	bmi.n	8003bf2 <_putc_r+0x24>
 8003bec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003bee:	f7ff fa86 	bl	80030fe <__retarget_lock_acquire_recursive>
 8003bf2:	68a3      	ldr	r3, [r4, #8]
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	60a3      	str	r3, [r4, #8]
 8003bfa:	da05      	bge.n	8003c08 <_putc_r+0x3a>
 8003bfc:	69a2      	ldr	r2, [r4, #24]
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	db12      	blt.n	8003c28 <_putc_r+0x5a>
 8003c02:	b2eb      	uxtb	r3, r5
 8003c04:	2b0a      	cmp	r3, #10
 8003c06:	d00f      	beq.n	8003c28 <_putc_r+0x5a>
 8003c08:	6823      	ldr	r3, [r4, #0]
 8003c0a:	1c5a      	adds	r2, r3, #1
 8003c0c:	6022      	str	r2, [r4, #0]
 8003c0e:	701d      	strb	r5, [r3, #0]
 8003c10:	b2ed      	uxtb	r5, r5
 8003c12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c14:	07da      	lsls	r2, r3, #31
 8003c16:	d405      	bmi.n	8003c24 <_putc_r+0x56>
 8003c18:	89a3      	ldrh	r3, [r4, #12]
 8003c1a:	059b      	lsls	r3, r3, #22
 8003c1c:	d402      	bmi.n	8003c24 <_putc_r+0x56>
 8003c1e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c20:	f7ff fa6e 	bl	8003100 <__retarget_lock_release_recursive>
 8003c24:	4628      	mov	r0, r5
 8003c26:	bd70      	pop	{r4, r5, r6, pc}
 8003c28:	4629      	mov	r1, r5
 8003c2a:	4622      	mov	r2, r4
 8003c2c:	4630      	mov	r0, r6
 8003c2e:	f7ff fed8 	bl	80039e2 <__swbuf_r>
 8003c32:	4605      	mov	r5, r0
 8003c34:	e7ed      	b.n	8003c12 <_putc_r+0x44>
	...

08003c38 <_close_r>:
 8003c38:	b538      	push	{r3, r4, r5, lr}
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	4d05      	ldr	r5, [pc, #20]	; (8003c54 <_close_r+0x1c>)
 8003c3e:	4604      	mov	r4, r0
 8003c40:	4608      	mov	r0, r1
 8003c42:	602b      	str	r3, [r5, #0]
 8003c44:	f7fd fcd1 	bl	80015ea <_close>
 8003c48:	1c43      	adds	r3, r0, #1
 8003c4a:	d102      	bne.n	8003c52 <_close_r+0x1a>
 8003c4c:	682b      	ldr	r3, [r5, #0]
 8003c4e:	b103      	cbz	r3, 8003c52 <_close_r+0x1a>
 8003c50:	6023      	str	r3, [r4, #0]
 8003c52:	bd38      	pop	{r3, r4, r5, pc}
 8003c54:	20000524 	.word	0x20000524

08003c58 <_fstat_r>:
 8003c58:	b538      	push	{r3, r4, r5, lr}
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	4d06      	ldr	r5, [pc, #24]	; (8003c78 <_fstat_r+0x20>)
 8003c5e:	4604      	mov	r4, r0
 8003c60:	4608      	mov	r0, r1
 8003c62:	4611      	mov	r1, r2
 8003c64:	602b      	str	r3, [r5, #0]
 8003c66:	f7fd fccc 	bl	8001602 <_fstat>
 8003c6a:	1c43      	adds	r3, r0, #1
 8003c6c:	d102      	bne.n	8003c74 <_fstat_r+0x1c>
 8003c6e:	682b      	ldr	r3, [r5, #0]
 8003c70:	b103      	cbz	r3, 8003c74 <_fstat_r+0x1c>
 8003c72:	6023      	str	r3, [r4, #0]
 8003c74:	bd38      	pop	{r3, r4, r5, pc}
 8003c76:	bf00      	nop
 8003c78:	20000524 	.word	0x20000524

08003c7c <_isatty_r>:
 8003c7c:	b538      	push	{r3, r4, r5, lr}
 8003c7e:	2300      	movs	r3, #0
 8003c80:	4d05      	ldr	r5, [pc, #20]	; (8003c98 <_isatty_r+0x1c>)
 8003c82:	4604      	mov	r4, r0
 8003c84:	4608      	mov	r0, r1
 8003c86:	602b      	str	r3, [r5, #0]
 8003c88:	f7fd fccb 	bl	8001622 <_isatty>
 8003c8c:	1c43      	adds	r3, r0, #1
 8003c8e:	d102      	bne.n	8003c96 <_isatty_r+0x1a>
 8003c90:	682b      	ldr	r3, [r5, #0]
 8003c92:	b103      	cbz	r3, 8003c96 <_isatty_r+0x1a>
 8003c94:	6023      	str	r3, [r4, #0]
 8003c96:	bd38      	pop	{r3, r4, r5, pc}
 8003c98:	20000524 	.word	0x20000524

08003c9c <_lseek_r>:
 8003c9c:	b538      	push	{r3, r4, r5, lr}
 8003c9e:	4604      	mov	r4, r0
 8003ca0:	4d06      	ldr	r5, [pc, #24]	; (8003cbc <_lseek_r+0x20>)
 8003ca2:	4608      	mov	r0, r1
 8003ca4:	4611      	mov	r1, r2
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	602a      	str	r2, [r5, #0]
 8003caa:	461a      	mov	r2, r3
 8003cac:	f7fd fcc4 	bl	8001638 <_lseek>
 8003cb0:	1c43      	adds	r3, r0, #1
 8003cb2:	d102      	bne.n	8003cba <_lseek_r+0x1e>
 8003cb4:	682b      	ldr	r3, [r5, #0]
 8003cb6:	b103      	cbz	r3, 8003cba <_lseek_r+0x1e>
 8003cb8:	6023      	str	r3, [r4, #0]
 8003cba:	bd38      	pop	{r3, r4, r5, pc}
 8003cbc:	20000524 	.word	0x20000524

08003cc0 <_read_r>:
 8003cc0:	b538      	push	{r3, r4, r5, lr}
 8003cc2:	4604      	mov	r4, r0
 8003cc4:	4d06      	ldr	r5, [pc, #24]	; (8003ce0 <_read_r+0x20>)
 8003cc6:	4608      	mov	r0, r1
 8003cc8:	4611      	mov	r1, r2
 8003cca:	2200      	movs	r2, #0
 8003ccc:	602a      	str	r2, [r5, #0]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	f7fd fc52 	bl	8001578 <_read>
 8003cd4:	1c43      	adds	r3, r0, #1
 8003cd6:	d102      	bne.n	8003cde <_read_r+0x1e>
 8003cd8:	682b      	ldr	r3, [r5, #0]
 8003cda:	b103      	cbz	r3, 8003cde <_read_r+0x1e>
 8003cdc:	6023      	str	r3, [r4, #0]
 8003cde:	bd38      	pop	{r3, r4, r5, pc}
 8003ce0:	20000524 	.word	0x20000524

08003ce4 <_sbrk_r>:
 8003ce4:	b538      	push	{r3, r4, r5, lr}
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	4d05      	ldr	r5, [pc, #20]	; (8003d00 <_sbrk_r+0x1c>)
 8003cea:	4604      	mov	r4, r0
 8003cec:	4608      	mov	r0, r1
 8003cee:	602b      	str	r3, [r5, #0]
 8003cf0:	f7fd fcb0 	bl	8001654 <_sbrk>
 8003cf4:	1c43      	adds	r3, r0, #1
 8003cf6:	d102      	bne.n	8003cfe <_sbrk_r+0x1a>
 8003cf8:	682b      	ldr	r3, [r5, #0]
 8003cfa:	b103      	cbz	r3, 8003cfe <_sbrk_r+0x1a>
 8003cfc:	6023      	str	r3, [r4, #0]
 8003cfe:	bd38      	pop	{r3, r4, r5, pc}
 8003d00:	20000524 	.word	0x20000524

08003d04 <_write_r>:
 8003d04:	b538      	push	{r3, r4, r5, lr}
 8003d06:	4604      	mov	r4, r0
 8003d08:	4d06      	ldr	r5, [pc, #24]	; (8003d24 <_write_r+0x20>)
 8003d0a:	4608      	mov	r0, r1
 8003d0c:	4611      	mov	r1, r2
 8003d0e:	2200      	movs	r2, #0
 8003d10:	602a      	str	r2, [r5, #0]
 8003d12:	461a      	mov	r2, r3
 8003d14:	f7fd fc4d 	bl	80015b2 <_write>
 8003d18:	1c43      	adds	r3, r0, #1
 8003d1a:	d102      	bne.n	8003d22 <_write_r+0x1e>
 8003d1c:	682b      	ldr	r3, [r5, #0]
 8003d1e:	b103      	cbz	r3, 8003d22 <_write_r+0x1e>
 8003d20:	6023      	str	r3, [r4, #0]
 8003d22:	bd38      	pop	{r3, r4, r5, pc}
 8003d24:	20000524 	.word	0x20000524

08003d28 <memchr>:
 8003d28:	b2c9      	uxtb	r1, r1
 8003d2a:	4402      	add	r2, r0
 8003d2c:	b510      	push	{r4, lr}
 8003d2e:	4290      	cmp	r0, r2
 8003d30:	4603      	mov	r3, r0
 8003d32:	d101      	bne.n	8003d38 <memchr+0x10>
 8003d34:	2300      	movs	r3, #0
 8003d36:	e003      	b.n	8003d40 <memchr+0x18>
 8003d38:	781c      	ldrb	r4, [r3, #0]
 8003d3a:	3001      	adds	r0, #1
 8003d3c:	428c      	cmp	r4, r1
 8003d3e:	d1f6      	bne.n	8003d2e <memchr+0x6>
 8003d40:	4618      	mov	r0, r3
 8003d42:	bd10      	pop	{r4, pc}

08003d44 <_free_r>:
 8003d44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003d46:	2900      	cmp	r1, #0
 8003d48:	d043      	beq.n	8003dd2 <_free_r+0x8e>
 8003d4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d4e:	1f0c      	subs	r4, r1, #4
 8003d50:	9001      	str	r0, [sp, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	bfb8      	it	lt
 8003d56:	18e4      	addlt	r4, r4, r3
 8003d58:	f7ff fdf4 	bl	8003944 <__malloc_lock>
 8003d5c:	4a1e      	ldr	r2, [pc, #120]	; (8003dd8 <_free_r+0x94>)
 8003d5e:	9801      	ldr	r0, [sp, #4]
 8003d60:	6813      	ldr	r3, [r2, #0]
 8003d62:	b933      	cbnz	r3, 8003d72 <_free_r+0x2e>
 8003d64:	6063      	str	r3, [r4, #4]
 8003d66:	6014      	str	r4, [r2, #0]
 8003d68:	b003      	add	sp, #12
 8003d6a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003d6e:	f7ff bdef 	b.w	8003950 <__malloc_unlock>
 8003d72:	42a3      	cmp	r3, r4
 8003d74:	d908      	bls.n	8003d88 <_free_r+0x44>
 8003d76:	6825      	ldr	r5, [r4, #0]
 8003d78:	1961      	adds	r1, r4, r5
 8003d7a:	428b      	cmp	r3, r1
 8003d7c:	bf01      	itttt	eq
 8003d7e:	6819      	ldreq	r1, [r3, #0]
 8003d80:	685b      	ldreq	r3, [r3, #4]
 8003d82:	1949      	addeq	r1, r1, r5
 8003d84:	6021      	streq	r1, [r4, #0]
 8003d86:	e7ed      	b.n	8003d64 <_free_r+0x20>
 8003d88:	461a      	mov	r2, r3
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	b10b      	cbz	r3, 8003d92 <_free_r+0x4e>
 8003d8e:	42a3      	cmp	r3, r4
 8003d90:	d9fa      	bls.n	8003d88 <_free_r+0x44>
 8003d92:	6811      	ldr	r1, [r2, #0]
 8003d94:	1855      	adds	r5, r2, r1
 8003d96:	42a5      	cmp	r5, r4
 8003d98:	d10b      	bne.n	8003db2 <_free_r+0x6e>
 8003d9a:	6824      	ldr	r4, [r4, #0]
 8003d9c:	4421      	add	r1, r4
 8003d9e:	1854      	adds	r4, r2, r1
 8003da0:	6011      	str	r1, [r2, #0]
 8003da2:	42a3      	cmp	r3, r4
 8003da4:	d1e0      	bne.n	8003d68 <_free_r+0x24>
 8003da6:	681c      	ldr	r4, [r3, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	440c      	add	r4, r1
 8003dac:	6053      	str	r3, [r2, #4]
 8003dae:	6014      	str	r4, [r2, #0]
 8003db0:	e7da      	b.n	8003d68 <_free_r+0x24>
 8003db2:	d902      	bls.n	8003dba <_free_r+0x76>
 8003db4:	230c      	movs	r3, #12
 8003db6:	6003      	str	r3, [r0, #0]
 8003db8:	e7d6      	b.n	8003d68 <_free_r+0x24>
 8003dba:	6825      	ldr	r5, [r4, #0]
 8003dbc:	1961      	adds	r1, r4, r5
 8003dbe:	428b      	cmp	r3, r1
 8003dc0:	bf02      	ittt	eq
 8003dc2:	6819      	ldreq	r1, [r3, #0]
 8003dc4:	685b      	ldreq	r3, [r3, #4]
 8003dc6:	1949      	addeq	r1, r1, r5
 8003dc8:	6063      	str	r3, [r4, #4]
 8003dca:	bf08      	it	eq
 8003dcc:	6021      	streq	r1, [r4, #0]
 8003dce:	6054      	str	r4, [r2, #4]
 8003dd0:	e7ca      	b.n	8003d68 <_free_r+0x24>
 8003dd2:	b003      	add	sp, #12
 8003dd4:	bd30      	pop	{r4, r5, pc}
 8003dd6:	bf00      	nop
 8003dd8:	2000051c 	.word	0x2000051c

08003ddc <_init>:
 8003ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dde:	bf00      	nop
 8003de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003de2:	bc08      	pop	{r3}
 8003de4:	469e      	mov	lr, r3
 8003de6:	4770      	bx	lr

08003de8 <_fini>:
 8003de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dea:	bf00      	nop
 8003dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dee:	bc08      	pop	{r3}
 8003df0:	469e      	mov	lr, r3
 8003df2:	4770      	bx	lr
