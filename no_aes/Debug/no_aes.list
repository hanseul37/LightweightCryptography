
no_aes.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a74  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000350  08003c68  08003c68  00013c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fb8  08003fb8  000200b8  2**0
                  CONTENTS
  4 .ARM          00000000  08003fb8  08003fb8  000200b8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003fb8  08003fb8  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fb8  08003fb8  00013fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fbc  08003fbc  00013fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  08003fc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  200000b8  08004078  000200b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000228  08004078  00020228  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ee  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006df2  00000000  00000000  00020131  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001794  00000000  00000000  00026f23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007c0  00000000  00000000  000286b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005ab  00000000  00000000  00028e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027c4b  00000000  00000000  00029423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000802d  00000000  00000000  0005106e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f8be4  00000000  00000000  0005909b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000025a8  00000000  00000000  00151c80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00154228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	f3af 8000 	nop.w
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	200000b8 	.word	0x200000b8
 8000210:	00000000 	.word	0x00000000
 8000214:	08003c50 	.word	0x08003c50

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	f3af 8000 	nop.w
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	200000bc 	.word	0x200000bc
 8000230:	08003c50 	.word	0x08003c50

08000234 <KeyExpansion>:
*/
#define getSBoxValue(num) (sbox[(num)])

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states. 
static void KeyExpansion(uint8_t* RoundKey, const uint8_t* Key)
{
 8000234:	b480      	push	{r7}
 8000236:	b089      	sub	sp, #36	; 0x24
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
 800023c:	6039      	str	r1, [r7, #0]
  unsigned i, j, k;
  uint8_t tempa[4]; // Used for the column/row operations
  
  // The first round key is the key itself.
  for (i = 0; i < Nk; ++i)
 800023e:	2300      	movs	r3, #0
 8000240:	61fb      	str	r3, [r7, #28]
 8000242:	e030      	b.n	80002a6 <KeyExpansion+0x72>
  {
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 8000244:	69fb      	ldr	r3, [r7, #28]
 8000246:	009b      	lsls	r3, r3, #2
 8000248:	683a      	ldr	r2, [r7, #0]
 800024a:	441a      	add	r2, r3
 800024c:	69fb      	ldr	r3, [r7, #28]
 800024e:	009b      	lsls	r3, r3, #2
 8000250:	6879      	ldr	r1, [r7, #4]
 8000252:	440b      	add	r3, r1
 8000254:	7812      	ldrb	r2, [r2, #0]
 8000256:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 8000258:	69fb      	ldr	r3, [r7, #28]
 800025a:	009b      	lsls	r3, r3, #2
 800025c:	3301      	adds	r3, #1
 800025e:	683a      	ldr	r2, [r7, #0]
 8000260:	441a      	add	r2, r3
 8000262:	69fb      	ldr	r3, [r7, #28]
 8000264:	009b      	lsls	r3, r3, #2
 8000266:	3301      	adds	r3, #1
 8000268:	6879      	ldr	r1, [r7, #4]
 800026a:	440b      	add	r3, r1
 800026c:	7812      	ldrb	r2, [r2, #0]
 800026e:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 8000270:	69fb      	ldr	r3, [r7, #28]
 8000272:	009b      	lsls	r3, r3, #2
 8000274:	3302      	adds	r3, #2
 8000276:	683a      	ldr	r2, [r7, #0]
 8000278:	441a      	add	r2, r3
 800027a:	69fb      	ldr	r3, [r7, #28]
 800027c:	009b      	lsls	r3, r3, #2
 800027e:	3302      	adds	r3, #2
 8000280:	6879      	ldr	r1, [r7, #4]
 8000282:	440b      	add	r3, r1
 8000284:	7812      	ldrb	r2, [r2, #0]
 8000286:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 8000288:	69fb      	ldr	r3, [r7, #28]
 800028a:	009b      	lsls	r3, r3, #2
 800028c:	3303      	adds	r3, #3
 800028e:	683a      	ldr	r2, [r7, #0]
 8000290:	441a      	add	r2, r3
 8000292:	69fb      	ldr	r3, [r7, #28]
 8000294:	009b      	lsls	r3, r3, #2
 8000296:	3303      	adds	r3, #3
 8000298:	6879      	ldr	r1, [r7, #4]
 800029a:	440b      	add	r3, r1
 800029c:	7812      	ldrb	r2, [r2, #0]
 800029e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < Nk; ++i)
 80002a0:	69fb      	ldr	r3, [r7, #28]
 80002a2:	3301      	adds	r3, #1
 80002a4:	61fb      	str	r3, [r7, #28]
 80002a6:	69fb      	ldr	r3, [r7, #28]
 80002a8:	2b03      	cmp	r3, #3
 80002aa:	d9cb      	bls.n	8000244 <KeyExpansion+0x10>
  }

  // All other round keys are found from the previous round keys.
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 80002ac:	2304      	movs	r3, #4
 80002ae:	61fb      	str	r3, [r7, #28]
 80002b0:	e081      	b.n	80003b6 <KeyExpansion+0x182>
  {
    {
      k = (i - 1) * 4;
 80002b2:	69fb      	ldr	r3, [r7, #28]
 80002b4:	3b01      	subs	r3, #1
 80002b6:	009b      	lsls	r3, r3, #2
 80002b8:	61bb      	str	r3, [r7, #24]
      tempa[0]=RoundKey[k + 0];
 80002ba:	687a      	ldr	r2, [r7, #4]
 80002bc:	69bb      	ldr	r3, [r7, #24]
 80002be:	4413      	add	r3, r2
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	733b      	strb	r3, [r7, #12]
      tempa[1]=RoundKey[k + 1];
 80002c4:	69bb      	ldr	r3, [r7, #24]
 80002c6:	3301      	adds	r3, #1
 80002c8:	687a      	ldr	r2, [r7, #4]
 80002ca:	4413      	add	r3, r2
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	737b      	strb	r3, [r7, #13]
      tempa[2]=RoundKey[k + 2];
 80002d0:	69bb      	ldr	r3, [r7, #24]
 80002d2:	3302      	adds	r3, #2
 80002d4:	687a      	ldr	r2, [r7, #4]
 80002d6:	4413      	add	r3, r2
 80002d8:	781b      	ldrb	r3, [r3, #0]
 80002da:	73bb      	strb	r3, [r7, #14]
      tempa[3]=RoundKey[k + 3];
 80002dc:	69bb      	ldr	r3, [r7, #24]
 80002de:	3303      	adds	r3, #3
 80002e0:	687a      	ldr	r2, [r7, #4]
 80002e2:	4413      	add	r3, r2
 80002e4:	781b      	ldrb	r3, [r3, #0]
 80002e6:	73fb      	strb	r3, [r7, #15]

    }

    if (i % Nk == 0)
 80002e8:	69fb      	ldr	r3, [r7, #28]
 80002ea:	f003 0303 	and.w	r3, r3, #3
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d125      	bne.n	800033e <KeyExpansion+0x10a>
      // This function shifts the 4 bytes in a word to the left once.
      // [a0,a1,a2,a3] becomes [a1,a2,a3,a0]

      // Function RotWord()
      {
        const uint8_t u8tmp = tempa[0];
 80002f2:	7b3b      	ldrb	r3, [r7, #12]
 80002f4:	75fb      	strb	r3, [r7, #23]
        tempa[0] = tempa[1];
 80002f6:	7b7b      	ldrb	r3, [r7, #13]
 80002f8:	733b      	strb	r3, [r7, #12]
        tempa[1] = tempa[2];
 80002fa:	7bbb      	ldrb	r3, [r7, #14]
 80002fc:	737b      	strb	r3, [r7, #13]
        tempa[2] = tempa[3];
 80002fe:	7bfb      	ldrb	r3, [r7, #15]
 8000300:	73bb      	strb	r3, [r7, #14]
        tempa[3] = u8tmp;
 8000302:	7dfb      	ldrb	r3, [r7, #23]
 8000304:	73fb      	strb	r3, [r7, #15]
      // SubWord() is a function that takes a four-byte input word and 
      // applies the S-box to each of the four bytes to produce an output word.

      // Function Subword()
      {
        tempa[0] = getSBoxValue(tempa[0]);
 8000306:	7b3b      	ldrb	r3, [r7, #12]
 8000308:	461a      	mov	r2, r3
 800030a:	4b30      	ldr	r3, [pc, #192]	; (80003cc <KeyExpansion+0x198>)
 800030c:	5c9b      	ldrb	r3, [r3, r2]
 800030e:	733b      	strb	r3, [r7, #12]
        tempa[1] = getSBoxValue(tempa[1]);
 8000310:	7b7b      	ldrb	r3, [r7, #13]
 8000312:	461a      	mov	r2, r3
 8000314:	4b2d      	ldr	r3, [pc, #180]	; (80003cc <KeyExpansion+0x198>)
 8000316:	5c9b      	ldrb	r3, [r3, r2]
 8000318:	737b      	strb	r3, [r7, #13]
        tempa[2] = getSBoxValue(tempa[2]);
 800031a:	7bbb      	ldrb	r3, [r7, #14]
 800031c:	461a      	mov	r2, r3
 800031e:	4b2b      	ldr	r3, [pc, #172]	; (80003cc <KeyExpansion+0x198>)
 8000320:	5c9b      	ldrb	r3, [r3, r2]
 8000322:	73bb      	strb	r3, [r7, #14]
        tempa[3] = getSBoxValue(tempa[3]);
 8000324:	7bfb      	ldrb	r3, [r7, #15]
 8000326:	461a      	mov	r2, r3
 8000328:	4b28      	ldr	r3, [pc, #160]	; (80003cc <KeyExpansion+0x198>)
 800032a:	5c9b      	ldrb	r3, [r3, r2]
 800032c:	73fb      	strb	r3, [r7, #15]
      }

      tempa[0] = tempa[0] ^ Rcon[i/Nk];
 800032e:	7b3a      	ldrb	r2, [r7, #12]
 8000330:	69fb      	ldr	r3, [r7, #28]
 8000332:	089b      	lsrs	r3, r3, #2
 8000334:	4926      	ldr	r1, [pc, #152]	; (80003d0 <KeyExpansion+0x19c>)
 8000336:	5ccb      	ldrb	r3, [r1, r3]
 8000338:	4053      	eors	r3, r2
 800033a:	b2db      	uxtb	r3, r3
 800033c:	733b      	strb	r3, [r7, #12]
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }
    }
#endif
    j = i * 4; k=(i - Nk) * 4;
 800033e:	69fb      	ldr	r3, [r7, #28]
 8000340:	009b      	lsls	r3, r3, #2
 8000342:	613b      	str	r3, [r7, #16]
 8000344:	69fb      	ldr	r3, [r7, #28]
 8000346:	3b04      	subs	r3, #4
 8000348:	009b      	lsls	r3, r3, #2
 800034a:	61bb      	str	r3, [r7, #24]
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
 800034c:	687a      	ldr	r2, [r7, #4]
 800034e:	69bb      	ldr	r3, [r7, #24]
 8000350:	4413      	add	r3, r2
 8000352:	7819      	ldrb	r1, [r3, #0]
 8000354:	7b3a      	ldrb	r2, [r7, #12]
 8000356:	6878      	ldr	r0, [r7, #4]
 8000358:	693b      	ldr	r3, [r7, #16]
 800035a:	4403      	add	r3, r0
 800035c:	404a      	eors	r2, r1
 800035e:	b2d2      	uxtb	r2, r2
 8000360:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
 8000362:	69bb      	ldr	r3, [r7, #24]
 8000364:	3301      	adds	r3, #1
 8000366:	687a      	ldr	r2, [r7, #4]
 8000368:	4413      	add	r3, r2
 800036a:	7819      	ldrb	r1, [r3, #0]
 800036c:	7b7a      	ldrb	r2, [r7, #13]
 800036e:	693b      	ldr	r3, [r7, #16]
 8000370:	3301      	adds	r3, #1
 8000372:	6878      	ldr	r0, [r7, #4]
 8000374:	4403      	add	r3, r0
 8000376:	404a      	eors	r2, r1
 8000378:	b2d2      	uxtb	r2, r2
 800037a:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
 800037c:	69bb      	ldr	r3, [r7, #24]
 800037e:	3302      	adds	r3, #2
 8000380:	687a      	ldr	r2, [r7, #4]
 8000382:	4413      	add	r3, r2
 8000384:	7819      	ldrb	r1, [r3, #0]
 8000386:	7bba      	ldrb	r2, [r7, #14]
 8000388:	693b      	ldr	r3, [r7, #16]
 800038a:	3302      	adds	r3, #2
 800038c:	6878      	ldr	r0, [r7, #4]
 800038e:	4403      	add	r3, r0
 8000390:	404a      	eors	r2, r1
 8000392:	b2d2      	uxtb	r2, r2
 8000394:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
 8000396:	69bb      	ldr	r3, [r7, #24]
 8000398:	3303      	adds	r3, #3
 800039a:	687a      	ldr	r2, [r7, #4]
 800039c:	4413      	add	r3, r2
 800039e:	7819      	ldrb	r1, [r3, #0]
 80003a0:	7bfa      	ldrb	r2, [r7, #15]
 80003a2:	693b      	ldr	r3, [r7, #16]
 80003a4:	3303      	adds	r3, #3
 80003a6:	6878      	ldr	r0, [r7, #4]
 80003a8:	4403      	add	r3, r0
 80003aa:	404a      	eors	r2, r1
 80003ac:	b2d2      	uxtb	r2, r2
 80003ae:	701a      	strb	r2, [r3, #0]
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 80003b0:	69fb      	ldr	r3, [r7, #28]
 80003b2:	3301      	adds	r3, #1
 80003b4:	61fb      	str	r3, [r7, #28]
 80003b6:	69fb      	ldr	r3, [r7, #28]
 80003b8:	2b2b      	cmp	r3, #43	; 0x2b
 80003ba:	f67f af7a 	bls.w	80002b2 <KeyExpansion+0x7e>
  }
}
 80003be:	bf00      	nop
 80003c0:	bf00      	nop
 80003c2:	3724      	adds	r7, #36	; 0x24
 80003c4:	46bd      	mov	sp, r7
 80003c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ca:	4770      	bx	lr
 80003cc:	08003d28 	.word	0x08003d28
 80003d0:	08003f28 	.word	0x08003f28

080003d4 <AES_init_ctx>:

void AES_init_ctx(struct AES_ctx* ctx, const uint8_t* key)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
 80003dc:	6039      	str	r1, [r7, #0]
  KeyExpansion(ctx->RoundKey, key);
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	6839      	ldr	r1, [r7, #0]
 80003e2:	4618      	mov	r0, r3
 80003e4:	f7ff ff26 	bl	8000234 <KeyExpansion>
}
 80003e8:	bf00      	nop
 80003ea:	3708      	adds	r7, #8
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}

080003f0 <AddRoundKey>:
#endif

// This function adds the round key to state.
// The round key is added to the state by an XOR function.
static void AddRoundKey(uint8_t round, state_t* state, const uint8_t* RoundKey)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b087      	sub	sp, #28
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	4603      	mov	r3, r0
 80003f8:	60b9      	str	r1, [r7, #8]
 80003fa:	607a      	str	r2, [r7, #4]
 80003fc:	73fb      	strb	r3, [r7, #15]
  uint8_t i,j;
  for (i = 0; i < 4; ++i)
 80003fe:	2300      	movs	r3, #0
 8000400:	75fb      	strb	r3, [r7, #23]
 8000402:	e027      	b.n	8000454 <AddRoundKey+0x64>
  {
    for (j = 0; j < 4; ++j)
 8000404:	2300      	movs	r3, #0
 8000406:	75bb      	strb	r3, [r7, #22]
 8000408:	e01e      	b.n	8000448 <AddRoundKey+0x58>
    {
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
 800040a:	7dfa      	ldrb	r2, [r7, #23]
 800040c:	7dbb      	ldrb	r3, [r7, #22]
 800040e:	68b9      	ldr	r1, [r7, #8]
 8000410:	0092      	lsls	r2, r2, #2
 8000412:	440a      	add	r2, r1
 8000414:	4413      	add	r3, r2
 8000416:	7818      	ldrb	r0, [r3, #0]
 8000418:	7bfb      	ldrb	r3, [r7, #15]
 800041a:	009a      	lsls	r2, r3, #2
 800041c:	7dfb      	ldrb	r3, [r7, #23]
 800041e:	4413      	add	r3, r2
 8000420:	009a      	lsls	r2, r3, #2
 8000422:	7dbb      	ldrb	r3, [r7, #22]
 8000424:	4413      	add	r3, r2
 8000426:	461a      	mov	r2, r3
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	4413      	add	r3, r2
 800042c:	7819      	ldrb	r1, [r3, #0]
 800042e:	7dfa      	ldrb	r2, [r7, #23]
 8000430:	7dbb      	ldrb	r3, [r7, #22]
 8000432:	4041      	eors	r1, r0
 8000434:	b2c8      	uxtb	r0, r1
 8000436:	68b9      	ldr	r1, [r7, #8]
 8000438:	0092      	lsls	r2, r2, #2
 800043a:	440a      	add	r2, r1
 800043c:	4413      	add	r3, r2
 800043e:	4602      	mov	r2, r0
 8000440:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 8000442:	7dbb      	ldrb	r3, [r7, #22]
 8000444:	3301      	adds	r3, #1
 8000446:	75bb      	strb	r3, [r7, #22]
 8000448:	7dbb      	ldrb	r3, [r7, #22]
 800044a:	2b03      	cmp	r3, #3
 800044c:	d9dd      	bls.n	800040a <AddRoundKey+0x1a>
  for (i = 0; i < 4; ++i)
 800044e:	7dfb      	ldrb	r3, [r7, #23]
 8000450:	3301      	adds	r3, #1
 8000452:	75fb      	strb	r3, [r7, #23]
 8000454:	7dfb      	ldrb	r3, [r7, #23]
 8000456:	2b03      	cmp	r3, #3
 8000458:	d9d4      	bls.n	8000404 <AddRoundKey+0x14>
    }
  }
}
 800045a:	bf00      	nop
 800045c:	bf00      	nop
 800045e:	371c      	adds	r7, #28
 8000460:	46bd      	mov	sp, r7
 8000462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000466:	4770      	bx	lr

08000468 <SubBytes>:

// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void SubBytes(state_t* state)
{
 8000468:	b480      	push	{r7}
 800046a:	b085      	sub	sp, #20
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 8000470:	2300      	movs	r3, #0
 8000472:	73fb      	strb	r3, [r7, #15]
 8000474:	e01d      	b.n	80004b2 <SubBytes+0x4a>
  {
    for (j = 0; j < 4; ++j)
 8000476:	2300      	movs	r3, #0
 8000478:	73bb      	strb	r3, [r7, #14]
 800047a:	e014      	b.n	80004a6 <SubBytes+0x3e>
    {
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
 800047c:	7bba      	ldrb	r2, [r7, #14]
 800047e:	7bfb      	ldrb	r3, [r7, #15]
 8000480:	6879      	ldr	r1, [r7, #4]
 8000482:	0092      	lsls	r2, r2, #2
 8000484:	440a      	add	r2, r1
 8000486:	4413      	add	r3, r2
 8000488:	781b      	ldrb	r3, [r3, #0]
 800048a:	4618      	mov	r0, r3
 800048c:	7bba      	ldrb	r2, [r7, #14]
 800048e:	7bfb      	ldrb	r3, [r7, #15]
 8000490:	490d      	ldr	r1, [pc, #52]	; (80004c8 <SubBytes+0x60>)
 8000492:	5c08      	ldrb	r0, [r1, r0]
 8000494:	6879      	ldr	r1, [r7, #4]
 8000496:	0092      	lsls	r2, r2, #2
 8000498:	440a      	add	r2, r1
 800049a:	4413      	add	r3, r2
 800049c:	4602      	mov	r2, r0
 800049e:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 80004a0:	7bbb      	ldrb	r3, [r7, #14]
 80004a2:	3301      	adds	r3, #1
 80004a4:	73bb      	strb	r3, [r7, #14]
 80004a6:	7bbb      	ldrb	r3, [r7, #14]
 80004a8:	2b03      	cmp	r3, #3
 80004aa:	d9e7      	bls.n	800047c <SubBytes+0x14>
  for (i = 0; i < 4; ++i)
 80004ac:	7bfb      	ldrb	r3, [r7, #15]
 80004ae:	3301      	adds	r3, #1
 80004b0:	73fb      	strb	r3, [r7, #15]
 80004b2:	7bfb      	ldrb	r3, [r7, #15]
 80004b4:	2b03      	cmp	r3, #3
 80004b6:	d9de      	bls.n	8000476 <SubBytes+0xe>
    }
  }
}
 80004b8:	bf00      	nop
 80004ba:	bf00      	nop
 80004bc:	3714      	adds	r7, #20
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop
 80004c8:	08003d28 	.word	0x08003d28

080004cc <ShiftRows>:

// The ShiftRows() function shifts the rows in the state to the left.
// Each row is shifted with different offset.
// Offset = Row number. So the first row is not shifted.
static void ShiftRows(state_t* state)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to left  
  temp           = (*state)[0][1];
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	785b      	ldrb	r3, [r3, #1]
 80004d8:	73fb      	strb	r3, [r7, #15]
  (*state)[0][1] = (*state)[1][1];
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	795a      	ldrb	r2, [r3, #5]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	705a      	strb	r2, [r3, #1]
  (*state)[1][1] = (*state)[2][1];
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	7a5a      	ldrb	r2, [r3, #9]
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	715a      	strb	r2, [r3, #5]
  (*state)[2][1] = (*state)[3][1];
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	7b5a      	ldrb	r2, [r3, #13]
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	725a      	strb	r2, [r3, #9]
  (*state)[3][1] = temp;
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	7bfa      	ldrb	r2, [r7, #15]
 80004f6:	735a      	strb	r2, [r3, #13]

  // Rotate second row 2 columns to left  
  temp           = (*state)[0][2];
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	789b      	ldrb	r3, [r3, #2]
 80004fc:	73fb      	strb	r3, [r7, #15]
  (*state)[0][2] = (*state)[2][2];
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	7a9a      	ldrb	r2, [r3, #10]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	7bfa      	ldrb	r2, [r7, #15]
 800050a:	729a      	strb	r2, [r3, #10]

  temp           = (*state)[1][2];
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	799b      	ldrb	r3, [r3, #6]
 8000510:	73fb      	strb	r3, [r7, #15]
  (*state)[1][2] = (*state)[3][2];
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	7b9a      	ldrb	r2, [r3, #14]
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	7bfa      	ldrb	r2, [r7, #15]
 800051e:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to left
  temp           = (*state)[0][3];
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	78db      	ldrb	r3, [r3, #3]
 8000524:	73fb      	strb	r3, [r7, #15]
  (*state)[0][3] = (*state)[3][3];
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	7bda      	ldrb	r2, [r3, #15]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	70da      	strb	r2, [r3, #3]
  (*state)[3][3] = (*state)[2][3];
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	7ada      	ldrb	r2, [r3, #11]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	73da      	strb	r2, [r3, #15]
  (*state)[2][3] = (*state)[1][3];
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	79da      	ldrb	r2, [r3, #7]
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	72da      	strb	r2, [r3, #11]
  (*state)[1][3] = temp;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	7bfa      	ldrb	r2, [r7, #15]
 8000542:	71da      	strb	r2, [r3, #7]
}
 8000544:	bf00      	nop
 8000546:	3714      	adds	r7, #20
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr

08000550 <xtime>:

static uint8_t xtime(uint8_t x)
{
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	4603      	mov	r3, r0
 8000558:	71fb      	strb	r3, [r7, #7]
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 800055a:	79fb      	ldrb	r3, [r7, #7]
 800055c:	005b      	lsls	r3, r3, #1
 800055e:	b25a      	sxtb	r2, r3
 8000560:	79fb      	ldrb	r3, [r7, #7]
 8000562:	09db      	lsrs	r3, r3, #7
 8000564:	b2db      	uxtb	r3, r3
 8000566:	4619      	mov	r1, r3
 8000568:	0049      	lsls	r1, r1, #1
 800056a:	440b      	add	r3, r1
 800056c:	4619      	mov	r1, r3
 800056e:	00c8      	lsls	r0, r1, #3
 8000570:	4619      	mov	r1, r3
 8000572:	4603      	mov	r3, r0
 8000574:	440b      	add	r3, r1
 8000576:	b2db      	uxtb	r3, r3
 8000578:	b25b      	sxtb	r3, r3
 800057a:	4053      	eors	r3, r2
 800057c:	b25b      	sxtb	r3, r3
 800057e:	b2db      	uxtb	r3, r3
}
 8000580:	4618      	mov	r0, r3
 8000582:	370c      	adds	r7, #12
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr

0800058c <MixColumns>:

// MixColumns function mixes the columns of the state matrix
static void MixColumns(state_t* state)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint8_t Tmp, Tm, t;
  for (i = 0; i < 4; ++i)
 8000594:	2300      	movs	r3, #0
 8000596:	73fb      	strb	r3, [r7, #15]
 8000598:	e0a4      	b.n	80006e4 <MixColumns+0x158>
  {  
    t   = (*state)[i][0];
 800059a:	7bfa      	ldrb	r2, [r7, #15]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 80005a2:	73bb      	strb	r3, [r7, #14]
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
 80005a4:	7bfa      	ldrb	r2, [r7, #15]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 80005ac:	7bfb      	ldrb	r3, [r7, #15]
 80005ae:	6879      	ldr	r1, [r7, #4]
 80005b0:	009b      	lsls	r3, r3, #2
 80005b2:	440b      	add	r3, r1
 80005b4:	785b      	ldrb	r3, [r3, #1]
 80005b6:	4053      	eors	r3, r2
 80005b8:	b2da      	uxtb	r2, r3
 80005ba:	7bfb      	ldrb	r3, [r7, #15]
 80005bc:	6879      	ldr	r1, [r7, #4]
 80005be:	009b      	lsls	r3, r3, #2
 80005c0:	440b      	add	r3, r1
 80005c2:	789b      	ldrb	r3, [r3, #2]
 80005c4:	4053      	eors	r3, r2
 80005c6:	b2da      	uxtb	r2, r3
 80005c8:	7bfb      	ldrb	r3, [r7, #15]
 80005ca:	6879      	ldr	r1, [r7, #4]
 80005cc:	009b      	lsls	r3, r3, #2
 80005ce:	440b      	add	r3, r1
 80005d0:	78db      	ldrb	r3, [r3, #3]
 80005d2:	4053      	eors	r3, r2
 80005d4:	737b      	strb	r3, [r7, #13]
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
 80005d6:	7bfa      	ldrb	r2, [r7, #15]
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 80005de:	7bfb      	ldrb	r3, [r7, #15]
 80005e0:	6879      	ldr	r1, [r7, #4]
 80005e2:	009b      	lsls	r3, r3, #2
 80005e4:	440b      	add	r3, r1
 80005e6:	785b      	ldrb	r3, [r3, #1]
 80005e8:	4053      	eors	r3, r2
 80005ea:	733b      	strb	r3, [r7, #12]
 80005ec:	7b3b      	ldrb	r3, [r7, #12]
 80005ee:	4618      	mov	r0, r3
 80005f0:	f7ff ffae 	bl	8000550 <xtime>
 80005f4:	4603      	mov	r3, r0
 80005f6:	733b      	strb	r3, [r7, #12]
 80005f8:	7bfa      	ldrb	r2, [r7, #15]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
 8000600:	7b3a      	ldrb	r2, [r7, #12]
 8000602:	7b7b      	ldrb	r3, [r7, #13]
 8000604:	4053      	eors	r3, r2
 8000606:	b2db      	uxtb	r3, r3
 8000608:	7bfa      	ldrb	r2, [r7, #15]
 800060a:	404b      	eors	r3, r1
 800060c:	b2d9      	uxtb	r1, r3
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
 8000614:	7bfb      	ldrb	r3, [r7, #15]
 8000616:	687a      	ldr	r2, [r7, #4]
 8000618:	009b      	lsls	r3, r3, #2
 800061a:	4413      	add	r3, r2
 800061c:	785a      	ldrb	r2, [r3, #1]
 800061e:	7bfb      	ldrb	r3, [r7, #15]
 8000620:	6879      	ldr	r1, [r7, #4]
 8000622:	009b      	lsls	r3, r3, #2
 8000624:	440b      	add	r3, r1
 8000626:	789b      	ldrb	r3, [r3, #2]
 8000628:	4053      	eors	r3, r2
 800062a:	733b      	strb	r3, [r7, #12]
 800062c:	7b3b      	ldrb	r3, [r7, #12]
 800062e:	4618      	mov	r0, r3
 8000630:	f7ff ff8e 	bl	8000550 <xtime>
 8000634:	4603      	mov	r3, r0
 8000636:	733b      	strb	r3, [r7, #12]
 8000638:	7bfb      	ldrb	r3, [r7, #15]
 800063a:	687a      	ldr	r2, [r7, #4]
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	4413      	add	r3, r2
 8000640:	7859      	ldrb	r1, [r3, #1]
 8000642:	7b3a      	ldrb	r2, [r7, #12]
 8000644:	7b7b      	ldrb	r3, [r7, #13]
 8000646:	4053      	eors	r3, r2
 8000648:	b2da      	uxtb	r2, r3
 800064a:	7bfb      	ldrb	r3, [r7, #15]
 800064c:	404a      	eors	r2, r1
 800064e:	b2d1      	uxtb	r1, r2
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	009b      	lsls	r3, r3, #2
 8000654:	4413      	add	r3, r2
 8000656:	460a      	mov	r2, r1
 8000658:	705a      	strb	r2, [r3, #1]
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
 800065a:	7bfb      	ldrb	r3, [r7, #15]
 800065c:	687a      	ldr	r2, [r7, #4]
 800065e:	009b      	lsls	r3, r3, #2
 8000660:	4413      	add	r3, r2
 8000662:	789a      	ldrb	r2, [r3, #2]
 8000664:	7bfb      	ldrb	r3, [r7, #15]
 8000666:	6879      	ldr	r1, [r7, #4]
 8000668:	009b      	lsls	r3, r3, #2
 800066a:	440b      	add	r3, r1
 800066c:	78db      	ldrb	r3, [r3, #3]
 800066e:	4053      	eors	r3, r2
 8000670:	733b      	strb	r3, [r7, #12]
 8000672:	7b3b      	ldrb	r3, [r7, #12]
 8000674:	4618      	mov	r0, r3
 8000676:	f7ff ff6b 	bl	8000550 <xtime>
 800067a:	4603      	mov	r3, r0
 800067c:	733b      	strb	r3, [r7, #12]
 800067e:	7bfb      	ldrb	r3, [r7, #15]
 8000680:	687a      	ldr	r2, [r7, #4]
 8000682:	009b      	lsls	r3, r3, #2
 8000684:	4413      	add	r3, r2
 8000686:	7899      	ldrb	r1, [r3, #2]
 8000688:	7b3a      	ldrb	r2, [r7, #12]
 800068a:	7b7b      	ldrb	r3, [r7, #13]
 800068c:	4053      	eors	r3, r2
 800068e:	b2da      	uxtb	r2, r3
 8000690:	7bfb      	ldrb	r3, [r7, #15]
 8000692:	404a      	eors	r2, r1
 8000694:	b2d1      	uxtb	r1, r2
 8000696:	687a      	ldr	r2, [r7, #4]
 8000698:	009b      	lsls	r3, r3, #2
 800069a:	4413      	add	r3, r2
 800069c:	460a      	mov	r2, r1
 800069e:	709a      	strb	r2, [r3, #2]
    Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	4413      	add	r3, r2
 80006a8:	78da      	ldrb	r2, [r3, #3]
 80006aa:	7bbb      	ldrb	r3, [r7, #14]
 80006ac:	4053      	eors	r3, r2
 80006ae:	733b      	strb	r3, [r7, #12]
 80006b0:	7b3b      	ldrb	r3, [r7, #12]
 80006b2:	4618      	mov	r0, r3
 80006b4:	f7ff ff4c 	bl	8000550 <xtime>
 80006b8:	4603      	mov	r3, r0
 80006ba:	733b      	strb	r3, [r7, #12]
 80006bc:	7bfb      	ldrb	r3, [r7, #15]
 80006be:	687a      	ldr	r2, [r7, #4]
 80006c0:	009b      	lsls	r3, r3, #2
 80006c2:	4413      	add	r3, r2
 80006c4:	78d9      	ldrb	r1, [r3, #3]
 80006c6:	7b3a      	ldrb	r2, [r7, #12]
 80006c8:	7b7b      	ldrb	r3, [r7, #13]
 80006ca:	4053      	eors	r3, r2
 80006cc:	b2da      	uxtb	r2, r3
 80006ce:	7bfb      	ldrb	r3, [r7, #15]
 80006d0:	404a      	eors	r2, r1
 80006d2:	b2d1      	uxtb	r1, r2
 80006d4:	687a      	ldr	r2, [r7, #4]
 80006d6:	009b      	lsls	r3, r3, #2
 80006d8:	4413      	add	r3, r2
 80006da:	460a      	mov	r2, r1
 80006dc:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < 4; ++i)
 80006de:	7bfb      	ldrb	r3, [r7, #15]
 80006e0:	3301      	adds	r3, #1
 80006e2:	73fb      	strb	r3, [r7, #15]
 80006e4:	7bfb      	ldrb	r3, [r7, #15]
 80006e6:	2b03      	cmp	r3, #3
 80006e8:	f67f af57 	bls.w	800059a <MixColumns+0xe>
  }
}
 80006ec:	bf00      	nop
 80006ee:	bf00      	nop
 80006f0:	3710      	adds	r7, #16
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <InvMixColumns>:

// MixColumns function mixes the columns of the state matrix.
// The method used to multiply may be difficult to understand for the inexperienced.
// Please use the references to gain more information.
static void InvMixColumns(state_t* state)
{
 80006f6:	b5b0      	push	{r4, r5, r7, lr}
 80006f8:	b084      	sub	sp, #16
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	6078      	str	r0, [r7, #4]
  int i;
  uint8_t a, b, c, d;
  for (i = 0; i < 4; ++i)
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	e33b      	b.n	8000d7c <InvMixColumns+0x686>
  { 
    a = (*state)[i][0];
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	68fa      	ldr	r2, [r7, #12]
 8000708:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 800070c:	72fb      	strb	r3, [r7, #11]
    b = (*state)[i][1];
 800070e:	687a      	ldr	r2, [r7, #4]
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	009b      	lsls	r3, r3, #2
 8000714:	4413      	add	r3, r2
 8000716:	785b      	ldrb	r3, [r3, #1]
 8000718:	72bb      	strb	r3, [r7, #10]
    c = (*state)[i][2];
 800071a:	687a      	ldr	r2, [r7, #4]
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	009b      	lsls	r3, r3, #2
 8000720:	4413      	add	r3, r2
 8000722:	789b      	ldrb	r3, [r3, #2]
 8000724:	727b      	strb	r3, [r7, #9]
    d = (*state)[i][3];
 8000726:	687a      	ldr	r2, [r7, #4]
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	009b      	lsls	r3, r3, #2
 800072c:	4413      	add	r3, r2
 800072e:	78db      	ldrb	r3, [r3, #3]
 8000730:	723b      	strb	r3, [r7, #8]

    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
 8000732:	7afb      	ldrb	r3, [r7, #11]
 8000734:	4618      	mov	r0, r3
 8000736:	f7ff ff0b 	bl	8000550 <xtime>
 800073a:	4603      	mov	r3, r0
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff ff07 	bl	8000550 <xtime>
 8000742:	4603      	mov	r3, r0
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff ff03 	bl	8000550 <xtime>
 800074a:	4603      	mov	r3, r0
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff feff 	bl	8000550 <xtime>
 8000752:	7abb      	ldrb	r3, [r7, #10]
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff fefb 	bl	8000550 <xtime>
 800075a:	4603      	mov	r3, r0
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff fef7 	bl	8000550 <xtime>
 8000762:	7abb      	ldrb	r3, [r7, #10]
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff fef3 	bl	8000550 <xtime>
 800076a:	4603      	mov	r3, r0
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff feef 	bl	8000550 <xtime>
 8000772:	4603      	mov	r3, r0
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff feeb 	bl	8000550 <xtime>
 800077a:	4603      	mov	r3, r0
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff fee7 	bl	8000550 <xtime>
 8000782:	7a7b      	ldrb	r3, [r7, #9]
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff fee3 	bl	8000550 <xtime>
 800078a:	7a7b      	ldrb	r3, [r7, #9]
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff fedf 	bl	8000550 <xtime>
 8000792:	4603      	mov	r3, r0
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff fedb 	bl	8000550 <xtime>
 800079a:	4603      	mov	r3, r0
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff fed7 	bl	8000550 <xtime>
 80007a2:	4603      	mov	r3, r0
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff fed3 	bl	8000550 <xtime>
 80007aa:	7a3b      	ldrb	r3, [r7, #8]
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff fecf 	bl	8000550 <xtime>
 80007b2:	7a3b      	ldrb	r3, [r7, #8]
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff fecb 	bl	8000550 <xtime>
 80007ba:	4603      	mov	r3, r0
 80007bc:	4618      	mov	r0, r3
 80007be:	f7ff fec7 	bl	8000550 <xtime>
 80007c2:	7a3b      	ldrb	r3, [r7, #8]
 80007c4:	4618      	mov	r0, r3
 80007c6:	f7ff fec3 	bl	8000550 <xtime>
 80007ca:	4603      	mov	r3, r0
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff febf 	bl	8000550 <xtime>
 80007d2:	4603      	mov	r3, r0
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff febb 	bl	8000550 <xtime>
 80007da:	4603      	mov	r3, r0
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff feb7 	bl	8000550 <xtime>
 80007e2:	7afb      	ldrb	r3, [r7, #11]
 80007e4:	4618      	mov	r0, r3
 80007e6:	f7ff feb3 	bl	8000550 <xtime>
 80007ea:	4603      	mov	r3, r0
 80007ec:	461c      	mov	r4, r3
 80007ee:	7afb      	ldrb	r3, [r7, #11]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff fead 	bl	8000550 <xtime>
 80007f6:	4603      	mov	r3, r0
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff fea9 	bl	8000550 <xtime>
 80007fe:	4603      	mov	r3, r0
 8000800:	4063      	eors	r3, r4
 8000802:	b2dc      	uxtb	r4, r3
 8000804:	7afb      	ldrb	r3, [r7, #11]
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff fea2 	bl	8000550 <xtime>
 800080c:	4603      	mov	r3, r0
 800080e:	4618      	mov	r0, r3
 8000810:	f7ff fe9e 	bl	8000550 <xtime>
 8000814:	4603      	mov	r3, r0
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff fe9a 	bl	8000550 <xtime>
 800081c:	4603      	mov	r3, r0
 800081e:	4063      	eors	r3, r4
 8000820:	b2dc      	uxtb	r4, r3
 8000822:	7abb      	ldrb	r3, [r7, #10]
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff fe93 	bl	8000550 <xtime>
 800082a:	4603      	mov	r3, r0
 800082c:	461a      	mov	r2, r3
 800082e:	7abb      	ldrb	r3, [r7, #10]
 8000830:	4053      	eors	r3, r2
 8000832:	b2dd      	uxtb	r5, r3
 8000834:	7abb      	ldrb	r3, [r7, #10]
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff fe8a 	bl	8000550 <xtime>
 800083c:	4603      	mov	r3, r0
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff fe86 	bl	8000550 <xtime>
 8000844:	4603      	mov	r3, r0
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff fe82 	bl	8000550 <xtime>
 800084c:	4603      	mov	r3, r0
 800084e:	406b      	eors	r3, r5
 8000850:	b2db      	uxtb	r3, r3
 8000852:	4063      	eors	r3, r4
 8000854:	b2dc      	uxtb	r4, r3
 8000856:	7a7b      	ldrb	r3, [r7, #9]
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff fe79 	bl	8000550 <xtime>
 800085e:	4603      	mov	r3, r0
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff fe75 	bl	8000550 <xtime>
 8000866:	4603      	mov	r3, r0
 8000868:	461a      	mov	r2, r3
 800086a:	7a7b      	ldrb	r3, [r7, #9]
 800086c:	4053      	eors	r3, r2
 800086e:	b2dd      	uxtb	r5, r3
 8000870:	7a7b      	ldrb	r3, [r7, #9]
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff fe6c 	bl	8000550 <xtime>
 8000878:	4603      	mov	r3, r0
 800087a:	4618      	mov	r0, r3
 800087c:	f7ff fe68 	bl	8000550 <xtime>
 8000880:	4603      	mov	r3, r0
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff fe64 	bl	8000550 <xtime>
 8000888:	4603      	mov	r3, r0
 800088a:	406b      	eors	r3, r5
 800088c:	b2db      	uxtb	r3, r3
 800088e:	4063      	eors	r3, r4
 8000890:	b2dc      	uxtb	r4, r3
 8000892:	7a3b      	ldrb	r3, [r7, #8]
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff fe5b 	bl	8000550 <xtime>
 800089a:	4603      	mov	r3, r0
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff fe57 	bl	8000550 <xtime>
 80008a2:	4603      	mov	r3, r0
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff fe53 	bl	8000550 <xtime>
 80008aa:	4603      	mov	r3, r0
 80008ac:	461a      	mov	r2, r3
 80008ae:	7a3b      	ldrb	r3, [r7, #8]
 80008b0:	4053      	eors	r3, r2
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	4063      	eors	r3, r4
 80008b6:	b2d9      	uxtb	r1, r3
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	68fa      	ldr	r2, [r7, #12]
 80008bc:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
 80008c0:	7afb      	ldrb	r3, [r7, #11]
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff fe44 	bl	8000550 <xtime>
 80008c8:	7afb      	ldrb	r3, [r7, #11]
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff fe40 	bl	8000550 <xtime>
 80008d0:	4603      	mov	r3, r0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f7ff fe3c 	bl	8000550 <xtime>
 80008d8:	7afb      	ldrb	r3, [r7, #11]
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff fe38 	bl	8000550 <xtime>
 80008e0:	4603      	mov	r3, r0
 80008e2:	4618      	mov	r0, r3
 80008e4:	f7ff fe34 	bl	8000550 <xtime>
 80008e8:	4603      	mov	r3, r0
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff fe30 	bl	8000550 <xtime>
 80008f0:	4603      	mov	r3, r0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f7ff fe2c 	bl	8000550 <xtime>
 80008f8:	7abb      	ldrb	r3, [r7, #10]
 80008fa:	4618      	mov	r0, r3
 80008fc:	f7ff fe28 	bl	8000550 <xtime>
 8000900:	4603      	mov	r3, r0
 8000902:	4618      	mov	r0, r3
 8000904:	f7ff fe24 	bl	8000550 <xtime>
 8000908:	4603      	mov	r3, r0
 800090a:	4618      	mov	r0, r3
 800090c:	f7ff fe20 	bl	8000550 <xtime>
 8000910:	4603      	mov	r3, r0
 8000912:	4618      	mov	r0, r3
 8000914:	f7ff fe1c 	bl	8000550 <xtime>
 8000918:	7a7b      	ldrb	r3, [r7, #9]
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff fe18 	bl	8000550 <xtime>
 8000920:	4603      	mov	r3, r0
 8000922:	4618      	mov	r0, r3
 8000924:	f7ff fe14 	bl	8000550 <xtime>
 8000928:	7a7b      	ldrb	r3, [r7, #9]
 800092a:	4618      	mov	r0, r3
 800092c:	f7ff fe10 	bl	8000550 <xtime>
 8000930:	4603      	mov	r3, r0
 8000932:	4618      	mov	r0, r3
 8000934:	f7ff fe0c 	bl	8000550 <xtime>
 8000938:	4603      	mov	r3, r0
 800093a:	4618      	mov	r0, r3
 800093c:	f7ff fe08 	bl	8000550 <xtime>
 8000940:	4603      	mov	r3, r0
 8000942:	4618      	mov	r0, r3
 8000944:	f7ff fe04 	bl	8000550 <xtime>
 8000948:	7a3b      	ldrb	r3, [r7, #8]
 800094a:	4618      	mov	r0, r3
 800094c:	f7ff fe00 	bl	8000550 <xtime>
 8000950:	7a3b      	ldrb	r3, [r7, #8]
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff fdfc 	bl	8000550 <xtime>
 8000958:	4603      	mov	r3, r0
 800095a:	4618      	mov	r0, r3
 800095c:	f7ff fdf8 	bl	8000550 <xtime>
 8000960:	4603      	mov	r3, r0
 8000962:	4618      	mov	r0, r3
 8000964:	f7ff fdf4 	bl	8000550 <xtime>
 8000968:	4603      	mov	r3, r0
 800096a:	4618      	mov	r0, r3
 800096c:	f7ff fdf0 	bl	8000550 <xtime>
 8000970:	7afb      	ldrb	r3, [r7, #11]
 8000972:	4618      	mov	r0, r3
 8000974:	f7ff fdec 	bl	8000550 <xtime>
 8000978:	4603      	mov	r3, r0
 800097a:	4618      	mov	r0, r3
 800097c:	f7ff fde8 	bl	8000550 <xtime>
 8000980:	4603      	mov	r3, r0
 8000982:	4618      	mov	r0, r3
 8000984:	f7ff fde4 	bl	8000550 <xtime>
 8000988:	4603      	mov	r3, r0
 800098a:	461a      	mov	r2, r3
 800098c:	7afb      	ldrb	r3, [r7, #11]
 800098e:	4053      	eors	r3, r2
 8000990:	b2dc      	uxtb	r4, r3
 8000992:	7abb      	ldrb	r3, [r7, #10]
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff fddb 	bl	8000550 <xtime>
 800099a:	4603      	mov	r3, r0
 800099c:	461d      	mov	r5, r3
 800099e:	7abb      	ldrb	r3, [r7, #10]
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff fdd5 	bl	8000550 <xtime>
 80009a6:	4603      	mov	r3, r0
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff fdd1 	bl	8000550 <xtime>
 80009ae:	4603      	mov	r3, r0
 80009b0:	406b      	eors	r3, r5
 80009b2:	b2dd      	uxtb	r5, r3
 80009b4:	7abb      	ldrb	r3, [r7, #10]
 80009b6:	4618      	mov	r0, r3
 80009b8:	f7ff fdca 	bl	8000550 <xtime>
 80009bc:	4603      	mov	r3, r0
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff fdc6 	bl	8000550 <xtime>
 80009c4:	4603      	mov	r3, r0
 80009c6:	4618      	mov	r0, r3
 80009c8:	f7ff fdc2 	bl	8000550 <xtime>
 80009cc:	4603      	mov	r3, r0
 80009ce:	406b      	eors	r3, r5
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	4063      	eors	r3, r4
 80009d4:	b2dc      	uxtb	r4, r3
 80009d6:	7a7b      	ldrb	r3, [r7, #9]
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff fdb9 	bl	8000550 <xtime>
 80009de:	4603      	mov	r3, r0
 80009e0:	461a      	mov	r2, r3
 80009e2:	7a7b      	ldrb	r3, [r7, #9]
 80009e4:	4053      	eors	r3, r2
 80009e6:	b2dd      	uxtb	r5, r3
 80009e8:	7a7b      	ldrb	r3, [r7, #9]
 80009ea:	4618      	mov	r0, r3
 80009ec:	f7ff fdb0 	bl	8000550 <xtime>
 80009f0:	4603      	mov	r3, r0
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff fdac 	bl	8000550 <xtime>
 80009f8:	4603      	mov	r3, r0
 80009fa:	4618      	mov	r0, r3
 80009fc:	f7ff fda8 	bl	8000550 <xtime>
 8000a00:	4603      	mov	r3, r0
 8000a02:	406b      	eors	r3, r5
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	4063      	eors	r3, r4
 8000a08:	b2dc      	uxtb	r4, r3
 8000a0a:	7a3b      	ldrb	r3, [r7, #8]
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff fd9f 	bl	8000550 <xtime>
 8000a12:	4603      	mov	r3, r0
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff fd9b 	bl	8000550 <xtime>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	7a3b      	ldrb	r3, [r7, #8]
 8000a20:	4053      	eors	r3, r2
 8000a22:	b2dd      	uxtb	r5, r3
 8000a24:	7a3b      	ldrb	r3, [r7, #8]
 8000a26:	4618      	mov	r0, r3
 8000a28:	f7ff fd92 	bl	8000550 <xtime>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f7ff fd8e 	bl	8000550 <xtime>
 8000a34:	4603      	mov	r3, r0
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff fd8a 	bl	8000550 <xtime>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	406b      	eors	r3, r5
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	4063      	eors	r3, r4
 8000a44:	b2d9      	uxtb	r1, r3
 8000a46:	687a      	ldr	r2, [r7, #4]
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	009b      	lsls	r3, r3, #2
 8000a4c:	4413      	add	r3, r2
 8000a4e:	460a      	mov	r2, r1
 8000a50:	705a      	strb	r2, [r3, #1]
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
 8000a52:	7afb      	ldrb	r3, [r7, #11]
 8000a54:	4618      	mov	r0, r3
 8000a56:	f7ff fd7b 	bl	8000550 <xtime>
 8000a5a:	7afb      	ldrb	r3, [r7, #11]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff fd77 	bl	8000550 <xtime>
 8000a62:	4603      	mov	r3, r0
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff fd73 	bl	8000550 <xtime>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff fd6f 	bl	8000550 <xtime>
 8000a72:	4603      	mov	r3, r0
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff fd6b 	bl	8000550 <xtime>
 8000a7a:	7abb      	ldrb	r3, [r7, #10]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff fd67 	bl	8000550 <xtime>
 8000a82:	7abb      	ldrb	r3, [r7, #10]
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff fd63 	bl	8000550 <xtime>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff fd5f 	bl	8000550 <xtime>
 8000a92:	7abb      	ldrb	r3, [r7, #10]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff fd5b 	bl	8000550 <xtime>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff fd57 	bl	8000550 <xtime>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fd53 	bl	8000550 <xtime>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff fd4f 	bl	8000550 <xtime>
 8000ab2:	7a7b      	ldrb	r3, [r7, #9]
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff fd4b 	bl	8000550 <xtime>
 8000aba:	4603      	mov	r3, r0
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff fd47 	bl	8000550 <xtime>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff fd43 	bl	8000550 <xtime>
 8000aca:	4603      	mov	r3, r0
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff fd3f 	bl	8000550 <xtime>
 8000ad2:	7a3b      	ldrb	r3, [r7, #8]
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff fd3b 	bl	8000550 <xtime>
 8000ada:	4603      	mov	r3, r0
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff fd37 	bl	8000550 <xtime>
 8000ae2:	7a3b      	ldrb	r3, [r7, #8]
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff fd33 	bl	8000550 <xtime>
 8000aea:	4603      	mov	r3, r0
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff fd2f 	bl	8000550 <xtime>
 8000af2:	4603      	mov	r3, r0
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff fd2b 	bl	8000550 <xtime>
 8000afa:	4603      	mov	r3, r0
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff fd27 	bl	8000550 <xtime>
 8000b02:	7afb      	ldrb	r3, [r7, #11]
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff fd23 	bl	8000550 <xtime>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff fd1f 	bl	8000550 <xtime>
 8000b12:	4603      	mov	r3, r0
 8000b14:	461a      	mov	r2, r3
 8000b16:	7afb      	ldrb	r3, [r7, #11]
 8000b18:	4053      	eors	r3, r2
 8000b1a:	b2dc      	uxtb	r4, r3
 8000b1c:	7afb      	ldrb	r3, [r7, #11]
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff fd16 	bl	8000550 <xtime>
 8000b24:	4603      	mov	r3, r0
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff fd12 	bl	8000550 <xtime>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f7ff fd0e 	bl	8000550 <xtime>
 8000b34:	4603      	mov	r3, r0
 8000b36:	4063      	eors	r3, r4
 8000b38:	b2dc      	uxtb	r4, r3
 8000b3a:	7abb      	ldrb	r3, [r7, #10]
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff fd07 	bl	8000550 <xtime>
 8000b42:	4603      	mov	r3, r0
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff fd03 	bl	8000550 <xtime>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff fcff 	bl	8000550 <xtime>
 8000b52:	4603      	mov	r3, r0
 8000b54:	461a      	mov	r2, r3
 8000b56:	7abb      	ldrb	r3, [r7, #10]
 8000b58:	4053      	eors	r3, r2
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	4063      	eors	r3, r4
 8000b5e:	b2dc      	uxtb	r4, r3
 8000b60:	7a7b      	ldrb	r3, [r7, #9]
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff fcf4 	bl	8000550 <xtime>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	461d      	mov	r5, r3
 8000b6c:	7a7b      	ldrb	r3, [r7, #9]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff fcee 	bl	8000550 <xtime>
 8000b74:	4603      	mov	r3, r0
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff fcea 	bl	8000550 <xtime>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	406b      	eors	r3, r5
 8000b80:	b2dd      	uxtb	r5, r3
 8000b82:	7a7b      	ldrb	r3, [r7, #9]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff fce3 	bl	8000550 <xtime>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff fcdf 	bl	8000550 <xtime>
 8000b92:	4603      	mov	r3, r0
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff fcdb 	bl	8000550 <xtime>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	406b      	eors	r3, r5
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	4063      	eors	r3, r4
 8000ba2:	b2dc      	uxtb	r4, r3
 8000ba4:	7a3b      	ldrb	r3, [r7, #8]
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f7ff fcd2 	bl	8000550 <xtime>
 8000bac:	4603      	mov	r3, r0
 8000bae:	461a      	mov	r2, r3
 8000bb0:	7a3b      	ldrb	r3, [r7, #8]
 8000bb2:	4053      	eors	r3, r2
 8000bb4:	b2dd      	uxtb	r5, r3
 8000bb6:	7a3b      	ldrb	r3, [r7, #8]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff fcc9 	bl	8000550 <xtime>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff fcc5 	bl	8000550 <xtime>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff fcc1 	bl	8000550 <xtime>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	406b      	eors	r3, r5
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	4063      	eors	r3, r4
 8000bd6:	b2d9      	uxtb	r1, r3
 8000bd8:	687a      	ldr	r2, [r7, #4]
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	4413      	add	r3, r2
 8000be0:	460a      	mov	r2, r1
 8000be2:	709a      	strb	r2, [r3, #2]
    (*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
 8000be4:	7afb      	ldrb	r3, [r7, #11]
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff fcb2 	bl	8000550 <xtime>
 8000bec:	4603      	mov	r3, r0
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff fcae 	bl	8000550 <xtime>
 8000bf4:	7afb      	ldrb	r3, [r7, #11]
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff fcaa 	bl	8000550 <xtime>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff fca6 	bl	8000550 <xtime>
 8000c04:	4603      	mov	r3, r0
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff fca2 	bl	8000550 <xtime>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff fc9e 	bl	8000550 <xtime>
 8000c14:	7abb      	ldrb	r3, [r7, #10]
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff fc9a 	bl	8000550 <xtime>
 8000c1c:	7abb      	ldrb	r3, [r7, #10]
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff fc96 	bl	8000550 <xtime>
 8000c24:	4603      	mov	r3, r0
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff fc92 	bl	8000550 <xtime>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff fc8e 	bl	8000550 <xtime>
 8000c34:	4603      	mov	r3, r0
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff fc8a 	bl	8000550 <xtime>
 8000c3c:	7a7b      	ldrb	r3, [r7, #9]
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff fc86 	bl	8000550 <xtime>
 8000c44:	7a7b      	ldrb	r3, [r7, #9]
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff fc82 	bl	8000550 <xtime>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff fc7e 	bl	8000550 <xtime>
 8000c54:	7a7b      	ldrb	r3, [r7, #9]
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff fc7a 	bl	8000550 <xtime>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff fc76 	bl	8000550 <xtime>
 8000c64:	4603      	mov	r3, r0
 8000c66:	4618      	mov	r0, r3
 8000c68:	f7ff fc72 	bl	8000550 <xtime>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff fc6e 	bl	8000550 <xtime>
 8000c74:	7a3b      	ldrb	r3, [r7, #8]
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff fc6a 	bl	8000550 <xtime>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff fc66 	bl	8000550 <xtime>
 8000c84:	4603      	mov	r3, r0
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff fc62 	bl	8000550 <xtime>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff fc5e 	bl	8000550 <xtime>
 8000c94:	7afb      	ldrb	r3, [r7, #11]
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff fc5a 	bl	8000550 <xtime>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	7afb      	ldrb	r3, [r7, #11]
 8000ca2:	4053      	eors	r3, r2
 8000ca4:	b2dc      	uxtb	r4, r3
 8000ca6:	7afb      	ldrb	r3, [r7, #11]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff fc51 	bl	8000550 <xtime>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff fc4d 	bl	8000550 <xtime>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff fc49 	bl	8000550 <xtime>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	4063      	eors	r3, r4
 8000cc2:	b2dc      	uxtb	r4, r3
 8000cc4:	7abb      	ldrb	r3, [r7, #10]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff fc42 	bl	8000550 <xtime>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff fc3e 	bl	8000550 <xtime>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	7abb      	ldrb	r3, [r7, #10]
 8000cda:	4053      	eors	r3, r2
 8000cdc:	b2dd      	uxtb	r5, r3
 8000cde:	7abb      	ldrb	r3, [r7, #10]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff fc35 	bl	8000550 <xtime>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff fc31 	bl	8000550 <xtime>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fc2d 	bl	8000550 <xtime>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	406b      	eors	r3, r5
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	4063      	eors	r3, r4
 8000cfe:	b2dc      	uxtb	r4, r3
 8000d00:	7a7b      	ldrb	r3, [r7, #9]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff fc24 	bl	8000550 <xtime>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff fc20 	bl	8000550 <xtime>
 8000d10:	4603      	mov	r3, r0
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff fc1c 	bl	8000550 <xtime>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	7a7b      	ldrb	r3, [r7, #9]
 8000d1e:	4053      	eors	r3, r2
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	4063      	eors	r3, r4
 8000d24:	b2dc      	uxtb	r4, r3
 8000d26:	7a3b      	ldrb	r3, [r7, #8]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff fc11 	bl	8000550 <xtime>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	461d      	mov	r5, r3
 8000d32:	7a3b      	ldrb	r3, [r7, #8]
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff fc0b 	bl	8000550 <xtime>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff fc07 	bl	8000550 <xtime>
 8000d42:	4603      	mov	r3, r0
 8000d44:	406b      	eors	r3, r5
 8000d46:	b2dd      	uxtb	r5, r3
 8000d48:	7a3b      	ldrb	r3, [r7, #8]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff fc00 	bl	8000550 <xtime>
 8000d50:	4603      	mov	r3, r0
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff fbfc 	bl	8000550 <xtime>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff fbf8 	bl	8000550 <xtime>
 8000d60:	4603      	mov	r3, r0
 8000d62:	406b      	eors	r3, r5
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	4063      	eors	r3, r4
 8000d68:	b2d9      	uxtb	r1, r3
 8000d6a:	687a      	ldr	r2, [r7, #4]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	4413      	add	r3, r2
 8000d72:	460a      	mov	r2, r1
 8000d74:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < 4; ++i)
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	2b03      	cmp	r3, #3
 8000d80:	f77f acc0 	ble.w	8000704 <InvMixColumns+0xe>
  }
}
 8000d84:	bf00      	nop
 8000d86:	bf00      	nop
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000d90 <InvSubBytes>:


// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void InvSubBytes(state_t* state)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 8000d98:	2300      	movs	r3, #0
 8000d9a:	73fb      	strb	r3, [r7, #15]
 8000d9c:	e01d      	b.n	8000dda <InvSubBytes+0x4a>
  {
    for (j = 0; j < 4; ++j)
 8000d9e:	2300      	movs	r3, #0
 8000da0:	73bb      	strb	r3, [r7, #14]
 8000da2:	e014      	b.n	8000dce <InvSubBytes+0x3e>
    {
      (*state)[j][i] = getSBoxInvert((*state)[j][i]);
 8000da4:	7bba      	ldrb	r2, [r7, #14]
 8000da6:	7bfb      	ldrb	r3, [r7, #15]
 8000da8:	6879      	ldr	r1, [r7, #4]
 8000daa:	0092      	lsls	r2, r2, #2
 8000dac:	440a      	add	r2, r1
 8000dae:	4413      	add	r3, r2
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	4618      	mov	r0, r3
 8000db4:	7bba      	ldrb	r2, [r7, #14]
 8000db6:	7bfb      	ldrb	r3, [r7, #15]
 8000db8:	490d      	ldr	r1, [pc, #52]	; (8000df0 <InvSubBytes+0x60>)
 8000dba:	5c08      	ldrb	r0, [r1, r0]
 8000dbc:	6879      	ldr	r1, [r7, #4]
 8000dbe:	0092      	lsls	r2, r2, #2
 8000dc0:	440a      	add	r2, r1
 8000dc2:	4413      	add	r3, r2
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 8000dc8:	7bbb      	ldrb	r3, [r7, #14]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	73bb      	strb	r3, [r7, #14]
 8000dce:	7bbb      	ldrb	r3, [r7, #14]
 8000dd0:	2b03      	cmp	r3, #3
 8000dd2:	d9e7      	bls.n	8000da4 <InvSubBytes+0x14>
  for (i = 0; i < 4; ++i)
 8000dd4:	7bfb      	ldrb	r3, [r7, #15]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	73fb      	strb	r3, [r7, #15]
 8000dda:	7bfb      	ldrb	r3, [r7, #15]
 8000ddc:	2b03      	cmp	r3, #3
 8000dde:	d9de      	bls.n	8000d9e <InvSubBytes+0xe>
    }
  }
}
 8000de0:	bf00      	nop
 8000de2:	bf00      	nop
 8000de4:	3714      	adds	r7, #20
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	08003e28 	.word	0x08003e28

08000df4 <InvShiftRows>:

static void InvShiftRows(state_t* state)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to right  
  temp = (*state)[3][1];
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	7b5b      	ldrb	r3, [r3, #13]
 8000e00:	73fb      	strb	r3, [r7, #15]
  (*state)[3][1] = (*state)[2][1];
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	7a5a      	ldrb	r2, [r3, #9]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	735a      	strb	r2, [r3, #13]
  (*state)[2][1] = (*state)[1][1];
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	795a      	ldrb	r2, [r3, #5]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	725a      	strb	r2, [r3, #9]
  (*state)[1][1] = (*state)[0][1];
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	785a      	ldrb	r2, [r3, #1]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	715a      	strb	r2, [r3, #5]
  (*state)[0][1] = temp;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	7bfa      	ldrb	r2, [r7, #15]
 8000e1e:	705a      	strb	r2, [r3, #1]

  // Rotate second row 2 columns to right 
  temp = (*state)[0][2];
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	789b      	ldrb	r3, [r3, #2]
 8000e24:	73fb      	strb	r3, [r7, #15]
  (*state)[0][2] = (*state)[2][2];
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	7a9a      	ldrb	r2, [r3, #10]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	7bfa      	ldrb	r2, [r7, #15]
 8000e32:	729a      	strb	r2, [r3, #10]

  temp = (*state)[1][2];
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	799b      	ldrb	r3, [r3, #6]
 8000e38:	73fb      	strb	r3, [r7, #15]
  (*state)[1][2] = (*state)[3][2];
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	7b9a      	ldrb	r2, [r3, #14]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	7bfa      	ldrb	r2, [r7, #15]
 8000e46:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to right
  temp = (*state)[0][3];
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	78db      	ldrb	r3, [r3, #3]
 8000e4c:	73fb      	strb	r3, [r7, #15]
  (*state)[0][3] = (*state)[1][3];
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	79da      	ldrb	r2, [r3, #7]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	70da      	strb	r2, [r3, #3]
  (*state)[1][3] = (*state)[2][3];
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	7ada      	ldrb	r2, [r3, #11]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	71da      	strb	r2, [r3, #7]
  (*state)[2][3] = (*state)[3][3];
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	7bda      	ldrb	r2, [r3, #15]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	72da      	strb	r2, [r3, #11]
  (*state)[3][3] = temp;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	7bfa      	ldrb	r2, [r7, #15]
 8000e6a:	73da      	strb	r2, [r3, #15]
}
 8000e6c:	bf00      	nop
 8000e6e:	3714      	adds	r7, #20
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <Cipher>:
#endif // #if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)

// Cipher is the main function that encrypts the PlainText.
static void Cipher(state_t* state, const uint8_t* RoundKey)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
 8000e82:	2300      	movs	r3, #0
 8000e84:	73fb      	strb	r3, [r7, #15]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(0, state, RoundKey);
 8000e86:	683a      	ldr	r2, [r7, #0]
 8000e88:	6879      	ldr	r1, [r7, #4]
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	f7ff fab0 	bl	80003f0 <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr rounds are executed in the loop below.
  // Last one without MixColumns()
  for (round = 1; ; ++round)
 8000e90:	2301      	movs	r3, #1
 8000e92:	73fb      	strb	r3, [r7, #15]
  {
    SubBytes(state);
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f7ff fae7 	bl	8000468 <SubBytes>
    ShiftRows(state);
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f7ff fb16 	bl	80004cc <ShiftRows>
    if (round == Nr) {
 8000ea0:	7bfb      	ldrb	r3, [r7, #15]
 8000ea2:	2b0a      	cmp	r3, #10
 8000ea4:	d00c      	beq.n	8000ec0 <Cipher+0x48>
      break;
    }
    MixColumns(state);
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f7ff fb70 	bl	800058c <MixColumns>
    AddRoundKey(round, state, RoundKey);
 8000eac:	7bfb      	ldrb	r3, [r7, #15]
 8000eae:	683a      	ldr	r2, [r7, #0]
 8000eb0:	6879      	ldr	r1, [r7, #4]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff fa9c 	bl	80003f0 <AddRoundKey>
  for (round = 1; ; ++round)
 8000eb8:	7bfb      	ldrb	r3, [r7, #15]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	73fb      	strb	r3, [r7, #15]
    SubBytes(state);
 8000ebe:	e7e9      	b.n	8000e94 <Cipher+0x1c>
      break;
 8000ec0:	bf00      	nop
  }
  // Add round key to last round
  AddRoundKey(Nr, state, RoundKey);
 8000ec2:	683a      	ldr	r2, [r7, #0]
 8000ec4:	6879      	ldr	r1, [r7, #4]
 8000ec6:	200a      	movs	r0, #10
 8000ec8:	f7ff fa92 	bl	80003f0 <AddRoundKey>
}
 8000ecc:	bf00      	nop
 8000ece:	3710      	adds	r7, #16
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <InvCipher>:

#if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)
static void InvCipher(state_t* state, const uint8_t* RoundKey)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	73fb      	strb	r3, [r7, #15]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(Nr, state, RoundKey);
 8000ee2:	683a      	ldr	r2, [r7, #0]
 8000ee4:	6879      	ldr	r1, [r7, #4]
 8000ee6:	200a      	movs	r0, #10
 8000ee8:	f7ff fa82 	bl	80003f0 <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr rounds are executed in the loop below.
  // Last one without InvMixColumn()
  for (round = (Nr - 1); ; --round)
 8000eec:	2309      	movs	r3, #9
 8000eee:	73fb      	strb	r3, [r7, #15]
  {
    InvShiftRows(state);
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f7ff ff7f 	bl	8000df4 <InvShiftRows>
    InvSubBytes(state);
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f7ff ff4a 	bl	8000d90 <InvSubBytes>
    AddRoundKey(round, state, RoundKey);
 8000efc:	7bfb      	ldrb	r3, [r7, #15]
 8000efe:	683a      	ldr	r2, [r7, #0]
 8000f00:	6879      	ldr	r1, [r7, #4]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff fa74 	bl	80003f0 <AddRoundKey>
    if (round == 0) {
 8000f08:	7bfb      	ldrb	r3, [r7, #15]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d006      	beq.n	8000f1c <InvCipher+0x48>
      break;
    }
    InvMixColumns(state);
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff fbf1 	bl	80006f6 <InvMixColumns>
  for (round = (Nr - 1); ; --round)
 8000f14:	7bfb      	ldrb	r3, [r7, #15]
 8000f16:	3b01      	subs	r3, #1
 8000f18:	73fb      	strb	r3, [r7, #15]
    InvShiftRows(state);
 8000f1a:	e7e9      	b.n	8000ef0 <InvCipher+0x1c>
      break;
 8000f1c:	bf00      	nop
  }

}
 8000f1e:	bf00      	nop
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <AES_ECB_encrypt>:
/*****************************************************************************/
#if defined(ECB) && (ECB == 1)


void AES_ECB_encrypt(const struct AES_ctx* ctx, uint8_t* buf)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b082      	sub	sp, #8
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
 8000f2e:	6039      	str	r1, [r7, #0]
  // The next function call encrypts the PlainText with the Key using AES algorithm.
  Cipher((state_t*)buf, ctx->RoundKey);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	4619      	mov	r1, r3
 8000f34:	6838      	ldr	r0, [r7, #0]
 8000f36:	f7ff ff9f 	bl	8000e78 <Cipher>
}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <AES_ECB_decrypt>:

void AES_ECB_decrypt(const struct AES_ctx* ctx, uint8_t* buf)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b082      	sub	sp, #8
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
 8000f4a:	6039      	str	r1, [r7, #0]
  // The next function call decrypts the PlainText with the Key using AES algorithm.
  InvCipher((state_t*)buf, ctx->RoundKey);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4619      	mov	r1, r3
 8000f50:	6838      	ldr	r0, [r7, #0]
 8000f52:	f7ff ffbf 	bl	8000ed4 <InvCipher>
}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	b083      	sub	sp, #12
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f66:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f6a:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d013      	beq.n	8000f9e <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f76:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f7a:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000f7e:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d00b      	beq.n	8000f9e <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000f86:	e000      	b.n	8000f8a <ITM_SendChar+0x2c>
    {
      __NOP();
 8000f88:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000f8a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d0f9      	beq.n	8000f88 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000f94:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f98:	687a      	ldr	r2, [r7, #4]
 8000f9a:	b2d2      	uxtb	r2, r2
 8000f9c:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000f9e:	687b      	ldr	r3, [r7, #4]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <print_hex>:
#ifndef _UTIL_H
#define _UTIL_H

static void print_hex(const unsigned char* hex, int len)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
	for (const unsigned char* p = hex; p - hex < len; p++)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	e008      	b.n	8000fce <print_hex+0x22>
		printf("%02X ", *p);
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4809      	ldr	r0, [pc, #36]	; (8000fe8 <print_hex+0x3c>)
 8000fc4:	f001 ff88 	bl	8002ed8 <iprintf>
	for (const unsigned char* p = hex; p - hex < len; p++)
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	68fa      	ldr	r2, [r7, #12]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	1ad3      	subs	r3, r2, r3
 8000fd4:	683a      	ldr	r2, [r7, #0]
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	dcf0      	bgt.n	8000fbc <print_hex+0x10>
	printf("\n");
 8000fda:	200a      	movs	r0, #10
 8000fdc:	f001 ff8e 	bl	8002efc <putchar>
}
 8000fe0:	bf00      	nop
 8000fe2:	3710      	adds	r7, #16
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	08003c68 	.word	0x08003c68

08000fec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b0ba      	sub	sp, #232	; 0xe8
 8000ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000ff2:	4b61      	ldr	r3, [pc, #388]	; (8001178 <main+0x18c>)
 8000ff4:	68db      	ldr	r3, [r3, #12]
 8000ff6:	4a60      	ldr	r2, [pc, #384]	; (8001178 <main+0x18c>)
 8000ff8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ffc:	60d3      	str	r3, [r2, #12]
	  DWT->CYCCNT = 0;
 8000ffe:	4b5f      	ldr	r3, [pc, #380]	; (800117c <main+0x190>)
 8001000:	2200      	movs	r2, #0
 8001002:	605a      	str	r2, [r3, #4]
	  DWT->CTRL  |= 1;
 8001004:	4b5d      	ldr	r3, [pc, #372]	; (800117c <main+0x190>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a5c      	ldr	r2, [pc, #368]	; (800117c <main+0x190>)
 800100a:	f043 0301 	orr.w	r3, r3, #1
 800100e:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001010:	f000 fb77 	bl	8001702 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001014:	f000 f8ce 	bl	80011b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001018:	f000 f912 	bl	8001240 <MX_GPIO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 800101c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001020:	4857      	ldr	r0, [pc, #348]	; (8001180 <main+0x194>)
 8001022:	f000 fe61 	bl	8001ce8 <HAL_GPIO_TogglePin>

		print_hex(plain, STRING_LENGTH);
 8001026:	2140      	movs	r1, #64	; 0x40
 8001028:	4856      	ldr	r0, [pc, #344]	; (8001184 <main+0x198>)
 800102a:	f7ff ffbf 	bl	8000fac <print_hex>

		uint32_t key_cycle_count = DWT->CYCCNT;
 800102e:	4b53      	ldr	r3, [pc, #332]	; (800117c <main+0x190>)
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

		uint8_t i;

		//// Initialization ////
		struct AES_ctx ctx;
		AES_init_ctx(&ctx, key);
 8001036:	1d3b      	adds	r3, r7, #4
 8001038:	4953      	ldr	r1, [pc, #332]	; (8001188 <main+0x19c>)
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff f9ca 	bl	80003d4 <AES_init_ctx>

		uint32_t enc_start_cycle_count = DWT->CYCCNT;
 8001040:	4b4e      	ldr	r3, [pc, #312]	; (800117c <main+0x190>)
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		//// Encryption ////
		for (i = 0; i < NUM_ENC; ++i)
 8001048:	2300      	movs	r3, #0
 800104a:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 800104e:	e00f      	b.n	8001070 <main+0x84>
			AES_ECB_encrypt(&ctx, plain + (i * 16));
 8001050:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8001054:	011b      	lsls	r3, r3, #4
 8001056:	461a      	mov	r2, r3
 8001058:	4b4a      	ldr	r3, [pc, #296]	; (8001184 <main+0x198>)
 800105a:	441a      	add	r2, r3
 800105c:	1d3b      	adds	r3, r7, #4
 800105e:	4611      	mov	r1, r2
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff ff60 	bl	8000f26 <AES_ECB_encrypt>
		for (i = 0; i < NUM_ENC; ++i)
 8001066:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 800106a:	3301      	adds	r3, #1
 800106c:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 8001070:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8001074:	2b03      	cmp	r3, #3
 8001076:	d9eb      	bls.n	8001050 <main+0x64>
		uint32_t enc_end_cycle_count = DWT->CYCCNT;
 8001078:	4b40      	ldr	r3, [pc, #256]	; (800117c <main+0x190>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

		print_hex(plain, STRING_LENGTH);
 8001080:	2140      	movs	r1, #64	; 0x40
 8001082:	4840      	ldr	r0, [pc, #256]	; (8001184 <main+0x198>)
 8001084:	f7ff ff92 	bl	8000fac <print_hex>

		uint32_t dec_start_cycle_count = DWT->CYCCNT;
 8001088:	4b3c      	ldr	r3, [pc, #240]	; (800117c <main+0x190>)
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		//// Decryption ////
		for (i = 0; i < NUM_ENC; ++i)
 8001090:	2300      	movs	r3, #0
 8001092:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 8001096:	e00f      	b.n	80010b8 <main+0xcc>
			AES_ECB_decrypt(&ctx, plain + (i * 16));
 8001098:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 800109c:	011b      	lsls	r3, r3, #4
 800109e:	461a      	mov	r2, r3
 80010a0:	4b38      	ldr	r3, [pc, #224]	; (8001184 <main+0x198>)
 80010a2:	441a      	add	r2, r3
 80010a4:	1d3b      	adds	r3, r7, #4
 80010a6:	4611      	mov	r1, r2
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff ff4a 	bl	8000f42 <AES_ECB_decrypt>
		for (i = 0; i < NUM_ENC; ++i)
 80010ae:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 80010b2:	3301      	adds	r3, #1
 80010b4:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 80010b8:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 80010bc:	2b03      	cmp	r3, #3
 80010be:	d9eb      	bls.n	8001098 <main+0xac>
		uint32_t dec_end_cycle_count = DWT->CYCCNT;
 80010c0:	4b2e      	ldr	r3, [pc, #184]	; (800117c <main+0x190>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

		print_hex(plain, STRING_LENGTH);
 80010c8:	2140      	movs	r1, #64	; 0x40
 80010ca:	482e      	ldr	r0, [pc, #184]	; (8001184 <main+0x198>)
 80010cc:	f7ff ff6e 	bl	8000fac <print_hex>

		uint32_t key_cycles = enc_start_cycle_count - key_cycle_count;
 80010d0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80010d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	    uint32_t enc_total_cycles = enc_end_cycle_count - enc_start_cycle_count;
 80010de:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80010e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	    uint32_t dec_total_cycles = dec_end_cycle_count - dec_start_cycle_count;
 80010ec:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80010f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

	    printf("Key cycles: %u\n", key_cycles);
 80010fa:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 80010fe:	4823      	ldr	r0, [pc, #140]	; (800118c <main+0x1a0>)
 8001100:	f001 feea 	bl	8002ed8 <iprintf>
	    printf("\nEnc start cycles: %u\n", enc_start_cycle_count);
 8001104:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8001108:	4821      	ldr	r0, [pc, #132]	; (8001190 <main+0x1a4>)
 800110a:	f001 fee5 	bl	8002ed8 <iprintf>
	    printf("Enc end cycles: %u\n", enc_end_cycle_count);
 800110e:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8001112:	4820      	ldr	r0, [pc, #128]	; (8001194 <main+0x1a8>)
 8001114:	f001 fee0 	bl	8002ed8 <iprintf>
	    printf("Enc total cycles: %u\n", enc_total_cycles);
 8001118:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800111c:	481e      	ldr	r0, [pc, #120]	; (8001198 <main+0x1ac>)
 800111e:	f001 fedb 	bl	8002ed8 <iprintf>
	    printf("\nDec start cycles: %u\n", dec_start_cycle_count);
 8001122:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8001126:	481d      	ldr	r0, [pc, #116]	; (800119c <main+0x1b0>)
 8001128:	f001 fed6 	bl	8002ed8 <iprintf>
	    printf("Dec end cycles: %u\n", dec_end_cycle_count);
 800112c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001130:	481b      	ldr	r0, [pc, #108]	; (80011a0 <main+0x1b4>)
 8001132:	f001 fed1 	bl	8002ed8 <iprintf>
	    printf("Dec total cycles: %u\n", dec_total_cycles);
 8001136:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 800113a:	481a      	ldr	r0, [pc, #104]	; (80011a4 <main+0x1b8>)
 800113c:	f001 fecc 	bl	8002ed8 <iprintf>
	    printf("\nKey + Enc: %u\n", key_cycles + enc_total_cycles);
 8001140:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001144:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001148:	4413      	add	r3, r2
 800114a:	4619      	mov	r1, r3
 800114c:	4816      	ldr	r0, [pc, #88]	; (80011a8 <main+0x1bc>)
 800114e:	f001 fec3 	bl	8002ed8 <iprintf>
	    printf("Key + Dec: %u\n", key_cycles + dec_total_cycles);
 8001152:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001156:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800115a:	4413      	add	r3, r2
 800115c:	4619      	mov	r1, r3
 800115e:	4813      	ldr	r0, [pc, #76]	; (80011ac <main+0x1c0>)
 8001160:	f001 feba 	bl	8002ed8 <iprintf>

	    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8001164:	2180      	movs	r1, #128	; 0x80
 8001166:	4812      	ldr	r0, [pc, #72]	; (80011b0 <main+0x1c4>)
 8001168:	f000 fdbe 	bl	8001ce8 <HAL_GPIO_TogglePin>

	    break;
 800116c:	bf00      	nop
 800116e:	2300      	movs	r3, #0
  }
  /* USER CODE END 3 */
}
 8001170:	4618      	mov	r0, r3
 8001172:	37e8      	adds	r7, #232	; 0xe8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	e000edf0 	.word	0xe000edf0
 800117c:	e0001000 	.word	0xe0001000
 8001180:	42020000 	.word	0x42020000
 8001184:	20000000 	.word	0x20000000
 8001188:	20000040 	.word	0x20000040
 800118c:	08003c70 	.word	0x08003c70
 8001190:	08003c80 	.word	0x08003c80
 8001194:	08003c98 	.word	0x08003c98
 8001198:	08003cac 	.word	0x08003cac
 800119c:	08003cc4 	.word	0x08003cc4
 80011a0:	08003cdc 	.word	0x08003cdc
 80011a4:	08003cf0 	.word	0x08003cf0
 80011a8:	08003d08 	.word	0x08003d08
 80011ac:	08003d18 	.word	0x08003d18
 80011b0:	42020400 	.word	0x42020400

080011b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b098      	sub	sp, #96	; 0x60
 80011b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ba:	f107 0318 	add.w	r3, r7, #24
 80011be:	2248      	movs	r2, #72	; 0x48
 80011c0:	2100      	movs	r1, #0
 80011c2:	4618      	mov	r0, r3
 80011c4:	f001 fea2 	bl	8002f0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c8:	1d3b      	adds	r3, r7, #4
 80011ca:	2200      	movs	r2, #0
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	605a      	str	r2, [r3, #4]
 80011d0:	609a      	str	r2, [r3, #8]
 80011d2:	60da      	str	r2, [r3, #12]
 80011d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 80011d6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80011da:	f000 fdad 	bl	8001d38 <HAL_PWREx_ControlVoltageScaling>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80011e4:	f000 f8af 	bl	8001346 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80011e8:	2310      	movs	r3, #16
 80011ea:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80011ec:	2301      	movs	r3, #1
 80011ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80011f0:	2300      	movs	r3, #0
 80011f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80011f4:	2360      	movs	r3, #96	; 0x60
 80011f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011f8:	2300      	movs	r3, #0
 80011fa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011fc:	f107 0318 	add.w	r3, r7, #24
 8001200:	4618      	mov	r0, r3
 8001202:	f000 fe19 	bl	8001e38 <HAL_RCC_OscConfig>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800120c:	f000 f89b 	bl	8001346 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001210:	230f      	movs	r3, #15
 8001212:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001214:	2300      	movs	r3, #0
 8001216:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001218:	2300      	movs	r3, #0
 800121a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800121c:	2300      	movs	r3, #0
 800121e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001224:	1d3b      	adds	r3, r7, #4
 8001226:	2100      	movs	r1, #0
 8001228:	4618      	mov	r0, r3
 800122a:	f001 fadb 	bl	80027e4 <HAL_RCC_ClockConfig>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001234:	f000 f887 	bl	8001346 <Error_Handler>
  }
}
 8001238:	bf00      	nop
 800123a:	3760      	adds	r7, #96	; 0x60
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b088      	sub	sp, #32
 8001244:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001246:	f107 030c 	add.w	r3, r7, #12
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	609a      	str	r2, [r3, #8]
 8001252:	60da      	str	r2, [r3, #12]
 8001254:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001256:	4b31      	ldr	r3, [pc, #196]	; (800131c <MX_GPIO_Init+0xdc>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125a:	4a30      	ldr	r2, [pc, #192]	; (800131c <MX_GPIO_Init+0xdc>)
 800125c:	f043 0304 	orr.w	r3, r3, #4
 8001260:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001262:	4b2e      	ldr	r3, [pc, #184]	; (800131c <MX_GPIO_Init+0xdc>)
 8001264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001266:	f003 0304 	and.w	r3, r3, #4
 800126a:	60bb      	str	r3, [r7, #8]
 800126c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800126e:	4b2b      	ldr	r3, [pc, #172]	; (800131c <MX_GPIO_Init+0xdc>)
 8001270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001272:	4a2a      	ldr	r2, [pc, #168]	; (800131c <MX_GPIO_Init+0xdc>)
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	64d3      	str	r3, [r2, #76]	; 0x4c
 800127a:	4b28      	ldr	r3, [pc, #160]	; (800131c <MX_GPIO_Init+0xdc>)
 800127c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001286:	4b25      	ldr	r3, [pc, #148]	; (800131c <MX_GPIO_Init+0xdc>)
 8001288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128a:	4a24      	ldr	r2, [pc, #144]	; (800131c <MX_GPIO_Init+0xdc>)
 800128c:	f043 0302 	orr.w	r3, r3, #2
 8001290:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001292:	4b22      	ldr	r3, [pc, #136]	; (800131c <MX_GPIO_Init+0xdc>)
 8001294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	603b      	str	r3, [r7, #0]
 800129c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800129e:	2200      	movs	r2, #0
 80012a0:	2180      	movs	r1, #128	; 0x80
 80012a2:	481f      	ldr	r0, [pc, #124]	; (8001320 <MX_GPIO_Init+0xe0>)
 80012a4:	f000 fd08 	bl	8001cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80012a8:	2200      	movs	r2, #0
 80012aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012ae:	481d      	ldr	r0, [pc, #116]	; (8001324 <MX_GPIO_Init+0xe4>)
 80012b0:	f000 fd02 	bl	8001cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80012b4:	2200      	movs	r2, #0
 80012b6:	2180      	movs	r1, #128	; 0x80
 80012b8:	481b      	ldr	r0, [pc, #108]	; (8001328 <MX_GPIO_Init+0xe8>)
 80012ba:	f000 fcfd 	bl	8001cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80012be:	2380      	movs	r3, #128	; 0x80
 80012c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c2:	2301      	movs	r3, #1
 80012c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ca:	2300      	movs	r3, #0
 80012cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ce:	f107 030c 	add.w	r3, r7, #12
 80012d2:	4619      	mov	r1, r3
 80012d4:	4812      	ldr	r0, [pc, #72]	; (8001320 <MX_GPIO_Init+0xe0>)
 80012d6:	f000 fb6f 	bl	80019b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e0:	2301      	movs	r3, #1
 80012e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ec:	f107 030c 	add.w	r3, r7, #12
 80012f0:	4619      	mov	r1, r3
 80012f2:	480c      	ldr	r0, [pc, #48]	; (8001324 <MX_GPIO_Init+0xe4>)
 80012f4:	f000 fb60 	bl	80019b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80012f8:	2380      	movs	r3, #128	; 0x80
 80012fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fc:	2301      	movs	r3, #1
 80012fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001304:	2300      	movs	r3, #0
 8001306:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001308:	f107 030c 	add.w	r3, r7, #12
 800130c:	4619      	mov	r1, r3
 800130e:	4806      	ldr	r0, [pc, #24]	; (8001328 <MX_GPIO_Init+0xe8>)
 8001310:	f000 fb52 	bl	80019b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001314:	bf00      	nop
 8001316:	3720      	adds	r7, #32
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40021000 	.word	0x40021000
 8001320:	42020800 	.word	0x42020800
 8001324:	42020000 	.word	0x42020000
 8001328:	42020400 	.word	0x42020400

0800132c <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
	return ITM_SendChar(ch);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff fe11 	bl	8000f5e <ITM_SendChar>
 800133c:	4603      	mov	r3, r0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800134a:	b672      	cpsid	i
}
 800134c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800134e:	e7fe      	b.n	800134e <Error_Handler+0x8>

08001350 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001356:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <HAL_MspInit+0x44>)
 8001358:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800135a:	4a0e      	ldr	r2, [pc, #56]	; (8001394 <HAL_MspInit+0x44>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	6613      	str	r3, [r2, #96]	; 0x60
 8001362:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <HAL_MspInit+0x44>)
 8001364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	607b      	str	r3, [r7, #4]
 800136c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800136e:	4b09      	ldr	r3, [pc, #36]	; (8001394 <HAL_MspInit+0x44>)
 8001370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001372:	4a08      	ldr	r2, [pc, #32]	; (8001394 <HAL_MspInit+0x44>)
 8001374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001378:	6593      	str	r3, [r2, #88]	; 0x58
 800137a:	4b06      	ldr	r3, [pc, #24]	; (8001394 <HAL_MspInit+0x44>)
 800137c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800137e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001382:	603b      	str	r3, [r7, #0]
 8001384:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	40021000 	.word	0x40021000

08001398 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800139c:	e7fe      	b.n	800139c <NMI_Handler+0x4>

0800139e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800139e:	b480      	push	{r7}
 80013a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013a2:	e7fe      	b.n	80013a2 <HardFault_Handler+0x4>

080013a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013a8:	e7fe      	b.n	80013a8 <MemManage_Handler+0x4>

080013aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ae:	e7fe      	b.n	80013ae <BusFault_Handler+0x4>

080013b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013b4:	e7fe      	b.n	80013b4 <UsageFault_Handler+0x4>

080013b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013b6:	b480      	push	{r7}
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr

080013d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013e4:	f000 f9e4 	bl	80017b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}

080013ec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]
 80013fc:	e00a      	b.n	8001414 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013fe:	f3af 8000 	nop.w
 8001402:	4601      	mov	r1, r0
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	1c5a      	adds	r2, r3, #1
 8001408:	60ba      	str	r2, [r7, #8]
 800140a:	b2ca      	uxtb	r2, r1
 800140c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	3301      	adds	r3, #1
 8001412:	617b      	str	r3, [r7, #20]
 8001414:	697a      	ldr	r2, [r7, #20]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	429a      	cmp	r2, r3
 800141a:	dbf0      	blt.n	80013fe <_read+0x12>
  }

  return len;
 800141c:	687b      	ldr	r3, [r7, #4]
}
 800141e:	4618      	mov	r0, r3
 8001420:	3718      	adds	r7, #24
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b086      	sub	sp, #24
 800142a:	af00      	add	r7, sp, #0
 800142c:	60f8      	str	r0, [r7, #12]
 800142e:	60b9      	str	r1, [r7, #8]
 8001430:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001432:	2300      	movs	r3, #0
 8001434:	617b      	str	r3, [r7, #20]
 8001436:	e009      	b.n	800144c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	1c5a      	adds	r2, r3, #1
 800143c:	60ba      	str	r2, [r7, #8]
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff ff73 	bl	800132c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	3301      	adds	r3, #1
 800144a:	617b      	str	r3, [r7, #20]
 800144c:	697a      	ldr	r2, [r7, #20]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	429a      	cmp	r2, r3
 8001452:	dbf1      	blt.n	8001438 <_write+0x12>
  }
  return len;
 8001454:	687b      	ldr	r3, [r7, #4]
}
 8001456:	4618      	mov	r0, r3
 8001458:	3718      	adds	r7, #24
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <_close>:

int _close(int file)
{
 800145e:	b480      	push	{r7}
 8001460:	b083      	sub	sp, #12
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001466:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800146a:	4618      	mov	r0, r3
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr

08001476 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001476:	b480      	push	{r7}
 8001478:	b083      	sub	sp, #12
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
 800147e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001486:	605a      	str	r2, [r3, #4]
  return 0;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr

08001496 <_isatty>:

int _isatty(int file)
{
 8001496:	b480      	push	{r7}
 8001498:	b083      	sub	sp, #12
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800149e:	2301      	movs	r3, #1
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3714      	adds	r7, #20
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
	...

080014c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014d0:	4a14      	ldr	r2, [pc, #80]	; (8001524 <_sbrk+0x5c>)
 80014d2:	4b15      	ldr	r3, [pc, #84]	; (8001528 <_sbrk+0x60>)
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014dc:	4b13      	ldr	r3, [pc, #76]	; (800152c <_sbrk+0x64>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d102      	bne.n	80014ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014e4:	4b11      	ldr	r3, [pc, #68]	; (800152c <_sbrk+0x64>)
 80014e6:	4a12      	ldr	r2, [pc, #72]	; (8001530 <_sbrk+0x68>)
 80014e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ea:	4b10      	ldr	r3, [pc, #64]	; (800152c <_sbrk+0x64>)
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4413      	add	r3, r2
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d207      	bcs.n	8001508 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014f8:	f001 fd10 	bl	8002f1c <__errno>
 80014fc:	4603      	mov	r3, r0
 80014fe:	220c      	movs	r2, #12
 8001500:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001502:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001506:	e009      	b.n	800151c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001508:	4b08      	ldr	r3, [pc, #32]	; (800152c <_sbrk+0x64>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800150e:	4b07      	ldr	r3, [pc, #28]	; (800152c <_sbrk+0x64>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4413      	add	r3, r2
 8001516:	4a05      	ldr	r2, [pc, #20]	; (800152c <_sbrk+0x64>)
 8001518:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800151a:	68fb      	ldr	r3, [r7, #12]
}
 800151c:	4618      	mov	r0, r3
 800151e:	3718      	adds	r7, #24
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	20030000 	.word	0x20030000
 8001528:	00000400 	.word	0x00000400
 800152c:	200000d4 	.word	0x200000d4
 8001530:	20000228 	.word	0x20000228

08001534 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <SystemInit+0x20>)
 800153a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800153e:	4a05      	ldr	r2, [pc, #20]	; (8001554 <SystemInit+0x20>)
 8001540:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001544:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	e000ed00 	.word	0xe000ed00

08001558 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001558:	b480      	push	{r7}
 800155a:	b087      	sub	sp, #28
 800155c:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 800155e:	4b4f      	ldr	r3, [pc, #316]	; (800169c <SystemCoreClockUpdate+0x144>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0308 	and.w	r3, r3, #8
 8001566:	2b00      	cmp	r3, #0
 8001568:	d107      	bne.n	800157a <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 800156a:	4b4c      	ldr	r3, [pc, #304]	; (800169c <SystemCoreClockUpdate+0x144>)
 800156c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001570:	0a1b      	lsrs	r3, r3, #8
 8001572:	f003 030f 	and.w	r3, r3, #15
 8001576:	617b      	str	r3, [r7, #20]
 8001578:	e005      	b.n	8001586 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 800157a:	4b48      	ldr	r3, [pc, #288]	; (800169c <SystemCoreClockUpdate+0x144>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	091b      	lsrs	r3, r3, #4
 8001580:	f003 030f 	and.w	r3, r3, #15
 8001584:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8001586:	4a46      	ldr	r2, [pc, #280]	; (80016a0 <SystemCoreClockUpdate+0x148>)
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800158e:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001590:	4b42      	ldr	r3, [pc, #264]	; (800169c <SystemCoreClockUpdate+0x144>)
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	f003 030c 	and.w	r3, r3, #12
 8001598:	2b0c      	cmp	r3, #12
 800159a:	d866      	bhi.n	800166a <SystemCoreClockUpdate+0x112>
 800159c:	a201      	add	r2, pc, #4	; (adr r2, 80015a4 <SystemCoreClockUpdate+0x4c>)
 800159e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015a2:	bf00      	nop
 80015a4:	080015d9 	.word	0x080015d9
 80015a8:	0800166b 	.word	0x0800166b
 80015ac:	0800166b 	.word	0x0800166b
 80015b0:	0800166b 	.word	0x0800166b
 80015b4:	080015e1 	.word	0x080015e1
 80015b8:	0800166b 	.word	0x0800166b
 80015bc:	0800166b 	.word	0x0800166b
 80015c0:	0800166b 	.word	0x0800166b
 80015c4:	080015e9 	.word	0x080015e9
 80015c8:	0800166b 	.word	0x0800166b
 80015cc:	0800166b 	.word	0x0800166b
 80015d0:	0800166b 	.word	0x0800166b
 80015d4:	080015f1 	.word	0x080015f1
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80015d8:	4a32      	ldr	r2, [pc, #200]	; (80016a4 <SystemCoreClockUpdate+0x14c>)
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	6013      	str	r3, [r2, #0]
      break;
 80015de:	e048      	b.n	8001672 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80015e0:	4b30      	ldr	r3, [pc, #192]	; (80016a4 <SystemCoreClockUpdate+0x14c>)
 80015e2:	4a31      	ldr	r2, [pc, #196]	; (80016a8 <SystemCoreClockUpdate+0x150>)
 80015e4:	601a      	str	r2, [r3, #0]
      break;
 80015e6:	e044      	b.n	8001672 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80015e8:	4b2e      	ldr	r3, [pc, #184]	; (80016a4 <SystemCoreClockUpdate+0x14c>)
 80015ea:	4a2f      	ldr	r2, [pc, #188]	; (80016a8 <SystemCoreClockUpdate+0x150>)
 80015ec:	601a      	str	r2, [r3, #0]
      break;
 80015ee:	e040      	b.n	8001672 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80015f0:	4b2a      	ldr	r3, [pc, #168]	; (800169c <SystemCoreClockUpdate+0x144>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	f003 0303 	and.w	r3, r3, #3
 80015f8:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 80015fa:	4b28      	ldr	r3, [pc, #160]	; (800169c <SystemCoreClockUpdate+0x144>)
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	091b      	lsrs	r3, r3, #4
 8001600:	f003 030f 	and.w	r3, r3, #15
 8001604:	3301      	adds	r3, #1
 8001606:	60bb      	str	r3, [r7, #8]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2b02      	cmp	r3, #2
 800160c:	d003      	beq.n	8001616 <SystemCoreClockUpdate+0xbe>
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2b03      	cmp	r3, #3
 8001612:	d006      	beq.n	8001622 <SystemCoreClockUpdate+0xca>
 8001614:	e00b      	b.n	800162e <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8001616:	4a24      	ldr	r2, [pc, #144]	; (80016a8 <SystemCoreClockUpdate+0x150>)
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	fbb2 f3f3 	udiv	r3, r2, r3
 800161e:	613b      	str	r3, [r7, #16]
          break;
 8001620:	e00b      	b.n	800163a <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8001622:	4a21      	ldr	r2, [pc, #132]	; (80016a8 <SystemCoreClockUpdate+0x150>)
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	fbb2 f3f3 	udiv	r3, r2, r3
 800162a:	613b      	str	r3, [r7, #16]
          break;
 800162c:	e005      	b.n	800163a <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	fbb2 f3f3 	udiv	r3, r2, r3
 8001636:	613b      	str	r3, [r7, #16]
          break;
 8001638:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 800163a:	4b18      	ldr	r3, [pc, #96]	; (800169c <SystemCoreClockUpdate+0x144>)
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	0a1b      	lsrs	r3, r3, #8
 8001640:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	fb02 f303 	mul.w	r3, r2, r3
 800164a:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 800164c:	4b13      	ldr	r3, [pc, #76]	; (800169c <SystemCoreClockUpdate+0x144>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	0e5b      	lsrs	r3, r3, #25
 8001652:	f003 0303 	and.w	r3, r3, #3
 8001656:	3301      	adds	r3, #1
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	fbb2 f3f3 	udiv	r3, r2, r3
 8001664:	4a0f      	ldr	r2, [pc, #60]	; (80016a4 <SystemCoreClockUpdate+0x14c>)
 8001666:	6013      	str	r3, [r2, #0]
      break;
 8001668:	e003      	b.n	8001672 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 800166a:	4a0e      	ldr	r2, [pc, #56]	; (80016a4 <SystemCoreClockUpdate+0x14c>)
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	6013      	str	r3, [r2, #0]
      break;
 8001670:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8001672:	4b0a      	ldr	r3, [pc, #40]	; (800169c <SystemCoreClockUpdate+0x144>)
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	091b      	lsrs	r3, r3, #4
 8001678:	f003 030f 	and.w	r3, r3, #15
 800167c:	4a0b      	ldr	r2, [pc, #44]	; (80016ac <SystemCoreClockUpdate+0x154>)
 800167e:	5cd3      	ldrb	r3, [r2, r3]
 8001680:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8001682:	4b08      	ldr	r3, [pc, #32]	; (80016a4 <SystemCoreClockUpdate+0x14c>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	fa22 f303 	lsr.w	r3, r2, r3
 800168c:	4a05      	ldr	r2, [pc, #20]	; (80016a4 <SystemCoreClockUpdate+0x14c>)
 800168e:	6013      	str	r3, [r2, #0]
}
 8001690:	bf00      	nop
 8001692:	371c      	adds	r7, #28
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	40021000 	.word	0x40021000
 80016a0:	08003f44 	.word	0x08003f44
 80016a4:	20000050 	.word	0x20000050
 80016a8:	00f42400 	.word	0x00f42400
 80016ac:	08003f34 	.word	0x08003f34

080016b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80016b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016e8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80016b4:	f7ff ff3e 	bl	8001534 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80016b8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80016ba:	e003      	b.n	80016c4 <LoopCopyDataInit>

080016bc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80016bc:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80016be:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80016c0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80016c2:	3104      	adds	r1, #4

080016c4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80016c4:	480a      	ldr	r0, [pc, #40]	; (80016f0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80016c6:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80016c8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80016ca:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80016cc:	d3f6      	bcc.n	80016bc <CopyDataInit>
	ldr	r2, =_sbss
 80016ce:	4a0a      	ldr	r2, [pc, #40]	; (80016f8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80016d0:	e002      	b.n	80016d8 <LoopFillZerobss>

080016d2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80016d2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80016d4:	f842 3b04 	str.w	r3, [r2], #4

080016d8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80016d8:	4b08      	ldr	r3, [pc, #32]	; (80016fc <LoopForever+0x16>)
	cmp	r2, r3
 80016da:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80016dc:	d3f9      	bcc.n	80016d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80016de:	f001 fc23 	bl	8002f28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016e2:	f7ff fc83 	bl	8000fec <main>

080016e6 <LoopForever>:

LoopForever:
    b LoopForever
 80016e6:	e7fe      	b.n	80016e6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80016e8:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 80016ec:	08003fc0 	.word	0x08003fc0
	ldr	r0, =_sdata
 80016f0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80016f4:	200000b8 	.word	0x200000b8
	ldr	r2, =_sbss
 80016f8:	200000b8 	.word	0x200000b8
	ldr	r3, = _ebss
 80016fc:	20000228 	.word	0x20000228

08001700 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001700:	e7fe      	b.n	8001700 <ADC1_2_IRQHandler>

08001702 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b082      	sub	sp, #8
 8001706:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001708:	2300      	movs	r3, #0
 800170a:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 800170c:	2004      	movs	r0, #4
 800170e:	f000 f921 	bl	8001954 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8001712:	f7ff ff21 	bl	8001558 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001716:	2007      	movs	r0, #7
 8001718:	f000 f80e 	bl	8001738 <HAL_InitTick>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d002      	beq.n	8001728 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	71fb      	strb	r3, [r7, #7]
 8001726:	e001      	b.n	800172c <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001728:	f7ff fe12 	bl	8001350 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800172c:	79fb      	ldrb	r3, [r7, #7]
}
 800172e:	4618      	mov	r0, r3
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
	...

08001738 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001740:	2300      	movs	r3, #0
 8001742:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001744:	4b17      	ldr	r3, [pc, #92]	; (80017a4 <HAL_InitTick+0x6c>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d023      	beq.n	8001794 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800174c:	4b16      	ldr	r3, [pc, #88]	; (80017a8 <HAL_InitTick+0x70>)
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	4b14      	ldr	r3, [pc, #80]	; (80017a4 <HAL_InitTick+0x6c>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	4619      	mov	r1, r3
 8001756:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800175a:	fbb3 f3f1 	udiv	r3, r3, r1
 800175e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001762:	4618      	mov	r0, r3
 8001764:	f000 f91b 	bl	800199e <HAL_SYSTICK_Config>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d10f      	bne.n	800178e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2b07      	cmp	r3, #7
 8001772:	d809      	bhi.n	8001788 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001774:	2200      	movs	r2, #0
 8001776:	6879      	ldr	r1, [r7, #4]
 8001778:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800177c:	f000 f8f5 	bl	800196a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001780:	4a0a      	ldr	r2, [pc, #40]	; (80017ac <HAL_InitTick+0x74>)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6013      	str	r3, [r2, #0]
 8001786:	e007      	b.n	8001798 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	73fb      	strb	r3, [r7, #15]
 800178c:	e004      	b.n	8001798 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	73fb      	strb	r3, [r7, #15]
 8001792:	e001      	b.n	8001798 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001798:	7bfb      	ldrb	r3, [r7, #15]
}
 800179a:	4618      	mov	r0, r3
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000058 	.word	0x20000058
 80017a8:	20000050 	.word	0x20000050
 80017ac:	20000054 	.word	0x20000054

080017b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017b4:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <HAL_IncTick+0x20>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	461a      	mov	r2, r3
 80017ba:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <HAL_IncTick+0x24>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4413      	add	r3, r2
 80017c0:	4a04      	ldr	r2, [pc, #16]	; (80017d4 <HAL_IncTick+0x24>)
 80017c2:	6013      	str	r3, [r2, #0]
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	20000058 	.word	0x20000058
 80017d4:	200000d8 	.word	0x200000d8

080017d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  return uwTick;
 80017dc:	4b03      	ldr	r3, [pc, #12]	; (80017ec <HAL_GetTick+0x14>)
 80017de:	681b      	ldr	r3, [r3, #0]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	200000d8 	.word	0x200000d8

080017f0 <__NVIC_SetPriorityGrouping>:
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f003 0307 	and.w	r3, r3, #7
 80017fe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001800:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <__NVIC_SetPriorityGrouping+0x44>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001806:	68ba      	ldr	r2, [r7, #8]
 8001808:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800180c:	4013      	ands	r3, r2
 800180e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001818:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800181c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001820:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001822:	4a04      	ldr	r2, [pc, #16]	; (8001834 <__NVIC_SetPriorityGrouping+0x44>)
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	60d3      	str	r3, [r2, #12]
}
 8001828:	bf00      	nop
 800182a:	3714      	adds	r7, #20
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <__NVIC_GetPriorityGrouping>:
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800183c:	4b04      	ldr	r3, [pc, #16]	; (8001850 <__NVIC_GetPriorityGrouping+0x18>)
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	0a1b      	lsrs	r3, r3, #8
 8001842:	f003 0307 	and.w	r3, r3, #7
}
 8001846:	4618      	mov	r0, r3
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <__NVIC_SetPriority>:
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	6039      	str	r1, [r7, #0]
 800185e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001864:	2b00      	cmp	r3, #0
 8001866:	db0a      	blt.n	800187e <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	b2da      	uxtb	r2, r3
 800186c:	490c      	ldr	r1, [pc, #48]	; (80018a0 <__NVIC_SetPriority+0x4c>)
 800186e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001872:	0152      	lsls	r2, r2, #5
 8001874:	b2d2      	uxtb	r2, r2
 8001876:	440b      	add	r3, r1
 8001878:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800187c:	e00a      	b.n	8001894 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	b2da      	uxtb	r2, r3
 8001882:	4908      	ldr	r1, [pc, #32]	; (80018a4 <__NVIC_SetPriority+0x50>)
 8001884:	79fb      	ldrb	r3, [r7, #7]
 8001886:	f003 030f 	and.w	r3, r3, #15
 800188a:	3b04      	subs	r3, #4
 800188c:	0152      	lsls	r2, r2, #5
 800188e:	b2d2      	uxtb	r2, r2
 8001890:	440b      	add	r3, r1
 8001892:	761a      	strb	r2, [r3, #24]
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	e000e100 	.word	0xe000e100
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <NVIC_EncodePriority>:
{
 80018a8:	b480      	push	{r7}
 80018aa:	b089      	sub	sp, #36	; 0x24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	f1c3 0307 	rsb	r3, r3, #7
 80018c2:	2b03      	cmp	r3, #3
 80018c4:	bf28      	it	cs
 80018c6:	2303      	movcs	r3, #3
 80018c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	3303      	adds	r3, #3
 80018ce:	2b06      	cmp	r3, #6
 80018d0:	d902      	bls.n	80018d8 <NVIC_EncodePriority+0x30>
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	3b04      	subs	r3, #4
 80018d6:	e000      	b.n	80018da <NVIC_EncodePriority+0x32>
 80018d8:	2300      	movs	r3, #0
 80018da:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	43da      	mvns	r2, r3
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	401a      	ands	r2, r3
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	fa01 f303 	lsl.w	r3, r1, r3
 80018fa:	43d9      	mvns	r1, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001900:	4313      	orrs	r3, r2
}
 8001902:	4618      	mov	r0, r3
 8001904:	3724      	adds	r7, #36	; 0x24
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
	...

08001910 <SysTick_Config>:
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3b01      	subs	r3, #1
 800191c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001920:	d301      	bcc.n	8001926 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001922:	2301      	movs	r3, #1
 8001924:	e00f      	b.n	8001946 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001926:	4a0a      	ldr	r2, [pc, #40]	; (8001950 <SysTick_Config+0x40>)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3b01      	subs	r3, #1
 800192c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800192e:	2107      	movs	r1, #7
 8001930:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001934:	f7ff ff8e 	bl	8001854 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001938:	4b05      	ldr	r3, [pc, #20]	; (8001950 <SysTick_Config+0x40>)
 800193a:	2200      	movs	r2, #0
 800193c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800193e:	4b04      	ldr	r3, [pc, #16]	; (8001950 <SysTick_Config+0x40>)
 8001940:	2207      	movs	r2, #7
 8001942:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	e000e010 	.word	0xe000e010

08001954 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f7ff ff47 	bl	80017f0 <__NVIC_SetPriorityGrouping>
}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b086      	sub	sp, #24
 800196e:	af00      	add	r7, sp, #0
 8001970:	4603      	mov	r3, r0
 8001972:	60b9      	str	r1, [r7, #8]
 8001974:	607a      	str	r2, [r7, #4]
 8001976:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001978:	f7ff ff5e 	bl	8001838 <__NVIC_GetPriorityGrouping>
 800197c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	68b9      	ldr	r1, [r7, #8]
 8001982:	6978      	ldr	r0, [r7, #20]
 8001984:	f7ff ff90 	bl	80018a8 <NVIC_EncodePriority>
 8001988:	4602      	mov	r2, r0
 800198a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800198e:	4611      	mov	r1, r2
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff ff5f 	bl	8001854 <__NVIC_SetPriority>
}
 8001996:	bf00      	nop
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b082      	sub	sp, #8
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f7ff ffb2 	bl	8001910 <SysTick_Config>
 80019ac:	4603      	mov	r3, r0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
	...

080019b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b087      	sub	sp, #28
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 80019c2:	2300      	movs	r3, #0
 80019c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80019c6:	e158      	b.n	8001c7a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	2101      	movs	r1, #1
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	fa01 f303 	lsl.w	r3, r1, r3
 80019d4:	4013      	ands	r3, r2
 80019d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f000 814a 	beq.w	8001c74 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f003 0303 	and.w	r3, r3, #3
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d005      	beq.n	80019f8 <HAL_GPIO_Init+0x40>
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f003 0303 	and.w	r3, r3, #3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d130      	bne.n	8001a5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	2203      	movs	r2, #3
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	68da      	ldr	r2, [r3, #12]
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a2e:	2201      	movs	r2, #1
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	43db      	mvns	r3, r3
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	091b      	lsrs	r3, r3, #4
 8001a44:	f003 0201 	and.w	r2, r3, #1
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f003 0303 	and.w	r3, r3, #3
 8001a62:	2b03      	cmp	r3, #3
 8001a64:	d017      	beq.n	8001a96 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	2203      	movs	r2, #3
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	43db      	mvns	r3, r3
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	689a      	ldr	r2, [r3, #8]
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f003 0303 	and.w	r3, r3, #3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d123      	bne.n	8001aea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	08da      	lsrs	r2, r3, #3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	3208      	adds	r2, #8
 8001aaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aae:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	f003 0307 	and.w	r3, r3, #7
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	220f      	movs	r2, #15
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	691a      	ldr	r2, [r3, #16]
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	f003 0307 	and.w	r3, r3, #7
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	08da      	lsrs	r2, r3, #3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3208      	adds	r2, #8
 8001ae4:	6939      	ldr	r1, [r7, #16]
 8001ae6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	2203      	movs	r2, #3
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	43db      	mvns	r3, r3
 8001afc:	693a      	ldr	r2, [r7, #16]
 8001afe:	4013      	ands	r3, r2
 8001b00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f003 0203 	and.w	r2, r3, #3
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f000 80a4 	beq.w	8001c74 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8001b2c:	4a5a      	ldr	r2, [pc, #360]	; (8001c98 <HAL_GPIO_Init+0x2e0>)
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	089b      	lsrs	r3, r3, #2
 8001b32:	3318      	adds	r3, #24
 8001b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b38:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	f003 0303 	and.w	r3, r3, #3
 8001b40:	00db      	lsls	r3, r3, #3
 8001b42:	220f      	movs	r2, #15
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4a52      	ldr	r2, [pc, #328]	; (8001c9c <HAL_GPIO_Init+0x2e4>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d025      	beq.n	8001ba4 <HAL_GPIO_Init+0x1ec>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	4a51      	ldr	r2, [pc, #324]	; (8001ca0 <HAL_GPIO_Init+0x2e8>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d01f      	beq.n	8001ba0 <HAL_GPIO_Init+0x1e8>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4a50      	ldr	r2, [pc, #320]	; (8001ca4 <HAL_GPIO_Init+0x2ec>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d019      	beq.n	8001b9c <HAL_GPIO_Init+0x1e4>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	4a4f      	ldr	r2, [pc, #316]	; (8001ca8 <HAL_GPIO_Init+0x2f0>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d013      	beq.n	8001b98 <HAL_GPIO_Init+0x1e0>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	4a4e      	ldr	r2, [pc, #312]	; (8001cac <HAL_GPIO_Init+0x2f4>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d00d      	beq.n	8001b94 <HAL_GPIO_Init+0x1dc>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4a4d      	ldr	r2, [pc, #308]	; (8001cb0 <HAL_GPIO_Init+0x2f8>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d007      	beq.n	8001b90 <HAL_GPIO_Init+0x1d8>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	4a4c      	ldr	r2, [pc, #304]	; (8001cb4 <HAL_GPIO_Init+0x2fc>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d101      	bne.n	8001b8c <HAL_GPIO_Init+0x1d4>
 8001b88:	2306      	movs	r3, #6
 8001b8a:	e00c      	b.n	8001ba6 <HAL_GPIO_Init+0x1ee>
 8001b8c:	2307      	movs	r3, #7
 8001b8e:	e00a      	b.n	8001ba6 <HAL_GPIO_Init+0x1ee>
 8001b90:	2305      	movs	r3, #5
 8001b92:	e008      	b.n	8001ba6 <HAL_GPIO_Init+0x1ee>
 8001b94:	2304      	movs	r3, #4
 8001b96:	e006      	b.n	8001ba6 <HAL_GPIO_Init+0x1ee>
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e004      	b.n	8001ba6 <HAL_GPIO_Init+0x1ee>
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	e002      	b.n	8001ba6 <HAL_GPIO_Init+0x1ee>
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e000      	b.n	8001ba6 <HAL_GPIO_Init+0x1ee>
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	697a      	ldr	r2, [r7, #20]
 8001ba8:	f002 0203 	and.w	r2, r2, #3
 8001bac:	00d2      	lsls	r2, r2, #3
 8001bae:	4093      	lsls	r3, r2
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8001bb6:	4938      	ldr	r1, [pc, #224]	; (8001c98 <HAL_GPIO_Init+0x2e0>)
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	089b      	lsrs	r3, r3, #2
 8001bbc:	3318      	adds	r3, #24
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001bc4:	4b34      	ldr	r3, [pc, #208]	; (8001c98 <HAL_GPIO_Init+0x2e0>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d003      	beq.n	8001be8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001be8:	4a2b      	ldr	r2, [pc, #172]	; (8001c98 <HAL_GPIO_Init+0x2e0>)
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001bee:	4b2a      	ldr	r3, [pc, #168]	; (8001c98 <HAL_GPIO_Init+0x2e0>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d003      	beq.n	8001c12 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c12:	4a21      	ldr	r2, [pc, #132]	; (8001c98 <HAL_GPIO_Init+0x2e0>)
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c18:	4b1f      	ldr	r3, [pc, #124]	; (8001c98 <HAL_GPIO_Init+0x2e0>)
 8001c1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	43db      	mvns	r3, r3
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	4013      	ands	r3, r2
 8001c28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c3e:	4a16      	ldr	r2, [pc, #88]	; (8001c98 <HAL_GPIO_Init+0x2e0>)
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 8001c46:	4b14      	ldr	r3, [pc, #80]	; (8001c98 <HAL_GPIO_Init+0x2e0>)
 8001c48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	43db      	mvns	r3, r3
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	4013      	ands	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d003      	beq.n	8001c6c <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c6c:	4a0a      	ldr	r2, [pc, #40]	; (8001c98 <HAL_GPIO_Init+0x2e0>)
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	3301      	adds	r3, #1
 8001c78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	fa22 f303 	lsr.w	r3, r2, r3
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	f47f ae9f 	bne.w	80019c8 <HAL_GPIO_Init+0x10>
  }
}
 8001c8a:	bf00      	nop
 8001c8c:	bf00      	nop
 8001c8e:	371c      	adds	r7, #28
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	4002f400 	.word	0x4002f400
 8001c9c:	42020000 	.word	0x42020000
 8001ca0:	42020400 	.word	0x42020400
 8001ca4:	42020800 	.word	0x42020800
 8001ca8:	42020c00 	.word	0x42020c00
 8001cac:	42021000 	.word	0x42021000
 8001cb0:	42021400 	.word	0x42021400
 8001cb4:	42021800 	.word	0x42021800

08001cb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	807b      	strh	r3, [r7, #2]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cc8:	787b      	ldrb	r3, [r7, #1]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cce:	887a      	ldrh	r2, [r7, #2]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001cd4:	e002      	b.n	8001cdc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cd6:	887a      	ldrh	r2, [r7, #2]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	695b      	ldr	r3, [r3, #20]
 8001cf8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cfa:	887a      	ldrh	r2, [r7, #2]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	041a      	lsls	r2, r3, #16
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	43d9      	mvns	r1, r3
 8001d06:	887b      	ldrh	r3, [r7, #2]
 8001d08:	400b      	ands	r3, r1
 8001d0a:	431a      	orrs	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	619a      	str	r2, [r3, #24]
}
 8001d10:	bf00      	nop
 8001d12:	3714      	adds	r7, #20
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001d20:	4b04      	ldr	r3, [pc, #16]	; (8001d34 <HAL_PWREx_GetVoltageRange+0x18>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	40007000 	.word	0x40007000

08001d38 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8001d40:	4b27      	ldr	r3, [pc, #156]	; (8001de0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d48:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8001d4a:	f000 f851 	bl	8001df0 <HAL_PWREx_SMPS_GetEffectiveMode>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d54:	d101      	bne.n	8001d5a <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e03e      	b.n	8001dd8 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8001d5a:	4b21      	ldr	r3, [pc, #132]	; (8001de0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d66:	d101      	bne.n	8001d6c <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e035      	b.n	8001dd8 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8001d6c:	68ba      	ldr	r2, [r7, #8]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d101      	bne.n	8001d78 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8001d74:	2300      	movs	r3, #0
 8001d76:	e02f      	b.n	8001dd8 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001d78:	4b19      	ldr	r3, [pc, #100]	; (8001de0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8001d80:	4917      	ldr	r1, [pc, #92]	; (8001de0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8001d88:	4b16      	ldr	r3, [pc, #88]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	095b      	lsrs	r3, r3, #5
 8001d8e:	4a16      	ldr	r2, [pc, #88]	; (8001de8 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001d90:	fba2 2303 	umull	r2, r3, r2, r3
 8001d94:	09db      	lsrs	r3, r3, #7
 8001d96:	2232      	movs	r2, #50	; 0x32
 8001d98:	fb02 f303 	mul.w	r3, r2, r3
 8001d9c:	4a13      	ldr	r2, [pc, #76]	; (8001dec <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8001d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001da2:	08db      	lsrs	r3, r3, #3
 8001da4:	3301      	adds	r3, #1
 8001da6:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001da8:	e002      	b.n	8001db0 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	3b01      	subs	r3, #1
 8001dae:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001db0:	4b0b      	ldr	r3, [pc, #44]	; (8001de0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001db2:	695b      	ldr	r3, [r3, #20]
 8001db4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001db8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dbc:	d102      	bne.n	8001dc4 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1f2      	bne.n	8001daa <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001dc4:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001dc6:	695b      	ldr	r3, [r3, #20]
 8001dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dd0:	d101      	bne.n	8001dd6 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e000      	b.n	8001dd8 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3710      	adds	r7, #16
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40007000 	.word	0x40007000
 8001de4:	20000050 	.word	0x20000050
 8001de8:	0a7c5ac5 	.word	0x0a7c5ac5
 8001dec:	cccccccd 	.word	0xcccccccd

08001df0 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8001df6:	4b0f      	ldr	r3, [pc, #60]	; (8001e34 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8001e06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e0a:	607b      	str	r3, [r7, #4]
 8001e0c:	e00a      	b.n	8001e24 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d103      	bne.n	8001e20 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8001e18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e1c:	607b      	str	r3, [r7, #4]
 8001e1e:	e001      	b.n	8001e24 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8001e20:	2300      	movs	r3, #0
 8001e22:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8001e24:	687b      	ldr	r3, [r7, #4]
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	40007000 	.word	0x40007000

08001e38 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b088      	sub	sp, #32
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d102      	bne.n	8001e4c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	f000 bcc2 	b.w	80027d0 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e4c:	4b99      	ldr	r3, [pc, #612]	; (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f003 030c 	and.w	r3, r3, #12
 8001e54:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e56:	4b97      	ldr	r3, [pc, #604]	; (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	f003 0303 	and.w	r3, r3, #3
 8001e5e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0310 	and.w	r3, r3, #16
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	f000 80e9 	beq.w	8002040 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d006      	beq.n	8001e82 <HAL_RCC_OscConfig+0x4a>
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	2b0c      	cmp	r3, #12
 8001e78:	f040 8083 	bne.w	8001f82 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d17f      	bne.n	8001f82 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e82:	4b8c      	ldr	r3, [pc, #560]	; (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d006      	beq.n	8001e9c <HAL_RCC_OscConfig+0x64>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d102      	bne.n	8001e9c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	f000 bc9a 	b.w	80027d0 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ea0:	4b84      	ldr	r3, [pc, #528]	; (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0308 	and.w	r3, r3, #8
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d004      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x7e>
 8001eac:	4b81      	ldr	r3, [pc, #516]	; (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001eb4:	e005      	b.n	8001ec2 <HAL_RCC_OscConfig+0x8a>
 8001eb6:	4b7f      	ldr	r3, [pc, #508]	; (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8001eb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ebc:	091b      	lsrs	r3, r3, #4
 8001ebe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d224      	bcs.n	8001f10 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f000 fe72 	bl	8002bb4 <RCC_SetFlashLatencyFromMSIRange>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d002      	beq.n	8001edc <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	f000 bc7a 	b.w	80027d0 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001edc:	4b75      	ldr	r3, [pc, #468]	; (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a74      	ldr	r2, [pc, #464]	; (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8001ee2:	f043 0308 	orr.w	r3, r3, #8
 8001ee6:	6013      	str	r3, [r2, #0]
 8001ee8:	4b72      	ldr	r3, [pc, #456]	; (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef4:	496f      	ldr	r1, [pc, #444]	; (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001efa:	4b6e      	ldr	r3, [pc, #440]	; (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a1b      	ldr	r3, [r3, #32]
 8001f06:	021b      	lsls	r3, r3, #8
 8001f08:	496a      	ldr	r1, [pc, #424]	; (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	604b      	str	r3, [r1, #4]
 8001f0e:	e026      	b.n	8001f5e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f10:	4b68      	ldr	r3, [pc, #416]	; (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a67      	ldr	r2, [pc, #412]	; (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8001f16:	f043 0308 	orr.w	r3, r3, #8
 8001f1a:	6013      	str	r3, [r2, #0]
 8001f1c:	4b65      	ldr	r3, [pc, #404]	; (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f28:	4962      	ldr	r1, [pc, #392]	; (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f2e:	4b61      	ldr	r3, [pc, #388]	; (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a1b      	ldr	r3, [r3, #32]
 8001f3a:	021b      	lsls	r3, r3, #8
 8001f3c:	495d      	ldr	r1, [pc, #372]	; (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d10a      	bne.n	8001f5e <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f000 fe31 	bl	8002bb4 <RCC_SetFlashLatencyFromMSIRange>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d002      	beq.n	8001f5e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	f000 bc39 	b.w	80027d0 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001f5e:	f000 fe15 	bl	8002b8c <HAL_RCC_GetHCLKFreq>
 8001f62:	4603      	mov	r3, r0
 8001f64:	4a54      	ldr	r2, [pc, #336]	; (80020b8 <HAL_RCC_OscConfig+0x280>)
 8001f66:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001f68:	4b54      	ldr	r3, [pc, #336]	; (80020bc <HAL_RCC_OscConfig+0x284>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff fbe3 	bl	8001738 <HAL_InitTick>
 8001f72:	4603      	mov	r3, r0
 8001f74:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8001f76:	7bfb      	ldrb	r3, [r7, #15]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d060      	beq.n	800203e <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8001f7c:	7bfb      	ldrb	r3, [r7, #15]
 8001f7e:	f000 bc27 	b.w	80027d0 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d039      	beq.n	8001ffe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f8a:	4b4a      	ldr	r3, [pc, #296]	; (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a49      	ldr	r2, [pc, #292]	; (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8001f90:	f043 0301 	orr.w	r3, r3, #1
 8001f94:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f96:	f7ff fc1f 	bl	80017d8 <HAL_GetTick>
 8001f9a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f9c:	e00f      	b.n	8001fbe <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f9e:	f7ff fc1b 	bl	80017d8 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d908      	bls.n	8001fbe <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fac:	4b41      	ldr	r3, [pc, #260]	; (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d102      	bne.n	8001fbe <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	f000 bc09 	b.w	80027d0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fbe:	4b3d      	ldr	r3, [pc, #244]	; (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d0e9      	beq.n	8001f9e <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fca:	4b3a      	ldr	r3, [pc, #232]	; (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a39      	ldr	r2, [pc, #228]	; (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8001fd0:	f043 0308 	orr.w	r3, r3, #8
 8001fd4:	6013      	str	r3, [r2, #0]
 8001fd6:	4b37      	ldr	r3, [pc, #220]	; (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe2:	4934      	ldr	r1, [pc, #208]	; (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fe8:	4b32      	ldr	r3, [pc, #200]	; (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a1b      	ldr	r3, [r3, #32]
 8001ff4:	021b      	lsls	r3, r3, #8
 8001ff6:	492f      	ldr	r1, [pc, #188]	; (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	604b      	str	r3, [r1, #4]
 8001ffc:	e020      	b.n	8002040 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ffe:	4b2d      	ldr	r3, [pc, #180]	; (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a2c      	ldr	r2, [pc, #176]	; (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8002004:	f023 0301 	bic.w	r3, r3, #1
 8002008:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800200a:	f7ff fbe5 	bl	80017d8 <HAL_GetTick>
 800200e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002010:	e00e      	b.n	8002030 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002012:	f7ff fbe1 	bl	80017d8 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d907      	bls.n	8002030 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002020:	4b24      	ldr	r3, [pc, #144]	; (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e3cf      	b.n	80027d0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002030:	4b20      	ldr	r3, [pc, #128]	; (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1ea      	bne.n	8002012 <HAL_RCC_OscConfig+0x1da>
 800203c:	e000      	b.n	8002040 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800203e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	2b00      	cmp	r3, #0
 800204a:	d07e      	beq.n	800214a <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	2b08      	cmp	r3, #8
 8002050:	d005      	beq.n	800205e <HAL_RCC_OscConfig+0x226>
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	2b0c      	cmp	r3, #12
 8002056:	d10e      	bne.n	8002076 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	2b03      	cmp	r3, #3
 800205c:	d10b      	bne.n	8002076 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800205e:	4b15      	ldr	r3, [pc, #84]	; (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d06e      	beq.n	8002148 <HAL_RCC_OscConfig+0x310>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d16a      	bne.n	8002148 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e3ac      	b.n	80027d0 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800207e:	d106      	bne.n	800208e <HAL_RCC_OscConfig+0x256>
 8002080:	4b0c      	ldr	r3, [pc, #48]	; (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a0b      	ldr	r2, [pc, #44]	; (80020b4 <HAL_RCC_OscConfig+0x27c>)
 8002086:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800208a:	6013      	str	r3, [r2, #0]
 800208c:	e024      	b.n	80020d8 <HAL_RCC_OscConfig+0x2a0>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002096:	d113      	bne.n	80020c0 <HAL_RCC_OscConfig+0x288>
 8002098:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <HAL_RCC_OscConfig+0x27c>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a05      	ldr	r2, [pc, #20]	; (80020b4 <HAL_RCC_OscConfig+0x27c>)
 800209e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020a2:	6013      	str	r3, [r2, #0]
 80020a4:	4b03      	ldr	r3, [pc, #12]	; (80020b4 <HAL_RCC_OscConfig+0x27c>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a02      	ldr	r2, [pc, #8]	; (80020b4 <HAL_RCC_OscConfig+0x27c>)
 80020aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ae:	6013      	str	r3, [r2, #0]
 80020b0:	e012      	b.n	80020d8 <HAL_RCC_OscConfig+0x2a0>
 80020b2:	bf00      	nop
 80020b4:	40021000 	.word	0x40021000
 80020b8:	20000050 	.word	0x20000050
 80020bc:	20000054 	.word	0x20000054
 80020c0:	4b8b      	ldr	r3, [pc, #556]	; (80022f0 <HAL_RCC_OscConfig+0x4b8>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a8a      	ldr	r2, [pc, #552]	; (80022f0 <HAL_RCC_OscConfig+0x4b8>)
 80020c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ca:	6013      	str	r3, [r2, #0]
 80020cc:	4b88      	ldr	r3, [pc, #544]	; (80022f0 <HAL_RCC_OscConfig+0x4b8>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a87      	ldr	r2, [pc, #540]	; (80022f0 <HAL_RCC_OscConfig+0x4b8>)
 80020d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d019      	beq.n	8002114 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e0:	f7ff fb7a 	bl	80017d8 <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020e6:	e00e      	b.n	8002106 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020e8:	f7ff fb76 	bl	80017d8 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b64      	cmp	r3, #100	; 0x64
 80020f4:	d907      	bls.n	8002106 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020f6:	4b7e      	ldr	r3, [pc, #504]	; (80022f0 <HAL_RCC_OscConfig+0x4b8>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e364      	b.n	80027d0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002106:	4b7a      	ldr	r3, [pc, #488]	; (80022f0 <HAL_RCC_OscConfig+0x4b8>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d0ea      	beq.n	80020e8 <HAL_RCC_OscConfig+0x2b0>
 8002112:	e01a      	b.n	800214a <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002114:	f7ff fb60 	bl	80017d8 <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800211a:	e00e      	b.n	800213a <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800211c:	f7ff fb5c 	bl	80017d8 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b64      	cmp	r3, #100	; 0x64
 8002128:	d907      	bls.n	800213a <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800212a:	4b71      	ldr	r3, [pc, #452]	; (80022f0 <HAL_RCC_OscConfig+0x4b8>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e34a      	b.n	80027d0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800213a:	4b6d      	ldr	r3, [pc, #436]	; (80022f0 <HAL_RCC_OscConfig+0x4b8>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1ea      	bne.n	800211c <HAL_RCC_OscConfig+0x2e4>
 8002146:	e000      	b.n	800214a <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002148:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d06c      	beq.n	8002230 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	2b04      	cmp	r3, #4
 800215a:	d005      	beq.n	8002168 <HAL_RCC_OscConfig+0x330>
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	2b0c      	cmp	r3, #12
 8002160:	d119      	bne.n	8002196 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	2b02      	cmp	r3, #2
 8002166:	d116      	bne.n	8002196 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002168:	4b61      	ldr	r3, [pc, #388]	; (80022f0 <HAL_RCC_OscConfig+0x4b8>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002170:	2b00      	cmp	r3, #0
 8002172:	d005      	beq.n	8002180 <HAL_RCC_OscConfig+0x348>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d101      	bne.n	8002180 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e327      	b.n	80027d0 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002180:	4b5b      	ldr	r3, [pc, #364]	; (80022f0 <HAL_RCC_OscConfig+0x4b8>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	691b      	ldr	r3, [r3, #16]
 800218c:	061b      	lsls	r3, r3, #24
 800218e:	4958      	ldr	r1, [pc, #352]	; (80022f0 <HAL_RCC_OscConfig+0x4b8>)
 8002190:	4313      	orrs	r3, r2
 8002192:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002194:	e04c      	b.n	8002230 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d029      	beq.n	80021f2 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800219e:	4b54      	ldr	r3, [pc, #336]	; (80022f0 <HAL_RCC_OscConfig+0x4b8>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a53      	ldr	r2, [pc, #332]	; (80022f0 <HAL_RCC_OscConfig+0x4b8>)
 80021a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021aa:	f7ff fb15 	bl	80017d8 <HAL_GetTick>
 80021ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021b0:	e00e      	b.n	80021d0 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021b2:	f7ff fb11 	bl	80017d8 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d907      	bls.n	80021d0 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021c0:	4b4b      	ldr	r3, [pc, #300]	; (80022f0 <HAL_RCC_OscConfig+0x4b8>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d101      	bne.n	80021d0 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e2ff      	b.n	80027d0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021d0:	4b47      	ldr	r3, [pc, #284]	; (80022f0 <HAL_RCC_OscConfig+0x4b8>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d0ea      	beq.n	80021b2 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021dc:	4b44      	ldr	r3, [pc, #272]	; (80022f0 <HAL_RCC_OscConfig+0x4b8>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	061b      	lsls	r3, r3, #24
 80021ea:	4941      	ldr	r1, [pc, #260]	; (80022f0 <HAL_RCC_OscConfig+0x4b8>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	604b      	str	r3, [r1, #4]
 80021f0:	e01e      	b.n	8002230 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021f2:	4b3f      	ldr	r3, [pc, #252]	; (80022f0 <HAL_RCC_OscConfig+0x4b8>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a3e      	ldr	r2, [pc, #248]	; (80022f0 <HAL_RCC_OscConfig+0x4b8>)
 80021f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fe:	f7ff faeb 	bl	80017d8 <HAL_GetTick>
 8002202:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002204:	e00e      	b.n	8002224 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002206:	f7ff fae7 	bl	80017d8 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d907      	bls.n	8002224 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002214:	4b36      	ldr	r3, [pc, #216]	; (80022f0 <HAL_RCC_OscConfig+0x4b8>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e2d5      	b.n	80027d0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002224:	4b32      	ldr	r3, [pc, #200]	; (80022f0 <HAL_RCC_OscConfig+0x4b8>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1ea      	bne.n	8002206 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0308 	and.w	r3, r3, #8
 8002238:	2b00      	cmp	r3, #0
 800223a:	d062      	beq.n	8002302 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	695b      	ldr	r3, [r3, #20]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d038      	beq.n	80022b6 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d108      	bne.n	800225e <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 800224c:	4b28      	ldr	r3, [pc, #160]	; (80022f0 <HAL_RCC_OscConfig+0x4b8>)
 800224e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002252:	4a27      	ldr	r2, [pc, #156]	; (80022f0 <HAL_RCC_OscConfig+0x4b8>)
 8002254:	f023 0310 	bic.w	r3, r3, #16
 8002258:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800225c:	e007      	b.n	800226e <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 800225e:	4b24      	ldr	r3, [pc, #144]	; (80022f0 <HAL_RCC_OscConfig+0x4b8>)
 8002260:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002264:	4a22      	ldr	r2, [pc, #136]	; (80022f0 <HAL_RCC_OscConfig+0x4b8>)
 8002266:	f043 0310 	orr.w	r3, r3, #16
 800226a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800226e:	4b20      	ldr	r3, [pc, #128]	; (80022f0 <HAL_RCC_OscConfig+0x4b8>)
 8002270:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002274:	4a1e      	ldr	r2, [pc, #120]	; (80022f0 <HAL_RCC_OscConfig+0x4b8>)
 8002276:	f043 0301 	orr.w	r3, r3, #1
 800227a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800227e:	f7ff faab 	bl	80017d8 <HAL_GetTick>
 8002282:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002284:	e00f      	b.n	80022a6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002286:	f7ff faa7 	bl	80017d8 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b07      	cmp	r3, #7
 8002292:	d908      	bls.n	80022a6 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002294:	4b16      	ldr	r3, [pc, #88]	; (80022f0 <HAL_RCC_OscConfig+0x4b8>)
 8002296:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d101      	bne.n	80022a6 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e294      	b.n	80027d0 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022a6:	4b12      	ldr	r3, [pc, #72]	; (80022f0 <HAL_RCC_OscConfig+0x4b8>)
 80022a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d0e8      	beq.n	8002286 <HAL_RCC_OscConfig+0x44e>
 80022b4:	e025      	b.n	8002302 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022b6:	4b0e      	ldr	r3, [pc, #56]	; (80022f0 <HAL_RCC_OscConfig+0x4b8>)
 80022b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022bc:	4a0c      	ldr	r2, [pc, #48]	; (80022f0 <HAL_RCC_OscConfig+0x4b8>)
 80022be:	f023 0301 	bic.w	r3, r3, #1
 80022c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c6:	f7ff fa87 	bl	80017d8 <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022cc:	e012      	b.n	80022f4 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022ce:	f7ff fa83 	bl	80017d8 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b07      	cmp	r3, #7
 80022da:	d90b      	bls.n	80022f4 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022dc:	4b04      	ldr	r3, [pc, #16]	; (80022f0 <HAL_RCC_OscConfig+0x4b8>)
 80022de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d004      	beq.n	80022f4 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e270      	b.n	80027d0 <HAL_RCC_OscConfig+0x998>
 80022ee:	bf00      	nop
 80022f0:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022f4:	4ba8      	ldr	r3, [pc, #672]	; (8002598 <HAL_RCC_OscConfig+0x760>)
 80022f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1e5      	bne.n	80022ce <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0304 	and.w	r3, r3, #4
 800230a:	2b00      	cmp	r3, #0
 800230c:	f000 812d 	beq.w	800256a <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002310:	2300      	movs	r3, #0
 8002312:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002314:	4ba0      	ldr	r3, [pc, #640]	; (8002598 <HAL_RCC_OscConfig+0x760>)
 8002316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002318:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d10d      	bne.n	800233c <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002320:	4b9d      	ldr	r3, [pc, #628]	; (8002598 <HAL_RCC_OscConfig+0x760>)
 8002322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002324:	4a9c      	ldr	r2, [pc, #624]	; (8002598 <HAL_RCC_OscConfig+0x760>)
 8002326:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800232a:	6593      	str	r3, [r2, #88]	; 0x58
 800232c:	4b9a      	ldr	r3, [pc, #616]	; (8002598 <HAL_RCC_OscConfig+0x760>)
 800232e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002330:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002334:	60bb      	str	r3, [r7, #8]
 8002336:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002338:	2301      	movs	r3, #1
 800233a:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800233c:	4b97      	ldr	r3, [pc, #604]	; (800259c <HAL_RCC_OscConfig+0x764>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002344:	2b00      	cmp	r3, #0
 8002346:	d11e      	bne.n	8002386 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002348:	4b94      	ldr	r3, [pc, #592]	; (800259c <HAL_RCC_OscConfig+0x764>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a93      	ldr	r2, [pc, #588]	; (800259c <HAL_RCC_OscConfig+0x764>)
 800234e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002352:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002354:	f7ff fa40 	bl	80017d8 <HAL_GetTick>
 8002358:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800235a:	e00e      	b.n	800237a <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800235c:	f7ff fa3c 	bl	80017d8 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d907      	bls.n	800237a <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800236a:	4b8c      	ldr	r3, [pc, #560]	; (800259c <HAL_RCC_OscConfig+0x764>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e22a      	b.n	80027d0 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800237a:	4b88      	ldr	r3, [pc, #544]	; (800259c <HAL_RCC_OscConfig+0x764>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002382:	2b00      	cmp	r3, #0
 8002384:	d0ea      	beq.n	800235c <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	2b00      	cmp	r3, #0
 8002390:	d01f      	beq.n	80023d2 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f003 0304 	and.w	r3, r3, #4
 800239a:	2b00      	cmp	r3, #0
 800239c:	d010      	beq.n	80023c0 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800239e:	4b7e      	ldr	r3, [pc, #504]	; (8002598 <HAL_RCC_OscConfig+0x760>)
 80023a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023a4:	4a7c      	ldr	r2, [pc, #496]	; (8002598 <HAL_RCC_OscConfig+0x760>)
 80023a6:	f043 0304 	orr.w	r3, r3, #4
 80023aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80023ae:	4b7a      	ldr	r3, [pc, #488]	; (8002598 <HAL_RCC_OscConfig+0x760>)
 80023b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b4:	4a78      	ldr	r2, [pc, #480]	; (8002598 <HAL_RCC_OscConfig+0x760>)
 80023b6:	f043 0301 	orr.w	r3, r3, #1
 80023ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023be:	e018      	b.n	80023f2 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80023c0:	4b75      	ldr	r3, [pc, #468]	; (8002598 <HAL_RCC_OscConfig+0x760>)
 80023c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c6:	4a74      	ldr	r2, [pc, #464]	; (8002598 <HAL_RCC_OscConfig+0x760>)
 80023c8:	f043 0301 	orr.w	r3, r3, #1
 80023cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023d0:	e00f      	b.n	80023f2 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80023d2:	4b71      	ldr	r3, [pc, #452]	; (8002598 <HAL_RCC_OscConfig+0x760>)
 80023d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d8:	4a6f      	ldr	r2, [pc, #444]	; (8002598 <HAL_RCC_OscConfig+0x760>)
 80023da:	f023 0301 	bic.w	r3, r3, #1
 80023de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80023e2:	4b6d      	ldr	r3, [pc, #436]	; (8002598 <HAL_RCC_OscConfig+0x760>)
 80023e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e8:	4a6b      	ldr	r2, [pc, #428]	; (8002598 <HAL_RCC_OscConfig+0x760>)
 80023ea:	f023 0304 	bic.w	r3, r3, #4
 80023ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d068      	beq.n	80024cc <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023fa:	f7ff f9ed 	bl	80017d8 <HAL_GetTick>
 80023fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002400:	e011      	b.n	8002426 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002402:	f7ff f9e9 	bl	80017d8 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002410:	4293      	cmp	r3, r2
 8002412:	d908      	bls.n	8002426 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002414:	4b60      	ldr	r3, [pc, #384]	; (8002598 <HAL_RCC_OscConfig+0x760>)
 8002416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e1d4      	b.n	80027d0 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002426:	4b5c      	ldr	r3, [pc, #368]	; (8002598 <HAL_RCC_OscConfig+0x760>)
 8002428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d0e6      	beq.n	8002402 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800243c:	2b00      	cmp	r3, #0
 800243e:	d022      	beq.n	8002486 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002440:	4b55      	ldr	r3, [pc, #340]	; (8002598 <HAL_RCC_OscConfig+0x760>)
 8002442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002446:	4a54      	ldr	r2, [pc, #336]	; (8002598 <HAL_RCC_OscConfig+0x760>)
 8002448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800244c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002450:	e011      	b.n	8002476 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002452:	f7ff f9c1 	bl	80017d8 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002460:	4293      	cmp	r3, r2
 8002462:	d908      	bls.n	8002476 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002464:	4b4c      	ldr	r3, [pc, #304]	; (8002598 <HAL_RCC_OscConfig+0x760>)
 8002466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800246a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e1ac      	b.n	80027d0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002476:	4b48      	ldr	r3, [pc, #288]	; (8002598 <HAL_RCC_OscConfig+0x760>)
 8002478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800247c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002480:	2b00      	cmp	r3, #0
 8002482:	d0e6      	beq.n	8002452 <HAL_RCC_OscConfig+0x61a>
 8002484:	e068      	b.n	8002558 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002486:	4b44      	ldr	r3, [pc, #272]	; (8002598 <HAL_RCC_OscConfig+0x760>)
 8002488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800248c:	4a42      	ldr	r2, [pc, #264]	; (8002598 <HAL_RCC_OscConfig+0x760>)
 800248e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002492:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002496:	e011      	b.n	80024bc <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002498:	f7ff f99e 	bl	80017d8 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d908      	bls.n	80024bc <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80024aa:	4b3b      	ldr	r3, [pc, #236]	; (8002598 <HAL_RCC_OscConfig+0x760>)
 80024ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e189      	b.n	80027d0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80024bc:	4b36      	ldr	r3, [pc, #216]	; (8002598 <HAL_RCC_OscConfig+0x760>)
 80024be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1e6      	bne.n	8002498 <HAL_RCC_OscConfig+0x660>
 80024ca:	e045      	b.n	8002558 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024cc:	f7ff f984 	bl	80017d8 <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024d2:	e011      	b.n	80024f8 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024d4:	f7ff f980 	bl	80017d8 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d908      	bls.n	80024f8 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024e6:	4b2c      	ldr	r3, [pc, #176]	; (8002598 <HAL_RCC_OscConfig+0x760>)
 80024e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e16b      	b.n	80027d0 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024f8:	4b27      	ldr	r3, [pc, #156]	; (8002598 <HAL_RCC_OscConfig+0x760>)
 80024fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1e6      	bne.n	80024d4 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8002506:	4b24      	ldr	r3, [pc, #144]	; (8002598 <HAL_RCC_OscConfig+0x760>)
 8002508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800250c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002510:	2b00      	cmp	r3, #0
 8002512:	d021      	beq.n	8002558 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002514:	4b20      	ldr	r3, [pc, #128]	; (8002598 <HAL_RCC_OscConfig+0x760>)
 8002516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800251a:	4a1f      	ldr	r2, [pc, #124]	; (8002598 <HAL_RCC_OscConfig+0x760>)
 800251c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002520:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002524:	e011      	b.n	800254a <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002526:	f7ff f957 	bl	80017d8 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	f241 3288 	movw	r2, #5000	; 0x1388
 8002534:	4293      	cmp	r3, r2
 8002536:	d908      	bls.n	800254a <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002538:	4b17      	ldr	r3, [pc, #92]	; (8002598 <HAL_RCC_OscConfig+0x760>)
 800253a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800253e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e142      	b.n	80027d0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800254a:	4b13      	ldr	r3, [pc, #76]	; (8002598 <HAL_RCC_OscConfig+0x760>)
 800254c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002550:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002554:	2b00      	cmp	r3, #0
 8002556:	d1e6      	bne.n	8002526 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002558:	7ffb      	ldrb	r3, [r7, #31]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d105      	bne.n	800256a <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800255e:	4b0e      	ldr	r3, [pc, #56]	; (8002598 <HAL_RCC_OscConfig+0x760>)
 8002560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002562:	4a0d      	ldr	r2, [pc, #52]	; (8002598 <HAL_RCC_OscConfig+0x760>)
 8002564:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002568:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0320 	and.w	r3, r3, #32
 8002572:	2b00      	cmp	r3, #0
 8002574:	d04f      	beq.n	8002616 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257a:	2b00      	cmp	r3, #0
 800257c:	d028      	beq.n	80025d0 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800257e:	4b06      	ldr	r3, [pc, #24]	; (8002598 <HAL_RCC_OscConfig+0x760>)
 8002580:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002584:	4a04      	ldr	r2, [pc, #16]	; (8002598 <HAL_RCC_OscConfig+0x760>)
 8002586:	f043 0301 	orr.w	r3, r3, #1
 800258a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800258e:	f7ff f923 	bl	80017d8 <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002594:	e014      	b.n	80025c0 <HAL_RCC_OscConfig+0x788>
 8002596:	bf00      	nop
 8002598:	40021000 	.word	0x40021000
 800259c:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025a0:	f7ff f91a 	bl	80017d8 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d908      	bls.n	80025c0 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025ae:	4b8a      	ldr	r3, [pc, #552]	; (80027d8 <HAL_RCC_OscConfig+0x9a0>)
 80025b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d101      	bne.n	80025c0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e107      	b.n	80027d0 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025c0:	4b85      	ldr	r3, [pc, #532]	; (80027d8 <HAL_RCC_OscConfig+0x9a0>)
 80025c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d0e8      	beq.n	80025a0 <HAL_RCC_OscConfig+0x768>
 80025ce:	e022      	b.n	8002616 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80025d0:	4b81      	ldr	r3, [pc, #516]	; (80027d8 <HAL_RCC_OscConfig+0x9a0>)
 80025d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025d6:	4a80      	ldr	r2, [pc, #512]	; (80027d8 <HAL_RCC_OscConfig+0x9a0>)
 80025d8:	f023 0301 	bic.w	r3, r3, #1
 80025dc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e0:	f7ff f8fa 	bl	80017d8 <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80025e6:	e00f      	b.n	8002608 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025e8:	f7ff f8f6 	bl	80017d8 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d908      	bls.n	8002608 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80025f6:	4b78      	ldr	r3, [pc, #480]	; (80027d8 <HAL_RCC_OscConfig+0x9a0>)
 80025f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e0e3      	b.n	80027d0 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002608:	4b73      	ldr	r3, [pc, #460]	; (80027d8 <HAL_RCC_OscConfig+0x9a0>)
 800260a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1e8      	bne.n	80025e8 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261a:	2b00      	cmp	r3, #0
 800261c:	f000 80d7 	beq.w	80027ce <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002620:	4b6d      	ldr	r3, [pc, #436]	; (80027d8 <HAL_RCC_OscConfig+0x9a0>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f003 030c 	and.w	r3, r3, #12
 8002628:	2b0c      	cmp	r3, #12
 800262a:	f000 8091 	beq.w	8002750 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002632:	2b02      	cmp	r3, #2
 8002634:	d166      	bne.n	8002704 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002636:	4b68      	ldr	r3, [pc, #416]	; (80027d8 <HAL_RCC_OscConfig+0x9a0>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a67      	ldr	r2, [pc, #412]	; (80027d8 <HAL_RCC_OscConfig+0x9a0>)
 800263c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002640:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002642:	f7ff f8c9 	bl	80017d8 <HAL_GetTick>
 8002646:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002648:	e00e      	b.n	8002668 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800264a:	f7ff f8c5 	bl	80017d8 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d907      	bls.n	8002668 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002658:	4b5f      	ldr	r3, [pc, #380]	; (80027d8 <HAL_RCC_OscConfig+0x9a0>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e0b3      	b.n	80027d0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002668:	4b5b      	ldr	r3, [pc, #364]	; (80027d8 <HAL_RCC_OscConfig+0x9a0>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1ea      	bne.n	800264a <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002674:	4b58      	ldr	r3, [pc, #352]	; (80027d8 <HAL_RCC_OscConfig+0x9a0>)
 8002676:	68da      	ldr	r2, [r3, #12]
 8002678:	4b58      	ldr	r3, [pc, #352]	; (80027dc <HAL_RCC_OscConfig+0x9a4>)
 800267a:	4013      	ands	r3, r2
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002684:	3a01      	subs	r2, #1
 8002686:	0112      	lsls	r2, r2, #4
 8002688:	4311      	orrs	r1, r2
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800268e:	0212      	lsls	r2, r2, #8
 8002690:	4311      	orrs	r1, r2
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002696:	0852      	lsrs	r2, r2, #1
 8002698:	3a01      	subs	r2, #1
 800269a:	0552      	lsls	r2, r2, #21
 800269c:	4311      	orrs	r1, r2
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80026a2:	0852      	lsrs	r2, r2, #1
 80026a4:	3a01      	subs	r2, #1
 80026a6:	0652      	lsls	r2, r2, #25
 80026a8:	4311      	orrs	r1, r2
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80026ae:	06d2      	lsls	r2, r2, #27
 80026b0:	430a      	orrs	r2, r1
 80026b2:	4949      	ldr	r1, [pc, #292]	; (80027d8 <HAL_RCC_OscConfig+0x9a0>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026b8:	4b47      	ldr	r3, [pc, #284]	; (80027d8 <HAL_RCC_OscConfig+0x9a0>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a46      	ldr	r2, [pc, #280]	; (80027d8 <HAL_RCC_OscConfig+0x9a0>)
 80026be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026c2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026c4:	4b44      	ldr	r3, [pc, #272]	; (80027d8 <HAL_RCC_OscConfig+0x9a0>)
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	4a43      	ldr	r2, [pc, #268]	; (80027d8 <HAL_RCC_OscConfig+0x9a0>)
 80026ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026ce:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d0:	f7ff f882 	bl	80017d8 <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026d6:	e00e      	b.n	80026f6 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026d8:	f7ff f87e 	bl	80017d8 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d907      	bls.n	80026f6 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026e6:	4b3c      	ldr	r3, [pc, #240]	; (80027d8 <HAL_RCC_OscConfig+0x9a0>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e06c      	b.n	80027d0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026f6:	4b38      	ldr	r3, [pc, #224]	; (80027d8 <HAL_RCC_OscConfig+0x9a0>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d0ea      	beq.n	80026d8 <HAL_RCC_OscConfig+0x8a0>
 8002702:	e064      	b.n	80027ce <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002704:	4b34      	ldr	r3, [pc, #208]	; (80027d8 <HAL_RCC_OscConfig+0x9a0>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a33      	ldr	r2, [pc, #204]	; (80027d8 <HAL_RCC_OscConfig+0x9a0>)
 800270a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800270e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002710:	f7ff f862 	bl	80017d8 <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002716:	e00e      	b.n	8002736 <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002718:	f7ff f85e 	bl	80017d8 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d907      	bls.n	8002736 <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002726:	4b2c      	ldr	r3, [pc, #176]	; (80027d8 <HAL_RCC_OscConfig+0x9a0>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e04c      	b.n	80027d0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002736:	4b28      	ldr	r3, [pc, #160]	; (80027d8 <HAL_RCC_OscConfig+0x9a0>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1ea      	bne.n	8002718 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002742:	4b25      	ldr	r3, [pc, #148]	; (80027d8 <HAL_RCC_OscConfig+0x9a0>)
 8002744:	68da      	ldr	r2, [r3, #12]
 8002746:	4924      	ldr	r1, [pc, #144]	; (80027d8 <HAL_RCC_OscConfig+0x9a0>)
 8002748:	4b25      	ldr	r3, [pc, #148]	; (80027e0 <HAL_RCC_OscConfig+0x9a8>)
 800274a:	4013      	ands	r3, r2
 800274c:	60cb      	str	r3, [r1, #12]
 800274e:	e03e      	b.n	80027ce <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002754:	2b01      	cmp	r3, #1
 8002756:	d101      	bne.n	800275c <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e039      	b.n	80027d0 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 800275c:	4b1e      	ldr	r3, [pc, #120]	; (80027d8 <HAL_RCC_OscConfig+0x9a0>)
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	f003 0203 	and.w	r2, r3, #3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276c:	429a      	cmp	r2, r3
 800276e:	d12c      	bne.n	80027ca <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800277a:	3b01      	subs	r3, #1
 800277c:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800277e:	429a      	cmp	r2, r3
 8002780:	d123      	bne.n	80027ca <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800278c:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800278e:	429a      	cmp	r2, r3
 8002790:	d11b      	bne.n	80027ca <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800279c:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800279e:	429a      	cmp	r2, r3
 80027a0:	d113      	bne.n	80027ca <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ac:	085b      	lsrs	r3, r3, #1
 80027ae:	3b01      	subs	r3, #1
 80027b0:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d109      	bne.n	80027ca <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c0:	085b      	lsrs	r3, r3, #1
 80027c2:	3b01      	subs	r3, #1
 80027c4:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d001      	beq.n	80027ce <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e000      	b.n	80027d0 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3720      	adds	r7, #32
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	40021000 	.word	0x40021000
 80027dc:	019f800c 	.word	0x019f800c
 80027e0:	feeefffc 	.word	0xfeeefffc

080027e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80027ee:	2300      	movs	r3, #0
 80027f0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e11c      	b.n	8002a36 <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027fc:	4b90      	ldr	r3, [pc, #576]	; (8002a40 <HAL_RCC_ClockConfig+0x25c>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 030f 	and.w	r3, r3, #15
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	429a      	cmp	r2, r3
 8002808:	d910      	bls.n	800282c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800280a:	4b8d      	ldr	r3, [pc, #564]	; (8002a40 <HAL_RCC_ClockConfig+0x25c>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f023 020f 	bic.w	r2, r3, #15
 8002812:	498b      	ldr	r1, [pc, #556]	; (8002a40 <HAL_RCC_ClockConfig+0x25c>)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	4313      	orrs	r3, r2
 8002818:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800281a:	4b89      	ldr	r3, [pc, #548]	; (8002a40 <HAL_RCC_ClockConfig+0x25c>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 030f 	and.w	r3, r3, #15
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	429a      	cmp	r2, r3
 8002826:	d001      	beq.n	800282c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e104      	b.n	8002a36 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d010      	beq.n	800285a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689a      	ldr	r2, [r3, #8]
 800283c:	4b81      	ldr	r3, [pc, #516]	; (8002a44 <HAL_RCC_ClockConfig+0x260>)
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002844:	429a      	cmp	r2, r3
 8002846:	d908      	bls.n	800285a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002848:	4b7e      	ldr	r3, [pc, #504]	; (8002a44 <HAL_RCC_ClockConfig+0x260>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	497b      	ldr	r1, [pc, #492]	; (8002a44 <HAL_RCC_ClockConfig+0x260>)
 8002856:	4313      	orrs	r3, r2
 8002858:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	f000 8085 	beq.w	8002972 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	2b03      	cmp	r3, #3
 800286e:	d11f      	bne.n	80028b0 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002870:	4b74      	ldr	r3, [pc, #464]	; (8002a44 <HAL_RCC_ClockConfig+0x260>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d101      	bne.n	8002880 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e0da      	b.n	8002a36 <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002880:	f000 f9fc 	bl	8002c7c <RCC_GetSysClockFreqFromPLLSource>
 8002884:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	4a6f      	ldr	r2, [pc, #444]	; (8002a48 <HAL_RCC_ClockConfig+0x264>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d947      	bls.n	800291e <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800288e:	4b6d      	ldr	r3, [pc, #436]	; (8002a44 <HAL_RCC_ClockConfig+0x260>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d141      	bne.n	800291e <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800289a:	4b6a      	ldr	r3, [pc, #424]	; (8002a44 <HAL_RCC_ClockConfig+0x260>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028a2:	4a68      	ldr	r2, [pc, #416]	; (8002a44 <HAL_RCC_ClockConfig+0x260>)
 80028a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028a8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80028aa:	2380      	movs	r3, #128	; 0x80
 80028ac:	617b      	str	r3, [r7, #20]
 80028ae:	e036      	b.n	800291e <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d107      	bne.n	80028c8 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028b8:	4b62      	ldr	r3, [pc, #392]	; (8002a44 <HAL_RCC_ClockConfig+0x260>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d115      	bne.n	80028f0 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e0b6      	b.n	8002a36 <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d107      	bne.n	80028e0 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028d0:	4b5c      	ldr	r3, [pc, #368]	; (8002a44 <HAL_RCC_ClockConfig+0x260>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d109      	bne.n	80028f0 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e0aa      	b.n	8002a36 <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028e0:	4b58      	ldr	r3, [pc, #352]	; (8002a44 <HAL_RCC_ClockConfig+0x260>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d101      	bne.n	80028f0 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e0a2      	b.n	8002a36 <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80028f0:	f000 f8b0 	bl	8002a54 <HAL_RCC_GetSysClockFreq>
 80028f4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	4a53      	ldr	r2, [pc, #332]	; (8002a48 <HAL_RCC_ClockConfig+0x264>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d90f      	bls.n	800291e <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80028fe:	4b51      	ldr	r3, [pc, #324]	; (8002a44 <HAL_RCC_ClockConfig+0x260>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d109      	bne.n	800291e <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800290a:	4b4e      	ldr	r3, [pc, #312]	; (8002a44 <HAL_RCC_ClockConfig+0x260>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002912:	4a4c      	ldr	r2, [pc, #304]	; (8002a44 <HAL_RCC_ClockConfig+0x260>)
 8002914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002918:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800291a:	2380      	movs	r3, #128	; 0x80
 800291c:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800291e:	4b49      	ldr	r3, [pc, #292]	; (8002a44 <HAL_RCC_ClockConfig+0x260>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f023 0203 	bic.w	r2, r3, #3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	4946      	ldr	r1, [pc, #280]	; (8002a44 <HAL_RCC_ClockConfig+0x260>)
 800292c:	4313      	orrs	r3, r2
 800292e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002930:	f7fe ff52 	bl	80017d8 <HAL_GetTick>
 8002934:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002936:	e013      	b.n	8002960 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002938:	f7fe ff4e 	bl	80017d8 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	f241 3288 	movw	r2, #5000	; 0x1388
 8002946:	4293      	cmp	r3, r2
 8002948:	d90a      	bls.n	8002960 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800294a:	4b3e      	ldr	r3, [pc, #248]	; (8002a44 <HAL_RCC_ClockConfig+0x260>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f003 020c 	and.w	r2, r3, #12
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	429a      	cmp	r2, r3
 800295a:	d001      	beq.n	8002960 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e06a      	b.n	8002a36 <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002960:	4b38      	ldr	r3, [pc, #224]	; (8002a44 <HAL_RCC_ClockConfig+0x260>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f003 020c 	and.w	r2, r3, #12
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	429a      	cmp	r2, r3
 8002970:	d1e2      	bne.n	8002938 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	2b80      	cmp	r3, #128	; 0x80
 8002976:	d105      	bne.n	8002984 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002978:	4b32      	ldr	r3, [pc, #200]	; (8002a44 <HAL_RCC_ClockConfig+0x260>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	4a31      	ldr	r2, [pc, #196]	; (8002a44 <HAL_RCC_ClockConfig+0x260>)
 800297e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002982:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0302 	and.w	r3, r3, #2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d010      	beq.n	80029b2 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689a      	ldr	r2, [r3, #8]
 8002994:	4b2b      	ldr	r3, [pc, #172]	; (8002a44 <HAL_RCC_ClockConfig+0x260>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800299c:	429a      	cmp	r2, r3
 800299e:	d208      	bcs.n	80029b2 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029a0:	4b28      	ldr	r3, [pc, #160]	; (8002a44 <HAL_RCC_ClockConfig+0x260>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	4925      	ldr	r1, [pc, #148]	; (8002a44 <HAL_RCC_ClockConfig+0x260>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029b2:	4b23      	ldr	r3, [pc, #140]	; (8002a40 <HAL_RCC_ClockConfig+0x25c>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 030f 	and.w	r3, r3, #15
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d210      	bcs.n	80029e2 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029c0:	4b1f      	ldr	r3, [pc, #124]	; (8002a40 <HAL_RCC_ClockConfig+0x25c>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f023 020f 	bic.w	r2, r3, #15
 80029c8:	491d      	ldr	r1, [pc, #116]	; (8002a40 <HAL_RCC_ClockConfig+0x25c>)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029d0:	4b1b      	ldr	r3, [pc, #108]	; (8002a40 <HAL_RCC_ClockConfig+0x25c>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 030f 	and.w	r3, r3, #15
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d001      	beq.n	80029e2 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e029      	b.n	8002a36 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0304 	and.w	r3, r3, #4
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d008      	beq.n	8002a00 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029ee:	4b15      	ldr	r3, [pc, #84]	; (8002a44 <HAL_RCC_ClockConfig+0x260>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	4912      	ldr	r1, [pc, #72]	; (8002a44 <HAL_RCC_ClockConfig+0x260>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0308 	and.w	r3, r3, #8
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d009      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a0c:	4b0d      	ldr	r3, [pc, #52]	; (8002a44 <HAL_RCC_ClockConfig+0x260>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	00db      	lsls	r3, r3, #3
 8002a1a:	490a      	ldr	r1, [pc, #40]	; (8002a44 <HAL_RCC_ClockConfig+0x260>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002a20:	f000 f8b4 	bl	8002b8c <HAL_RCC_GetHCLKFreq>
 8002a24:	4603      	mov	r3, r0
 8002a26:	4a09      	ldr	r2, [pc, #36]	; (8002a4c <HAL_RCC_ClockConfig+0x268>)
 8002a28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002a2a:	4b09      	ldr	r3, [pc, #36]	; (8002a50 <HAL_RCC_ClockConfig+0x26c>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7fe fe82 	bl	8001738 <HAL_InitTick>
 8002a34:	4603      	mov	r3, r0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3718      	adds	r7, #24
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	40022000 	.word	0x40022000
 8002a44:	40021000 	.word	0x40021000
 8002a48:	04c4b400 	.word	0x04c4b400
 8002a4c:	20000050 	.word	0x20000050
 8002a50:	20000054 	.word	0x20000054

08002a54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b089      	sub	sp, #36	; 0x24
 8002a58:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	61fb      	str	r3, [r7, #28]
 8002a5e:	2300      	movs	r3, #0
 8002a60:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a62:	4b47      	ldr	r3, [pc, #284]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 030c 	and.w	r3, r3, #12
 8002a6a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a6c:	4b44      	ldr	r3, [pc, #272]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	f003 0303 	and.w	r3, r3, #3
 8002a74:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d005      	beq.n	8002a88 <HAL_RCC_GetSysClockFreq+0x34>
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	2b0c      	cmp	r3, #12
 8002a80:	d121      	bne.n	8002ac6 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d11e      	bne.n	8002ac6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a88:	4b3d      	ldr	r3, [pc, #244]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0308 	and.w	r3, r3, #8
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d107      	bne.n	8002aa4 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a94:	4b3a      	ldr	r3, [pc, #232]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002a96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a9a:	0a1b      	lsrs	r3, r3, #8
 8002a9c:	f003 030f 	and.w	r3, r3, #15
 8002aa0:	61fb      	str	r3, [r7, #28]
 8002aa2:	e005      	b.n	8002ab0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002aa4:	4b36      	ldr	r3, [pc, #216]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	091b      	lsrs	r3, r3, #4
 8002aaa:	f003 030f 	and.w	r3, r3, #15
 8002aae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8002ab0:	4a34      	ldr	r2, [pc, #208]	; (8002b84 <HAL_RCC_GetSysClockFreq+0x130>)
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ab8:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d10d      	bne.n	8002adc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002ac4:	e00a      	b.n	8002adc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	2b04      	cmp	r3, #4
 8002aca:	d102      	bne.n	8002ad2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002acc:	4b2e      	ldr	r3, [pc, #184]	; (8002b88 <HAL_RCC_GetSysClockFreq+0x134>)
 8002ace:	61bb      	str	r3, [r7, #24]
 8002ad0:	e004      	b.n	8002adc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	2b08      	cmp	r3, #8
 8002ad6:	d101      	bne.n	8002adc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ad8:	4b2b      	ldr	r3, [pc, #172]	; (8002b88 <HAL_RCC_GetSysClockFreq+0x134>)
 8002ada:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	2b0c      	cmp	r3, #12
 8002ae0:	d146      	bne.n	8002b70 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002ae2:	4b27      	ldr	r3, [pc, #156]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	f003 0303 	and.w	r3, r3, #3
 8002aea:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002aec:	4b24      	ldr	r3, [pc, #144]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	091b      	lsrs	r3, r3, #4
 8002af2:	f003 030f 	and.w	r3, r3, #15
 8002af6:	3301      	adds	r3, #1
 8002af8:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d003      	beq.n	8002b08 <HAL_RCC_GetSysClockFreq+0xb4>
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	2b03      	cmp	r3, #3
 8002b04:	d00d      	beq.n	8002b22 <HAL_RCC_GetSysClockFreq+0xce>
 8002b06:	e019      	b.n	8002b3c <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b08:	4a1f      	ldr	r2, [pc, #124]	; (8002b88 <HAL_RCC_GetSysClockFreq+0x134>)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b10:	4a1b      	ldr	r2, [pc, #108]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002b12:	68d2      	ldr	r2, [r2, #12]
 8002b14:	0a12      	lsrs	r2, r2, #8
 8002b16:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002b1a:	fb02 f303 	mul.w	r3, r2, r3
 8002b1e:	617b      	str	r3, [r7, #20]
        break;
 8002b20:	e019      	b.n	8002b56 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b22:	4a19      	ldr	r2, [pc, #100]	; (8002b88 <HAL_RCC_GetSysClockFreq+0x134>)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b2a:	4a15      	ldr	r2, [pc, #84]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002b2c:	68d2      	ldr	r2, [r2, #12]
 8002b2e:	0a12      	lsrs	r2, r2, #8
 8002b30:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002b34:	fb02 f303 	mul.w	r3, r2, r3
 8002b38:	617b      	str	r3, [r7, #20]
        break;
 8002b3a:	e00c      	b.n	8002b56 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b3c:	69fa      	ldr	r2, [r7, #28]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b44:	4a0e      	ldr	r2, [pc, #56]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002b46:	68d2      	ldr	r2, [r2, #12]
 8002b48:	0a12      	lsrs	r2, r2, #8
 8002b4a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002b4e:	fb02 f303 	mul.w	r3, r2, r3
 8002b52:	617b      	str	r3, [r7, #20]
        break;
 8002b54:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8002b56:	4b0a      	ldr	r3, [pc, #40]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	0e5b      	lsrs	r3, r3, #25
 8002b5c:	f003 0303 	and.w	r3, r3, #3
 8002b60:	3301      	adds	r3, #1
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b6e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002b70:	69bb      	ldr	r3, [r7, #24]
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3724      	adds	r7, #36	; 0x24
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	40021000 	.word	0x40021000
 8002b84:	08003f44 	.word	0x08003f44
 8002b88:	00f42400 	.word	0x00f42400

08002b8c <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8002b90:	f7ff ff60 	bl	8002a54 <HAL_RCC_GetSysClockFreq>
 8002b94:	4602      	mov	r2, r0
 8002b96:	4b05      	ldr	r3, [pc, #20]	; (8002bac <HAL_RCC_GetHCLKFreq+0x20>)
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	091b      	lsrs	r3, r3, #4
 8002b9c:	f003 030f 	and.w	r3, r3, #15
 8002ba0:	4903      	ldr	r1, [pc, #12]	; (8002bb0 <HAL_RCC_GetHCLKFreq+0x24>)
 8002ba2:	5ccb      	ldrb	r3, [r1, r3]
 8002ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	08003f34 	.word	0x08003f34

08002bb4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002bc0:	4b2c      	ldr	r3, [pc, #176]	; (8002c74 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d003      	beq.n	8002bd4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002bcc:	f7ff f8a6 	bl	8001d1c <HAL_PWREx_GetVoltageRange>
 8002bd0:	6138      	str	r0, [r7, #16]
 8002bd2:	e014      	b.n	8002bfe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002bd4:	4b27      	ldr	r3, [pc, #156]	; (8002c74 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd8:	4a26      	ldr	r2, [pc, #152]	; (8002c74 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002bda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bde:	6593      	str	r3, [r2, #88]	; 0x58
 8002be0:	4b24      	ldr	r3, [pc, #144]	; (8002c74 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be8:	60fb      	str	r3, [r7, #12]
 8002bea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002bec:	f7ff f896 	bl	8001d1c <HAL_PWREx_GetVoltageRange>
 8002bf0:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002bf2:	4b20      	ldr	r3, [pc, #128]	; (8002c74 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf6:	4a1f      	ldr	r2, [pc, #124]	; (8002c74 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002bf8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bfc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d003      	beq.n	8002c0c <RCC_SetFlashLatencyFromMSIRange+0x58>
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c0a:	d10b      	bne.n	8002c24 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2b80      	cmp	r3, #128	; 0x80
 8002c10:	d919      	bls.n	8002c46 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2ba0      	cmp	r3, #160	; 0xa0
 8002c16:	d902      	bls.n	8002c1e <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c18:	2302      	movs	r3, #2
 8002c1a:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8002c1c:	e013      	b.n	8002c46 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c1e:	2301      	movs	r3, #1
 8002c20:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8002c22:	e010      	b.n	8002c46 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b80      	cmp	r3, #128	; 0x80
 8002c28:	d902      	bls.n	8002c30 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	617b      	str	r3, [r7, #20]
 8002c2e:	e00a      	b.n	8002c46 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b80      	cmp	r3, #128	; 0x80
 8002c34:	d102      	bne.n	8002c3c <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c36:	2302      	movs	r3, #2
 8002c38:	617b      	str	r3, [r7, #20]
 8002c3a:	e004      	b.n	8002c46 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2b70      	cmp	r3, #112	; 0x70
 8002c40:	d101      	bne.n	8002c46 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c42:	2301      	movs	r3, #1
 8002c44:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c46:	4b0c      	ldr	r3, [pc, #48]	; (8002c78 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f023 020f 	bic.w	r2, r3, #15
 8002c4e:	490a      	ldr	r1, [pc, #40]	; (8002c78 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002c56:	4b08      	ldr	r3, [pc, #32]	; (8002c78 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d001      	beq.n	8002c68 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e000      	b.n	8002c6a <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3718      	adds	r7, #24
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	40021000 	.word	0x40021000
 8002c78:	40022000 	.word	0x40022000

08002c7c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b087      	sub	sp, #28
 8002c80:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c82:	4b31      	ldr	r3, [pc, #196]	; (8002d48 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	f003 0303 	and.w	r3, r3, #3
 8002c8a:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c8c:	4b2e      	ldr	r3, [pc, #184]	; (8002d48 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	091b      	lsrs	r3, r3, #4
 8002c92:	f003 030f 	and.w	r3, r3, #15
 8002c96:	3301      	adds	r3, #1
 8002c98:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2b03      	cmp	r3, #3
 8002c9e:	d015      	beq.n	8002ccc <RCC_GetSysClockFreqFromPLLSource+0x50>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2b03      	cmp	r3, #3
 8002ca4:	d839      	bhi.n	8002d1a <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d01c      	beq.n	8002ce6 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d133      	bne.n	8002d1a <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002cb2:	4a26      	ldr	r2, [pc, #152]	; (8002d4c <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cba:	4a23      	ldr	r2, [pc, #140]	; (8002d48 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002cbc:	68d2      	ldr	r2, [r2, #12]
 8002cbe:	0a12      	lsrs	r2, r2, #8
 8002cc0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002cc4:	fb02 f303 	mul.w	r3, r2, r3
 8002cc8:	613b      	str	r3, [r7, #16]
      break;
 8002cca:	e029      	b.n	8002d20 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ccc:	4a1f      	ldr	r2, [pc, #124]	; (8002d4c <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd4:	4a1c      	ldr	r2, [pc, #112]	; (8002d48 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002cd6:	68d2      	ldr	r2, [r2, #12]
 8002cd8:	0a12      	lsrs	r2, r2, #8
 8002cda:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002cde:	fb02 f303 	mul.w	r3, r2, r3
 8002ce2:	613b      	str	r3, [r7, #16]
      break;
 8002ce4:	e01c      	b.n	8002d20 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ce6:	4b18      	ldr	r3, [pc, #96]	; (8002d48 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0308 	and.w	r3, r3, #8
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d107      	bne.n	8002d02 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002cf2:	4b15      	ldr	r3, [pc, #84]	; (8002d48 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002cf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cf8:	0a1b      	lsrs	r3, r3, #8
 8002cfa:	f003 030f 	and.w	r3, r3, #15
 8002cfe:	617b      	str	r3, [r7, #20]
 8002d00:	e005      	b.n	8002d0e <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d02:	4b11      	ldr	r3, [pc, #68]	; (8002d48 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	091b      	lsrs	r3, r3, #4
 8002d08:	f003 030f 	and.w	r3, r3, #15
 8002d0c:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8002d0e:	4a10      	ldr	r2, [pc, #64]	; (8002d50 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d16:	613b      	str	r3, [r7, #16]
        break;
 8002d18:	e002      	b.n	8002d20 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	613b      	str	r3, [r7, #16]
      break;
 8002d1e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8002d20:	4b09      	ldr	r3, [pc, #36]	; (8002d48 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	0e5b      	lsrs	r3, r3, #25
 8002d26:	f003 0303 	and.w	r3, r3, #3
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d38:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002d3a:	683b      	ldr	r3, [r7, #0]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	371c      	adds	r7, #28
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	00f42400 	.word	0x00f42400
 8002d50:	08003f44 	.word	0x08003f44

08002d54 <std>:
 8002d54:	2300      	movs	r3, #0
 8002d56:	b510      	push	{r4, lr}
 8002d58:	4604      	mov	r4, r0
 8002d5a:	6083      	str	r3, [r0, #8]
 8002d5c:	8181      	strh	r1, [r0, #12]
 8002d5e:	4619      	mov	r1, r3
 8002d60:	6643      	str	r3, [r0, #100]	; 0x64
 8002d62:	81c2      	strh	r2, [r0, #14]
 8002d64:	2208      	movs	r2, #8
 8002d66:	6183      	str	r3, [r0, #24]
 8002d68:	e9c0 3300 	strd	r3, r3, [r0]
 8002d6c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002d70:	305c      	adds	r0, #92	; 0x5c
 8002d72:	f000 f8cb 	bl	8002f0c <memset>
 8002d76:	4b0d      	ldr	r3, [pc, #52]	; (8002dac <std+0x58>)
 8002d78:	6224      	str	r4, [r4, #32]
 8002d7a:	6263      	str	r3, [r4, #36]	; 0x24
 8002d7c:	4b0c      	ldr	r3, [pc, #48]	; (8002db0 <std+0x5c>)
 8002d7e:	62a3      	str	r3, [r4, #40]	; 0x28
 8002d80:	4b0c      	ldr	r3, [pc, #48]	; (8002db4 <std+0x60>)
 8002d82:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002d84:	4b0c      	ldr	r3, [pc, #48]	; (8002db8 <std+0x64>)
 8002d86:	6323      	str	r3, [r4, #48]	; 0x30
 8002d88:	4b0c      	ldr	r3, [pc, #48]	; (8002dbc <std+0x68>)
 8002d8a:	429c      	cmp	r4, r3
 8002d8c:	d006      	beq.n	8002d9c <std+0x48>
 8002d8e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002d92:	4294      	cmp	r4, r2
 8002d94:	d002      	beq.n	8002d9c <std+0x48>
 8002d96:	33d0      	adds	r3, #208	; 0xd0
 8002d98:	429c      	cmp	r4, r3
 8002d9a:	d105      	bne.n	8002da8 <std+0x54>
 8002d9c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002da4:	f000 b8e4 	b.w	8002f70 <__retarget_lock_init_recursive>
 8002da8:	bd10      	pop	{r4, pc}
 8002daa:	bf00      	nop
 8002dac:	080037d1 	.word	0x080037d1
 8002db0:	080037f3 	.word	0x080037f3
 8002db4:	0800382b 	.word	0x0800382b
 8002db8:	0800384f 	.word	0x0800384f
 8002dbc:	200000dc 	.word	0x200000dc

08002dc0 <stdio_exit_handler>:
 8002dc0:	4a02      	ldr	r2, [pc, #8]	; (8002dcc <stdio_exit_handler+0xc>)
 8002dc2:	4903      	ldr	r1, [pc, #12]	; (8002dd0 <stdio_exit_handler+0x10>)
 8002dc4:	4803      	ldr	r0, [pc, #12]	; (8002dd4 <stdio_exit_handler+0x14>)
 8002dc6:	f000 b869 	b.w	8002e9c <_fwalk_sglue>
 8002dca:	bf00      	nop
 8002dcc:	2000005c 	.word	0x2000005c
 8002dd0:	08003769 	.word	0x08003769
 8002dd4:	20000068 	.word	0x20000068

08002dd8 <cleanup_stdio>:
 8002dd8:	6841      	ldr	r1, [r0, #4]
 8002dda:	4b0c      	ldr	r3, [pc, #48]	; (8002e0c <cleanup_stdio+0x34>)
 8002ddc:	4299      	cmp	r1, r3
 8002dde:	b510      	push	{r4, lr}
 8002de0:	4604      	mov	r4, r0
 8002de2:	d001      	beq.n	8002de8 <cleanup_stdio+0x10>
 8002de4:	f000 fcc0 	bl	8003768 <_fflush_r>
 8002de8:	68a1      	ldr	r1, [r4, #8]
 8002dea:	4b09      	ldr	r3, [pc, #36]	; (8002e10 <cleanup_stdio+0x38>)
 8002dec:	4299      	cmp	r1, r3
 8002dee:	d002      	beq.n	8002df6 <cleanup_stdio+0x1e>
 8002df0:	4620      	mov	r0, r4
 8002df2:	f000 fcb9 	bl	8003768 <_fflush_r>
 8002df6:	68e1      	ldr	r1, [r4, #12]
 8002df8:	4b06      	ldr	r3, [pc, #24]	; (8002e14 <cleanup_stdio+0x3c>)
 8002dfa:	4299      	cmp	r1, r3
 8002dfc:	d004      	beq.n	8002e08 <cleanup_stdio+0x30>
 8002dfe:	4620      	mov	r0, r4
 8002e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e04:	f000 bcb0 	b.w	8003768 <_fflush_r>
 8002e08:	bd10      	pop	{r4, pc}
 8002e0a:	bf00      	nop
 8002e0c:	200000dc 	.word	0x200000dc
 8002e10:	20000144 	.word	0x20000144
 8002e14:	200001ac 	.word	0x200001ac

08002e18 <global_stdio_init.part.0>:
 8002e18:	b510      	push	{r4, lr}
 8002e1a:	4b0b      	ldr	r3, [pc, #44]	; (8002e48 <global_stdio_init.part.0+0x30>)
 8002e1c:	2104      	movs	r1, #4
 8002e1e:	4c0b      	ldr	r4, [pc, #44]	; (8002e4c <global_stdio_init.part.0+0x34>)
 8002e20:	4a0b      	ldr	r2, [pc, #44]	; (8002e50 <global_stdio_init.part.0+0x38>)
 8002e22:	4620      	mov	r0, r4
 8002e24:	601a      	str	r2, [r3, #0]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f7ff ff94 	bl	8002d54 <std>
 8002e2c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002e30:	2201      	movs	r2, #1
 8002e32:	2109      	movs	r1, #9
 8002e34:	f7ff ff8e 	bl	8002d54 <std>
 8002e38:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002e3c:	2202      	movs	r2, #2
 8002e3e:	2112      	movs	r1, #18
 8002e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e44:	f7ff bf86 	b.w	8002d54 <std>
 8002e48:	20000214 	.word	0x20000214
 8002e4c:	200000dc 	.word	0x200000dc
 8002e50:	08002dc1 	.word	0x08002dc1

08002e54 <__sfp_lock_acquire>:
 8002e54:	4801      	ldr	r0, [pc, #4]	; (8002e5c <__sfp_lock_acquire+0x8>)
 8002e56:	f000 b88c 	b.w	8002f72 <__retarget_lock_acquire_recursive>
 8002e5a:	bf00      	nop
 8002e5c:	20000219 	.word	0x20000219

08002e60 <__sfp_lock_release>:
 8002e60:	4801      	ldr	r0, [pc, #4]	; (8002e68 <__sfp_lock_release+0x8>)
 8002e62:	f000 b887 	b.w	8002f74 <__retarget_lock_release_recursive>
 8002e66:	bf00      	nop
 8002e68:	20000219 	.word	0x20000219

08002e6c <__sinit>:
 8002e6c:	b510      	push	{r4, lr}
 8002e6e:	4604      	mov	r4, r0
 8002e70:	f7ff fff0 	bl	8002e54 <__sfp_lock_acquire>
 8002e74:	6a23      	ldr	r3, [r4, #32]
 8002e76:	b11b      	cbz	r3, 8002e80 <__sinit+0x14>
 8002e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e7c:	f7ff bff0 	b.w	8002e60 <__sfp_lock_release>
 8002e80:	4b04      	ldr	r3, [pc, #16]	; (8002e94 <__sinit+0x28>)
 8002e82:	6223      	str	r3, [r4, #32]
 8002e84:	4b04      	ldr	r3, [pc, #16]	; (8002e98 <__sinit+0x2c>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1f5      	bne.n	8002e78 <__sinit+0xc>
 8002e8c:	f7ff ffc4 	bl	8002e18 <global_stdio_init.part.0>
 8002e90:	e7f2      	b.n	8002e78 <__sinit+0xc>
 8002e92:	bf00      	nop
 8002e94:	08002dd9 	.word	0x08002dd9
 8002e98:	20000214 	.word	0x20000214

08002e9c <_fwalk_sglue>:
 8002e9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ea0:	4607      	mov	r7, r0
 8002ea2:	4688      	mov	r8, r1
 8002ea4:	4614      	mov	r4, r2
 8002ea6:	2600      	movs	r6, #0
 8002ea8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002eac:	f1b9 0901 	subs.w	r9, r9, #1
 8002eb0:	d505      	bpl.n	8002ebe <_fwalk_sglue+0x22>
 8002eb2:	6824      	ldr	r4, [r4, #0]
 8002eb4:	2c00      	cmp	r4, #0
 8002eb6:	d1f7      	bne.n	8002ea8 <_fwalk_sglue+0xc>
 8002eb8:	4630      	mov	r0, r6
 8002eba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ebe:	89ab      	ldrh	r3, [r5, #12]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d907      	bls.n	8002ed4 <_fwalk_sglue+0x38>
 8002ec4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002ec8:	3301      	adds	r3, #1
 8002eca:	d003      	beq.n	8002ed4 <_fwalk_sglue+0x38>
 8002ecc:	4629      	mov	r1, r5
 8002ece:	4638      	mov	r0, r7
 8002ed0:	47c0      	blx	r8
 8002ed2:	4306      	orrs	r6, r0
 8002ed4:	3568      	adds	r5, #104	; 0x68
 8002ed6:	e7e9      	b.n	8002eac <_fwalk_sglue+0x10>

08002ed8 <iprintf>:
 8002ed8:	b40f      	push	{r0, r1, r2, r3}
 8002eda:	b507      	push	{r0, r1, r2, lr}
 8002edc:	4906      	ldr	r1, [pc, #24]	; (8002ef8 <iprintf+0x20>)
 8002ede:	ab04      	add	r3, sp, #16
 8002ee0:	6808      	ldr	r0, [r1, #0]
 8002ee2:	f853 2b04 	ldr.w	r2, [r3], #4
 8002ee6:	6881      	ldr	r1, [r0, #8]
 8002ee8:	9301      	str	r3, [sp, #4]
 8002eea:	f000 f86d 	bl	8002fc8 <_vfiprintf_r>
 8002eee:	b003      	add	sp, #12
 8002ef0:	f85d eb04 	ldr.w	lr, [sp], #4
 8002ef4:	b004      	add	sp, #16
 8002ef6:	4770      	bx	lr
 8002ef8:	200000b4 	.word	0x200000b4

08002efc <putchar>:
 8002efc:	4b02      	ldr	r3, [pc, #8]	; (8002f08 <putchar+0xc>)
 8002efe:	4601      	mov	r1, r0
 8002f00:	6818      	ldr	r0, [r3, #0]
 8002f02:	6882      	ldr	r2, [r0, #8]
 8002f04:	f000 bd9d 	b.w	8003a42 <_putc_r>
 8002f08:	200000b4 	.word	0x200000b4

08002f0c <memset>:
 8002f0c:	4402      	add	r2, r0
 8002f0e:	4603      	mov	r3, r0
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d100      	bne.n	8002f16 <memset+0xa>
 8002f14:	4770      	bx	lr
 8002f16:	f803 1b01 	strb.w	r1, [r3], #1
 8002f1a:	e7f9      	b.n	8002f10 <memset+0x4>

08002f1c <__errno>:
 8002f1c:	4b01      	ldr	r3, [pc, #4]	; (8002f24 <__errno+0x8>)
 8002f1e:	6818      	ldr	r0, [r3, #0]
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	200000b4 	.word	0x200000b4

08002f28 <__libc_init_array>:
 8002f28:	b570      	push	{r4, r5, r6, lr}
 8002f2a:	4d0d      	ldr	r5, [pc, #52]	; (8002f60 <__libc_init_array+0x38>)
 8002f2c:	2600      	movs	r6, #0
 8002f2e:	4c0d      	ldr	r4, [pc, #52]	; (8002f64 <__libc_init_array+0x3c>)
 8002f30:	1b64      	subs	r4, r4, r5
 8002f32:	10a4      	asrs	r4, r4, #2
 8002f34:	42a6      	cmp	r6, r4
 8002f36:	d109      	bne.n	8002f4c <__libc_init_array+0x24>
 8002f38:	4d0b      	ldr	r5, [pc, #44]	; (8002f68 <__libc_init_array+0x40>)
 8002f3a:	2600      	movs	r6, #0
 8002f3c:	4c0b      	ldr	r4, [pc, #44]	; (8002f6c <__libc_init_array+0x44>)
 8002f3e:	f000 fe87 	bl	8003c50 <_init>
 8002f42:	1b64      	subs	r4, r4, r5
 8002f44:	10a4      	asrs	r4, r4, #2
 8002f46:	42a6      	cmp	r6, r4
 8002f48:	d105      	bne.n	8002f56 <__libc_init_array+0x2e>
 8002f4a:	bd70      	pop	{r4, r5, r6, pc}
 8002f4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f50:	3601      	adds	r6, #1
 8002f52:	4798      	blx	r3
 8002f54:	e7ee      	b.n	8002f34 <__libc_init_array+0xc>
 8002f56:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f5a:	3601      	adds	r6, #1
 8002f5c:	4798      	blx	r3
 8002f5e:	e7f2      	b.n	8002f46 <__libc_init_array+0x1e>
 8002f60:	08003fb8 	.word	0x08003fb8
 8002f64:	08003fb8 	.word	0x08003fb8
 8002f68:	08003fb8 	.word	0x08003fb8
 8002f6c:	08003fbc 	.word	0x08003fbc

08002f70 <__retarget_lock_init_recursive>:
 8002f70:	4770      	bx	lr

08002f72 <__retarget_lock_acquire_recursive>:
 8002f72:	4770      	bx	lr

08002f74 <__retarget_lock_release_recursive>:
 8002f74:	4770      	bx	lr

08002f76 <__sfputc_r>:
 8002f76:	6893      	ldr	r3, [r2, #8]
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	6093      	str	r3, [r2, #8]
 8002f7e:	b410      	push	{r4}
 8002f80:	da08      	bge.n	8002f94 <__sfputc_r+0x1e>
 8002f82:	6994      	ldr	r4, [r2, #24]
 8002f84:	42a3      	cmp	r3, r4
 8002f86:	db01      	blt.n	8002f8c <__sfputc_r+0x16>
 8002f88:	290a      	cmp	r1, #10
 8002f8a:	d103      	bne.n	8002f94 <__sfputc_r+0x1e>
 8002f8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f90:	f000 bc61 	b.w	8003856 <__swbuf_r>
 8002f94:	6813      	ldr	r3, [r2, #0]
 8002f96:	1c58      	adds	r0, r3, #1
 8002f98:	6010      	str	r0, [r2, #0]
 8002f9a:	4608      	mov	r0, r1
 8002f9c:	7019      	strb	r1, [r3, #0]
 8002f9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <__sfputs_r>:
 8002fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fa6:	4606      	mov	r6, r0
 8002fa8:	460f      	mov	r7, r1
 8002faa:	4614      	mov	r4, r2
 8002fac:	18d5      	adds	r5, r2, r3
 8002fae:	42ac      	cmp	r4, r5
 8002fb0:	d101      	bne.n	8002fb6 <__sfputs_r+0x12>
 8002fb2:	2000      	movs	r0, #0
 8002fb4:	e007      	b.n	8002fc6 <__sfputs_r+0x22>
 8002fb6:	463a      	mov	r2, r7
 8002fb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002fbc:	4630      	mov	r0, r6
 8002fbe:	f7ff ffda 	bl	8002f76 <__sfputc_r>
 8002fc2:	1c43      	adds	r3, r0, #1
 8002fc4:	d1f3      	bne.n	8002fae <__sfputs_r+0xa>
 8002fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002fc8 <_vfiprintf_r>:
 8002fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fcc:	460d      	mov	r5, r1
 8002fce:	b09d      	sub	sp, #116	; 0x74
 8002fd0:	4614      	mov	r4, r2
 8002fd2:	4698      	mov	r8, r3
 8002fd4:	4606      	mov	r6, r0
 8002fd6:	b118      	cbz	r0, 8002fe0 <_vfiprintf_r+0x18>
 8002fd8:	6a03      	ldr	r3, [r0, #32]
 8002fda:	b90b      	cbnz	r3, 8002fe0 <_vfiprintf_r+0x18>
 8002fdc:	f7ff ff46 	bl	8002e6c <__sinit>
 8002fe0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002fe2:	07d9      	lsls	r1, r3, #31
 8002fe4:	d405      	bmi.n	8002ff2 <_vfiprintf_r+0x2a>
 8002fe6:	89ab      	ldrh	r3, [r5, #12]
 8002fe8:	059a      	lsls	r2, r3, #22
 8002fea:	d402      	bmi.n	8002ff2 <_vfiprintf_r+0x2a>
 8002fec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002fee:	f7ff ffc0 	bl	8002f72 <__retarget_lock_acquire_recursive>
 8002ff2:	89ab      	ldrh	r3, [r5, #12]
 8002ff4:	071b      	lsls	r3, r3, #28
 8002ff6:	d501      	bpl.n	8002ffc <_vfiprintf_r+0x34>
 8002ff8:	692b      	ldr	r3, [r5, #16]
 8002ffa:	b99b      	cbnz	r3, 8003024 <_vfiprintf_r+0x5c>
 8002ffc:	4629      	mov	r1, r5
 8002ffe:	4630      	mov	r0, r6
 8003000:	f000 fc66 	bl	80038d0 <__swsetup_r>
 8003004:	b170      	cbz	r0, 8003024 <_vfiprintf_r+0x5c>
 8003006:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003008:	07dc      	lsls	r4, r3, #31
 800300a:	d504      	bpl.n	8003016 <_vfiprintf_r+0x4e>
 800300c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003010:	b01d      	add	sp, #116	; 0x74
 8003012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003016:	89ab      	ldrh	r3, [r5, #12]
 8003018:	0598      	lsls	r0, r3, #22
 800301a:	d4f7      	bmi.n	800300c <_vfiprintf_r+0x44>
 800301c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800301e:	f7ff ffa9 	bl	8002f74 <__retarget_lock_release_recursive>
 8003022:	e7f3      	b.n	800300c <_vfiprintf_r+0x44>
 8003024:	2300      	movs	r3, #0
 8003026:	f8cd 800c 	str.w	r8, [sp, #12]
 800302a:	f04f 0901 	mov.w	r9, #1
 800302e:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 80031e8 <_vfiprintf_r+0x220>
 8003032:	9309      	str	r3, [sp, #36]	; 0x24
 8003034:	2320      	movs	r3, #32
 8003036:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800303a:	2330      	movs	r3, #48	; 0x30
 800303c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003040:	4623      	mov	r3, r4
 8003042:	469a      	mov	sl, r3
 8003044:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003048:	b10a      	cbz	r2, 800304e <_vfiprintf_r+0x86>
 800304a:	2a25      	cmp	r2, #37	; 0x25
 800304c:	d1f9      	bne.n	8003042 <_vfiprintf_r+0x7a>
 800304e:	ebba 0b04 	subs.w	fp, sl, r4
 8003052:	d00b      	beq.n	800306c <_vfiprintf_r+0xa4>
 8003054:	465b      	mov	r3, fp
 8003056:	4622      	mov	r2, r4
 8003058:	4629      	mov	r1, r5
 800305a:	4630      	mov	r0, r6
 800305c:	f7ff ffa2 	bl	8002fa4 <__sfputs_r>
 8003060:	3001      	adds	r0, #1
 8003062:	f000 80a9 	beq.w	80031b8 <_vfiprintf_r+0x1f0>
 8003066:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003068:	445a      	add	r2, fp
 800306a:	9209      	str	r2, [sp, #36]	; 0x24
 800306c:	f89a 3000 	ldrb.w	r3, [sl]
 8003070:	2b00      	cmp	r3, #0
 8003072:	f000 80a1 	beq.w	80031b8 <_vfiprintf_r+0x1f0>
 8003076:	2300      	movs	r3, #0
 8003078:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800307c:	f10a 0a01 	add.w	sl, sl, #1
 8003080:	9304      	str	r3, [sp, #16]
 8003082:	9307      	str	r3, [sp, #28]
 8003084:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003088:	931a      	str	r3, [sp, #104]	; 0x68
 800308a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800308e:	4654      	mov	r4, sl
 8003090:	2205      	movs	r2, #5
 8003092:	4855      	ldr	r0, [pc, #340]	; (80031e8 <_vfiprintf_r+0x220>)
 8003094:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003098:	f000 fd80 	bl	8003b9c <memchr>
 800309c:	9a04      	ldr	r2, [sp, #16]
 800309e:	b9d8      	cbnz	r0, 80030d8 <_vfiprintf_r+0x110>
 80030a0:	06d1      	lsls	r1, r2, #27
 80030a2:	bf44      	itt	mi
 80030a4:	2320      	movmi	r3, #32
 80030a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80030aa:	0713      	lsls	r3, r2, #28
 80030ac:	bf44      	itt	mi
 80030ae:	232b      	movmi	r3, #43	; 0x2b
 80030b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80030b4:	f89a 3000 	ldrb.w	r3, [sl]
 80030b8:	2b2a      	cmp	r3, #42	; 0x2a
 80030ba:	d015      	beq.n	80030e8 <_vfiprintf_r+0x120>
 80030bc:	9a07      	ldr	r2, [sp, #28]
 80030be:	4654      	mov	r4, sl
 80030c0:	2000      	movs	r0, #0
 80030c2:	f04f 0c0a 	mov.w	ip, #10
 80030c6:	4621      	mov	r1, r4
 80030c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80030cc:	3b30      	subs	r3, #48	; 0x30
 80030ce:	2b09      	cmp	r3, #9
 80030d0:	d94d      	bls.n	800316e <_vfiprintf_r+0x1a6>
 80030d2:	b1b0      	cbz	r0, 8003102 <_vfiprintf_r+0x13a>
 80030d4:	9207      	str	r2, [sp, #28]
 80030d6:	e014      	b.n	8003102 <_vfiprintf_r+0x13a>
 80030d8:	eba0 0308 	sub.w	r3, r0, r8
 80030dc:	46a2      	mov	sl, r4
 80030de:	fa09 f303 	lsl.w	r3, r9, r3
 80030e2:	4313      	orrs	r3, r2
 80030e4:	9304      	str	r3, [sp, #16]
 80030e6:	e7d2      	b.n	800308e <_vfiprintf_r+0xc6>
 80030e8:	9b03      	ldr	r3, [sp, #12]
 80030ea:	1d19      	adds	r1, r3, #4
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	9103      	str	r1, [sp, #12]
 80030f2:	bfbb      	ittet	lt
 80030f4:	425b      	neglt	r3, r3
 80030f6:	f042 0202 	orrlt.w	r2, r2, #2
 80030fa:	9307      	strge	r3, [sp, #28]
 80030fc:	9307      	strlt	r3, [sp, #28]
 80030fe:	bfb8      	it	lt
 8003100:	9204      	strlt	r2, [sp, #16]
 8003102:	7823      	ldrb	r3, [r4, #0]
 8003104:	2b2e      	cmp	r3, #46	; 0x2e
 8003106:	d10c      	bne.n	8003122 <_vfiprintf_r+0x15a>
 8003108:	7863      	ldrb	r3, [r4, #1]
 800310a:	2b2a      	cmp	r3, #42	; 0x2a
 800310c:	d134      	bne.n	8003178 <_vfiprintf_r+0x1b0>
 800310e:	9b03      	ldr	r3, [sp, #12]
 8003110:	3402      	adds	r4, #2
 8003112:	1d1a      	adds	r2, r3, #4
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2b00      	cmp	r3, #0
 8003118:	9203      	str	r2, [sp, #12]
 800311a:	bfb8      	it	lt
 800311c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003120:	9305      	str	r3, [sp, #20]
 8003122:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80031f8 <_vfiprintf_r+0x230>
 8003126:	2203      	movs	r2, #3
 8003128:	7821      	ldrb	r1, [r4, #0]
 800312a:	4650      	mov	r0, sl
 800312c:	f000 fd36 	bl	8003b9c <memchr>
 8003130:	b138      	cbz	r0, 8003142 <_vfiprintf_r+0x17a>
 8003132:	eba0 000a 	sub.w	r0, r0, sl
 8003136:	2240      	movs	r2, #64	; 0x40
 8003138:	9b04      	ldr	r3, [sp, #16]
 800313a:	3401      	adds	r4, #1
 800313c:	4082      	lsls	r2, r0
 800313e:	4313      	orrs	r3, r2
 8003140:	9304      	str	r3, [sp, #16]
 8003142:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003146:	2206      	movs	r2, #6
 8003148:	4828      	ldr	r0, [pc, #160]	; (80031ec <_vfiprintf_r+0x224>)
 800314a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800314e:	f000 fd25 	bl	8003b9c <memchr>
 8003152:	2800      	cmp	r0, #0
 8003154:	d03f      	beq.n	80031d6 <_vfiprintf_r+0x20e>
 8003156:	4b26      	ldr	r3, [pc, #152]	; (80031f0 <_vfiprintf_r+0x228>)
 8003158:	bb1b      	cbnz	r3, 80031a2 <_vfiprintf_r+0x1da>
 800315a:	9b03      	ldr	r3, [sp, #12]
 800315c:	3307      	adds	r3, #7
 800315e:	f023 0307 	bic.w	r3, r3, #7
 8003162:	3308      	adds	r3, #8
 8003164:	9303      	str	r3, [sp, #12]
 8003166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003168:	443b      	add	r3, r7
 800316a:	9309      	str	r3, [sp, #36]	; 0x24
 800316c:	e768      	b.n	8003040 <_vfiprintf_r+0x78>
 800316e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003172:	460c      	mov	r4, r1
 8003174:	2001      	movs	r0, #1
 8003176:	e7a6      	b.n	80030c6 <_vfiprintf_r+0xfe>
 8003178:	2300      	movs	r3, #0
 800317a:	3401      	adds	r4, #1
 800317c:	f04f 0c0a 	mov.w	ip, #10
 8003180:	4619      	mov	r1, r3
 8003182:	9305      	str	r3, [sp, #20]
 8003184:	4620      	mov	r0, r4
 8003186:	f810 2b01 	ldrb.w	r2, [r0], #1
 800318a:	3a30      	subs	r2, #48	; 0x30
 800318c:	2a09      	cmp	r2, #9
 800318e:	d903      	bls.n	8003198 <_vfiprintf_r+0x1d0>
 8003190:	2b00      	cmp	r3, #0
 8003192:	d0c6      	beq.n	8003122 <_vfiprintf_r+0x15a>
 8003194:	9105      	str	r1, [sp, #20]
 8003196:	e7c4      	b.n	8003122 <_vfiprintf_r+0x15a>
 8003198:	fb0c 2101 	mla	r1, ip, r1, r2
 800319c:	4604      	mov	r4, r0
 800319e:	2301      	movs	r3, #1
 80031a0:	e7f0      	b.n	8003184 <_vfiprintf_r+0x1bc>
 80031a2:	ab03      	add	r3, sp, #12
 80031a4:	462a      	mov	r2, r5
 80031a6:	a904      	add	r1, sp, #16
 80031a8:	4630      	mov	r0, r6
 80031aa:	9300      	str	r3, [sp, #0]
 80031ac:	4b11      	ldr	r3, [pc, #68]	; (80031f4 <_vfiprintf_r+0x22c>)
 80031ae:	f3af 8000 	nop.w
 80031b2:	4607      	mov	r7, r0
 80031b4:	1c78      	adds	r0, r7, #1
 80031b6:	d1d6      	bne.n	8003166 <_vfiprintf_r+0x19e>
 80031b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80031ba:	07d9      	lsls	r1, r3, #31
 80031bc:	d405      	bmi.n	80031ca <_vfiprintf_r+0x202>
 80031be:	89ab      	ldrh	r3, [r5, #12]
 80031c0:	059a      	lsls	r2, r3, #22
 80031c2:	d402      	bmi.n	80031ca <_vfiprintf_r+0x202>
 80031c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80031c6:	f7ff fed5 	bl	8002f74 <__retarget_lock_release_recursive>
 80031ca:	89ab      	ldrh	r3, [r5, #12]
 80031cc:	065b      	lsls	r3, r3, #25
 80031ce:	f53f af1d 	bmi.w	800300c <_vfiprintf_r+0x44>
 80031d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80031d4:	e71c      	b.n	8003010 <_vfiprintf_r+0x48>
 80031d6:	ab03      	add	r3, sp, #12
 80031d8:	462a      	mov	r2, r5
 80031da:	a904      	add	r1, sp, #16
 80031dc:	4630      	mov	r0, r6
 80031de:	9300      	str	r3, [sp, #0]
 80031e0:	4b04      	ldr	r3, [pc, #16]	; (80031f4 <_vfiprintf_r+0x22c>)
 80031e2:	f000 f91d 	bl	8003420 <_printf_i>
 80031e6:	e7e4      	b.n	80031b2 <_vfiprintf_r+0x1ea>
 80031e8:	08003f84 	.word	0x08003f84
 80031ec:	08003f8e 	.word	0x08003f8e
 80031f0:	00000000 	.word	0x00000000
 80031f4:	08002fa5 	.word	0x08002fa5
 80031f8:	08003f8a 	.word	0x08003f8a

080031fc <sbrk_aligned>:
 80031fc:	b570      	push	{r4, r5, r6, lr}
 80031fe:	4e0e      	ldr	r6, [pc, #56]	; (8003238 <sbrk_aligned+0x3c>)
 8003200:	460c      	mov	r4, r1
 8003202:	4605      	mov	r5, r0
 8003204:	6831      	ldr	r1, [r6, #0]
 8003206:	b911      	cbnz	r1, 800320e <sbrk_aligned+0x12>
 8003208:	f000 fca6 	bl	8003b58 <_sbrk_r>
 800320c:	6030      	str	r0, [r6, #0]
 800320e:	4621      	mov	r1, r4
 8003210:	4628      	mov	r0, r5
 8003212:	f000 fca1 	bl	8003b58 <_sbrk_r>
 8003216:	1c43      	adds	r3, r0, #1
 8003218:	d00a      	beq.n	8003230 <sbrk_aligned+0x34>
 800321a:	1cc4      	adds	r4, r0, #3
 800321c:	f024 0403 	bic.w	r4, r4, #3
 8003220:	42a0      	cmp	r0, r4
 8003222:	d007      	beq.n	8003234 <sbrk_aligned+0x38>
 8003224:	1a21      	subs	r1, r4, r0
 8003226:	4628      	mov	r0, r5
 8003228:	f000 fc96 	bl	8003b58 <_sbrk_r>
 800322c:	3001      	adds	r0, #1
 800322e:	d101      	bne.n	8003234 <sbrk_aligned+0x38>
 8003230:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003234:	4620      	mov	r0, r4
 8003236:	bd70      	pop	{r4, r5, r6, pc}
 8003238:	20000220 	.word	0x20000220

0800323c <_malloc_r>:
 800323c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003240:	1ccd      	adds	r5, r1, #3
 8003242:	4607      	mov	r7, r0
 8003244:	f025 0503 	bic.w	r5, r5, #3
 8003248:	3508      	adds	r5, #8
 800324a:	2d0c      	cmp	r5, #12
 800324c:	bf38      	it	cc
 800324e:	250c      	movcc	r5, #12
 8003250:	2d00      	cmp	r5, #0
 8003252:	db01      	blt.n	8003258 <_malloc_r+0x1c>
 8003254:	42a9      	cmp	r1, r5
 8003256:	d905      	bls.n	8003264 <_malloc_r+0x28>
 8003258:	230c      	movs	r3, #12
 800325a:	2600      	movs	r6, #0
 800325c:	603b      	str	r3, [r7, #0]
 800325e:	4630      	mov	r0, r6
 8003260:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003264:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003338 <_malloc_r+0xfc>
 8003268:	f000 faa6 	bl	80037b8 <__malloc_lock>
 800326c:	f8d8 3000 	ldr.w	r3, [r8]
 8003270:	461c      	mov	r4, r3
 8003272:	bb5c      	cbnz	r4, 80032cc <_malloc_r+0x90>
 8003274:	4629      	mov	r1, r5
 8003276:	4638      	mov	r0, r7
 8003278:	f7ff ffc0 	bl	80031fc <sbrk_aligned>
 800327c:	1c43      	adds	r3, r0, #1
 800327e:	4604      	mov	r4, r0
 8003280:	d155      	bne.n	800332e <_malloc_r+0xf2>
 8003282:	f8d8 4000 	ldr.w	r4, [r8]
 8003286:	4626      	mov	r6, r4
 8003288:	2e00      	cmp	r6, #0
 800328a:	d145      	bne.n	8003318 <_malloc_r+0xdc>
 800328c:	2c00      	cmp	r4, #0
 800328e:	d048      	beq.n	8003322 <_malloc_r+0xe6>
 8003290:	6823      	ldr	r3, [r4, #0]
 8003292:	4631      	mov	r1, r6
 8003294:	4638      	mov	r0, r7
 8003296:	eb04 0903 	add.w	r9, r4, r3
 800329a:	f000 fc5d 	bl	8003b58 <_sbrk_r>
 800329e:	4581      	cmp	r9, r0
 80032a0:	d13f      	bne.n	8003322 <_malloc_r+0xe6>
 80032a2:	6821      	ldr	r1, [r4, #0]
 80032a4:	4638      	mov	r0, r7
 80032a6:	1a6d      	subs	r5, r5, r1
 80032a8:	4629      	mov	r1, r5
 80032aa:	f7ff ffa7 	bl	80031fc <sbrk_aligned>
 80032ae:	3001      	adds	r0, #1
 80032b0:	d037      	beq.n	8003322 <_malloc_r+0xe6>
 80032b2:	6823      	ldr	r3, [r4, #0]
 80032b4:	442b      	add	r3, r5
 80032b6:	6023      	str	r3, [r4, #0]
 80032b8:	f8d8 3000 	ldr.w	r3, [r8]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d038      	beq.n	8003332 <_malloc_r+0xf6>
 80032c0:	685a      	ldr	r2, [r3, #4]
 80032c2:	42a2      	cmp	r2, r4
 80032c4:	d12b      	bne.n	800331e <_malloc_r+0xe2>
 80032c6:	2200      	movs	r2, #0
 80032c8:	605a      	str	r2, [r3, #4]
 80032ca:	e00f      	b.n	80032ec <_malloc_r+0xb0>
 80032cc:	6822      	ldr	r2, [r4, #0]
 80032ce:	1b52      	subs	r2, r2, r5
 80032d0:	d41f      	bmi.n	8003312 <_malloc_r+0xd6>
 80032d2:	2a0b      	cmp	r2, #11
 80032d4:	d917      	bls.n	8003306 <_malloc_r+0xca>
 80032d6:	1961      	adds	r1, r4, r5
 80032d8:	42a3      	cmp	r3, r4
 80032da:	6025      	str	r5, [r4, #0]
 80032dc:	bf18      	it	ne
 80032de:	6059      	strne	r1, [r3, #4]
 80032e0:	6863      	ldr	r3, [r4, #4]
 80032e2:	bf08      	it	eq
 80032e4:	f8c8 1000 	streq.w	r1, [r8]
 80032e8:	5162      	str	r2, [r4, r5]
 80032ea:	604b      	str	r3, [r1, #4]
 80032ec:	f104 060b 	add.w	r6, r4, #11
 80032f0:	4638      	mov	r0, r7
 80032f2:	f000 fa67 	bl	80037c4 <__malloc_unlock>
 80032f6:	1d23      	adds	r3, r4, #4
 80032f8:	f026 0607 	bic.w	r6, r6, #7
 80032fc:	1af2      	subs	r2, r6, r3
 80032fe:	d0ae      	beq.n	800325e <_malloc_r+0x22>
 8003300:	1b9b      	subs	r3, r3, r6
 8003302:	50a3      	str	r3, [r4, r2]
 8003304:	e7ab      	b.n	800325e <_malloc_r+0x22>
 8003306:	42a3      	cmp	r3, r4
 8003308:	6862      	ldr	r2, [r4, #4]
 800330a:	d1dd      	bne.n	80032c8 <_malloc_r+0x8c>
 800330c:	f8c8 2000 	str.w	r2, [r8]
 8003310:	e7ec      	b.n	80032ec <_malloc_r+0xb0>
 8003312:	4623      	mov	r3, r4
 8003314:	6864      	ldr	r4, [r4, #4]
 8003316:	e7ac      	b.n	8003272 <_malloc_r+0x36>
 8003318:	4634      	mov	r4, r6
 800331a:	6876      	ldr	r6, [r6, #4]
 800331c:	e7b4      	b.n	8003288 <_malloc_r+0x4c>
 800331e:	4613      	mov	r3, r2
 8003320:	e7cc      	b.n	80032bc <_malloc_r+0x80>
 8003322:	230c      	movs	r3, #12
 8003324:	4638      	mov	r0, r7
 8003326:	603b      	str	r3, [r7, #0]
 8003328:	f000 fa4c 	bl	80037c4 <__malloc_unlock>
 800332c:	e797      	b.n	800325e <_malloc_r+0x22>
 800332e:	6025      	str	r5, [r4, #0]
 8003330:	e7dc      	b.n	80032ec <_malloc_r+0xb0>
 8003332:	605b      	str	r3, [r3, #4]
 8003334:	deff      	udf	#255	; 0xff
 8003336:	bf00      	nop
 8003338:	2000021c 	.word	0x2000021c

0800333c <_printf_common>:
 800333c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003340:	4616      	mov	r6, r2
 8003342:	4699      	mov	r9, r3
 8003344:	688a      	ldr	r2, [r1, #8]
 8003346:	4607      	mov	r7, r0
 8003348:	690b      	ldr	r3, [r1, #16]
 800334a:	460c      	mov	r4, r1
 800334c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003350:	4293      	cmp	r3, r2
 8003352:	bfb8      	it	lt
 8003354:	4613      	movlt	r3, r2
 8003356:	6033      	str	r3, [r6, #0]
 8003358:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800335c:	b10a      	cbz	r2, 8003362 <_printf_common+0x26>
 800335e:	3301      	adds	r3, #1
 8003360:	6033      	str	r3, [r6, #0]
 8003362:	6823      	ldr	r3, [r4, #0]
 8003364:	0699      	lsls	r1, r3, #26
 8003366:	bf42      	ittt	mi
 8003368:	6833      	ldrmi	r3, [r6, #0]
 800336a:	3302      	addmi	r3, #2
 800336c:	6033      	strmi	r3, [r6, #0]
 800336e:	6825      	ldr	r5, [r4, #0]
 8003370:	f015 0506 	ands.w	r5, r5, #6
 8003374:	d106      	bne.n	8003384 <_printf_common+0x48>
 8003376:	f104 0a19 	add.w	sl, r4, #25
 800337a:	68e3      	ldr	r3, [r4, #12]
 800337c:	6832      	ldr	r2, [r6, #0]
 800337e:	1a9b      	subs	r3, r3, r2
 8003380:	42ab      	cmp	r3, r5
 8003382:	dc2b      	bgt.n	80033dc <_printf_common+0xa0>
 8003384:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003388:	1e13      	subs	r3, r2, #0
 800338a:	6822      	ldr	r2, [r4, #0]
 800338c:	bf18      	it	ne
 800338e:	2301      	movne	r3, #1
 8003390:	0692      	lsls	r2, r2, #26
 8003392:	d430      	bmi.n	80033f6 <_printf_common+0xba>
 8003394:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003398:	4649      	mov	r1, r9
 800339a:	4638      	mov	r0, r7
 800339c:	47c0      	blx	r8
 800339e:	3001      	adds	r0, #1
 80033a0:	d023      	beq.n	80033ea <_printf_common+0xae>
 80033a2:	6823      	ldr	r3, [r4, #0]
 80033a4:	341a      	adds	r4, #26
 80033a6:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 80033aa:	f003 0306 	and.w	r3, r3, #6
 80033ae:	2b04      	cmp	r3, #4
 80033b0:	bf0a      	itet	eq
 80033b2:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 80033b6:	2500      	movne	r5, #0
 80033b8:	6833      	ldreq	r3, [r6, #0]
 80033ba:	f04f 0600 	mov.w	r6, #0
 80033be:	bf08      	it	eq
 80033c0:	1aed      	subeq	r5, r5, r3
 80033c2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80033c6:	bf08      	it	eq
 80033c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80033cc:	4293      	cmp	r3, r2
 80033ce:	bfc4      	itt	gt
 80033d0:	1a9b      	subgt	r3, r3, r2
 80033d2:	18ed      	addgt	r5, r5, r3
 80033d4:	42b5      	cmp	r5, r6
 80033d6:	d11a      	bne.n	800340e <_printf_common+0xd2>
 80033d8:	2000      	movs	r0, #0
 80033da:	e008      	b.n	80033ee <_printf_common+0xb2>
 80033dc:	2301      	movs	r3, #1
 80033de:	4652      	mov	r2, sl
 80033e0:	4649      	mov	r1, r9
 80033e2:	4638      	mov	r0, r7
 80033e4:	47c0      	blx	r8
 80033e6:	3001      	adds	r0, #1
 80033e8:	d103      	bne.n	80033f2 <_printf_common+0xb6>
 80033ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80033ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033f2:	3501      	adds	r5, #1
 80033f4:	e7c1      	b.n	800337a <_printf_common+0x3e>
 80033f6:	18e1      	adds	r1, r4, r3
 80033f8:	1c5a      	adds	r2, r3, #1
 80033fa:	2030      	movs	r0, #48	; 0x30
 80033fc:	3302      	adds	r3, #2
 80033fe:	4422      	add	r2, r4
 8003400:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003404:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003408:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800340c:	e7c2      	b.n	8003394 <_printf_common+0x58>
 800340e:	2301      	movs	r3, #1
 8003410:	4622      	mov	r2, r4
 8003412:	4649      	mov	r1, r9
 8003414:	4638      	mov	r0, r7
 8003416:	47c0      	blx	r8
 8003418:	3001      	adds	r0, #1
 800341a:	d0e6      	beq.n	80033ea <_printf_common+0xae>
 800341c:	3601      	adds	r6, #1
 800341e:	e7d9      	b.n	80033d4 <_printf_common+0x98>

08003420 <_printf_i>:
 8003420:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003424:	7e0f      	ldrb	r7, [r1, #24]
 8003426:	4691      	mov	r9, r2
 8003428:	4680      	mov	r8, r0
 800342a:	460c      	mov	r4, r1
 800342c:	2f78      	cmp	r7, #120	; 0x78
 800342e:	469a      	mov	sl, r3
 8003430:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003432:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003436:	d807      	bhi.n	8003448 <_printf_i+0x28>
 8003438:	2f62      	cmp	r7, #98	; 0x62
 800343a:	d80a      	bhi.n	8003452 <_printf_i+0x32>
 800343c:	2f00      	cmp	r7, #0
 800343e:	f000 80d3 	beq.w	80035e8 <_printf_i+0x1c8>
 8003442:	2f58      	cmp	r7, #88	; 0x58
 8003444:	f000 80bf 	beq.w	80035c6 <_printf_i+0x1a6>
 8003448:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800344c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003450:	e03a      	b.n	80034c8 <_printf_i+0xa8>
 8003452:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003456:	2b15      	cmp	r3, #21
 8003458:	d8f6      	bhi.n	8003448 <_printf_i+0x28>
 800345a:	a101      	add	r1, pc, #4	; (adr r1, 8003460 <_printf_i+0x40>)
 800345c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003460:	080034b9 	.word	0x080034b9
 8003464:	080034cd 	.word	0x080034cd
 8003468:	08003449 	.word	0x08003449
 800346c:	08003449 	.word	0x08003449
 8003470:	08003449 	.word	0x08003449
 8003474:	08003449 	.word	0x08003449
 8003478:	080034cd 	.word	0x080034cd
 800347c:	08003449 	.word	0x08003449
 8003480:	08003449 	.word	0x08003449
 8003484:	08003449 	.word	0x08003449
 8003488:	08003449 	.word	0x08003449
 800348c:	080035cf 	.word	0x080035cf
 8003490:	080034f9 	.word	0x080034f9
 8003494:	0800358b 	.word	0x0800358b
 8003498:	08003449 	.word	0x08003449
 800349c:	08003449 	.word	0x08003449
 80034a0:	080035f1 	.word	0x080035f1
 80034a4:	08003449 	.word	0x08003449
 80034a8:	080034f9 	.word	0x080034f9
 80034ac:	08003449 	.word	0x08003449
 80034b0:	08003449 	.word	0x08003449
 80034b4:	08003593 	.word	0x08003593
 80034b8:	682b      	ldr	r3, [r5, #0]
 80034ba:	1d1a      	adds	r2, r3, #4
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	602a      	str	r2, [r5, #0]
 80034c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80034c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80034c8:	2301      	movs	r3, #1
 80034ca:	e09e      	b.n	800360a <_printf_i+0x1ea>
 80034cc:	6820      	ldr	r0, [r4, #0]
 80034ce:	682b      	ldr	r3, [r5, #0]
 80034d0:	0607      	lsls	r7, r0, #24
 80034d2:	f103 0104 	add.w	r1, r3, #4
 80034d6:	6029      	str	r1, [r5, #0]
 80034d8:	d501      	bpl.n	80034de <_printf_i+0xbe>
 80034da:	681e      	ldr	r6, [r3, #0]
 80034dc:	e003      	b.n	80034e6 <_printf_i+0xc6>
 80034de:	0646      	lsls	r6, r0, #25
 80034e0:	d5fb      	bpl.n	80034da <_printf_i+0xba>
 80034e2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80034e6:	2e00      	cmp	r6, #0
 80034e8:	da03      	bge.n	80034f2 <_printf_i+0xd2>
 80034ea:	232d      	movs	r3, #45	; 0x2d
 80034ec:	4276      	negs	r6, r6
 80034ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034f2:	4859      	ldr	r0, [pc, #356]	; (8003658 <_printf_i+0x238>)
 80034f4:	230a      	movs	r3, #10
 80034f6:	e012      	b.n	800351e <_printf_i+0xfe>
 80034f8:	682b      	ldr	r3, [r5, #0]
 80034fa:	6820      	ldr	r0, [r4, #0]
 80034fc:	1d19      	adds	r1, r3, #4
 80034fe:	6029      	str	r1, [r5, #0]
 8003500:	0605      	lsls	r5, r0, #24
 8003502:	d501      	bpl.n	8003508 <_printf_i+0xe8>
 8003504:	681e      	ldr	r6, [r3, #0]
 8003506:	e002      	b.n	800350e <_printf_i+0xee>
 8003508:	0641      	lsls	r1, r0, #25
 800350a:	d5fb      	bpl.n	8003504 <_printf_i+0xe4>
 800350c:	881e      	ldrh	r6, [r3, #0]
 800350e:	2f6f      	cmp	r7, #111	; 0x6f
 8003510:	4851      	ldr	r0, [pc, #324]	; (8003658 <_printf_i+0x238>)
 8003512:	bf0c      	ite	eq
 8003514:	2308      	moveq	r3, #8
 8003516:	230a      	movne	r3, #10
 8003518:	2100      	movs	r1, #0
 800351a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800351e:	6865      	ldr	r5, [r4, #4]
 8003520:	2d00      	cmp	r5, #0
 8003522:	60a5      	str	r5, [r4, #8]
 8003524:	bfa2      	ittt	ge
 8003526:	6821      	ldrge	r1, [r4, #0]
 8003528:	f021 0104 	bicge.w	r1, r1, #4
 800352c:	6021      	strge	r1, [r4, #0]
 800352e:	b90e      	cbnz	r6, 8003534 <_printf_i+0x114>
 8003530:	2d00      	cmp	r5, #0
 8003532:	d04a      	beq.n	80035ca <_printf_i+0x1aa>
 8003534:	4615      	mov	r5, r2
 8003536:	fbb6 f1f3 	udiv	r1, r6, r3
 800353a:	fb03 6711 	mls	r7, r3, r1, r6
 800353e:	5dc7      	ldrb	r7, [r0, r7]
 8003540:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003544:	4637      	mov	r7, r6
 8003546:	460e      	mov	r6, r1
 8003548:	42bb      	cmp	r3, r7
 800354a:	d9f4      	bls.n	8003536 <_printf_i+0x116>
 800354c:	2b08      	cmp	r3, #8
 800354e:	d10b      	bne.n	8003568 <_printf_i+0x148>
 8003550:	6823      	ldr	r3, [r4, #0]
 8003552:	07de      	lsls	r6, r3, #31
 8003554:	d508      	bpl.n	8003568 <_printf_i+0x148>
 8003556:	6923      	ldr	r3, [r4, #16]
 8003558:	6861      	ldr	r1, [r4, #4]
 800355a:	4299      	cmp	r1, r3
 800355c:	bfde      	ittt	le
 800355e:	2330      	movle	r3, #48	; 0x30
 8003560:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003564:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003568:	1b52      	subs	r2, r2, r5
 800356a:	6122      	str	r2, [r4, #16]
 800356c:	464b      	mov	r3, r9
 800356e:	aa03      	add	r2, sp, #12
 8003570:	4621      	mov	r1, r4
 8003572:	4640      	mov	r0, r8
 8003574:	f8cd a000 	str.w	sl, [sp]
 8003578:	f7ff fee0 	bl	800333c <_printf_common>
 800357c:	3001      	adds	r0, #1
 800357e:	d149      	bne.n	8003614 <_printf_i+0x1f4>
 8003580:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003584:	b004      	add	sp, #16
 8003586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800358a:	6823      	ldr	r3, [r4, #0]
 800358c:	f043 0320 	orr.w	r3, r3, #32
 8003590:	6023      	str	r3, [r4, #0]
 8003592:	2778      	movs	r7, #120	; 0x78
 8003594:	4831      	ldr	r0, [pc, #196]	; (800365c <_printf_i+0x23c>)
 8003596:	6823      	ldr	r3, [r4, #0]
 8003598:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800359c:	061f      	lsls	r7, r3, #24
 800359e:	6829      	ldr	r1, [r5, #0]
 80035a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80035a4:	d402      	bmi.n	80035ac <_printf_i+0x18c>
 80035a6:	065f      	lsls	r7, r3, #25
 80035a8:	bf48      	it	mi
 80035aa:	b2b6      	uxthmi	r6, r6
 80035ac:	07df      	lsls	r7, r3, #31
 80035ae:	6029      	str	r1, [r5, #0]
 80035b0:	bf44      	itt	mi
 80035b2:	f043 0320 	orrmi.w	r3, r3, #32
 80035b6:	6023      	strmi	r3, [r4, #0]
 80035b8:	b91e      	cbnz	r6, 80035c2 <_printf_i+0x1a2>
 80035ba:	6823      	ldr	r3, [r4, #0]
 80035bc:	f023 0320 	bic.w	r3, r3, #32
 80035c0:	6023      	str	r3, [r4, #0]
 80035c2:	2310      	movs	r3, #16
 80035c4:	e7a8      	b.n	8003518 <_printf_i+0xf8>
 80035c6:	4824      	ldr	r0, [pc, #144]	; (8003658 <_printf_i+0x238>)
 80035c8:	e7e5      	b.n	8003596 <_printf_i+0x176>
 80035ca:	4615      	mov	r5, r2
 80035cc:	e7be      	b.n	800354c <_printf_i+0x12c>
 80035ce:	682b      	ldr	r3, [r5, #0]
 80035d0:	6826      	ldr	r6, [r4, #0]
 80035d2:	1d18      	adds	r0, r3, #4
 80035d4:	6961      	ldr	r1, [r4, #20]
 80035d6:	6028      	str	r0, [r5, #0]
 80035d8:	0635      	lsls	r5, r6, #24
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	d501      	bpl.n	80035e2 <_printf_i+0x1c2>
 80035de:	6019      	str	r1, [r3, #0]
 80035e0:	e002      	b.n	80035e8 <_printf_i+0x1c8>
 80035e2:	0670      	lsls	r0, r6, #25
 80035e4:	d5fb      	bpl.n	80035de <_printf_i+0x1be>
 80035e6:	8019      	strh	r1, [r3, #0]
 80035e8:	2300      	movs	r3, #0
 80035ea:	4615      	mov	r5, r2
 80035ec:	6123      	str	r3, [r4, #16]
 80035ee:	e7bd      	b.n	800356c <_printf_i+0x14c>
 80035f0:	682b      	ldr	r3, [r5, #0]
 80035f2:	2100      	movs	r1, #0
 80035f4:	1d1a      	adds	r2, r3, #4
 80035f6:	602a      	str	r2, [r5, #0]
 80035f8:	681d      	ldr	r5, [r3, #0]
 80035fa:	6862      	ldr	r2, [r4, #4]
 80035fc:	4628      	mov	r0, r5
 80035fe:	f000 facd 	bl	8003b9c <memchr>
 8003602:	b108      	cbz	r0, 8003608 <_printf_i+0x1e8>
 8003604:	1b40      	subs	r0, r0, r5
 8003606:	6060      	str	r0, [r4, #4]
 8003608:	6863      	ldr	r3, [r4, #4]
 800360a:	6123      	str	r3, [r4, #16]
 800360c:	2300      	movs	r3, #0
 800360e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003612:	e7ab      	b.n	800356c <_printf_i+0x14c>
 8003614:	6923      	ldr	r3, [r4, #16]
 8003616:	462a      	mov	r2, r5
 8003618:	4649      	mov	r1, r9
 800361a:	4640      	mov	r0, r8
 800361c:	47d0      	blx	sl
 800361e:	3001      	adds	r0, #1
 8003620:	d0ae      	beq.n	8003580 <_printf_i+0x160>
 8003622:	6823      	ldr	r3, [r4, #0]
 8003624:	079b      	lsls	r3, r3, #30
 8003626:	d413      	bmi.n	8003650 <_printf_i+0x230>
 8003628:	68e0      	ldr	r0, [r4, #12]
 800362a:	9b03      	ldr	r3, [sp, #12]
 800362c:	4298      	cmp	r0, r3
 800362e:	bfb8      	it	lt
 8003630:	4618      	movlt	r0, r3
 8003632:	e7a7      	b.n	8003584 <_printf_i+0x164>
 8003634:	2301      	movs	r3, #1
 8003636:	4632      	mov	r2, r6
 8003638:	4649      	mov	r1, r9
 800363a:	4640      	mov	r0, r8
 800363c:	47d0      	blx	sl
 800363e:	3001      	adds	r0, #1
 8003640:	d09e      	beq.n	8003580 <_printf_i+0x160>
 8003642:	3501      	adds	r5, #1
 8003644:	68e3      	ldr	r3, [r4, #12]
 8003646:	9903      	ldr	r1, [sp, #12]
 8003648:	1a5b      	subs	r3, r3, r1
 800364a:	42ab      	cmp	r3, r5
 800364c:	dcf2      	bgt.n	8003634 <_printf_i+0x214>
 800364e:	e7eb      	b.n	8003628 <_printf_i+0x208>
 8003650:	2500      	movs	r5, #0
 8003652:	f104 0619 	add.w	r6, r4, #25
 8003656:	e7f5      	b.n	8003644 <_printf_i+0x224>
 8003658:	08003f95 	.word	0x08003f95
 800365c:	08003fa6 	.word	0x08003fa6

08003660 <__sflush_r>:
 8003660:	898a      	ldrh	r2, [r1, #12]
 8003662:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003666:	4605      	mov	r5, r0
 8003668:	0710      	lsls	r0, r2, #28
 800366a:	460c      	mov	r4, r1
 800366c:	d458      	bmi.n	8003720 <__sflush_r+0xc0>
 800366e:	684b      	ldr	r3, [r1, #4]
 8003670:	2b00      	cmp	r3, #0
 8003672:	dc05      	bgt.n	8003680 <__sflush_r+0x20>
 8003674:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003676:	2b00      	cmp	r3, #0
 8003678:	dc02      	bgt.n	8003680 <__sflush_r+0x20>
 800367a:	2000      	movs	r0, #0
 800367c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003680:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003682:	2e00      	cmp	r6, #0
 8003684:	d0f9      	beq.n	800367a <__sflush_r+0x1a>
 8003686:	2300      	movs	r3, #0
 8003688:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800368c:	682f      	ldr	r7, [r5, #0]
 800368e:	6a21      	ldr	r1, [r4, #32]
 8003690:	602b      	str	r3, [r5, #0]
 8003692:	d032      	beq.n	80036fa <__sflush_r+0x9a>
 8003694:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003696:	89a3      	ldrh	r3, [r4, #12]
 8003698:	075a      	lsls	r2, r3, #29
 800369a:	d505      	bpl.n	80036a8 <__sflush_r+0x48>
 800369c:	6863      	ldr	r3, [r4, #4]
 800369e:	1ac0      	subs	r0, r0, r3
 80036a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80036a2:	b10b      	cbz	r3, 80036a8 <__sflush_r+0x48>
 80036a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80036a6:	1ac0      	subs	r0, r0, r3
 80036a8:	2300      	movs	r3, #0
 80036aa:	4602      	mov	r2, r0
 80036ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80036ae:	4628      	mov	r0, r5
 80036b0:	6a21      	ldr	r1, [r4, #32]
 80036b2:	47b0      	blx	r6
 80036b4:	1c43      	adds	r3, r0, #1
 80036b6:	89a3      	ldrh	r3, [r4, #12]
 80036b8:	d106      	bne.n	80036c8 <__sflush_r+0x68>
 80036ba:	6829      	ldr	r1, [r5, #0]
 80036bc:	291d      	cmp	r1, #29
 80036be:	d82b      	bhi.n	8003718 <__sflush_r+0xb8>
 80036c0:	4a28      	ldr	r2, [pc, #160]	; (8003764 <__sflush_r+0x104>)
 80036c2:	410a      	asrs	r2, r1
 80036c4:	07d6      	lsls	r6, r2, #31
 80036c6:	d427      	bmi.n	8003718 <__sflush_r+0xb8>
 80036c8:	2200      	movs	r2, #0
 80036ca:	04d9      	lsls	r1, r3, #19
 80036cc:	6062      	str	r2, [r4, #4]
 80036ce:	6922      	ldr	r2, [r4, #16]
 80036d0:	6022      	str	r2, [r4, #0]
 80036d2:	d504      	bpl.n	80036de <__sflush_r+0x7e>
 80036d4:	1c42      	adds	r2, r0, #1
 80036d6:	d101      	bne.n	80036dc <__sflush_r+0x7c>
 80036d8:	682b      	ldr	r3, [r5, #0]
 80036da:	b903      	cbnz	r3, 80036de <__sflush_r+0x7e>
 80036dc:	6560      	str	r0, [r4, #84]	; 0x54
 80036de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80036e0:	602f      	str	r7, [r5, #0]
 80036e2:	2900      	cmp	r1, #0
 80036e4:	d0c9      	beq.n	800367a <__sflush_r+0x1a>
 80036e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80036ea:	4299      	cmp	r1, r3
 80036ec:	d002      	beq.n	80036f4 <__sflush_r+0x94>
 80036ee:	4628      	mov	r0, r5
 80036f0:	f000 fa62 	bl	8003bb8 <_free_r>
 80036f4:	2000      	movs	r0, #0
 80036f6:	6360      	str	r0, [r4, #52]	; 0x34
 80036f8:	e7c0      	b.n	800367c <__sflush_r+0x1c>
 80036fa:	2301      	movs	r3, #1
 80036fc:	4628      	mov	r0, r5
 80036fe:	47b0      	blx	r6
 8003700:	1c41      	adds	r1, r0, #1
 8003702:	d1c8      	bne.n	8003696 <__sflush_r+0x36>
 8003704:	682b      	ldr	r3, [r5, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d0c5      	beq.n	8003696 <__sflush_r+0x36>
 800370a:	2b1d      	cmp	r3, #29
 800370c:	d001      	beq.n	8003712 <__sflush_r+0xb2>
 800370e:	2b16      	cmp	r3, #22
 8003710:	d101      	bne.n	8003716 <__sflush_r+0xb6>
 8003712:	602f      	str	r7, [r5, #0]
 8003714:	e7b1      	b.n	800367a <__sflush_r+0x1a>
 8003716:	89a3      	ldrh	r3, [r4, #12]
 8003718:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800371c:	81a3      	strh	r3, [r4, #12]
 800371e:	e7ad      	b.n	800367c <__sflush_r+0x1c>
 8003720:	690f      	ldr	r7, [r1, #16]
 8003722:	2f00      	cmp	r7, #0
 8003724:	d0a9      	beq.n	800367a <__sflush_r+0x1a>
 8003726:	0793      	lsls	r3, r2, #30
 8003728:	680e      	ldr	r6, [r1, #0]
 800372a:	600f      	str	r7, [r1, #0]
 800372c:	bf0c      	ite	eq
 800372e:	694b      	ldreq	r3, [r1, #20]
 8003730:	2300      	movne	r3, #0
 8003732:	eba6 0807 	sub.w	r8, r6, r7
 8003736:	608b      	str	r3, [r1, #8]
 8003738:	f1b8 0f00 	cmp.w	r8, #0
 800373c:	dd9d      	ble.n	800367a <__sflush_r+0x1a>
 800373e:	4643      	mov	r3, r8
 8003740:	463a      	mov	r2, r7
 8003742:	6a21      	ldr	r1, [r4, #32]
 8003744:	4628      	mov	r0, r5
 8003746:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003748:	47b0      	blx	r6
 800374a:	2800      	cmp	r0, #0
 800374c:	dc06      	bgt.n	800375c <__sflush_r+0xfc>
 800374e:	89a3      	ldrh	r3, [r4, #12]
 8003750:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003754:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003758:	81a3      	strh	r3, [r4, #12]
 800375a:	e78f      	b.n	800367c <__sflush_r+0x1c>
 800375c:	4407      	add	r7, r0
 800375e:	eba8 0800 	sub.w	r8, r8, r0
 8003762:	e7e9      	b.n	8003738 <__sflush_r+0xd8>
 8003764:	dfbffffe 	.word	0xdfbffffe

08003768 <_fflush_r>:
 8003768:	b538      	push	{r3, r4, r5, lr}
 800376a:	690b      	ldr	r3, [r1, #16]
 800376c:	4605      	mov	r5, r0
 800376e:	460c      	mov	r4, r1
 8003770:	b913      	cbnz	r3, 8003778 <_fflush_r+0x10>
 8003772:	2500      	movs	r5, #0
 8003774:	4628      	mov	r0, r5
 8003776:	bd38      	pop	{r3, r4, r5, pc}
 8003778:	b118      	cbz	r0, 8003782 <_fflush_r+0x1a>
 800377a:	6a03      	ldr	r3, [r0, #32]
 800377c:	b90b      	cbnz	r3, 8003782 <_fflush_r+0x1a>
 800377e:	f7ff fb75 	bl	8002e6c <__sinit>
 8003782:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d0f3      	beq.n	8003772 <_fflush_r+0xa>
 800378a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800378c:	07d0      	lsls	r0, r2, #31
 800378e:	d404      	bmi.n	800379a <_fflush_r+0x32>
 8003790:	0599      	lsls	r1, r3, #22
 8003792:	d402      	bmi.n	800379a <_fflush_r+0x32>
 8003794:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003796:	f7ff fbec 	bl	8002f72 <__retarget_lock_acquire_recursive>
 800379a:	4628      	mov	r0, r5
 800379c:	4621      	mov	r1, r4
 800379e:	f7ff ff5f 	bl	8003660 <__sflush_r>
 80037a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80037a4:	4605      	mov	r5, r0
 80037a6:	07da      	lsls	r2, r3, #31
 80037a8:	d4e4      	bmi.n	8003774 <_fflush_r+0xc>
 80037aa:	89a3      	ldrh	r3, [r4, #12]
 80037ac:	059b      	lsls	r3, r3, #22
 80037ae:	d4e1      	bmi.n	8003774 <_fflush_r+0xc>
 80037b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80037b2:	f7ff fbdf 	bl	8002f74 <__retarget_lock_release_recursive>
 80037b6:	e7dd      	b.n	8003774 <_fflush_r+0xc>

080037b8 <__malloc_lock>:
 80037b8:	4801      	ldr	r0, [pc, #4]	; (80037c0 <__malloc_lock+0x8>)
 80037ba:	f7ff bbda 	b.w	8002f72 <__retarget_lock_acquire_recursive>
 80037be:	bf00      	nop
 80037c0:	20000218 	.word	0x20000218

080037c4 <__malloc_unlock>:
 80037c4:	4801      	ldr	r0, [pc, #4]	; (80037cc <__malloc_unlock+0x8>)
 80037c6:	f7ff bbd5 	b.w	8002f74 <__retarget_lock_release_recursive>
 80037ca:	bf00      	nop
 80037cc:	20000218 	.word	0x20000218

080037d0 <__sread>:
 80037d0:	b510      	push	{r4, lr}
 80037d2:	460c      	mov	r4, r1
 80037d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037d8:	f000 f9ac 	bl	8003b34 <_read_r>
 80037dc:	2800      	cmp	r0, #0
 80037de:	bfab      	itete	ge
 80037e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80037e2:	89a3      	ldrhlt	r3, [r4, #12]
 80037e4:	181b      	addge	r3, r3, r0
 80037e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80037ea:	bfac      	ite	ge
 80037ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80037ee:	81a3      	strhlt	r3, [r4, #12]
 80037f0:	bd10      	pop	{r4, pc}

080037f2 <__swrite>:
 80037f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037f6:	461f      	mov	r7, r3
 80037f8:	898b      	ldrh	r3, [r1, #12]
 80037fa:	4605      	mov	r5, r0
 80037fc:	460c      	mov	r4, r1
 80037fe:	05db      	lsls	r3, r3, #23
 8003800:	4616      	mov	r6, r2
 8003802:	d505      	bpl.n	8003810 <__swrite+0x1e>
 8003804:	2302      	movs	r3, #2
 8003806:	2200      	movs	r2, #0
 8003808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800380c:	f000 f980 	bl	8003b10 <_lseek_r>
 8003810:	89a3      	ldrh	r3, [r4, #12]
 8003812:	4632      	mov	r2, r6
 8003814:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003818:	4628      	mov	r0, r5
 800381a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800381e:	81a3      	strh	r3, [r4, #12]
 8003820:	463b      	mov	r3, r7
 8003822:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003826:	f000 b9a7 	b.w	8003b78 <_write_r>

0800382a <__sseek>:
 800382a:	b510      	push	{r4, lr}
 800382c:	460c      	mov	r4, r1
 800382e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003832:	f000 f96d 	bl	8003b10 <_lseek_r>
 8003836:	1c43      	adds	r3, r0, #1
 8003838:	89a3      	ldrh	r3, [r4, #12]
 800383a:	bf15      	itete	ne
 800383c:	6560      	strne	r0, [r4, #84]	; 0x54
 800383e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003842:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003846:	81a3      	strheq	r3, [r4, #12]
 8003848:	bf18      	it	ne
 800384a:	81a3      	strhne	r3, [r4, #12]
 800384c:	bd10      	pop	{r4, pc}

0800384e <__sclose>:
 800384e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003852:	f000 b92b 	b.w	8003aac <_close_r>

08003856 <__swbuf_r>:
 8003856:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003858:	460e      	mov	r6, r1
 800385a:	4614      	mov	r4, r2
 800385c:	4605      	mov	r5, r0
 800385e:	b118      	cbz	r0, 8003868 <__swbuf_r+0x12>
 8003860:	6a03      	ldr	r3, [r0, #32]
 8003862:	b90b      	cbnz	r3, 8003868 <__swbuf_r+0x12>
 8003864:	f7ff fb02 	bl	8002e6c <__sinit>
 8003868:	69a3      	ldr	r3, [r4, #24]
 800386a:	60a3      	str	r3, [r4, #8]
 800386c:	89a3      	ldrh	r3, [r4, #12]
 800386e:	071a      	lsls	r2, r3, #28
 8003870:	d525      	bpl.n	80038be <__swbuf_r+0x68>
 8003872:	6923      	ldr	r3, [r4, #16]
 8003874:	b31b      	cbz	r3, 80038be <__swbuf_r+0x68>
 8003876:	6823      	ldr	r3, [r4, #0]
 8003878:	b2f6      	uxtb	r6, r6
 800387a:	6922      	ldr	r2, [r4, #16]
 800387c:	4637      	mov	r7, r6
 800387e:	1a98      	subs	r0, r3, r2
 8003880:	6963      	ldr	r3, [r4, #20]
 8003882:	4283      	cmp	r3, r0
 8003884:	dc04      	bgt.n	8003890 <__swbuf_r+0x3a>
 8003886:	4621      	mov	r1, r4
 8003888:	4628      	mov	r0, r5
 800388a:	f7ff ff6d 	bl	8003768 <_fflush_r>
 800388e:	b9e0      	cbnz	r0, 80038ca <__swbuf_r+0x74>
 8003890:	68a3      	ldr	r3, [r4, #8]
 8003892:	3b01      	subs	r3, #1
 8003894:	60a3      	str	r3, [r4, #8]
 8003896:	6823      	ldr	r3, [r4, #0]
 8003898:	1c5a      	adds	r2, r3, #1
 800389a:	6022      	str	r2, [r4, #0]
 800389c:	701e      	strb	r6, [r3, #0]
 800389e:	1c43      	adds	r3, r0, #1
 80038a0:	6962      	ldr	r2, [r4, #20]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d004      	beq.n	80038b0 <__swbuf_r+0x5a>
 80038a6:	89a3      	ldrh	r3, [r4, #12]
 80038a8:	07db      	lsls	r3, r3, #31
 80038aa:	d506      	bpl.n	80038ba <__swbuf_r+0x64>
 80038ac:	2e0a      	cmp	r6, #10
 80038ae:	d104      	bne.n	80038ba <__swbuf_r+0x64>
 80038b0:	4621      	mov	r1, r4
 80038b2:	4628      	mov	r0, r5
 80038b4:	f7ff ff58 	bl	8003768 <_fflush_r>
 80038b8:	b938      	cbnz	r0, 80038ca <__swbuf_r+0x74>
 80038ba:	4638      	mov	r0, r7
 80038bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038be:	4621      	mov	r1, r4
 80038c0:	4628      	mov	r0, r5
 80038c2:	f000 f805 	bl	80038d0 <__swsetup_r>
 80038c6:	2800      	cmp	r0, #0
 80038c8:	d0d5      	beq.n	8003876 <__swbuf_r+0x20>
 80038ca:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80038ce:	e7f4      	b.n	80038ba <__swbuf_r+0x64>

080038d0 <__swsetup_r>:
 80038d0:	b538      	push	{r3, r4, r5, lr}
 80038d2:	4b2a      	ldr	r3, [pc, #168]	; (800397c <__swsetup_r+0xac>)
 80038d4:	4605      	mov	r5, r0
 80038d6:	460c      	mov	r4, r1
 80038d8:	6818      	ldr	r0, [r3, #0]
 80038da:	b118      	cbz	r0, 80038e4 <__swsetup_r+0x14>
 80038dc:	6a03      	ldr	r3, [r0, #32]
 80038de:	b90b      	cbnz	r3, 80038e4 <__swsetup_r+0x14>
 80038e0:	f7ff fac4 	bl	8002e6c <__sinit>
 80038e4:	89a3      	ldrh	r3, [r4, #12]
 80038e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80038ea:	0718      	lsls	r0, r3, #28
 80038ec:	d422      	bmi.n	8003934 <__swsetup_r+0x64>
 80038ee:	06d9      	lsls	r1, r3, #27
 80038f0:	d407      	bmi.n	8003902 <__swsetup_r+0x32>
 80038f2:	2309      	movs	r3, #9
 80038f4:	602b      	str	r3, [r5, #0]
 80038f6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80038fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038fe:	81a3      	strh	r3, [r4, #12]
 8003900:	e034      	b.n	800396c <__swsetup_r+0x9c>
 8003902:	0758      	lsls	r0, r3, #29
 8003904:	d512      	bpl.n	800392c <__swsetup_r+0x5c>
 8003906:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003908:	b141      	cbz	r1, 800391c <__swsetup_r+0x4c>
 800390a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800390e:	4299      	cmp	r1, r3
 8003910:	d002      	beq.n	8003918 <__swsetup_r+0x48>
 8003912:	4628      	mov	r0, r5
 8003914:	f000 f950 	bl	8003bb8 <_free_r>
 8003918:	2300      	movs	r3, #0
 800391a:	6363      	str	r3, [r4, #52]	; 0x34
 800391c:	89a3      	ldrh	r3, [r4, #12]
 800391e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003922:	81a3      	strh	r3, [r4, #12]
 8003924:	2300      	movs	r3, #0
 8003926:	6063      	str	r3, [r4, #4]
 8003928:	6923      	ldr	r3, [r4, #16]
 800392a:	6023      	str	r3, [r4, #0]
 800392c:	89a3      	ldrh	r3, [r4, #12]
 800392e:	f043 0308 	orr.w	r3, r3, #8
 8003932:	81a3      	strh	r3, [r4, #12]
 8003934:	6923      	ldr	r3, [r4, #16]
 8003936:	b94b      	cbnz	r3, 800394c <__swsetup_r+0x7c>
 8003938:	89a3      	ldrh	r3, [r4, #12]
 800393a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800393e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003942:	d003      	beq.n	800394c <__swsetup_r+0x7c>
 8003944:	4621      	mov	r1, r4
 8003946:	4628      	mov	r0, r5
 8003948:	f000 f83f 	bl	80039ca <__smakebuf_r>
 800394c:	89a0      	ldrh	r0, [r4, #12]
 800394e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003952:	f010 0301 	ands.w	r3, r0, #1
 8003956:	d00a      	beq.n	800396e <__swsetup_r+0x9e>
 8003958:	2300      	movs	r3, #0
 800395a:	60a3      	str	r3, [r4, #8]
 800395c:	6963      	ldr	r3, [r4, #20]
 800395e:	425b      	negs	r3, r3
 8003960:	61a3      	str	r3, [r4, #24]
 8003962:	6923      	ldr	r3, [r4, #16]
 8003964:	b943      	cbnz	r3, 8003978 <__swsetup_r+0xa8>
 8003966:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800396a:	d1c4      	bne.n	80038f6 <__swsetup_r+0x26>
 800396c:	bd38      	pop	{r3, r4, r5, pc}
 800396e:	0781      	lsls	r1, r0, #30
 8003970:	bf58      	it	pl
 8003972:	6963      	ldrpl	r3, [r4, #20]
 8003974:	60a3      	str	r3, [r4, #8]
 8003976:	e7f4      	b.n	8003962 <__swsetup_r+0x92>
 8003978:	2000      	movs	r0, #0
 800397a:	e7f7      	b.n	800396c <__swsetup_r+0x9c>
 800397c:	200000b4 	.word	0x200000b4

08003980 <__swhatbuf_r>:
 8003980:	b570      	push	{r4, r5, r6, lr}
 8003982:	460c      	mov	r4, r1
 8003984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003988:	b096      	sub	sp, #88	; 0x58
 800398a:	4615      	mov	r5, r2
 800398c:	2900      	cmp	r1, #0
 800398e:	461e      	mov	r6, r3
 8003990:	da0c      	bge.n	80039ac <__swhatbuf_r+0x2c>
 8003992:	89a3      	ldrh	r3, [r4, #12]
 8003994:	2100      	movs	r1, #0
 8003996:	f013 0f80 	tst.w	r3, #128	; 0x80
 800399a:	bf0c      	ite	eq
 800399c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80039a0:	2340      	movne	r3, #64	; 0x40
 80039a2:	2000      	movs	r0, #0
 80039a4:	6031      	str	r1, [r6, #0]
 80039a6:	602b      	str	r3, [r5, #0]
 80039a8:	b016      	add	sp, #88	; 0x58
 80039aa:	bd70      	pop	{r4, r5, r6, pc}
 80039ac:	466a      	mov	r2, sp
 80039ae:	f000 f88d 	bl	8003acc <_fstat_r>
 80039b2:	2800      	cmp	r0, #0
 80039b4:	dbed      	blt.n	8003992 <__swhatbuf_r+0x12>
 80039b6:	9901      	ldr	r1, [sp, #4]
 80039b8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80039bc:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80039c0:	4259      	negs	r1, r3
 80039c2:	4159      	adcs	r1, r3
 80039c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039c8:	e7eb      	b.n	80039a2 <__swhatbuf_r+0x22>

080039ca <__smakebuf_r>:
 80039ca:	898b      	ldrh	r3, [r1, #12]
 80039cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80039ce:	079d      	lsls	r5, r3, #30
 80039d0:	4606      	mov	r6, r0
 80039d2:	460c      	mov	r4, r1
 80039d4:	d507      	bpl.n	80039e6 <__smakebuf_r+0x1c>
 80039d6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80039da:	6023      	str	r3, [r4, #0]
 80039dc:	6123      	str	r3, [r4, #16]
 80039de:	2301      	movs	r3, #1
 80039e0:	6163      	str	r3, [r4, #20]
 80039e2:	b002      	add	sp, #8
 80039e4:	bd70      	pop	{r4, r5, r6, pc}
 80039e6:	ab01      	add	r3, sp, #4
 80039e8:	466a      	mov	r2, sp
 80039ea:	f7ff ffc9 	bl	8003980 <__swhatbuf_r>
 80039ee:	9900      	ldr	r1, [sp, #0]
 80039f0:	4605      	mov	r5, r0
 80039f2:	4630      	mov	r0, r6
 80039f4:	f7ff fc22 	bl	800323c <_malloc_r>
 80039f8:	b948      	cbnz	r0, 8003a0e <__smakebuf_r+0x44>
 80039fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039fe:	059a      	lsls	r2, r3, #22
 8003a00:	d4ef      	bmi.n	80039e2 <__smakebuf_r+0x18>
 8003a02:	f023 0303 	bic.w	r3, r3, #3
 8003a06:	f043 0302 	orr.w	r3, r3, #2
 8003a0a:	81a3      	strh	r3, [r4, #12]
 8003a0c:	e7e3      	b.n	80039d6 <__smakebuf_r+0xc>
 8003a0e:	89a3      	ldrh	r3, [r4, #12]
 8003a10:	6020      	str	r0, [r4, #0]
 8003a12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a16:	6120      	str	r0, [r4, #16]
 8003a18:	81a3      	strh	r3, [r4, #12]
 8003a1a:	9b00      	ldr	r3, [sp, #0]
 8003a1c:	6163      	str	r3, [r4, #20]
 8003a1e:	9b01      	ldr	r3, [sp, #4]
 8003a20:	b15b      	cbz	r3, 8003a3a <__smakebuf_r+0x70>
 8003a22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a26:	4630      	mov	r0, r6
 8003a28:	f000 f862 	bl	8003af0 <_isatty_r>
 8003a2c:	b128      	cbz	r0, 8003a3a <__smakebuf_r+0x70>
 8003a2e:	89a3      	ldrh	r3, [r4, #12]
 8003a30:	f023 0303 	bic.w	r3, r3, #3
 8003a34:	f043 0301 	orr.w	r3, r3, #1
 8003a38:	81a3      	strh	r3, [r4, #12]
 8003a3a:	89a3      	ldrh	r3, [r4, #12]
 8003a3c:	431d      	orrs	r5, r3
 8003a3e:	81a5      	strh	r5, [r4, #12]
 8003a40:	e7cf      	b.n	80039e2 <__smakebuf_r+0x18>

08003a42 <_putc_r>:
 8003a42:	b570      	push	{r4, r5, r6, lr}
 8003a44:	460d      	mov	r5, r1
 8003a46:	4614      	mov	r4, r2
 8003a48:	4606      	mov	r6, r0
 8003a4a:	b118      	cbz	r0, 8003a54 <_putc_r+0x12>
 8003a4c:	6a03      	ldr	r3, [r0, #32]
 8003a4e:	b90b      	cbnz	r3, 8003a54 <_putc_r+0x12>
 8003a50:	f7ff fa0c 	bl	8002e6c <__sinit>
 8003a54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a56:	07d8      	lsls	r0, r3, #31
 8003a58:	d405      	bmi.n	8003a66 <_putc_r+0x24>
 8003a5a:	89a3      	ldrh	r3, [r4, #12]
 8003a5c:	0599      	lsls	r1, r3, #22
 8003a5e:	d402      	bmi.n	8003a66 <_putc_r+0x24>
 8003a60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a62:	f7ff fa86 	bl	8002f72 <__retarget_lock_acquire_recursive>
 8003a66:	68a3      	ldr	r3, [r4, #8]
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	60a3      	str	r3, [r4, #8]
 8003a6e:	da05      	bge.n	8003a7c <_putc_r+0x3a>
 8003a70:	69a2      	ldr	r2, [r4, #24]
 8003a72:	4293      	cmp	r3, r2
 8003a74:	db12      	blt.n	8003a9c <_putc_r+0x5a>
 8003a76:	b2eb      	uxtb	r3, r5
 8003a78:	2b0a      	cmp	r3, #10
 8003a7a:	d00f      	beq.n	8003a9c <_putc_r+0x5a>
 8003a7c:	6823      	ldr	r3, [r4, #0]
 8003a7e:	1c5a      	adds	r2, r3, #1
 8003a80:	6022      	str	r2, [r4, #0]
 8003a82:	701d      	strb	r5, [r3, #0]
 8003a84:	b2ed      	uxtb	r5, r5
 8003a86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a88:	07da      	lsls	r2, r3, #31
 8003a8a:	d405      	bmi.n	8003a98 <_putc_r+0x56>
 8003a8c:	89a3      	ldrh	r3, [r4, #12]
 8003a8e:	059b      	lsls	r3, r3, #22
 8003a90:	d402      	bmi.n	8003a98 <_putc_r+0x56>
 8003a92:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a94:	f7ff fa6e 	bl	8002f74 <__retarget_lock_release_recursive>
 8003a98:	4628      	mov	r0, r5
 8003a9a:	bd70      	pop	{r4, r5, r6, pc}
 8003a9c:	4629      	mov	r1, r5
 8003a9e:	4622      	mov	r2, r4
 8003aa0:	4630      	mov	r0, r6
 8003aa2:	f7ff fed8 	bl	8003856 <__swbuf_r>
 8003aa6:	4605      	mov	r5, r0
 8003aa8:	e7ed      	b.n	8003a86 <_putc_r+0x44>
	...

08003aac <_close_r>:
 8003aac:	b538      	push	{r3, r4, r5, lr}
 8003aae:	2300      	movs	r3, #0
 8003ab0:	4d05      	ldr	r5, [pc, #20]	; (8003ac8 <_close_r+0x1c>)
 8003ab2:	4604      	mov	r4, r0
 8003ab4:	4608      	mov	r0, r1
 8003ab6:	602b      	str	r3, [r5, #0]
 8003ab8:	f7fd fcd1 	bl	800145e <_close>
 8003abc:	1c43      	adds	r3, r0, #1
 8003abe:	d102      	bne.n	8003ac6 <_close_r+0x1a>
 8003ac0:	682b      	ldr	r3, [r5, #0]
 8003ac2:	b103      	cbz	r3, 8003ac6 <_close_r+0x1a>
 8003ac4:	6023      	str	r3, [r4, #0]
 8003ac6:	bd38      	pop	{r3, r4, r5, pc}
 8003ac8:	20000224 	.word	0x20000224

08003acc <_fstat_r>:
 8003acc:	b538      	push	{r3, r4, r5, lr}
 8003ace:	2300      	movs	r3, #0
 8003ad0:	4d06      	ldr	r5, [pc, #24]	; (8003aec <_fstat_r+0x20>)
 8003ad2:	4604      	mov	r4, r0
 8003ad4:	4608      	mov	r0, r1
 8003ad6:	4611      	mov	r1, r2
 8003ad8:	602b      	str	r3, [r5, #0]
 8003ada:	f7fd fccc 	bl	8001476 <_fstat>
 8003ade:	1c43      	adds	r3, r0, #1
 8003ae0:	d102      	bne.n	8003ae8 <_fstat_r+0x1c>
 8003ae2:	682b      	ldr	r3, [r5, #0]
 8003ae4:	b103      	cbz	r3, 8003ae8 <_fstat_r+0x1c>
 8003ae6:	6023      	str	r3, [r4, #0]
 8003ae8:	bd38      	pop	{r3, r4, r5, pc}
 8003aea:	bf00      	nop
 8003aec:	20000224 	.word	0x20000224

08003af0 <_isatty_r>:
 8003af0:	b538      	push	{r3, r4, r5, lr}
 8003af2:	2300      	movs	r3, #0
 8003af4:	4d05      	ldr	r5, [pc, #20]	; (8003b0c <_isatty_r+0x1c>)
 8003af6:	4604      	mov	r4, r0
 8003af8:	4608      	mov	r0, r1
 8003afa:	602b      	str	r3, [r5, #0]
 8003afc:	f7fd fccb 	bl	8001496 <_isatty>
 8003b00:	1c43      	adds	r3, r0, #1
 8003b02:	d102      	bne.n	8003b0a <_isatty_r+0x1a>
 8003b04:	682b      	ldr	r3, [r5, #0]
 8003b06:	b103      	cbz	r3, 8003b0a <_isatty_r+0x1a>
 8003b08:	6023      	str	r3, [r4, #0]
 8003b0a:	bd38      	pop	{r3, r4, r5, pc}
 8003b0c:	20000224 	.word	0x20000224

08003b10 <_lseek_r>:
 8003b10:	b538      	push	{r3, r4, r5, lr}
 8003b12:	4604      	mov	r4, r0
 8003b14:	4d06      	ldr	r5, [pc, #24]	; (8003b30 <_lseek_r+0x20>)
 8003b16:	4608      	mov	r0, r1
 8003b18:	4611      	mov	r1, r2
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	602a      	str	r2, [r5, #0]
 8003b1e:	461a      	mov	r2, r3
 8003b20:	f7fd fcc4 	bl	80014ac <_lseek>
 8003b24:	1c43      	adds	r3, r0, #1
 8003b26:	d102      	bne.n	8003b2e <_lseek_r+0x1e>
 8003b28:	682b      	ldr	r3, [r5, #0]
 8003b2a:	b103      	cbz	r3, 8003b2e <_lseek_r+0x1e>
 8003b2c:	6023      	str	r3, [r4, #0]
 8003b2e:	bd38      	pop	{r3, r4, r5, pc}
 8003b30:	20000224 	.word	0x20000224

08003b34 <_read_r>:
 8003b34:	b538      	push	{r3, r4, r5, lr}
 8003b36:	4604      	mov	r4, r0
 8003b38:	4d06      	ldr	r5, [pc, #24]	; (8003b54 <_read_r+0x20>)
 8003b3a:	4608      	mov	r0, r1
 8003b3c:	4611      	mov	r1, r2
 8003b3e:	2200      	movs	r2, #0
 8003b40:	602a      	str	r2, [r5, #0]
 8003b42:	461a      	mov	r2, r3
 8003b44:	f7fd fc52 	bl	80013ec <_read>
 8003b48:	1c43      	adds	r3, r0, #1
 8003b4a:	d102      	bne.n	8003b52 <_read_r+0x1e>
 8003b4c:	682b      	ldr	r3, [r5, #0]
 8003b4e:	b103      	cbz	r3, 8003b52 <_read_r+0x1e>
 8003b50:	6023      	str	r3, [r4, #0]
 8003b52:	bd38      	pop	{r3, r4, r5, pc}
 8003b54:	20000224 	.word	0x20000224

08003b58 <_sbrk_r>:
 8003b58:	b538      	push	{r3, r4, r5, lr}
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	4d05      	ldr	r5, [pc, #20]	; (8003b74 <_sbrk_r+0x1c>)
 8003b5e:	4604      	mov	r4, r0
 8003b60:	4608      	mov	r0, r1
 8003b62:	602b      	str	r3, [r5, #0]
 8003b64:	f7fd fcb0 	bl	80014c8 <_sbrk>
 8003b68:	1c43      	adds	r3, r0, #1
 8003b6a:	d102      	bne.n	8003b72 <_sbrk_r+0x1a>
 8003b6c:	682b      	ldr	r3, [r5, #0]
 8003b6e:	b103      	cbz	r3, 8003b72 <_sbrk_r+0x1a>
 8003b70:	6023      	str	r3, [r4, #0]
 8003b72:	bd38      	pop	{r3, r4, r5, pc}
 8003b74:	20000224 	.word	0x20000224

08003b78 <_write_r>:
 8003b78:	b538      	push	{r3, r4, r5, lr}
 8003b7a:	4604      	mov	r4, r0
 8003b7c:	4d06      	ldr	r5, [pc, #24]	; (8003b98 <_write_r+0x20>)
 8003b7e:	4608      	mov	r0, r1
 8003b80:	4611      	mov	r1, r2
 8003b82:	2200      	movs	r2, #0
 8003b84:	602a      	str	r2, [r5, #0]
 8003b86:	461a      	mov	r2, r3
 8003b88:	f7fd fc4d 	bl	8001426 <_write>
 8003b8c:	1c43      	adds	r3, r0, #1
 8003b8e:	d102      	bne.n	8003b96 <_write_r+0x1e>
 8003b90:	682b      	ldr	r3, [r5, #0]
 8003b92:	b103      	cbz	r3, 8003b96 <_write_r+0x1e>
 8003b94:	6023      	str	r3, [r4, #0]
 8003b96:	bd38      	pop	{r3, r4, r5, pc}
 8003b98:	20000224 	.word	0x20000224

08003b9c <memchr>:
 8003b9c:	b2c9      	uxtb	r1, r1
 8003b9e:	4402      	add	r2, r0
 8003ba0:	b510      	push	{r4, lr}
 8003ba2:	4290      	cmp	r0, r2
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	d101      	bne.n	8003bac <memchr+0x10>
 8003ba8:	2300      	movs	r3, #0
 8003baa:	e003      	b.n	8003bb4 <memchr+0x18>
 8003bac:	781c      	ldrb	r4, [r3, #0]
 8003bae:	3001      	adds	r0, #1
 8003bb0:	428c      	cmp	r4, r1
 8003bb2:	d1f6      	bne.n	8003ba2 <memchr+0x6>
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	bd10      	pop	{r4, pc}

08003bb8 <_free_r>:
 8003bb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003bba:	2900      	cmp	r1, #0
 8003bbc:	d043      	beq.n	8003c46 <_free_r+0x8e>
 8003bbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bc2:	1f0c      	subs	r4, r1, #4
 8003bc4:	9001      	str	r0, [sp, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	bfb8      	it	lt
 8003bca:	18e4      	addlt	r4, r4, r3
 8003bcc:	f7ff fdf4 	bl	80037b8 <__malloc_lock>
 8003bd0:	4a1e      	ldr	r2, [pc, #120]	; (8003c4c <_free_r+0x94>)
 8003bd2:	9801      	ldr	r0, [sp, #4]
 8003bd4:	6813      	ldr	r3, [r2, #0]
 8003bd6:	b933      	cbnz	r3, 8003be6 <_free_r+0x2e>
 8003bd8:	6063      	str	r3, [r4, #4]
 8003bda:	6014      	str	r4, [r2, #0]
 8003bdc:	b003      	add	sp, #12
 8003bde:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003be2:	f7ff bdef 	b.w	80037c4 <__malloc_unlock>
 8003be6:	42a3      	cmp	r3, r4
 8003be8:	d908      	bls.n	8003bfc <_free_r+0x44>
 8003bea:	6825      	ldr	r5, [r4, #0]
 8003bec:	1961      	adds	r1, r4, r5
 8003bee:	428b      	cmp	r3, r1
 8003bf0:	bf01      	itttt	eq
 8003bf2:	6819      	ldreq	r1, [r3, #0]
 8003bf4:	685b      	ldreq	r3, [r3, #4]
 8003bf6:	1949      	addeq	r1, r1, r5
 8003bf8:	6021      	streq	r1, [r4, #0]
 8003bfa:	e7ed      	b.n	8003bd8 <_free_r+0x20>
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	b10b      	cbz	r3, 8003c06 <_free_r+0x4e>
 8003c02:	42a3      	cmp	r3, r4
 8003c04:	d9fa      	bls.n	8003bfc <_free_r+0x44>
 8003c06:	6811      	ldr	r1, [r2, #0]
 8003c08:	1855      	adds	r5, r2, r1
 8003c0a:	42a5      	cmp	r5, r4
 8003c0c:	d10b      	bne.n	8003c26 <_free_r+0x6e>
 8003c0e:	6824      	ldr	r4, [r4, #0]
 8003c10:	4421      	add	r1, r4
 8003c12:	1854      	adds	r4, r2, r1
 8003c14:	6011      	str	r1, [r2, #0]
 8003c16:	42a3      	cmp	r3, r4
 8003c18:	d1e0      	bne.n	8003bdc <_free_r+0x24>
 8003c1a:	681c      	ldr	r4, [r3, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	440c      	add	r4, r1
 8003c20:	6053      	str	r3, [r2, #4]
 8003c22:	6014      	str	r4, [r2, #0]
 8003c24:	e7da      	b.n	8003bdc <_free_r+0x24>
 8003c26:	d902      	bls.n	8003c2e <_free_r+0x76>
 8003c28:	230c      	movs	r3, #12
 8003c2a:	6003      	str	r3, [r0, #0]
 8003c2c:	e7d6      	b.n	8003bdc <_free_r+0x24>
 8003c2e:	6825      	ldr	r5, [r4, #0]
 8003c30:	1961      	adds	r1, r4, r5
 8003c32:	428b      	cmp	r3, r1
 8003c34:	bf02      	ittt	eq
 8003c36:	6819      	ldreq	r1, [r3, #0]
 8003c38:	685b      	ldreq	r3, [r3, #4]
 8003c3a:	1949      	addeq	r1, r1, r5
 8003c3c:	6063      	str	r3, [r4, #4]
 8003c3e:	bf08      	it	eq
 8003c40:	6021      	streq	r1, [r4, #0]
 8003c42:	6054      	str	r4, [r2, #4]
 8003c44:	e7ca      	b.n	8003bdc <_free_r+0x24>
 8003c46:	b003      	add	sp, #12
 8003c48:	bd30      	pop	{r4, r5, pc}
 8003c4a:	bf00      	nop
 8003c4c:	2000021c 	.word	0x2000021c

08003c50 <_init>:
 8003c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c52:	bf00      	nop
 8003c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c56:	bc08      	pop	{r3}
 8003c58:	469e      	mov	lr, r3
 8003c5a:	4770      	bx	lr

08003c5c <_fini>:
 8003c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c5e:	bf00      	nop
 8003c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c62:	bc08      	pop	{r3}
 8003c64:	469e      	mov	lr, r3
 8003c66:	4770      	bx	lr
